
rover_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08002d70  08002d70  00012d70  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003054  08003054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003060  08003060  00013060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  08003064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000016c  200001e4  08003248  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000350  08003248  00020350  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000de02  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fc3  00000000  00000000  0002e016  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006345  00000000  00000000  0002ffd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000988  00000000  00000000  00036320  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bd8  00000000  00000000  00036ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000044ea  00000000  00000000  00037880  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003d4a  00000000  00000000  0003bd6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003fab4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002170  00000000  00000000  0003fb30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002d58 	.word	0x08002d58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08002d58 	.word	0x08002d58

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_InitTick+0x3c>)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_InitTick+0x40>)
{
 80005a6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a8:	7818      	ldrb	r0, [r3, #0]
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80005b2:	6810      	ldr	r0, [r2, #0]
 80005b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005b8:	f000 f896 	bl	80006e8 <HAL_SYSTICK_Config>
 80005bc:	4604      	mov	r4, r0
 80005be:	b958      	cbnz	r0, 80005d8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c0:	2d0f      	cmp	r5, #15
 80005c2:	d809      	bhi.n	80005d8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	4602      	mov	r2, r0
 80005c6:	4629      	mov	r1, r5
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005cc:	f000 f84a 	bl	8000664 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <HAL_InitTick+0x44>)
 80005d2:	4620      	mov	r0, r4
 80005d4:	601d      	str	r5, [r3, #0]
 80005d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005d8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005da:	bd38      	pop	{r3, r4, r5, pc}
 80005dc:	20000010 	.word	0x20000010
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_Init>:
{
 80005e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_Init+0x30>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f81b 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ffc8 	bl	80005a0 <HAL_InitTick>
  HAL_MspInit();
 8000610:	f001 fd26 	bl	8002060 <HAL_MspInit>
}
 8000614:	2000      	movs	r0, #0
 8000616:	bd08      	pop	{r3, pc}
 8000618:	40023c00 	.word	0x40023c00

0800061c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x10>)
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_IncTick+0x14>)
 8000620:	6811      	ldr	r1, [r2, #0]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	440b      	add	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000248 	.word	0x20000248
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_GetTick+0x8>)
 8000636:	6818      	ldr	r0, [r3, #0]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000248 	.word	0x20000248

08000640 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000642:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000644:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000648:	041b      	lsls	r3, r3, #16
 800064a:	0c1b      	lsrs	r3, r3, #16
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000650:	0200      	lsls	r0, r0, #8
 8000652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000656:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800065a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800065c:	60d3      	str	r3, [r2, #12]
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000666:	b530      	push	{r4, r5, lr}
 8000668:	68dc      	ldr	r4, [r3, #12]
 800066a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000672:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000674:	2b04      	cmp	r3, #4
 8000676:	bf28      	it	cs
 8000678:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 0501 	mov.w	r5, #1
 8000680:	fa05 f303 	lsl.w	r3, r5, r3
 8000684:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000688:	bf8c      	ite	hi
 800068a:	3c03      	subhi	r4, #3
 800068c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068e:	4019      	ands	r1, r3
 8000690:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000692:	fa05 f404 	lsl.w	r4, r5, r4
 8000696:	3c01      	subs	r4, #1
 8000698:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800069a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	ea42 0201 	orr.w	r2, r2, r1
 80006a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	bfad      	iteet	ge
 80006a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	f000 000f 	andlt.w	r0, r0, #15
 80006ae:	4b06      	ldrlt	r3, [pc, #24]	; (80006c8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	bfb5      	itete	lt
 80006b6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	e000ed14 	.word	0xe000ed14

080006cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006cc:	2800      	cmp	r0, #0
 80006ce:	db08      	blt.n	80006e2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d0:	0942      	lsrs	r2, r0, #5
 80006d2:	2301      	movs	r3, #1
 80006d4:	f000 001f 	and.w	r0, r0, #31
 80006d8:	fa03 f000 	lsl.w	r0, r3, r0
 80006dc:	4b01      	ldr	r3, [pc, #4]	; (80006e4 <HAL_NVIC_EnableIRQ+0x18>)
 80006de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e8:	3801      	subs	r0, #1
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d20a      	bcs.n	8000706 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	4a07      	ldr	r2, [pc, #28]	; (8000710 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	21f0      	movs	r1, #240	; 0xf0
 80006f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000700:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000706:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000e010 	.word	0xe000e010
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000718:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800071a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071c:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80008bc <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000720:	4a64      	ldr	r2, [pc, #400]	; (80008b4 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000722:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000724:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000728:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800072a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800072c:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000730:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000734:	42b7      	cmp	r7, r6
 8000736:	f040 80ad 	bne.w	8000894 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800073a:	684c      	ldr	r4, [r1, #4]
 800073c:	f024 0a10 	bic.w	sl, r4, #16
 8000740:	f1ba 0f02 	cmp.w	sl, #2
 8000744:	d116      	bne.n	8000774 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8000746:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800074a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800074e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000752:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000756:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800075a:	f04f 0e0f 	mov.w	lr, #15
 800075e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000762:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000766:	690d      	ldr	r5, [r1, #16]
 8000768:	fa05 f50b 	lsl.w	r5, r5, fp
 800076c:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000770:	f8cc 5020 	str.w	r5, [ip, #32]
 8000774:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000778:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800077a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800077e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000782:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000784:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000788:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800078c:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000790:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000794:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000798:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800079c:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 800079e:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007a2:	d815      	bhi.n	80007d0 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80007a4:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007a8:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007ac:	68cd      	ldr	r5, [r1, #12]
 80007ae:	fa05 fa0c 	lsl.w	sl, r5, ip
 80007b2:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80007b6:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80007ba:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007be:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007c2:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80007c6:	fa0e fe03 	lsl.w	lr, lr, r3
 80007ca:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80007ce:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007d0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007d2:	9d00      	ldr	r5, [sp, #0]
 80007d4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007d6:	688f      	ldr	r7, [r1, #8]
 80007d8:	fa07 f70c 	lsl.w	r7, r7, ip
 80007dc:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80007de:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007e0:	00e5      	lsls	r5, r4, #3
 80007e2:	d557      	bpl.n	8000894 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e4:	f04f 0b00 	mov.w	fp, #0
 80007e8:	f8cd b00c 	str.w	fp, [sp, #12]
 80007ec:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007f0:	4d31      	ldr	r5, [pc, #196]	; (80008b8 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007f6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80007fa:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80007fe:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000802:	9703      	str	r7, [sp, #12]
 8000804:	9f03      	ldr	r7, [sp, #12]
 8000806:	f023 0703 	bic.w	r7, r3, #3
 800080a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800080e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000812:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000816:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800081a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800081e:	f04f 0e0f 	mov.w	lr, #15
 8000822:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000826:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000828:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800082c:	d039      	beq.n	80008a2 <HAL_GPIO_Init+0x18e>
 800082e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000832:	42a8      	cmp	r0, r5
 8000834:	d037      	beq.n	80008a6 <HAL_GPIO_Init+0x192>
 8000836:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800083a:	42a8      	cmp	r0, r5
 800083c:	d035      	beq.n	80008aa <HAL_GPIO_Init+0x196>
 800083e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000842:	42a8      	cmp	r0, r5
 8000844:	d033      	beq.n	80008ae <HAL_GPIO_Init+0x19a>
 8000846:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800084a:	42a8      	cmp	r0, r5
 800084c:	bf14      	ite	ne
 800084e:	2507      	movne	r5, #7
 8000850:	2504      	moveq	r5, #4
 8000852:	fa05 f50c 	lsl.w	r5, r5, ip
 8000856:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800085a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800085c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800085e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000860:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000864:	bf0c      	ite	eq
 8000866:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000868:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800086a:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800086c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800086e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000872:	bf0c      	ite	eq
 8000874:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000876:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000878:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800087a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800087c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000880:	bf0c      	ite	eq
 8000882:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000884:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000886:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000888:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800088a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800088c:	bf54      	ite	pl
 800088e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000890:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000892:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000894:	3301      	adds	r3, #1
 8000896:	2b10      	cmp	r3, #16
 8000898:	f47f af47 	bne.w	800072a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800089c:	b005      	add	sp, #20
 800089e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008a2:	465d      	mov	r5, fp
 80008a4:	e7d5      	b.n	8000852 <HAL_GPIO_Init+0x13e>
 80008a6:	2501      	movs	r5, #1
 80008a8:	e7d3      	b.n	8000852 <HAL_GPIO_Init+0x13e>
 80008aa:	2502      	movs	r5, #2
 80008ac:	e7d1      	b.n	8000852 <HAL_GPIO_Init+0x13e>
 80008ae:	2503      	movs	r5, #3
 80008b0:	e7cf      	b.n	8000852 <HAL_GPIO_Init+0x13e>
 80008b2:	bf00      	nop
 80008b4:	40013c00 	.word	0x40013c00
 80008b8:	40020000 	.word	0x40020000
 80008bc:	40023800 	.word	0x40023800

080008c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008c0:	b10a      	cbz	r2, 80008c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008c2:	6181      	str	r1, [r0, #24]
 80008c4:	4770      	bx	lr
 80008c6:	0409      	lsls	r1, r1, #16
 80008c8:	e7fb      	b.n	80008c2 <HAL_GPIO_WritePin+0x2>

080008ca <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80008ca:	6943      	ldr	r3, [r0, #20]
 80008cc:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80008d0:	bf08      	it	eq
 80008d2:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80008d4:	6181      	str	r1, [r0, #24]
 80008d6:	4770      	bx	lr

080008d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008dc:	4604      	mov	r4, r0
 80008de:	b918      	cbnz	r0, 80008e8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80008e0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80008e2:	b002      	add	sp, #8
 80008e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008e8:	6803      	ldr	r3, [r0, #0]
 80008ea:	07dd      	lsls	r5, r3, #31
 80008ec:	d410      	bmi.n	8000910 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008ee:	6823      	ldr	r3, [r4, #0]
 80008f0:	0798      	lsls	r0, r3, #30
 80008f2:	d458      	bmi.n	80009a6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008f4:	6823      	ldr	r3, [r4, #0]
 80008f6:	071a      	lsls	r2, r3, #28
 80008f8:	f100 809a 	bmi.w	8000a30 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008fc:	6823      	ldr	r3, [r4, #0]
 80008fe:	075b      	lsls	r3, r3, #29
 8000900:	f100 80b8 	bmi.w	8000a74 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000904:	69a2      	ldr	r2, [r4, #24]
 8000906:	2a00      	cmp	r2, #0
 8000908:	f040 8119 	bne.w	8000b3e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800090c:	2000      	movs	r0, #0
 800090e:	e7e8      	b.n	80008e2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000910:	4ba6      	ldr	r3, [pc, #664]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 8000912:	689a      	ldr	r2, [r3, #8]
 8000914:	f002 020c 	and.w	r2, r2, #12
 8000918:	2a04      	cmp	r2, #4
 800091a:	d007      	beq.n	800092c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800091c:	689a      	ldr	r2, [r3, #8]
 800091e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000922:	2a08      	cmp	r2, #8
 8000924:	d10a      	bne.n	800093c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	0259      	lsls	r1, r3, #9
 800092a:	d507      	bpl.n	800093c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800092c:	4b9f      	ldr	r3, [pc, #636]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	039a      	lsls	r2, r3, #14
 8000932:	d5dc      	bpl.n	80008ee <HAL_RCC_OscConfig+0x16>
 8000934:	6863      	ldr	r3, [r4, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1d9      	bne.n	80008ee <HAL_RCC_OscConfig+0x16>
 800093a:	e7d1      	b.n	80008e0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800093c:	6863      	ldr	r3, [r4, #4]
 800093e:	4d9b      	ldr	r5, [pc, #620]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 8000940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000944:	d111      	bne.n	800096a <HAL_RCC_OscConfig+0x92>
 8000946:	682b      	ldr	r3, [r5, #0]
 8000948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800094c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800094e:	f7ff fe71 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000952:	4d96      	ldr	r5, [pc, #600]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000954:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000956:	682b      	ldr	r3, [r5, #0]
 8000958:	039b      	lsls	r3, r3, #14
 800095a:	d4c8      	bmi.n	80008ee <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800095c:	f7ff fe6a 	bl	8000634 <HAL_GetTick>
 8000960:	1b80      	subs	r0, r0, r6
 8000962:	2864      	cmp	r0, #100	; 0x64
 8000964:	d9f7      	bls.n	8000956 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000966:	2003      	movs	r0, #3
 8000968:	e7bb      	b.n	80008e2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800096a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800096e:	d104      	bne.n	800097a <HAL_RCC_OscConfig+0xa2>
 8000970:	682b      	ldr	r3, [r5, #0]
 8000972:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000976:	602b      	str	r3, [r5, #0]
 8000978:	e7e5      	b.n	8000946 <HAL_RCC_OscConfig+0x6e>
 800097a:	682a      	ldr	r2, [r5, #0]
 800097c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000980:	602a      	str	r2, [r5, #0]
 8000982:	682a      	ldr	r2, [r5, #0]
 8000984:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000988:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800098a:	2b00      	cmp	r3, #0
 800098c:	d1df      	bne.n	800094e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800098e:	f7ff fe51 	bl	8000634 <HAL_GetTick>
 8000992:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000994:	682b      	ldr	r3, [r5, #0]
 8000996:	039f      	lsls	r7, r3, #14
 8000998:	d5a9      	bpl.n	80008ee <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800099a:	f7ff fe4b 	bl	8000634 <HAL_GetTick>
 800099e:	1b80      	subs	r0, r0, r6
 80009a0:	2864      	cmp	r0, #100	; 0x64
 80009a2:	d9f7      	bls.n	8000994 <HAL_RCC_OscConfig+0xbc>
 80009a4:	e7df      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009a6:	4b81      	ldr	r3, [pc, #516]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 80009a8:	689a      	ldr	r2, [r3, #8]
 80009aa:	f012 0f0c 	tst.w	r2, #12
 80009ae:	d007      	beq.n	80009c0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009b6:	2a08      	cmp	r2, #8
 80009b8:	d111      	bne.n	80009de <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	025e      	lsls	r6, r3, #9
 80009be:	d40e      	bmi.n	80009de <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009c0:	4b7a      	ldr	r3, [pc, #488]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	0795      	lsls	r5, r2, #30
 80009c6:	d502      	bpl.n	80009ce <HAL_RCC_OscConfig+0xf6>
 80009c8:	68e2      	ldr	r2, [r4, #12]
 80009ca:	2a01      	cmp	r2, #1
 80009cc:	d188      	bne.n	80008e0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	6921      	ldr	r1, [r4, #16]
 80009d2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009d6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009da:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009dc:	e78a      	b.n	80008f4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009de:	68e2      	ldr	r2, [r4, #12]
 80009e0:	4b73      	ldr	r3, [pc, #460]	; (8000bb0 <HAL_RCC_OscConfig+0x2d8>)
 80009e2:	b1b2      	cbz	r2, 8000a12 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80009e4:	2201      	movs	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009e8:	f7ff fe24 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ec:	4d6f      	ldr	r5, [pc, #444]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f0:	682b      	ldr	r3, [r5, #0]
 80009f2:	0798      	lsls	r0, r3, #30
 80009f4:	d507      	bpl.n	8000a06 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009f6:	682b      	ldr	r3, [r5, #0]
 80009f8:	6922      	ldr	r2, [r4, #16]
 80009fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009fe:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a02:	602b      	str	r3, [r5, #0]
 8000a04:	e776      	b.n	80008f4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a06:	f7ff fe15 	bl	8000634 <HAL_GetTick>
 8000a0a:	1b80      	subs	r0, r0, r6
 8000a0c:	2802      	cmp	r0, #2
 8000a0e:	d9ef      	bls.n	80009f0 <HAL_RCC_OscConfig+0x118>
 8000a10:	e7a9      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a14:	f7ff fe0e 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a18:	4d64      	ldr	r5, [pc, #400]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a1a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a1c:	682b      	ldr	r3, [r5, #0]
 8000a1e:	0799      	lsls	r1, r3, #30
 8000a20:	f57f af68 	bpl.w	80008f4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a24:	f7ff fe06 	bl	8000634 <HAL_GetTick>
 8000a28:	1b80      	subs	r0, r0, r6
 8000a2a:	2802      	cmp	r0, #2
 8000a2c:	d9f6      	bls.n	8000a1c <HAL_RCC_OscConfig+0x144>
 8000a2e:	e79a      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a30:	6962      	ldr	r2, [r4, #20]
 8000a32:	4b60      	ldr	r3, [pc, #384]	; (8000bb4 <HAL_RCC_OscConfig+0x2dc>)
 8000a34:	b17a      	cbz	r2, 8000a56 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a36:	2201      	movs	r2, #1
 8000a38:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a3a:	f7ff fdfb 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a3e:	4d5b      	ldr	r5, [pc, #364]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a40:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a42:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a44:	079f      	lsls	r7, r3, #30
 8000a46:	f53f af59 	bmi.w	80008fc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a4a:	f7ff fdf3 	bl	8000634 <HAL_GetTick>
 8000a4e:	1b80      	subs	r0, r0, r6
 8000a50:	2802      	cmp	r0, #2
 8000a52:	d9f6      	bls.n	8000a42 <HAL_RCC_OscConfig+0x16a>
 8000a54:	e787      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a56:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a58:	f7ff fdec 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a5c:	4d53      	ldr	r5, [pc, #332]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a5e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a60:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a62:	0798      	lsls	r0, r3, #30
 8000a64:	f57f af4a 	bpl.w	80008fc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a68:	f7ff fde4 	bl	8000634 <HAL_GetTick>
 8000a6c:	1b80      	subs	r0, r0, r6
 8000a6e:	2802      	cmp	r0, #2
 8000a70:	d9f6      	bls.n	8000a60 <HAL_RCC_OscConfig+0x188>
 8000a72:	e778      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a74:	4b4d      	ldr	r3, [pc, #308]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 8000a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a78:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a7c:	d128      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	9201      	str	r2, [sp, #4]
 8000a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a86:	641a      	str	r2, [r3, #64]	; 0x40
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a92:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a94:	4d48      	ldr	r5, [pc, #288]	; (8000bb8 <HAL_RCC_OscConfig+0x2e0>)
 8000a96:	682b      	ldr	r3, [r5, #0]
 8000a98:	05d9      	lsls	r1, r3, #23
 8000a9a:	d51b      	bpl.n	8000ad4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a9c:	68a3      	ldr	r3, [r4, #8]
 8000a9e:	4d43      	ldr	r5, [pc, #268]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d127      	bne.n	8000af4 <HAL_RCC_OscConfig+0x21c>
 8000aa4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000aac:	f7ff fdc2 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ab0:	4d3e      	ldr	r5, [pc, #248]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000ab2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ab4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ab8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aba:	079b      	lsls	r3, r3, #30
 8000abc:	d539      	bpl.n	8000b32 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	f43f af20 	beq.w	8000904 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ac4:	4a39      	ldr	r2, [pc, #228]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 8000ac6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	e719      	b.n	8000904 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000ad0:	2600      	movs	r6, #0
 8000ad2:	e7df      	b.n	8000a94 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ad4:	682b      	ldr	r3, [r5, #0]
 8000ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ada:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000adc:	f7ff fdaa 	bl	8000634 <HAL_GetTick>
 8000ae0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ae2:	682b      	ldr	r3, [r5, #0]
 8000ae4:	05da      	lsls	r2, r3, #23
 8000ae6:	d4d9      	bmi.n	8000a9c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ae8:	f7ff fda4 	bl	8000634 <HAL_GetTick>
 8000aec:	1bc0      	subs	r0, r0, r7
 8000aee:	2802      	cmp	r0, #2
 8000af0:	d9f7      	bls.n	8000ae2 <HAL_RCC_OscConfig+0x20a>
 8000af2:	e738      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000af4:	2b05      	cmp	r3, #5
 8000af6:	d104      	bne.n	8000b02 <HAL_RCC_OscConfig+0x22a>
 8000af8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000afa:	f043 0304 	orr.w	r3, r3, #4
 8000afe:	672b      	str	r3, [r5, #112]	; 0x70
 8000b00:	e7d0      	b.n	8000aa4 <HAL_RCC_OscConfig+0x1cc>
 8000b02:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b04:	f022 0201 	bic.w	r2, r2, #1
 8000b08:	672a      	str	r2, [r5, #112]	; 0x70
 8000b0a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b0c:	f022 0204 	bic.w	r2, r2, #4
 8000b10:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d1ca      	bne.n	8000aac <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b16:	f7ff fd8d 	bl	8000634 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b1a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b1e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b20:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b22:	0798      	lsls	r0, r3, #30
 8000b24:	d5cb      	bpl.n	8000abe <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b26:	f7ff fd85 	bl	8000634 <HAL_GetTick>
 8000b2a:	1bc0      	subs	r0, r0, r7
 8000b2c:	4540      	cmp	r0, r8
 8000b2e:	d9f7      	bls.n	8000b20 <HAL_RCC_OscConfig+0x248>
 8000b30:	e719      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b32:	f7ff fd7f 	bl	8000634 <HAL_GetTick>
 8000b36:	1bc0      	subs	r0, r0, r7
 8000b38:	4540      	cmp	r0, r8
 8000b3a:	d9bd      	bls.n	8000ab8 <HAL_RCC_OscConfig+0x1e0>
 8000b3c:	e713      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b3e:	4d1b      	ldr	r5, [pc, #108]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
 8000b40:	68ab      	ldr	r3, [r5, #8]
 8000b42:	f003 030c 	and.w	r3, r3, #12
 8000b46:	2b08      	cmp	r3, #8
 8000b48:	f43f aeca 	beq.w	80008e0 <HAL_RCC_OscConfig+0x8>
 8000b4c:	4e1b      	ldr	r6, [pc, #108]	; (8000bbc <HAL_RCC_OscConfig+0x2e4>)
 8000b4e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b50:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b52:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b54:	d134      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b56:	f7ff fd6d 	bl	8000634 <HAL_GetTick>
 8000b5a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b5c:	682b      	ldr	r3, [r5, #0]
 8000b5e:	0199      	lsls	r1, r3, #6
 8000b60:	d41e      	bmi.n	8000ba0 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b62:	6a22      	ldr	r2, [r4, #32]
 8000b64:	69e3      	ldr	r3, [r4, #28]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b6a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b70:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b74:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b76:	4c0d      	ldr	r4, [pc, #52]	; (8000bac <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b78:	0852      	lsrs	r2, r2, #1
 8000b7a:	3a01      	subs	r2, #1
 8000b7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b80:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b82:	2301      	movs	r3, #1
 8000b84:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b86:	f7ff fd55 	bl	8000634 <HAL_GetTick>
 8000b8a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b8c:	6823      	ldr	r3, [r4, #0]
 8000b8e:	019a      	lsls	r2, r3, #6
 8000b90:	f53f aebc 	bmi.w	800090c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b94:	f7ff fd4e 	bl	8000634 <HAL_GetTick>
 8000b98:	1b40      	subs	r0, r0, r5
 8000b9a:	2802      	cmp	r0, #2
 8000b9c:	d9f6      	bls.n	8000b8c <HAL_RCC_OscConfig+0x2b4>
 8000b9e:	e6e2      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ba0:	f7ff fd48 	bl	8000634 <HAL_GetTick>
 8000ba4:	1bc0      	subs	r0, r0, r7
 8000ba6:	2802      	cmp	r0, #2
 8000ba8:	d9d8      	bls.n	8000b5c <HAL_RCC_OscConfig+0x284>
 8000baa:	e6dc      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	42470000 	.word	0x42470000
 8000bb4:	42470e80 	.word	0x42470e80
 8000bb8:	40007000 	.word	0x40007000
 8000bbc:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000bc0:	f7ff fd38 	bl	8000634 <HAL_GetTick>
 8000bc4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bc6:	682b      	ldr	r3, [r5, #0]
 8000bc8:	019b      	lsls	r3, r3, #6
 8000bca:	f57f ae9f 	bpl.w	800090c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bce:	f7ff fd31 	bl	8000634 <HAL_GetTick>
 8000bd2:	1b00      	subs	r0, r0, r4
 8000bd4:	2802      	cmp	r0, #2
 8000bd6:	d9f6      	bls.n	8000bc6 <HAL_RCC_OscConfig+0x2ee>
 8000bd8:	e6c5      	b.n	8000966 <HAL_RCC_OscConfig+0x8e>
 8000bda:	bf00      	nop

08000bdc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bdc:	4913      	ldr	r1, [pc, #76]	; (8000c2c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000bde:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000be0:	688b      	ldr	r3, [r1, #8]
 8000be2:	f003 030c 	and.w	r3, r3, #12
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	d003      	beq.n	8000bf2 <HAL_RCC_GetSysClockFreq+0x16>
 8000bea:	2b08      	cmp	r3, #8
 8000bec:	d003      	beq.n	8000bf6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bee:	4810      	ldr	r0, [pc, #64]	; (8000c30 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000bf0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000bf2:	4810      	ldr	r0, [pc, #64]	; (8000c34 <HAL_RCC_GetSysClockFreq+0x58>)
 8000bf4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bf6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bf8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bfa:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bfc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c00:	bf14      	ite	ne
 8000c02:	480c      	ldrne	r0, [pc, #48]	; (8000c34 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c04:	480a      	ldreq	r0, [pc, #40]	; (8000c30 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c06:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c0a:	bf18      	it	ne
 8000c0c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c0e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c12:	fba1 0100 	umull	r0, r1, r1, r0
 8000c16:	f7ff fb3b 	bl	8000290 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <HAL_RCC_GetSysClockFreq+0x50>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c22:	3301      	adds	r3, #1
 8000c24:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c26:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c2a:	bd08      	pop	{r3, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	00f42400 	.word	0x00f42400
 8000c34:	007a1200 	.word	0x007a1200

08000c38 <HAL_RCC_ClockConfig>:
{
 8000c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c3c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c3e:	4604      	mov	r4, r0
 8000c40:	b910      	cbnz	r0, 8000c48 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c42:	2001      	movs	r0, #1
 8000c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c48:	4b44      	ldr	r3, [pc, #272]	; (8000d5c <HAL_RCC_ClockConfig+0x124>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	f002 020f 	and.w	r2, r2, #15
 8000c50:	428a      	cmp	r2, r1
 8000c52:	d328      	bcc.n	8000ca6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c54:	6821      	ldr	r1, [r4, #0]
 8000c56:	078f      	lsls	r7, r1, #30
 8000c58:	d42d      	bmi.n	8000cb6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c5a:	07c8      	lsls	r0, r1, #31
 8000c5c:	d440      	bmi.n	8000ce0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c5e:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <HAL_RCC_ClockConfig+0x124>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	f002 020f 	and.w	r2, r2, #15
 8000c66:	4295      	cmp	r5, r2
 8000c68:	d366      	bcc.n	8000d38 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c6a:	6822      	ldr	r2, [r4, #0]
 8000c6c:	0751      	lsls	r1, r2, #29
 8000c6e:	d46c      	bmi.n	8000d4a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c70:	0713      	lsls	r3, r2, #28
 8000c72:	d507      	bpl.n	8000c84 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c74:	4a3a      	ldr	r2, [pc, #232]	; (8000d60 <HAL_RCC_ClockConfig+0x128>)
 8000c76:	6921      	ldr	r1, [r4, #16]
 8000c78:	6893      	ldr	r3, [r2, #8]
 8000c7a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c7e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c82:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c84:	f7ff ffaa 	bl	8000bdc <HAL_RCC_GetSysClockFreq>
 8000c88:	4b35      	ldr	r3, [pc, #212]	; (8000d60 <HAL_RCC_ClockConfig+0x128>)
 8000c8a:	4a36      	ldr	r2, [pc, #216]	; (8000d64 <HAL_RCC_ClockConfig+0x12c>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c92:	5cd3      	ldrb	r3, [r2, r3]
 8000c94:	40d8      	lsrs	r0, r3
 8000c96:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <HAL_RCC_ClockConfig+0x130>)
 8000c98:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff fc80 	bl	80005a0 <HAL_InitTick>
  return HAL_OK;
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ca6:	b2ca      	uxtb	r2, r1
 8000ca8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 030f 	and.w	r3, r3, #15
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d1c6      	bne.n	8000c42 <HAL_RCC_ClockConfig+0xa>
 8000cb4:	e7ce      	b.n	8000c54 <HAL_RCC_ClockConfig+0x1c>
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	; (8000d60 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cb8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	689a      	ldrne	r2, [r3, #8]
 8000cc0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000cc4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cc6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cc8:	bf42      	ittt	mi
 8000cca:	689a      	ldrmi	r2, [r3, #8]
 8000ccc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000cd0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cd2:	689a      	ldr	r2, [r3, #8]
 8000cd4:	68a0      	ldr	r0, [r4, #8]
 8000cd6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000cda:	4302      	orrs	r2, r0
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	e7bc      	b.n	8000c5a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ce0:	6862      	ldr	r2, [r4, #4]
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <HAL_RCC_ClockConfig+0x128>)
 8000ce4:	2a01      	cmp	r2, #1
 8000ce6:	d11d      	bne.n	8000d24 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cee:	d0a8      	beq.n	8000c42 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cf0:	4e1b      	ldr	r6, [pc, #108]	; (8000d60 <HAL_RCC_ClockConfig+0x128>)
 8000cf2:	68b3      	ldr	r3, [r6, #8]
 8000cf4:	f023 0303 	bic.w	r3, r3, #3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000cfc:	f7ff fc9a 	bl	8000634 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d00:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d04:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d06:	68b3      	ldr	r3, [r6, #8]
 8000d08:	6862      	ldr	r2, [r4, #4]
 8000d0a:	f003 030c 	and.w	r3, r3, #12
 8000d0e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d12:	d0a4      	beq.n	8000c5e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d14:	f7ff fc8e 	bl	8000634 <HAL_GetTick>
 8000d18:	1bc0      	subs	r0, r0, r7
 8000d1a:	4540      	cmp	r0, r8
 8000d1c:	d9f3      	bls.n	8000d06 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d1e:	2003      	movs	r0, #3
}
 8000d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d24:	1e91      	subs	r1, r2, #2
 8000d26:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d28:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d2a:	d802      	bhi.n	8000d32 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d2c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d30:	e7dd      	b.n	8000cee <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d32:	f013 0f02 	tst.w	r3, #2
 8000d36:	e7da      	b.n	8000cee <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d38:	b2ea      	uxtb	r2, r5
 8000d3a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	429d      	cmp	r5, r3
 8000d44:	f47f af7d 	bne.w	8000c42 <HAL_RCC_ClockConfig+0xa>
 8000d48:	e78f      	b.n	8000c6a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d4a:	4905      	ldr	r1, [pc, #20]	; (8000d60 <HAL_RCC_ClockConfig+0x128>)
 8000d4c:	68e0      	ldr	r0, [r4, #12]
 8000d4e:	688b      	ldr	r3, [r1, #8]
 8000d50:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d54:	4303      	orrs	r3, r0
 8000d56:	608b      	str	r3, [r1, #8]
 8000d58:	e78a      	b.n	8000c70 <HAL_RCC_ClockConfig+0x38>
 8000d5a:	bf00      	nop
 8000d5c:	40023c00 	.word	0x40023c00
 8000d60:	40023800 	.word	0x40023800
 8000d64:	08002efe 	.word	0x08002efe
 8000d68:	20000010 	.word	0x20000010

08000d6c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d76:	5cd3      	ldrb	r3, [r2, r3]
 8000d78:	4a03      	ldr	r2, [pc, #12]	; (8000d88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d7a:	6810      	ldr	r0, [r2, #0]
}
 8000d7c:	40d8      	lsrs	r0, r3
 8000d7e:	4770      	bx	lr
 8000d80:	40023800 	.word	0x40023800
 8000d84:	08002f0e 	.word	0x08002f0e
 8000d88:	20000010 	.word	0x20000010

08000d8c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d96:	5cd3      	ldrb	r3, [r2, r3]
 8000d98:	4a03      	ldr	r2, [pc, #12]	; (8000da8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d9a:	6810      	ldr	r0, [r2, #0]
}
 8000d9c:	40d8      	lsrs	r0, r3
 8000d9e:	4770      	bx	lr
 8000da0:	40023800 	.word	0x40023800
 8000da4:	08002f0e 	.word	0x08002f0e
 8000da8:	20000010 	.word	0x20000010

08000dac <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000dac:	6a03      	ldr	r3, [r0, #32]
 8000dae:	f023 0301 	bic.w	r3, r3, #1
 8000db2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000db4:	6a03      	ldr	r3, [r0, #32]
{
 8000db6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000db8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000dba:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000dbc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000dbe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000dc2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000dc4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000dc6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000dca:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000dcc:	4d0a      	ldr	r5, [pc, #40]	; (8000df8 <TIM_OC1_SetConfig+0x4c>)
 8000dce:	42a8      	cmp	r0, r5
 8000dd0:	d10b      	bne.n	8000dea <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000dd2:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000dd4:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000dd6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000dda:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8000ddc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000dde:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000de2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000de4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000de8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000dea:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000dec:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000dee:	684a      	ldr	r2, [r1, #4]
 8000df0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000df2:	6203      	str	r3, [r0, #32]
 8000df4:	bd70      	pop	{r4, r5, r6, pc}
 8000df6:	bf00      	nop
 8000df8:	40010000 	.word	0x40010000

08000dfc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000dfc:	6a03      	ldr	r3, [r0, #32]
 8000dfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e02:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e04:	6a03      	ldr	r3, [r0, #32]
{
 8000e06:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000e08:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000e0a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e0c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000e0e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000e12:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e14:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000e16:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e1a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000e1e:	4d0b      	ldr	r5, [pc, #44]	; (8000e4c <TIM_OC3_SetConfig+0x50>)
 8000e20:	42a8      	cmp	r0, r5
 8000e22:	d10d      	bne.n	8000e40 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000e24:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e26:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000e28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000e2c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000e30:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000e32:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e36:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000e38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e3c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e40:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000e42:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000e44:	684a      	ldr	r2, [r1, #4]
 8000e46:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e48:	6203      	str	r3, [r0, #32]
 8000e4a:	bd70      	pop	{r4, r5, r6, pc}
 8000e4c:	40010000 	.word	0x40010000

08000e50 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000e50:	6a03      	ldr	r3, [r0, #32]
 8000e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e56:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e58:	6a03      	ldr	r3, [r0, #32]
{
 8000e5a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000e5c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000e5e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e60:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000e62:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000e66:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e6a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000e6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000e70:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000e74:	4d06      	ldr	r5, [pc, #24]	; (8000e90 <TIM_OC4_SetConfig+0x40>)
 8000e76:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000e78:	bf02      	ittt	eq
 8000e7a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000e7c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000e80:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e84:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000e86:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000e88:	684a      	ldr	r2, [r1, #4]
 8000e8a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e8c:	6203      	str	r3, [r0, #32]
 8000e8e:	bd30      	pop	{r4, r5, pc}
 8000e90:	40010000 	.word	0x40010000

08000e94 <HAL_TIM_PeriodElapsedCallback>:
 8000e94:	4770      	bx	lr

08000e96 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000e96:	4770      	bx	lr

08000e98 <HAL_TIM_TriggerCallback>:
 8000e98:	4770      	bx	lr

08000e9a <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e9a:	6803      	ldr	r3, [r0, #0]
 8000e9c:	691a      	ldr	r2, [r3, #16]
 8000e9e:	0791      	lsls	r1, r2, #30
{
 8000ea0:	b510      	push	{r4, lr}
 8000ea2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ea4:	d50e      	bpl.n	8000ec4 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	0792      	lsls	r2, r2, #30
 8000eaa:	d50b      	bpl.n	8000ec4 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000eac:	f06f 0202 	mvn.w	r2, #2
 8000eb0:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000eb2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000eb4:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000eb6:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000eb8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000eba:	d077      	beq.n	8000fac <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000ebc:	f000 fdc4 	bl	8001a48 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000ec4:	6823      	ldr	r3, [r4, #0]
 8000ec6:	691a      	ldr	r2, [r3, #16]
 8000ec8:	0750      	lsls	r0, r2, #29
 8000eca:	d510      	bpl.n	8000eee <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	0751      	lsls	r1, r2, #29
 8000ed0:	d50d      	bpl.n	8000eee <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000ed2:	f06f 0204 	mvn.w	r2, #4
 8000ed6:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000ed8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000eda:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000edc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000ee0:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8000ee2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000ee4:	d068      	beq.n	8000fb8 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000ee6:	f000 fdaf 	bl	8001a48 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000eea:	2300      	movs	r3, #0
 8000eec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000eee:	6823      	ldr	r3, [r4, #0]
 8000ef0:	691a      	ldr	r2, [r3, #16]
 8000ef2:	0712      	lsls	r2, r2, #28
 8000ef4:	d50f      	bpl.n	8000f16 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	0710      	lsls	r0, r2, #28
 8000efa:	d50c      	bpl.n	8000f16 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000efc:	f06f 0208 	mvn.w	r2, #8
 8000f00:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f02:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000f04:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f06:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000f08:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8000f0a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f0c:	d05a      	beq.n	8000fc4 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f0e:	f000 fd9b 	bl	8001a48 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f12:	2300      	movs	r3, #0
 8000f14:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	691a      	ldr	r2, [r3, #16]
 8000f1a:	06d2      	lsls	r2, r2, #27
 8000f1c:	d510      	bpl.n	8000f40 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	06d0      	lsls	r0, r2, #27
 8000f22:	d50d      	bpl.n	8000f40 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000f24:	f06f 0210 	mvn.w	r2, #16
 8000f28:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f2a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000f2c:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f2e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000f32:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8000f34:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f36:	d04b      	beq.n	8000fd0 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f38:	f000 fd86 	bl	8001a48 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000f40:	6823      	ldr	r3, [r4, #0]
 8000f42:	691a      	ldr	r2, [r3, #16]
 8000f44:	07d1      	lsls	r1, r2, #31
 8000f46:	d508      	bpl.n	8000f5a <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	07d2      	lsls	r2, r2, #31
 8000f4c:	d505      	bpl.n	8000f5a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000f4e:	f06f 0201 	mvn.w	r2, #1
 8000f52:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000f54:	4620      	mov	r0, r4
 8000f56:	f7ff ff9d 	bl	8000e94 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	691a      	ldr	r2, [r3, #16]
 8000f5e:	0610      	lsls	r0, r2, #24
 8000f60:	d508      	bpl.n	8000f74 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	0611      	lsls	r1, r2, #24
 8000f66:	d505      	bpl.n	8000f74 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000f68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000f6c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000f6e:	4620      	mov	r0, r4
 8000f70:	f000 fafe 	bl	8001570 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	0652      	lsls	r2, r2, #25
 8000f7a:	d508      	bpl.n	8000f8e <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	0650      	lsls	r0, r2, #25
 8000f80:	d505      	bpl.n	8000f8e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000f82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000f86:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000f88:	4620      	mov	r0, r4
 8000f8a:	f7ff ff85 	bl	8000e98 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	691a      	ldr	r2, [r3, #16]
 8000f92:	0691      	lsls	r1, r2, #26
 8000f94:	d522      	bpl.n	8000fdc <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	0692      	lsls	r2, r2, #26
 8000f9a:	d51f      	bpl.n	8000fdc <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000f9c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8000fa0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000fa2:	611a      	str	r2, [r3, #16]
}
 8000fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8000fa8:	f000 bae1 	b.w	800156e <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fac:	f000 ffea 	bl	8001f84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	f7ff ff70 	bl	8000e96 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fb6:	e783      	b.n	8000ec0 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fb8:	f000 ffe4 	bl	8001f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	f7ff ff6a 	bl	8000e96 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fc2:	e792      	b.n	8000eea <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fc4:	f000 ffde 	bl	8001f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fc8:	4620      	mov	r0, r4
 8000fca:	f7ff ff64 	bl	8000e96 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fce:	e7a0      	b.n	8000f12 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fd0:	f000 ffd8 	bl	8001f84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	f7ff ff5e 	bl	8000e96 <HAL_TIM_PWM_PulseFinishedCallback>
 8000fda:	e7af      	b.n	8000f3c <HAL_TIM_IRQHandler+0xa2>
 8000fdc:	bd10      	pop	{r4, pc}
	...

08000fe0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000fe0:	4a24      	ldr	r2, [pc, #144]	; (8001074 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8000fe2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000fe4:	4290      	cmp	r0, r2
 8000fe6:	d00e      	beq.n	8001006 <TIM_Base_SetConfig+0x26>
 8000fe8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000fec:	d00b      	beq.n	8001006 <TIM_Base_SetConfig+0x26>
 8000fee:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000ff2:	4290      	cmp	r0, r2
 8000ff4:	d007      	beq.n	8001006 <TIM_Base_SetConfig+0x26>
 8000ff6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ffa:	4290      	cmp	r0, r2
 8000ffc:	d003      	beq.n	8001006 <TIM_Base_SetConfig+0x26>
 8000ffe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001002:	4290      	cmp	r0, r2
 8001004:	d115      	bne.n	8001032 <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 8001006:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800100c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800100e:	4a19      	ldr	r2, [pc, #100]	; (8001074 <TIM_Base_SetConfig+0x94>)
 8001010:	4290      	cmp	r0, r2
 8001012:	d019      	beq.n	8001048 <TIM_Base_SetConfig+0x68>
 8001014:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001018:	d016      	beq.n	8001048 <TIM_Base_SetConfig+0x68>
 800101a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800101e:	4290      	cmp	r0, r2
 8001020:	d012      	beq.n	8001048 <TIM_Base_SetConfig+0x68>
 8001022:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001026:	4290      	cmp	r0, r2
 8001028:	d00e      	beq.n	8001048 <TIM_Base_SetConfig+0x68>
 800102a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800102e:	4290      	cmp	r0, r2
 8001030:	d00a      	beq.n	8001048 <TIM_Base_SetConfig+0x68>
 8001032:	4a11      	ldr	r2, [pc, #68]	; (8001078 <TIM_Base_SetConfig+0x98>)
 8001034:	4290      	cmp	r0, r2
 8001036:	d007      	beq.n	8001048 <TIM_Base_SetConfig+0x68>
 8001038:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800103c:	4290      	cmp	r0, r2
 800103e:	d003      	beq.n	8001048 <TIM_Base_SetConfig+0x68>
 8001040:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001044:	4290      	cmp	r0, r2
 8001046:	d103      	bne.n	8001050 <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001048:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800104a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800104e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001050:	694a      	ldr	r2, [r1, #20]
 8001052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001056:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001058:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800105a:	688b      	ldr	r3, [r1, #8]
 800105c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800105e:	680b      	ldr	r3, [r1, #0]
 8001060:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <TIM_Base_SetConfig+0x94>)
 8001064:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001066:	bf04      	itt	eq
 8001068:	690b      	ldreq	r3, [r1, #16]
 800106a:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800106c:	2301      	movs	r3, #1
 800106e:	6143      	str	r3, [r0, #20]
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40010000 	.word	0x40010000
 8001078:	40014000 	.word	0x40014000

0800107c <HAL_TIM_OC_Init>:
{
 800107c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800107e:	4604      	mov	r4, r0
 8001080:	b1a0      	cbz	r0, 80010ac <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001082:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001086:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800108a:	b91b      	cbnz	r3, 8001094 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800108c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8001090:	f001 f858 	bl	8002144 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001094:	2302      	movs	r3, #2
 8001096:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800109a:	6820      	ldr	r0, [r4, #0]
 800109c:	1d21      	adds	r1, r4, #4
 800109e:	f7ff ff9f 	bl	8000fe0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80010a2:	2301      	movs	r3, #1
 80010a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80010a8:	2000      	movs	r0, #0
 80010aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80010ac:	2001      	movs	r0, #1
}
 80010ae:	bd10      	pop	{r4, pc}

080010b0 <HAL_TIM_PWM_Init>:
{
 80010b0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80010b2:	4604      	mov	r4, r0
 80010b4:	b1a0      	cbz	r0, 80010e0 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80010b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80010ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010be:	b91b      	cbnz	r3, 80010c8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80010c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80010c4:	f001 f826 	bl	8002114 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80010c8:	2302      	movs	r3, #2
 80010ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010ce:	6820      	ldr	r0, [r4, #0]
 80010d0:	1d21      	adds	r1, r4, #4
 80010d2:	f7ff ff85 	bl	8000fe0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80010dc:	2000      	movs	r0, #0
 80010de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80010e0:	2001      	movs	r0, #1
}
 80010e2:	bd10      	pop	{r4, pc}

080010e4 <HAL_TIM_IC_Init>:
{
 80010e4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80010e6:	4604      	mov	r4, r0
 80010e8:	b1a0      	cbz	r0, 8001114 <HAL_TIM_IC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80010ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80010ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010f2:	b91b      	cbnz	r3, 80010fc <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80010f4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 80010f8:	f000 ffd2 	bl	80020a0 <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80010fc:	2302      	movs	r3, #2
 80010fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001102:	6820      	ldr	r0, [r4, #0]
 8001104:	1d21      	adds	r1, r4, #4
 8001106:	f7ff ff6b 	bl	8000fe0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800110a:	2301      	movs	r3, #1
 800110c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001110:	2000      	movs	r0, #0
 8001112:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001114:	2001      	movs	r0, #1
}
 8001116:	bd10      	pop	{r4, pc}

08001118 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001118:	6a03      	ldr	r3, [r0, #32]
 800111a:	f023 0310 	bic.w	r3, r3, #16
 800111e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001120:	6a03      	ldr	r3, [r0, #32]
{
 8001122:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001124:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001126:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001128:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800112a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800112e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001132:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001134:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001138:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800113c:	4d0b      	ldr	r5, [pc, #44]	; (800116c <TIM_OC2_SetConfig+0x54>)
 800113e:	42a8      	cmp	r0, r5
 8001140:	d10d      	bne.n	800115e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001142:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001144:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001146:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800114a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800114e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001150:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001154:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800115a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800115e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001160:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001162:	684a      	ldr	r2, [r1, #4]
 8001164:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001166:	6203      	str	r3, [r0, #32]
 8001168:	bd70      	pop	{r4, r5, r6, pc}
 800116a:	bf00      	nop
 800116c:	40010000 	.word	0x40010000

08001170 <HAL_TIM_OC_ConfigChannel>:
{
 8001170:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001172:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001176:	2b01      	cmp	r3, #1
{
 8001178:	4604      	mov	r4, r0
 800117a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800117e:	d018      	beq.n	80011b2 <HAL_TIM_OC_ConfigChannel+0x42>
 8001180:	2301      	movs	r3, #1
 8001182:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001186:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 800118a:	461d      	mov	r5, r3
  switch (Channel)
 800118c:	2a0c      	cmp	r2, #12
 800118e:	d80b      	bhi.n	80011a8 <HAL_TIM_OC_ConfigChannel+0x38>
 8001190:	e8df f002 	tbb	[pc, r2]
 8001194:	0a0a0a07 	.word	0x0a0a0a07
 8001198:	0a0a0a10 	.word	0x0a0a0a10
 800119c:	0a0a0a14 	.word	0x0a0a0a14
 80011a0:	18          	.byte	0x18
 80011a1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80011a2:	6820      	ldr	r0, [r4, #0]
 80011a4:	f7ff fe02 	bl	8000dac <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 80011a8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80011aa:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80011ae:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80011b2:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80011b4:	6820      	ldr	r0, [r4, #0]
 80011b6:	f7ff ffaf 	bl	8001118 <TIM_OC2_SetConfig>
      break;
 80011ba:	e7f5      	b.n	80011a8 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80011bc:	6820      	ldr	r0, [r4, #0]
 80011be:	f7ff fe1d 	bl	8000dfc <TIM_OC3_SetConfig>
      break;
 80011c2:	e7f1      	b.n	80011a8 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80011c4:	6820      	ldr	r0, [r4, #0]
 80011c6:	f7ff fe43 	bl	8000e50 <TIM_OC4_SetConfig>
      break;
 80011ca:	e7ed      	b.n	80011a8 <HAL_TIM_OC_ConfigChannel+0x38>

080011cc <HAL_TIM_PWM_ConfigChannel>:
{
 80011cc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80011ce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80011d2:	2b01      	cmp	r3, #1
{
 80011d4:	4604      	mov	r4, r0
 80011d6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80011da:	d025      	beq.n	8001228 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80011dc:	2301      	movs	r3, #1
 80011de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80011e2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80011e6:	2a0c      	cmp	r2, #12
 80011e8:	d818      	bhi.n	800121c <HAL_TIM_PWM_ConfigChannel+0x50>
 80011ea:	e8df f002 	tbb	[pc, r2]
 80011ee:	1707      	.short	0x1707
 80011f0:	171e1717 	.word	0x171e1717
 80011f4:	172f1717 	.word	0x172f1717
 80011f8:	1717      	.short	0x1717
 80011fa:	40          	.byte	0x40
 80011fb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80011fc:	6820      	ldr	r0, [r4, #0]
 80011fe:	f7ff fdd5 	bl	8000dac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001202:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001204:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001206:	699a      	ldr	r2, [r3, #24]
 8001208:	f042 0208 	orr.w	r2, r2, #8
 800120c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800120e:	699a      	ldr	r2, [r3, #24]
 8001210:	f022 0204 	bic.w	r2, r2, #4
 8001214:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001216:	699a      	ldr	r2, [r3, #24]
 8001218:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800121a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800121c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800121e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001220:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001224:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001228:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800122a:	6820      	ldr	r0, [r4, #0]
 800122c:	f7ff ff74 	bl	8001118 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001230:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001232:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001234:	699a      	ldr	r2, [r3, #24]
 8001236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800123a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800123c:	699a      	ldr	r2, [r3, #24]
 800123e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001244:	699a      	ldr	r2, [r3, #24]
 8001246:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800124a:	e7e6      	b.n	800121a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800124c:	6820      	ldr	r0, [r4, #0]
 800124e:	f7ff fdd5 	bl	8000dfc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001252:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001254:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001256:	69da      	ldr	r2, [r3, #28]
 8001258:	f042 0208 	orr.w	r2, r2, #8
 800125c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800125e:	69da      	ldr	r2, [r3, #28]
 8001260:	f022 0204 	bic.w	r2, r2, #4
 8001264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001266:	69da      	ldr	r2, [r3, #28]
 8001268:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800126a:	61da      	str	r2, [r3, #28]
      break;
 800126c:	e7d6      	b.n	800121c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800126e:	6820      	ldr	r0, [r4, #0]
 8001270:	f7ff fdee 	bl	8000e50 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001274:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001276:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001278:	69da      	ldr	r2, [r3, #28]
 800127a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800127e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001280:	69da      	ldr	r2, [r3, #28]
 8001282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001286:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001288:	69da      	ldr	r2, [r3, #28]
 800128a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800128e:	e7ec      	b.n	800126a <HAL_TIM_PWM_ConfigChannel+0x9e>

08001290 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001290:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001292:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001294:	4e16      	ldr	r6, [pc, #88]	; (80012f0 <TIM_TI1_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001296:	f024 0401 	bic.w	r4, r4, #1
 800129a:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800129c:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 800129e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80012a0:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80012a2:	d012      	beq.n	80012ca <TIM_TI1_SetConfig+0x3a>
 80012a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012a8:	d00f      	beq.n	80012ca <TIM_TI1_SetConfig+0x3a>
 80012aa:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80012ae:	42b0      	cmp	r0, r6
 80012b0:	d00b      	beq.n	80012ca <TIM_TI1_SetConfig+0x3a>
 80012b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80012b6:	42b0      	cmp	r0, r6
 80012b8:	d007      	beq.n	80012ca <TIM_TI1_SetConfig+0x3a>
 80012ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80012be:	42b0      	cmp	r0, r6
 80012c0:	d003      	beq.n	80012ca <TIM_TI1_SetConfig+0x3a>
 80012c2:	f506 369a 	add.w	r6, r6, #78848	; 0x13400
 80012c6:	42b0      	cmp	r0, r6
 80012c8:	d10f      	bne.n	80012ea <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80012ca:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80012ce:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80012d0:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80012d2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80012d6:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80012d8:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80012dc:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80012e0:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80012e2:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80012e4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80012e6:	6201      	str	r1, [r0, #32]
}
 80012e8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80012ea:	f044 0201 	orr.w	r2, r4, #1
 80012ee:	e7ef      	b.n	80012d0 <TIM_TI1_SetConfig+0x40>
 80012f0:	40010000 	.word	0x40010000

080012f4 <HAL_TIM_IC_ConfigChannel>:
{
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80012f6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80012fa:	2b01      	cmp	r3, #1
{
 80012fc:	4604      	mov	r4, r0
 80012fe:	460d      	mov	r5, r1
 8001300:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001304:	d019      	beq.n	800133a <HAL_TIM_IC_ConfigChannel+0x46>
 8001306:	2301      	movs	r3, #1
 8001308:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800130c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 8001310:	b9a2      	cbnz	r2, 800133c <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8001312:	68cb      	ldr	r3, [r1, #12]
 8001314:	6820      	ldr	r0, [r4, #0]
 8001316:	c906      	ldmia	r1, {r1, r2}
 8001318:	f7ff ffba 	bl	8001290 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800131c:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800131e:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001320:	699a      	ldr	r2, [r3, #24]
 8001322:	f022 020c 	bic.w	r2, r2, #12
 8001326:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001328:	699a      	ldr	r2, [r3, #24]
 800132a:	430a      	orrs	r2, r1
 800132c:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800132e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001330:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001332:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001336:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800133a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 800133c:	2a04      	cmp	r2, #4
 800133e:	688e      	ldr	r6, [r1, #8]
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	68e8      	ldr	r0, [r5, #12]
 8001344:	c982      	ldmia	r1, {r1, r7}
 8001346:	d11f      	bne.n	8001388 <HAL_TIM_IC_ConfigChannel+0x94>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001348:	6a1a      	ldr	r2, [r3, #32]
 800134a:	f022 0210 	bic.w	r2, r2, #16
 800134e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001350:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001352:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001354:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001358:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800135c:	0300      	lsls	r0, r0, #12
 800135e:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001360:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001364:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001366:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001368:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800136c:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001370:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001374:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001376:	699a      	ldr	r2, [r3, #24]
 8001378:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800137c:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800137e:	699a      	ldr	r2, [r3, #24]
 8001380:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001384:	619e      	str	r6, [r3, #24]
 8001386:	e7d2      	b.n	800132e <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8001388:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800138a:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 800138c:	d11c      	bne.n	80013c8 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800138e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001392:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001394:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001396:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001398:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 800139c:	433a      	orrs	r2, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800139e:	0100      	lsls	r0, r0, #4
 80013a0:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80013a2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80013a6:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80013a8:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80013aa:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80013ae:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80013b2:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80013b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80013b6:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80013b8:	69da      	ldr	r2, [r3, #28]
 80013ba:	f022 020c 	bic.w	r2, r2, #12
 80013be:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80013c0:	69da      	ldr	r2, [r3, #28]
 80013c2:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80013c4:	61de      	str	r6, [r3, #28]
 80013c6:	e7b2      	b.n	800132e <HAL_TIM_IC_ConfigChannel+0x3a>
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80013c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80013ce:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 80013d0:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80013d2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80013d6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80013da:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80013dc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80013e0:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80013e2:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80013e4:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80013e6:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80013ea:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80013ee:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80013f0:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 80013f2:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80013f4:	69da      	ldr	r2, [r3, #28]
 80013f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80013fa:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80013fc:	69da      	ldr	r2, [r3, #28]
 80013fe:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001402:	e7df      	b.n	80013c4 <HAL_TIM_IC_ConfigChannel+0xd0>

08001404 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001404:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001406:	f001 011f 	and.w	r1, r1, #31
{
 800140a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800140c:	2401      	movs	r4, #1
 800140e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001410:	ea23 0304 	bic.w	r3, r3, r4
 8001414:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001416:	6a03      	ldr	r3, [r0, #32]
 8001418:	408a      	lsls	r2, r1
 800141a:	431a      	orrs	r2, r3
 800141c:	6202      	str	r2, [r0, #32]
 800141e:	bd10      	pop	{r4, pc}

08001420 <HAL_TIM_PWM_Start>:
{
 8001420:	b510      	push	{r4, lr}
 8001422:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001424:	2201      	movs	r2, #1
 8001426:	6800      	ldr	r0, [r0, #0]
 8001428:	f7ff ffec 	bl	8001404 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800142c:	6823      	ldr	r3, [r4, #0]
 800142e:	4a09      	ldr	r2, [pc, #36]	; (8001454 <HAL_TIM_PWM_Start+0x34>)
 8001430:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001432:	bf02      	ittt	eq
 8001434:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001436:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 800143a:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001442:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001444:	bf1e      	ittt	ne
 8001446:	681a      	ldrne	r2, [r3, #0]
 8001448:	f042 0201 	orrne.w	r2, r2, #1
 800144c:	601a      	strne	r2, [r3, #0]
}
 800144e:	2000      	movs	r0, #0
 8001450:	bd10      	pop	{r4, pc}
 8001452:	bf00      	nop
 8001454:	40010000 	.word	0x40010000

08001458 <HAL_TIM_PWM_Start_IT>:
{
 8001458:	b510      	push	{r4, lr}
 800145a:	4604      	mov	r4, r0
  switch (Channel)
 800145c:	290c      	cmp	r1, #12
 800145e:	d80d      	bhi.n	800147c <HAL_TIM_PWM_Start_IT+0x24>
 8001460:	e8df f001 	tbb	[pc, r1]
 8001464:	0c0c0c07 	.word	0x0c0c0c07
 8001468:	0c0c0c23 	.word	0x0c0c0c23
 800146c:	0c0c0c28 	.word	0x0c0c0c28
 8001470:	2d          	.byte	0x2d
 8001471:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001472:	6802      	ldr	r2, [r0, #0]
 8001474:	68d3      	ldr	r3, [r2, #12]
 8001476:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800147a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800147c:	6820      	ldr	r0, [r4, #0]
 800147e:	2201      	movs	r2, #1
 8001480:	f7ff ffc0 	bl	8001404 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001484:	6823      	ldr	r3, [r4, #0]
 8001486:	4a10      	ldr	r2, [pc, #64]	; (80014c8 <HAL_TIM_PWM_Start_IT+0x70>)
 8001488:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800148a:	bf02      	ittt	eq
 800148c:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800148e:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001492:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800149a:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 800149c:	bf1e      	ittt	ne
 800149e:	681a      	ldrne	r2, [r3, #0]
 80014a0:	f042 0201 	orrne.w	r2, r2, #1
 80014a4:	601a      	strne	r2, [r3, #0]
}
 80014a6:	2000      	movs	r0, #0
 80014a8:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80014aa:	6802      	ldr	r2, [r0, #0]
 80014ac:	68d3      	ldr	r3, [r2, #12]
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	e7e2      	b.n	800147a <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80014b4:	6802      	ldr	r2, [r0, #0]
 80014b6:	68d3      	ldr	r3, [r2, #12]
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	e7dd      	b.n	800147a <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80014be:	6802      	ldr	r2, [r0, #0]
 80014c0:	68d3      	ldr	r3, [r2, #12]
 80014c2:	f043 0310 	orr.w	r3, r3, #16
 80014c6:	e7d8      	b.n	800147a <HAL_TIM_PWM_Start_IT+0x22>
 80014c8:	40010000 	.word	0x40010000

080014cc <HAL_TIM_OC_Start_IT>:
 80014cc:	f7ff bfc4 	b.w	8001458 <HAL_TIM_PWM_Start_IT>

080014d0 <HAL_TIM_IC_Start_IT>:
{
 80014d0:	b510      	push	{r4, lr}
 80014d2:	4604      	mov	r4, r0
  switch (Channel)
 80014d4:	290c      	cmp	r1, #12
 80014d6:	d80d      	bhi.n	80014f4 <HAL_TIM_IC_Start_IT+0x24>
 80014d8:	e8df f001 	tbb	[pc, r1]
 80014dc:	0c0c0c07 	.word	0x0c0c0c07
 80014e0:	0c0c0c1c 	.word	0x0c0c0c1c
 80014e4:	0c0c0c21 	.word	0x0c0c0c21
 80014e8:	26          	.byte	0x26
 80014e9:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80014ea:	6802      	ldr	r2, [r0, #0]
 80014ec:	68d3      	ldr	r3, [r2, #12]
 80014ee:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80014f2:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80014f4:	6820      	ldr	r0, [r4, #0]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f7ff ff84 	bl	8001404 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001504:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001506:	bf1e      	ittt	ne
 8001508:	681a      	ldrne	r2, [r3, #0]
 800150a:	f042 0201 	orrne.w	r2, r2, #1
 800150e:	601a      	strne	r2, [r3, #0]
}
 8001510:	2000      	movs	r0, #0
 8001512:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001514:	6802      	ldr	r2, [r0, #0]
 8001516:	68d3      	ldr	r3, [r2, #12]
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	e7e9      	b.n	80014f2 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800151e:	6802      	ldr	r2, [r0, #0]
 8001520:	68d3      	ldr	r3, [r2, #12]
 8001522:	f043 0308 	orr.w	r3, r3, #8
 8001526:	e7e4      	b.n	80014f2 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001528:	6802      	ldr	r2, [r0, #0]
 800152a:	68d3      	ldr	r3, [r2, #12]
 800152c:	f043 0310 	orr.w	r3, r3, #16
 8001530:	e7df      	b.n	80014f2 <HAL_TIM_IC_Start_IT+0x22>

08001532 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001532:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001536:	2b01      	cmp	r3, #1
{
 8001538:	b530      	push	{r4, r5, lr}
 800153a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800153e:	d014      	beq.n	800156a <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001540:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001542:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001546:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001548:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800154a:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800154c:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800154e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001556:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001558:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800155a:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800155c:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800155e:	2301      	movs	r3, #1
 8001560:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001564:	2300      	movs	r3, #0
 8001566:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800156a:	4618      	mov	r0, r3

  return HAL_OK;
}
 800156c:	bd30      	pop	{r4, r5, pc}

0800156e <HAL_TIMEx_CommutCallback>:
 800156e:	4770      	bx	lr

08001570 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001570:	4770      	bx	lr
	...

08001574 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001578:	6806      	ldr	r6, [r0, #0]
 800157a:	68c2      	ldr	r2, [r0, #12]
 800157c:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800157e:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001580:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001584:	4313      	orrs	r3, r2
 8001586:	6133      	str	r3, [r6, #16]
{
 8001588:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800158a:	6883      	ldr	r3, [r0, #8]
 800158c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800158e:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001590:	4303      	orrs	r3, r0
 8001592:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001594:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001598:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800159a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800159e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 80015a0:	4313      	orrs	r3, r2
 80015a2:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015a4:	6973      	ldr	r3, [r6, #20]
 80015a6:	69a2      	ldr	r2, [r4, #24]
 80015a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015ac:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015ae:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015b2:	6173      	str	r3, [r6, #20]
 80015b4:	4b7a      	ldr	r3, [pc, #488]	; (80017a0 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015b6:	d17c      	bne.n	80016b2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80015b8:	429e      	cmp	r6, r3
 80015ba:	d003      	beq.n	80015c4 <UART_SetConfig+0x50>
 80015bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015c0:	429e      	cmp	r6, r3
 80015c2:	d144      	bne.n	800164e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80015c4:	f7ff fbe2 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
 80015c8:	2519      	movs	r5, #25
 80015ca:	fb05 f300 	mul.w	r3, r5, r0
 80015ce:	6860      	ldr	r0, [r4, #4]
 80015d0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80015d4:	0040      	lsls	r0, r0, #1
 80015d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80015da:	fbb3 f3f9 	udiv	r3, r3, r9
 80015de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80015e2:	f7ff fbd3 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
 80015e6:	6863      	ldr	r3, [r4, #4]
 80015e8:	4368      	muls	r0, r5
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fbb0 f7f3 	udiv	r7, r0, r3
 80015f0:	f7ff fbcc 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
 80015f4:	6863      	ldr	r3, [r4, #4]
 80015f6:	4368      	muls	r0, r5
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80015fe:	fbb3 f3f9 	udiv	r3, r3, r9
 8001602:	fb09 7313 	mls	r3, r9, r3, r7
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	3332      	adds	r3, #50	; 0x32
 800160a:	fbb3 f3f9 	udiv	r3, r3, r9
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001614:	f7ff fbba 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
 8001618:	6862      	ldr	r2, [r4, #4]
 800161a:	4368      	muls	r0, r5
 800161c:	0052      	lsls	r2, r2, #1
 800161e:	fbb0 faf2 	udiv	sl, r0, r2
 8001622:	f7ff fbb3 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001626:	6863      	ldr	r3, [r4, #4]
 8001628:	4368      	muls	r0, r5
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001630:	fbb3 f3f9 	udiv	r3, r3, r9
 8001634:	fb09 a313 	mls	r3, r9, r3, sl
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	3332      	adds	r3, #50	; 0x32
 800163c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001646:	443b      	add	r3, r7
 8001648:	60b3      	str	r3, [r6, #8]
 800164a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800164e:	f7ff fb8d 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 8001652:	2519      	movs	r5, #25
 8001654:	fb05 f300 	mul.w	r3, r5, r0
 8001658:	6860      	ldr	r0, [r4, #4]
 800165a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800165e:	0040      	lsls	r0, r0, #1
 8001660:	fbb3 f3f0 	udiv	r3, r3, r0
 8001664:	fbb3 f3f9 	udiv	r3, r3, r9
 8001668:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800166c:	f7ff fb7e 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 8001670:	6863      	ldr	r3, [r4, #4]
 8001672:	4368      	muls	r0, r5
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	fbb0 f7f3 	udiv	r7, r0, r3
 800167a:	f7ff fb77 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 800167e:	6863      	ldr	r3, [r4, #4]
 8001680:	4368      	muls	r0, r5
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	fbb0 f3f3 	udiv	r3, r0, r3
 8001688:	fbb3 f3f9 	udiv	r3, r3, r9
 800168c:	fb09 7313 	mls	r3, r9, r3, r7
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	3332      	adds	r3, #50	; 0x32
 8001694:	fbb3 f3f9 	udiv	r3, r3, r9
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800169e:	f7ff fb65 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 80016a2:	6862      	ldr	r2, [r4, #4]
 80016a4:	4368      	muls	r0, r5
 80016a6:	0052      	lsls	r2, r2, #1
 80016a8:	fbb0 faf2 	udiv	sl, r0, r2
 80016ac:	f7ff fb5e 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 80016b0:	e7b9      	b.n	8001626 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80016b2:	429e      	cmp	r6, r3
 80016b4:	d002      	beq.n	80016bc <UART_SetConfig+0x148>
 80016b6:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <UART_SetConfig+0x230>)
 80016b8:	429e      	cmp	r6, r3
 80016ba:	d140      	bne.n	800173e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80016bc:	f7ff fb66 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
 80016c0:	6867      	ldr	r7, [r4, #4]
 80016c2:	2519      	movs	r5, #25
 80016c4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80016c8:	fb05 f300 	mul.w	r3, r5, r0
 80016cc:	00bf      	lsls	r7, r7, #2
 80016ce:	fbb3 f3f7 	udiv	r3, r3, r7
 80016d2:	fbb3 f3f9 	udiv	r3, r3, r9
 80016d6:	011f      	lsls	r7, r3, #4
 80016d8:	f7ff fb58 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
 80016dc:	6863      	ldr	r3, [r4, #4]
 80016de:	4368      	muls	r0, r5
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	fbb0 f8f3 	udiv	r8, r0, r3
 80016e6:	f7ff fb51 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
 80016ea:	6863      	ldr	r3, [r4, #4]
 80016ec:	4368      	muls	r0, r5
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f4:	fbb3 f3f9 	udiv	r3, r3, r9
 80016f8:	fb09 8313 	mls	r3, r9, r3, r8
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	3332      	adds	r3, #50	; 0x32
 8001700:	fbb3 f3f9 	udiv	r3, r3, r9
 8001704:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001708:	f7ff fb40 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
 800170c:	6862      	ldr	r2, [r4, #4]
 800170e:	4368      	muls	r0, r5
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	fbb0 faf2 	udiv	sl, r0, r2
 8001716:	f7ff fb39 	bl	8000d8c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800171a:	6863      	ldr	r3, [r4, #4]
 800171c:	4368      	muls	r0, r5
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	fbb0 f3f3 	udiv	r3, r0, r3
 8001724:	fbb3 f3f9 	udiv	r3, r3, r9
 8001728:	fb09 a313 	mls	r3, r9, r3, sl
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	3332      	adds	r3, #50	; 0x32
 8001730:	fbb3 f3f9 	udiv	r3, r3, r9
 8001734:	f003 030f 	and.w	r3, r3, #15
 8001738:	ea43 0308 	orr.w	r3, r3, r8
 800173c:	e783      	b.n	8001646 <UART_SetConfig+0xd2>
 800173e:	f7ff fb15 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 8001742:	6867      	ldr	r7, [r4, #4]
 8001744:	2519      	movs	r5, #25
 8001746:	f04f 0964 	mov.w	r9, #100	; 0x64
 800174a:	fb05 f300 	mul.w	r3, r5, r0
 800174e:	00bf      	lsls	r7, r7, #2
 8001750:	fbb3 f3f7 	udiv	r3, r3, r7
 8001754:	fbb3 f3f9 	udiv	r3, r3, r9
 8001758:	011f      	lsls	r7, r3, #4
 800175a:	f7ff fb07 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 800175e:	6863      	ldr	r3, [r4, #4]
 8001760:	4368      	muls	r0, r5
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	fbb0 f8f3 	udiv	r8, r0, r3
 8001768:	f7ff fb00 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 800176c:	6863      	ldr	r3, [r4, #4]
 800176e:	4368      	muls	r0, r5
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	fbb0 f3f3 	udiv	r3, r0, r3
 8001776:	fbb3 f3f9 	udiv	r3, r3, r9
 800177a:	fb09 8313 	mls	r3, r9, r3, r8
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	3332      	adds	r3, #50	; 0x32
 8001782:	fbb3 f3f9 	udiv	r3, r3, r9
 8001786:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800178a:	f7ff faef 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 800178e:	6862      	ldr	r2, [r4, #4]
 8001790:	4368      	muls	r0, r5
 8001792:	0092      	lsls	r2, r2, #2
 8001794:	fbb0 faf2 	udiv	sl, r0, r2
 8001798:	f7ff fae8 	bl	8000d6c <HAL_RCC_GetPCLK1Freq>
 800179c:	e7bd      	b.n	800171a <UART_SetConfig+0x1a6>
 800179e:	bf00      	nop
 80017a0:	40011000 	.word	0x40011000
 80017a4:	40011400 	.word	0x40011400

080017a8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80017a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017aa:	4604      	mov	r4, r0
 80017ac:	460e      	mov	r6, r1
 80017ae:	4617      	mov	r7, r2
 80017b0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017b2:	6821      	ldr	r1, [r4, #0]
 80017b4:	680b      	ldr	r3, [r1, #0]
 80017b6:	ea36 0303 	bics.w	r3, r6, r3
 80017ba:	d101      	bne.n	80017c0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80017bc:	2000      	movs	r0, #0
}
 80017be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80017c0:	1c6b      	adds	r3, r5, #1
 80017c2:	d0f7      	beq.n	80017b4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80017c4:	b995      	cbnz	r5, 80017ec <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80017ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	f022 0201 	bic.w	r2, r2, #1
 80017d6:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80017d8:	2320      	movs	r3, #32
 80017da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80017de:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80017e2:	2300      	movs	r3, #0
 80017e4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80017e8:	2003      	movs	r0, #3
 80017ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80017ec:	f7fe ff22 	bl	8000634 <HAL_GetTick>
 80017f0:	1bc0      	subs	r0, r0, r7
 80017f2:	4285      	cmp	r5, r0
 80017f4:	d2dd      	bcs.n	80017b2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80017f6:	e7e6      	b.n	80017c6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080017f8 <HAL_UART_Init>:
{
 80017f8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80017fa:	4604      	mov	r4, r0
 80017fc:	b340      	cbz	r0, 8001850 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80017fe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001802:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001806:	b91b      	cbnz	r3, 8001810 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001808:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800180c:	f000 fce2 	bl	80021d4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001810:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001812:	2324      	movs	r3, #36	; 0x24
 8001814:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001818:	68d3      	ldr	r3, [r2, #12]
 800181a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800181e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001820:	4620      	mov	r0, r4
 8001822:	f7ff fea7 	bl	8001574 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001826:	6823      	ldr	r3, [r4, #0]
 8001828:	691a      	ldr	r2, [r3, #16]
 800182a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800182e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001836:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800183e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001840:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001842:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001844:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001846:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800184a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800184e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001850:	2001      	movs	r0, #1
}
 8001852:	bd10      	pop	{r4, pc}

08001854 <HAL_UART_Transmit>:
{
 8001854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001858:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800185a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800185e:	2b20      	cmp	r3, #32
{
 8001860:	4604      	mov	r4, r0
 8001862:	460d      	mov	r5, r1
 8001864:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001866:	d14f      	bne.n	8001908 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8001868:	2900      	cmp	r1, #0
 800186a:	d04a      	beq.n	8001902 <HAL_UART_Transmit+0xae>
 800186c:	2a00      	cmp	r2, #0
 800186e:	d048      	beq.n	8001902 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001870:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001874:	2b01      	cmp	r3, #1
 8001876:	d047      	beq.n	8001908 <HAL_UART_Transmit+0xb4>
 8001878:	2301      	movs	r3, #1
 800187a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800187e:	2300      	movs	r3, #0
 8001880:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001882:	2321      	movs	r3, #33	; 0x21
 8001884:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001888:	f7fe fed4 	bl	8000634 <HAL_GetTick>
    huart->TxXferSize = Size;
 800188c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001890:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001892:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001896:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001898:	b29b      	uxth	r3, r3
 800189a:	b96b      	cbnz	r3, 80018b8 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800189c:	463b      	mov	r3, r7
 800189e:	4632      	mov	r2, r6
 80018a0:	2140      	movs	r1, #64	; 0x40
 80018a2:	4620      	mov	r0, r4
 80018a4:	f7ff ff80 	bl	80017a8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80018a8:	b9b0      	cbnz	r0, 80018d8 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80018aa:	2320      	movs	r3, #32
 80018ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80018b0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80018b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80018b8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80018ba:	3b01      	subs	r3, #1
 80018bc:	b29b      	uxth	r3, r3
 80018be:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018c0:	68a3      	ldr	r3, [r4, #8]
 80018c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018c6:	4632      	mov	r2, r6
 80018c8:	463b      	mov	r3, r7
 80018ca:	f04f 0180 	mov.w	r1, #128	; 0x80
 80018ce:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018d0:	d10e      	bne.n	80018f0 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018d2:	f7ff ff69 	bl	80017a8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80018d6:	b110      	cbz	r0, 80018de <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80018d8:	2003      	movs	r0, #3
 80018da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80018de:	882b      	ldrh	r3, [r5, #0]
 80018e0:	6822      	ldr	r2, [r4, #0]
 80018e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018e6:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80018e8:	6923      	ldr	r3, [r4, #16]
 80018ea:	b943      	cbnz	r3, 80018fe <HAL_UART_Transmit+0xaa>
          pData += 2U;
 80018ec:	3502      	adds	r5, #2
 80018ee:	e7d2      	b.n	8001896 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018f0:	f7ff ff5a 	bl	80017a8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80018f4:	2800      	cmp	r0, #0
 80018f6:	d1ef      	bne.n	80018d8 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	782a      	ldrb	r2, [r5, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	3501      	adds	r5, #1
 8001900:	e7c9      	b.n	8001896 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001902:	2001      	movs	r0, #1
 8001904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001908:	2002      	movs	r0, #2
}
 800190a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800190e <HAL_UART_Receive>:
{
 800190e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001912:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001914:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001918:	2b20      	cmp	r3, #32
{
 800191a:	4604      	mov	r4, r0
 800191c:	460d      	mov	r5, r1
 800191e:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8001920:	d152      	bne.n	80019c8 <HAL_UART_Receive+0xba>
    if ((pData == NULL) || (Size == 0U))
 8001922:	2900      	cmp	r1, #0
 8001924:	d04d      	beq.n	80019c2 <HAL_UART_Receive+0xb4>
 8001926:	2a00      	cmp	r2, #0
 8001928:	d04b      	beq.n	80019c2 <HAL_UART_Receive+0xb4>
    __HAL_LOCK(huart);
 800192a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800192e:	2b01      	cmp	r3, #1
 8001930:	d04a      	beq.n	80019c8 <HAL_UART_Receive+0xba>
 8001932:	2301      	movs	r3, #1
 8001934:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001938:	2300      	movs	r3, #0
 800193a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800193c:	2322      	movs	r3, #34	; 0x22
 800193e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8001942:	f7fe fe77 	bl	8000634 <HAL_GetTick>
    huart->RxXferSize = Size;
 8001946:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 800194a:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 800194c:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001950:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8001952:	b280      	uxth	r0, r0
 8001954:	b930      	cbnz	r0, 8001964 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8001956:	2320      	movs	r3, #32
 8001958:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 800195c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 8001964:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001966:	3b01      	subs	r3, #1
 8001968:	b29b      	uxth	r3, r3
 800196a:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800196c:	68a3      	ldr	r3, [r4, #8]
 800196e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001972:	4632      	mov	r2, r6
 8001974:	463b      	mov	r3, r7
 8001976:	f04f 0120 	mov.w	r1, #32
 800197a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800197c:	d112      	bne.n	80019a4 <HAL_UART_Receive+0x96>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800197e:	f7ff ff13 	bl	80017a8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001982:	b110      	cbz	r0, 800198a <HAL_UART_Receive+0x7c>
          return HAL_TIMEOUT;
 8001984:	2003      	movs	r0, #3
 8001986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800198a:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800198c:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800198e:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001990:	b922      	cbnz	r2, 800199c <HAL_UART_Receive+0x8e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001996:	f825 3b02 	strh.w	r3, [r5], #2
 800199a:	e7d9      	b.n	8001950 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800199c:	b2db      	uxtb	r3, r3
 800199e:	f825 3b01 	strh.w	r3, [r5], #1
 80019a2:	e7d5      	b.n	8001950 <HAL_UART_Receive+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80019a4:	f7ff ff00 	bl	80017a8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80019a8:	2800      	cmp	r0, #0
 80019aa:	d1eb      	bne.n	8001984 <HAL_UART_Receive+0x76>
 80019ac:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80019ae:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	1c6a      	adds	r2, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 80019b4:	b911      	cbnz	r1, 80019bc <HAL_UART_Receive+0xae>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80019b6:	702b      	strb	r3, [r5, #0]
 80019b8:	4615      	mov	r5, r2
 80019ba:	e7c9      	b.n	8001950 <HAL_UART_Receive+0x42>
 80019bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019c0:	e7f9      	b.n	80019b6 <HAL_UART_Receive+0xa8>
      return  HAL_ERROR;
 80019c2:	2001      	movs	r0, #1
 80019c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80019c8:	2002      	movs	r0, #2
}
 80019ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080019d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d0:	b530      	push	{r4, r5, lr}
 80019d2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d4:	2230      	movs	r2, #48	; 0x30
 80019d6:	2100      	movs	r1, #0
 80019d8:	a808      	add	r0, sp, #32
 80019da:	f000 fce1 	bl	80023a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019de:	2100      	movs	r1, #0
 80019e0:	2214      	movs	r2, #20
 80019e2:	a803      	add	r0, sp, #12
 80019e4:	f000 fcdc 	bl	80023a0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e8:	2400      	movs	r4, #0
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <SystemClock_Config+0x70>)
 80019ec:	9401      	str	r4, [sp, #4]
 80019ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a00:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <SystemClock_Config+0x74>)
 8001a02:	9402      	str	r4, [sp, #8]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a0e:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a14:	9302      	str	r3, [sp, #8]
 8001a16:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a18:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a1a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a1e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a20:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a22:	9508      	str	r5, [sp, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a24:	f7fe ff58 	bl	80008d8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a28:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a2e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a30:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a32:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a34:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a36:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a38:	f7ff f8fe 	bl	8000c38 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001a3c:	b015      	add	sp, #84	; 0x54
 8001a3e:	bd30      	pop	{r4, r5, pc}
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40007000 	.word	0x40007000

08001a48 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
//	uint32_t pw_array_length = PW_ARRAY_LENGTH;
	if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) // measure the speed of wheel 1
 8001a48:	6803      	ldr	r3, [r0, #0]
 8001a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a4e:	d106      	bne.n	8001a5e <HAL_TIM_IC_CaptureCallback+0x16>
 8001a50:	7f03      	ldrb	r3, [r0, #28]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d104      	bne.n	8001a60 <HAL_TIM_IC_CaptureCallback+0x18>
	{
		input_capture1++;
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <HAL_TIM_IC_CaptureCallback+0x20>)
	}

	else if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) // measure the speed of wheel 2
	{
		input_capture2++;
 8001a58:	6813      	ldr	r3, [r2, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4770      	bx	lr
	else if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) // measure the speed of wheel 2
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d1fc      	bne.n	8001a5e <HAL_TIM_IC_CaptureCallback+0x16>
		input_capture2++;
 8001a64:	4a01      	ldr	r2, [pc, #4]	; (8001a6c <HAL_TIM_IC_CaptureCallback+0x24>)
 8001a66:	e7f7      	b.n	8001a58 <HAL_TIM_IC_CaptureCallback+0x10>
 8001a68:	2000020c 	.word	0x2000020c
 8001a6c:	20000210 	.word	0x20000210

08001a70 <printWelcomeMessage>:
		}
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, returned_pwm2);
	}
}

void printWelcomeMessage(void) {
 8001a70:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[0;0H", strlen("\033[0;0H"), HAL_MAX_DELAY);
 8001a72:	4c0f      	ldr	r4, [pc, #60]	; (8001ab0 <printWelcomeMessage+0x40>)
 8001a74:	490f      	ldr	r1, [pc, #60]	; (8001ab4 <printWelcomeMessage+0x44>)
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a7a:	2206      	movs	r2, #6
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f7ff fee9 	bl	8001854 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[2J", strlen("\033[2J"), HAL_MAX_DELAY);
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a86:	2204      	movs	r2, #4
 8001a88:	490b      	ldr	r1, [pc, #44]	; (8001ab8 <printWelcomeMessage+0x48>)
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f7ff fee2 	bl	8001854 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)WELCOME_MSG, strlen(WELCOME_MSG), HAL_MAX_DELAY);
 8001a90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a94:	222a      	movs	r2, #42	; 0x2a
 8001a96:	4909      	ldr	r1, [pc, #36]	; (8001abc <printWelcomeMessage+0x4c>)
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f7ff fedb 	bl	8001854 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aa4:	2276      	movs	r2, #118	; 0x76
 8001aa6:	4906      	ldr	r1, [pc, #24]	; (8001ac0 <printWelcomeMessage+0x50>)
}
 8001aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 8001aac:	f7ff bed2 	b.w	8001854 <HAL_UART_Transmit>
 8001ab0:	2000030c 	.word	0x2000030c
 8001ab4:	08002dd4 	.word	0x08002dd4
 8001ab8:	08002ddb 	.word	0x08002ddb
 8001abc:	08002de0 	.word	0x08002de0
 8001ac0:	08002e0b 	.word	0x08002e0b

08001ac4 <readUserInput>:

uint32_t readUserInput(void) {
 8001ac4:	b513      	push	{r0, r1, r4, lr}
	char readBuf[1];

	HAL_UART_Transmit(&huart2, (uint8_t*)PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
 8001ac6:	4c0a      	ldr	r4, [pc, #40]	; (8001af0 <readUserInput+0x2c>)
 8001ac8:	490a      	ldr	r1, [pc, #40]	; (8001af4 <readUserInput+0x30>)
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ace:	2204      	movs	r2, #4
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f7ff febf 	bl	8001854 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, (uint8_t*)readBuf, 1, HAL_MAX_DELAY);
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ada:	2201      	movs	r2, #1
 8001adc:	a901      	add	r1, sp, #4
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f7ff ff15 	bl	800190e <HAL_UART_Receive>
	return atoi(readBuf);
 8001ae4:	a801      	add	r0, sp, #4
 8001ae6:	f000 fc2c 	bl	8002342 <atoi>
}
 8001aea:	b002      	add	sp, #8
 8001aec:	bd10      	pop	{r4, pc}
 8001aee:	bf00      	nop
 8001af0:	2000030c 	.word	0x2000030c
 8001af4:	08002ef9 	.word	0x08002ef9

08001af8 <processUserInput>:


uint32_t processUserInput(uint32_t opt) {
 8001af8:	b570      	push	{r4, r5, r6, lr}
	char msg0[100] = "\r\nYour desired speed is: ";
 8001afa:	4b64      	ldr	r3, [pc, #400]	; (8001c8c <processUserInput+0x194>)
uint32_t processUserInput(uint32_t opt) {
 8001afc:	f5ad 7d30 	sub.w	sp, sp, #704	; 0x2c0
 8001b00:	4604      	mov	r4, r0
	char msg0[100] = "\r\nYour desired speed is: ";
 8001b02:	aa01      	add	r2, sp, #4
 8001b04:	f103 0618 	add.w	r6, r3, #24
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	6859      	ldr	r1, [r3, #4]
 8001b0c:	4615      	mov	r5, r2
 8001b0e:	c503      	stmia	r5!, {r0, r1}
 8001b10:	3308      	adds	r3, #8
 8001b12:	42b3      	cmp	r3, r6
 8001b14:	462a      	mov	r2, r5
 8001b16:	d1f7      	bne.n	8001b08 <processUserInput+0x10>
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	802b      	strh	r3, [r5, #0]
 8001b1c:	224a      	movs	r2, #74	; 0x4a
 8001b1e:	2100      	movs	r1, #0
 8001b20:	f10d 001e 	add.w	r0, sp, #30
 8001b24:	f000 fc3c 	bl	80023a0 <memset>
	char msg6[100];
	char readN_PULSE[3];
	int n_pulse_received1 = 0;


	if(!opt || opt > 3)
 8001b28:	1e63      	subs	r3, r4, #1
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	f200 80a9 	bhi.w	8001c82 <processUserInput+0x18a>
		return 0;

	sprintf(msg1, "%ld", opt);
 8001b30:	4622      	mov	r2, r4
 8001b32:	4957      	ldr	r1, [pc, #348]	; (8001c90 <processUserInput+0x198>)
 8001b34:	a81a      	add	r0, sp, #104	; 0x68
 8001b36:	f000 fc3b 	bl	80023b0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 8001b3a:	a81a      	add	r0, sp, #104	; 0x68
 8001b3c:	f7fe fb50 	bl	80001e0 <strlen>
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b44:	b282      	uxth	r2, r0
 8001b46:	a91a      	add	r1, sp, #104	; 0x68
 8001b48:	4852      	ldr	r0, [pc, #328]	; (8001c94 <processUserInput+0x19c>)
 8001b4a:	f7ff fe83 	bl	8001854 <HAL_UART_Transmit>

	switch(opt) {
 8001b4e:	2c02      	cmp	r4, #2
 8001b50:	d035      	beq.n	8001bbe <processUserInput+0xc6>
 8001b52:	2c03      	cmp	r4, #3
 8001b54:	f000 8097 	beq.w	8001c86 <processUserInput+0x18e>
	case 1: // Set n_pulse

		HAL_UART_Transmit(&huart2, (uint8_t*)msg0, strlen(msg0), HAL_MAX_DELAY);
 8001b58:	a801      	add	r0, sp, #4
 8001b5a:	f7fe fb41 	bl	80001e0 <strlen>
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b62:	b282      	uxth	r2, r0
 8001b64:	a901      	add	r1, sp, #4
 8001b66:	484b      	ldr	r0, [pc, #300]	; (8001c94 <processUserInput+0x19c>)
 8001b68:	f7ff fe74 	bl	8001854 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, (uint8_t*)readN_PULSE, 3, HAL_MAX_DELAY);
 8001b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b70:	2203      	movs	r2, #3
 8001b72:	a997      	add	r1, sp, #604	; 0x25c
 8001b74:	4847      	ldr	r0, [pc, #284]	; (8001c94 <processUserInput+0x19c>)
 8001b76:	f7ff feca 	bl	800190e <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, (uint8_t*)readN_PULSE, 3, HAL_MAX_DELAY);
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b7e:	2203      	movs	r2, #3
 8001b80:	a997      	add	r1, sp, #604	; 0x25c
 8001b82:	4844      	ldr	r0, [pc, #272]	; (8001c94 <processUserInput+0x19c>)
 8001b84:	f7ff fe66 	bl	8001854 <HAL_UART_Transmit>
		n_pulse_received1 = atoi(readN_PULSE);
 8001b88:	a897      	add	r0, sp, #604	; 0x25c
 8001b8a:	f000 fbda 	bl	8002342 <atoi>
		if (abs(n_pulse_received1) > 30)
 8001b8e:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8001b92:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8001b96:	2b1e      	cmp	r3, #30
 8001b98:	493f      	ldr	r1, [pc, #252]	; (8001c98 <processUserInput+0x1a0>)
 8001b9a:	4a40      	ldr	r2, [pc, #256]	; (8001c9c <processUserInput+0x1a4>)
 8001b9c:	dd04      	ble.n	8001ba8 <processUserInput+0xb0>
		{
			n_pulse_set1 = 30;
 8001b9e:	241e      	movs	r4, #30
 8001ba0:	600c      	str	r4, [r1, #0]
      wheel_dir1 = 0;
    }
		else
		{
			n_pulse_set1 = abs(n_pulse_received1);
			wheel_dir1 = n_pulse_received1/abs(n_pulse_received1);
 8001ba2:	fb90 f0f3 	sdiv	r0, r0, r3
 8001ba6:	e001      	b.n	8001bac <processUserInput+0xb4>
    else if (n_pulse_received1 == 0)
 8001ba8:	b938      	cbnz	r0, 8001bba <processUserInput+0xc2>
      n_pulse_set1 = 0;
 8001baa:	6008      	str	r0, [r1, #0]
		}

		give_command = 1;
 8001bac:	4b3c      	ldr	r3, [pc, #240]	; (8001ca0 <processUserInput+0x1a8>)
			wheel_dir1 = n_pulse_received1/abs(n_pulse_received1);
 8001bae:	6010      	str	r0, [r2, #0]
		give_command = 1;
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	6018      	str	r0, [r3, #0]
	case 3:
		return 2;
	};

	return 1;
}
 8001bb4:	f50d 7d30 	add.w	sp, sp, #704	; 0x2c0
 8001bb8:	bd70      	pop	{r4, r5, r6, pc}
			n_pulse_set1 = abs(n_pulse_received1);
 8001bba:	600b      	str	r3, [r1, #0]
 8001bbc:	e7f1      	b.n	8001ba2 <processUserInput+0xaa>
		sprintf(msg1, "\r\n input_capture_prev1: %lu", input_capture_prev1);
 8001bbe:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <processUserInput+0x1ac>)
 8001bc0:	4939      	ldr	r1, [pc, #228]	; (8001ca8 <processUserInput+0x1b0>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	a81a      	add	r0, sp, #104	; 0x68
 8001bc6:	f000 fbf3 	bl	80023b0 <siprintf>
		sprintf(msg2, "\r\n n_pulse_set1: %lu", n_pulse_set1);
 8001bca:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <processUserInput+0x1a0>)
 8001bcc:	4937      	ldr	r1, [pc, #220]	; (8001cac <processUserInput+0x1b4>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	a833      	add	r0, sp, #204	; 0xcc
 8001bd2:	f000 fbed 	bl	80023b0 <siprintf>
		sprintf(msg3, "\r\n n_pulse1: %lu", n_pulse1);
 8001bd6:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <processUserInput+0x1b8>)
 8001bd8:	4936      	ldr	r1, [pc, #216]	; (8001cb4 <processUserInput+0x1bc>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	a84c      	add	r0, sp, #304	; 0x130
 8001bde:	f000 fbe7 	bl	80023b0 <siprintf>
		sprintf(msg4, "\r\n PWM: %lu", returned_pwm1);
 8001be2:	4b35      	ldr	r3, [pc, #212]	; (8001cb8 <processUserInput+0x1c0>)
 8001be4:	4935      	ldr	r1, [pc, #212]	; (8001cbc <processUserInput+0x1c4>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	a865      	add	r0, sp, #404	; 0x194
 8001bea:	f000 fbe1 	bl	80023b0 <siprintf>
		sprintf(msg5, "\r\n error1: %ld", error1);
 8001bee:	4b34      	ldr	r3, [pc, #208]	; (8001cc0 <processUserInput+0x1c8>)
 8001bf0:	4934      	ldr	r1, [pc, #208]	; (8001cc4 <processUserInput+0x1cc>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	a87e      	add	r0, sp, #504	; 0x1f8
 8001bf6:	f000 fbdb 	bl	80023b0 <siprintf>
		sprintf(msg6, "\r\n integrated_error1: %ld", integrated_error1);
 8001bfa:	4b33      	ldr	r3, [pc, #204]	; (8001cc8 <processUserInput+0x1d0>)
 8001bfc:	4933      	ldr	r1, [pc, #204]	; (8001ccc <processUserInput+0x1d4>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	a897      	add	r0, sp, #604	; 0x25c
 8001c02:	f000 fbd5 	bl	80023b0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 8001c06:	a81a      	add	r0, sp, #104	; 0x68
 8001c08:	f7fe faea 	bl	80001e0 <strlen>
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c10:	b282      	uxth	r2, r0
 8001c12:	a91a      	add	r1, sp, #104	; 0x68
 8001c14:	481f      	ldr	r0, [pc, #124]	; (8001c94 <processUserInput+0x19c>)
 8001c16:	f7ff fe1d 	bl	8001854 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg2, strlen(msg2), HAL_MAX_DELAY);
 8001c1a:	a833      	add	r0, sp, #204	; 0xcc
 8001c1c:	f7fe fae0 	bl	80001e0 <strlen>
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c24:	b282      	uxth	r2, r0
 8001c26:	a933      	add	r1, sp, #204	; 0xcc
 8001c28:	481a      	ldr	r0, [pc, #104]	; (8001c94 <processUserInput+0x19c>)
 8001c2a:	f7ff fe13 	bl	8001854 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg3, strlen(msg3), HAL_MAX_DELAY);
 8001c2e:	a84c      	add	r0, sp, #304	; 0x130
 8001c30:	f7fe fad6 	bl	80001e0 <strlen>
 8001c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c38:	b282      	uxth	r2, r0
 8001c3a:	a94c      	add	r1, sp, #304	; 0x130
 8001c3c:	4815      	ldr	r0, [pc, #84]	; (8001c94 <processUserInput+0x19c>)
 8001c3e:	f7ff fe09 	bl	8001854 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg4, strlen(msg4), HAL_MAX_DELAY);
 8001c42:	a865      	add	r0, sp, #404	; 0x194
 8001c44:	f7fe facc 	bl	80001e0 <strlen>
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c4c:	b282      	uxth	r2, r0
 8001c4e:	a965      	add	r1, sp, #404	; 0x194
 8001c50:	4810      	ldr	r0, [pc, #64]	; (8001c94 <processUserInput+0x19c>)
 8001c52:	f7ff fdff 	bl	8001854 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg5, strlen(msg5), HAL_MAX_DELAY);
 8001c56:	a87e      	add	r0, sp, #504	; 0x1f8
 8001c58:	f7fe fac2 	bl	80001e0 <strlen>
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c60:	b282      	uxth	r2, r0
 8001c62:	a97e      	add	r1, sp, #504	; 0x1f8
 8001c64:	480b      	ldr	r0, [pc, #44]	; (8001c94 <processUserInput+0x19c>)
 8001c66:	f7ff fdf5 	bl	8001854 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg6, strlen(msg6), HAL_MAX_DELAY);
 8001c6a:	a897      	add	r0, sp, #604	; 0x25c
 8001c6c:	f7fe fab8 	bl	80001e0 <strlen>
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c74:	b282      	uxth	r2, r0
 8001c76:	a997      	add	r1, sp, #604	; 0x25c
 8001c78:	4806      	ldr	r0, [pc, #24]	; (8001c94 <processUserInput+0x19c>)
 8001c7a:	f7ff fdeb 	bl	8001854 <HAL_UART_Transmit>
	return 1;
 8001c7e:	2001      	movs	r0, #1
		break;
 8001c80:	e798      	b.n	8001bb4 <processUserInput+0xbc>
		return 0;
 8001c82:	2000      	movs	r0, #0
 8001c84:	e796      	b.n	8001bb4 <processUserInput+0xbc>
		return 2;
 8001c86:	2002      	movs	r0, #2
 8001c88:	e794      	b.n	8001bb4 <processUserInput+0xbc>
 8001c8a:	bf00      	nop
 8001c8c:	08002d70 	.word	0x08002d70
 8001c90:	08002edb 	.word	0x08002edb
 8001c94:	2000030c 	.word	0x2000030c
 8001c98:	2000022c 	.word	0x2000022c
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	20000208 	.word	0x20000208
 8001ca4:	20000214 	.word	0x20000214
 8001ca8:	08002e82 	.word	0x08002e82
 8001cac:	08002e9e 	.word	0x08002e9e
 8001cb0:	20000224 	.word	0x20000224
 8001cb4:	08002eb3 	.word	0x08002eb3
 8001cb8:	20000234 	.word	0x20000234
 8001cbc:	08002ec4 	.word	0x08002ec4
 8001cc0:	20000200 	.word	0x20000200
 8001cc4:	08002ed0 	.word	0x08002ed0
 8001cc8:	2000021c 	.word	0x2000021c
 8001ccc:	08002edf 	.word	0x08002edf

08001cd0 <main>:
{
 8001cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cd4:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8001cd6:	f7fe fc87 	bl	80005e8 <HAL_Init>
  SystemClock_Config();
 8001cda:	f7ff fe79 	bl	80019d0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cde:	2214      	movs	r2, #20
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	a807      	add	r0, sp, #28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce4:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce6:	f000 fb5b 	bl	80023a0 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cea:	4b81      	ldr	r3, [pc, #516]	; (8001ef0 <main+0x220>)
 8001cec:	9401      	str	r4, [sp, #4]
 8001cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001cf0:	4880      	ldr	r0, [pc, #512]	; (8001ef4 <main+0x224>)
  htim3.Instance = TIM3;
 8001cf2:	4d81      	ldr	r5, [pc, #516]	; (8001ef8 <main+0x228>)
  htim4.Instance = TIM4;
 8001cf4:	4f81      	ldr	r7, [pc, #516]	; (8001efc <main+0x22c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf6:	f042 0204 	orr.w	r2, r2, #4
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
 8001cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cfe:	f002 0204 	and.w	r2, r2, #4
 8001d02:	9201      	str	r2, [sp, #4]
 8001d04:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d06:	9402      	str	r4, [sp, #8]
 8001d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d12:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001d16:	9202      	str	r2, [sp, #8]
 8001d18:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	9403      	str	r4, [sp, #12]
 8001d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	631a      	str	r2, [r3, #48]	; 0x30
 8001d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d26:	f002 0201 	and.w	r2, r2, #1
 8001d2a:	9203      	str	r2, [sp, #12]
 8001d2c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	9404      	str	r4, [sp, #16]
 8001d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d32:	f042 0202 	orr.w	r2, r2, #2
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001d40:	4622      	mov	r2, r4
 8001d42:	f44f 7108 	mov.w	r1, #544	; 0x220
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d46:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001d48:	f7fe fdba 	bl	80008c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001d4c:	4622      	mov	r2, r4
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	486b      	ldr	r0, [pc, #428]	; (8001f00 <main+0x230>)
 8001d52:	f7fe fdb5 	bl	80008c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d5a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d5e:	4b69      	ldr	r3, [pc, #420]	; (8001f04 <main+0x234>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d60:	4867      	ldr	r0, [pc, #412]	; (8001f00 <main+0x230>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d62:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d64:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f7fe fcd3 	bl	8000714 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8001d6e:	f44f 7308 	mov.w	r3, #544	; 0x220
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	a907      	add	r1, sp, #28
 8001d74:	485f      	ldr	r0, [pc, #380]	; (8001ef4 <main+0x224>)
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8001d76:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d78:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d80:	f7fe fcc8 	bl	8000714 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d84:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d86:	a907      	add	r1, sp, #28
 8001d88:	485d      	ldr	r0, [pc, #372]	; (8001f00 <main+0x230>)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d8a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8c:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d94:	f7fe fcbe 	bl	8000714 <HAL_GPIO_Init>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d98:	221c      	movs	r2, #28
 8001d9a:	eb0d 0002 	add.w	r0, sp, r2
 8001d9e:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da0:	9405      	str	r4, [sp, #20]
 8001da2:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da4:	f000 fafc 	bl	80023a0 <memset>
  htim3.Instance = TIM3;
 8001da8:	4b57      	ldr	r3, [pc, #348]	; (8001f08 <main+0x238>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001daa:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 400-1;
 8001dac:	f240 168f 	movw	r6, #399	; 0x18f
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001db0:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 1-1;
 8001db2:	e885 0018 	stmia.w	r5, {r3, r4}
  htim3.Init.Period = 400-1;
 8001db6:	60ee      	str	r6, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db8:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dba:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dbc:	f7ff f978 	bl	80010b0 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dc0:	a905      	add	r1, sp, #20
 8001dc2:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc4:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc6:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dc8:	f7ff fbb3 	bl	8001532 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dcc:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dce:	4622      	mov	r2, r4
 8001dd0:	a907      	add	r1, sp, #28
 8001dd2:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd4:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 399;
 8001dd6:	9608      	str	r6, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd8:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dda:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ddc:	f7ff f9f6 	bl	80011cc <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001de0:	2204      	movs	r2, #4
 8001de2:	a907      	add	r1, sp, #28
 8001de4:	4628      	mov	r0, r5
 8001de6:	f7ff f9f1 	bl	80011cc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8001dea:	4628      	mov	r0, r5
 8001dec:	f000 f9c8 	bl	8002180 <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001df0:	221c      	movs	r2, #28
 8001df2:	eb0d 0002 	add.w	r0, sp, r2
 8001df6:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df8:	9405      	str	r4, [sp, #20]
 8001dfa:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dfc:	f000 fad0 	bl	80023a0 <memset>
  htim4.Init.Prescaler = 8000-1;
 8001e00:	4b42      	ldr	r3, [pc, #264]	; (8001f0c <main+0x23c>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e02:	60bc      	str	r4, [r7, #8]
  htim4.Init.Prescaler = 8000-1;
 8001e04:	f641 793f 	movw	r9, #7999	; 0x1f3f
 8001e08:	e887 0208 	stmia.w	r7, {r3, r9}
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001e0c:	4638      	mov	r0, r7
  htim4.Init.Period = 50-1;
 8001e0e:	2331      	movs	r3, #49	; 0x31
 8001e10:	60fb      	str	r3, [r7, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e12:	613c      	str	r4, [r7, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e14:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001e16:	f7ff f931 	bl	800107c <HAL_TIM_OC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e1a:	a905      	add	r1, sp, #20
 8001e1c:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1e:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e20:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e22:	f7ff fb86 	bl	8001532 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e26:	a907      	add	r1, sp, #28
 8001e28:	4622      	mov	r2, r4
 8001e2a:	4638      	mov	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e2c:	9407      	str	r4, [sp, #28]
  sConfigOC.Pulse = 0;
 8001e2e:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e30:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e32:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e34:	f7ff f99c 	bl	8001170 <HAL_TIM_OC_ConfigChannel>
  huart2.Instance = USART2;
 8001e38:	4835      	ldr	r0, [pc, #212]	; (8001f10 <main+0x240>)
  huart2.Init.BaudRate = 115200;
 8001e3a:	4a36      	ldr	r2, [pc, #216]	; (8001f14 <main+0x244>)
  htim2.Instance = TIM2;
 8001e3c:	4e36      	ldr	r6, [pc, #216]	; (8001f18 <main+0x248>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3e:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001e40:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001e44:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e48:	230c      	movs	r3, #12
 8001e4a:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e4c:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e4e:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e50:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e52:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e54:	f7ff fcd0 	bl	80017f8 <HAL_UART_Init>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e58:	2210      	movs	r2, #16
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	a807      	add	r0, sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e5e:	9405      	str	r4, [sp, #20]
 8001e60:	9406      	str	r4, [sp, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e62:	f000 fa9d 	bl	80023a0 <memset>
  htim2.Instance = TIM2;
 8001e66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 8000-1;
 8001e6a:	e886 0208 	stmia.w	r6, {r3, r9}
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001e6e:	4630      	mov	r0, r6
  htim2.Init.Period = 4294967295;
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e74:	60f3      	str	r3, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e76:	60b4      	str	r4, [r6, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e78:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7a:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001e7c:	f7ff f932 	bl	80010e4 <HAL_TIM_IC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e80:	a905      	add	r1, sp, #20
 8001e82:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e84:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e86:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e88:	f7ff fb53 	bl	8001532 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e8c:	4622      	mov	r2, r4
 8001e8e:	a907      	add	r1, sp, #28
 8001e90:	4630      	mov	r0, r6
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e92:	9407      	str	r4, [sp, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e94:	f8cd 8020 	str.w	r8, [sp, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e98:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8001e9a:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e9c:	f7ff fa2a 	bl	80012f4 <HAL_TIM_IC_ConfigChannel>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	a907      	add	r1, sp, #28
 8001ea4:	4630      	mov	r0, r6
 8001ea6:	f7ff fa25 	bl	80012f4 <HAL_TIM_IC_ConfigChannel>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001eaa:	4621      	mov	r1, r4
 8001eac:	4630      	mov	r0, r6
 8001eae:	f7ff fb0f 	bl	80014d0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	4630      	mov	r0, r6
 8001eb6:	f7ff fb0b 	bl	80014d0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001eba:	4621      	mov	r1, r4
 8001ebc:	4628      	mov	r0, r5
 8001ebe:	f7ff faaf 	bl	8001420 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001ec2:	2104      	movs	r1, #4
 8001ec4:	4628      	mov	r0, r5
 8001ec6:	f7ff faab 	bl	8001420 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start_IT(&htim4,TIM_CHANNEL_1);
 8001eca:	4621      	mov	r1, r4
 8001ecc:	4638      	mov	r0, r7
 8001ece:	f7ff fafd 	bl	80014cc <HAL_TIM_OC_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 8001ed2:	682b      	ldr	r3, [r5, #0]
 8001ed4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ed8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
 8001eda:	639a      	str	r2, [r3, #56]	; 0x38
    	printWelcomeMessage();
 8001edc:	f7ff fdc8 	bl	8001a70 <printWelcomeMessage>
    		opt = readUserInput();
 8001ee0:	f7ff fdf0 	bl	8001ac4 <readUserInput>
 8001ee4:	4604      	mov	r4, r0
    		processUserInput(opt);
 8001ee6:	f7ff fe07 	bl	8001af8 <processUserInput>
    		if(opt == 3)
 8001eea:	2c03      	cmp	r4, #3
 8001eec:	d1f8      	bne.n	8001ee0 <main+0x210>
 8001eee:	e7f5      	b.n	8001edc <main+0x20c>
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	2000028c 	.word	0x2000028c
 8001efc:	2000024c 	.word	0x2000024c
 8001f00:	40020800 	.word	0x40020800
 8001f04:	10210000 	.word	0x10210000
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	40000800 	.word	0x40000800
 8001f10:	2000030c 	.word	0x2000030c
 8001f14:	40004400 	.word	0x40004400
 8001f18:	200002cc 	.word	0x200002cc

08001f1c <pid_controller_wheels>:

	int32_t output_pwm = 0;
	uint32_t return_pwm = 0;


	if (wheel_id == 1)
 8001f1c:	2a01      	cmp	r2, #1
{
 8001f1e:	b510      	push	{r4, lr}
	if (wheel_id == 1)
 8001f20:	d11c      	bne.n	8001f5c <pid_controller_wheels+0x40>
	{
		error1 = desired_point - current_point;
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <pid_controller_wheels+0x58>)
 8001f24:	1a09      	subs	r1, r1, r0
 8001f26:	6019      	str	r1, [r3, #0]
		output_pwm = (Kp*error1) + (Ki*integrated_error1);
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <pid_controller_wheels+0x5c>)

	}
	else if (wheel_id == 2)
	{
		error2 = desired_point - current_point;
		output_pwm = (Kp*error2) + (Ki*integrated_error2);
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	f06f 0001 	mvn.w	r0, #1
 8001f30:	f06f 0409 	mvn.w	r4, #9
 8001f34:	4350      	muls	r0, r2
 8001f36:	fb04 0001 	mla	r0, r4, r1, r0

		if ((abs(integrated_error2)<200) || ((error2*integrated_error2)<=0)) // anti winding
 8001f3a:	f102 04c7 	add.w	r4, r2, #199	; 0xc7
 8001f3e:	f5b4 7fc7 	cmp.w	r4, #398	; 0x18e
 8001f42:	d903      	bls.n	8001f4c <pid_controller_wheels+0x30>
 8001f44:	fb02 f401 	mul.w	r4, r2, r1
 8001f48:	2c00      	cmp	r4, #0
 8001f4a:	dc01      	bgt.n	8001f50 <pid_controller_wheels+0x34>
		{
			integrated_error2 += error2;
 8001f4c:	4411      	add	r1, r2
 8001f4e:	6019      	str	r1, [r3, #0]
		}
	}

	if (output_pwm < 0)
 8001f50:	2800      	cmp	r0, #0
 8001f52:	db0a      	blt.n	8001f6a <pid_controller_wheels+0x4e>
	{
		return_pwm = 0;
	}
	else if (output_pwm > 400)
 8001f54:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8001f58:	dc09      	bgt.n	8001f6e <pid_controller_wheels+0x52>
 8001f5a:	bd10      	pop	{r4, pc}
	else if (wheel_id == 2)
 8001f5c:	2a02      	cmp	r2, #2
 8001f5e:	d104      	bne.n	8001f6a <pid_controller_wheels+0x4e>
		error2 = desired_point - current_point;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <pid_controller_wheels+0x60>)
 8001f62:	1a09      	subs	r1, r1, r0
 8001f64:	6019      	str	r1, [r3, #0]
		output_pwm = (Kp*error2) + (Ki*integrated_error2);
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <pid_controller_wheels+0x64>)
 8001f68:	e7df      	b.n	8001f2a <pid_controller_wheels+0xe>
		return_pwm = 0;
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	bd10      	pop	{r4, pc}
	{
		return_pwm = 400;
 8001f6e:	f44f 70c8 	mov.w	r0, #400	; 0x190
	{
		return_pwm = (uint32_t) output_pwm;
	}

	return return_pwm;
}
 8001f72:	bd10      	pop	{r4, pc}
 8001f74:	20000200 	.word	0x20000200
 8001f78:	2000021c 	.word	0x2000021c
 8001f7c:	20000204 	.word	0x20000204
 8001f80:	20000220 	.word	0x20000220

08001f84 <HAL_TIM_OC_DelayElapsedCallback>:
	if ((htim->Instance == TIM4) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) && give_command == 1)
 8001f84:	6802      	ldr	r2, [r0, #0]
 8001f86:	4b25      	ldr	r3, [pc, #148]	; (800201c <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8001f88:	429a      	cmp	r2, r3
{
 8001f8a:	b570      	push	{r4, r5, r6, lr}
	if ((htim->Instance == TIM4) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) && give_command == 1)
 8001f8c:	d145      	bne.n	800201a <HAL_TIM_OC_DelayElapsedCallback+0x96>
 8001f8e:	7f03      	ldrb	r3, [r0, #28]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d142      	bne.n	800201a <HAL_TIM_OC_DelayElapsedCallback+0x96>
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001f96:	681e      	ldr	r6, [r3, #0]
 8001f98:	2e01      	cmp	r6, #1
 8001f9a:	d13e      	bne.n	800201a <HAL_TIM_OC_DelayElapsedCallback+0x96>
		HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8001f9c:	2120      	movs	r1, #32
 8001f9e:	4821      	ldr	r0, [pc, #132]	; (8002024 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
		n_pulse2 = input_capture2 - input_capture_prev2;
 8001fa0:	4d21      	ldr	r5, [pc, #132]	; (8002028 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
		returned_pwm1 = pid_controller_wheels(n_pulse1, n_pulse_set1, 1);
 8001fa2:	4c22      	ldr	r4, [pc, #136]	; (800202c <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
		HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8001fa4:	f7fe fc91 	bl	80008ca <HAL_GPIO_TogglePin>
		n_pulse1 = input_capture1 - input_capture_prev1;
 8001fa8:	4b21      	ldr	r3, [pc, #132]	; (8002030 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8001faa:	4922      	ldr	r1, [pc, #136]	; (8002034 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4b22      	ldr	r3, [pc, #136]	; (8002038 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8001fb0:	6818      	ldr	r0, [r3, #0]
		input_capture_prev1 = input_capture1;
 8001fb2:	601a      	str	r2, [r3, #0]
		n_pulse1 = input_capture1 - input_capture_prev1;
 8001fb4:	1a10      	subs	r0, r2, r0
		n_pulse2 = input_capture2 - input_capture_prev2;
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8001fb8:	4a21      	ldr	r2, [pc, #132]	; (8002040 <HAL_TIM_OC_DelayElapsedCallback+0xbc>)
		n_pulse1 = input_capture1 - input_capture_prev1;
 8001fba:	6008      	str	r0, [r1, #0]
		n_pulse2 = input_capture2 - input_capture_prev2;
 8001fbc:	6819      	ldr	r1, [r3, #0]
 8001fbe:	6813      	ldr	r3, [r2, #0]
		input_capture_prev2 = input_capture2;
 8001fc0:	6011      	str	r1, [r2, #0]
		n_pulse2 = input_capture2 - input_capture_prev2;
 8001fc2:	1acb      	subs	r3, r1, r3
 8001fc4:	602b      	str	r3, [r5, #0]
		returned_pwm1 = pid_controller_wheels(n_pulse1, n_pulse_set1, 1);
 8001fc6:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <HAL_TIM_OC_DelayElapsedCallback+0xc0>)
 8001fc8:	4632      	mov	r2, r6
 8001fca:	6819      	ldr	r1, [r3, #0]
 8001fcc:	f7ff ffa6 	bl	8001f1c <pid_controller_wheels>
		returned_pwm2 = pid_controller_wheels(n_pulse2, n_pulse_set2, 2);
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_TIM_OC_DelayElapsedCallback+0xc4>)
		returned_pwm1 = pid_controller_wheels(n_pulse1, n_pulse_set1, 1);
 8001fd2:	6020      	str	r0, [r4, #0]
		returned_pwm2 = pid_controller_wheels(n_pulse2, n_pulse_set2, 2);
 8001fd4:	6819      	ldr	r1, [r3, #0]
 8001fd6:	6828      	ldr	r0, [r5, #0]
 8001fd8:	4d1c      	ldr	r5, [pc, #112]	; (800204c <HAL_TIM_OC_DelayElapsedCallback+0xc8>)
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f7ff ff9e 	bl	8001f1c <pid_controller_wheels>
		if (wheel_dir1 == 1) // Pin C7
 8001fe0:	4a1b      	ldr	r2, [pc, #108]	; (8002050 <HAL_TIM_OC_DelayElapsedCallback+0xcc>)
		returned_pwm2 = pid_controller_wheels(n_pulse2, n_pulse_set2, 2);
 8001fe2:	6028      	str	r0, [r5, #0]
		if (wheel_dir1 == 1) // Pin C7
 8001fe4:	6812      	ldr	r2, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 8001fe6:	481b      	ldr	r0, [pc, #108]	; (8002054 <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
		if (wheel_dir1 == 1) // Pin C7
 8001fe8:	2a01      	cmp	r2, #1
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
 8001fea:	bf0c      	ite	eq
 8001fec:	2200      	moveq	r2, #0
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 8001fee:	4632      	movne	r2, r6
 8001ff0:	2180      	movs	r1, #128	; 0x80
 8001ff2:	f7fe fc65 	bl	80008c0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, returned_pwm1);
 8001ff6:	4b18      	ldr	r3, [pc, #96]	; (8002058 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
 8001ff8:	6821      	ldr	r1, [r4, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8001ffc:	4809      	ldr	r0, [pc, #36]	; (8002024 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, returned_pwm1);
 8001ffe:	6351      	str	r1, [r2, #52]	; 0x34
		if (wheel_dir2 == 1) // Pin A9
 8002000:	4a16      	ldr	r2, [pc, #88]	; (800205c <HAL_TIM_OC_DelayElapsedCallback+0xd8>)
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	461c      	mov	r4, r3
 8002006:	2a01      	cmp	r2, #1
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8002008:	bf18      	it	ne
 800200a:	2200      	movne	r2, #0
 800200c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002010:	f7fe fc56 	bl	80008c0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, returned_pwm2);
 8002014:	6823      	ldr	r3, [r4, #0]
 8002016:	682a      	ldr	r2, [r5, #0]
 8002018:	639a      	str	r2, [r3, #56]	; 0x38
 800201a:	bd70      	pop	{r4, r5, r6, pc}
 800201c:	40000800 	.word	0x40000800
 8002020:	20000208 	.word	0x20000208
 8002024:	40020000 	.word	0x40020000
 8002028:	20000228 	.word	0x20000228
 800202c:	20000234 	.word	0x20000234
 8002030:	2000020c 	.word	0x2000020c
 8002034:	20000224 	.word	0x20000224
 8002038:	20000214 	.word	0x20000214
 800203c:	20000210 	.word	0x20000210
 8002040:	20000218 	.word	0x20000218
 8002044:	2000022c 	.word	0x2000022c
 8002048:	20000230 	.word	0x20000230
 800204c:	20000238 	.word	0x20000238
 8002050:	20000008 	.word	0x20000008
 8002054:	40020800 	.word	0x40020800
 8002058:	2000028c 	.word	0x2000028c
 800205c:	2000000c 	.word	0x2000000c

08002060 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002060:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_MspInit+0x3c>)
 8002064:	2100      	movs	r1, #0
 8002066:	9100      	str	r1, [sp, #0]
 8002068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800206a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800206e:	645a      	str	r2, [r3, #68]	; 0x44
 8002070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002072:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002076:	9200      	str	r2, [sp, #0]
 8002078:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800207a:	9101      	str	r1, [sp, #4]
 800207c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800207e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002082:	641a      	str	r2, [r3, #64]	; 0x40
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800208c:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800208e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002090:	f7fe fad6 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002094:	b003      	add	sp, #12
 8002096:	f85d fb04 	ldr.w	pc, [sp], #4
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800

080020a0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80020a0:	b510      	push	{r4, lr}
 80020a2:	4604      	mov	r4, r0
 80020a4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a6:	2214      	movs	r2, #20
 80020a8:	2100      	movs	r1, #0
 80020aa:	a803      	add	r0, sp, #12
 80020ac:	f000 f978 	bl	80023a0 <memset>
  if(htim_ic->Instance==TIM2)
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020b6:	d128      	bne.n	800210a <HAL_TIM_IC_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020b8:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80020bc:	2400      	movs	r4, #0
 80020be:	9401      	str	r4, [sp, #4]
 80020c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	4813      	ldr	r0, [pc, #76]	; (8002110 <HAL_TIM_IC_MspInit+0x70>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020c4:	f042 0201 	orr.w	r2, r2, #1
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
 80020ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020cc:	f002 0201 	and.w	r2, r2, #1
 80020d0:	9201      	str	r2, [sp, #4]
 80020d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d4:	9402      	str	r4, [sp, #8]
 80020d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d8:	f042 0201 	orr.w	r2, r2, #1
 80020dc:	631a      	str	r2, [r3, #48]	; 0x30
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	9302      	str	r3, [sp, #8]
 80020e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020e8:	2303      	movs	r3, #3
 80020ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020f2:	2301      	movs	r3, #1
 80020f4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	f7fe fb0d 	bl	8000714 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020fa:	201c      	movs	r0, #28
 80020fc:	4622      	mov	r2, r4
 80020fe:	4621      	mov	r1, r4
 8002100:	f7fe fab0 	bl	8000664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002104:	201c      	movs	r0, #28
 8002106:	f7fe fae1 	bl	80006cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800210a:	b008      	add	sp, #32
 800210c:	bd10      	pop	{r4, pc}
 800210e:	bf00      	nop
 8002110:	40020000 	.word	0x40020000

08002114 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8002114:	6802      	ldr	r2, [r0, #0]
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_TIM_PWM_MspInit+0x28>)
 8002118:	429a      	cmp	r2, r3
{
 800211a:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 800211c:	d10b      	bne.n	8002136 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <HAL_TIM_PWM_MspInit+0x2c>)
 8002124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002126:	f042 0202 	orr.w	r2, r2, #2
 800212a:	641a      	str	r2, [r3, #64]	; 0x40
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002136:	b002      	add	sp, #8
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40000400 	.word	0x40000400
 8002140:	40023800 	.word	0x40023800

08002144 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002144:	b507      	push	{r0, r1, r2, lr}
  if(htim_oc->Instance==TIM4)
 8002146:	4b0d      	ldr	r3, [pc, #52]	; (800217c <HAL_TIM_OC_MspInit+0x38>)
 8002148:	6802      	ldr	r2, [r0, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d113      	bne.n	8002176 <HAL_TIM_OC_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800214e:	2200      	movs	r2, #0
 8002150:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8002154:	9201      	str	r2, [sp, #4]
 8002156:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002158:	f041 0104 	orr.w	r1, r1, #4
 800215c:	6419      	str	r1, [r3, #64]	; 0x40
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	9301      	str	r3, [sp, #4]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002166:	201e      	movs	r0, #30
 8002168:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 800216a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800216c:	f7fe fa7a 	bl	8000664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002170:	201e      	movs	r0, #30
 8002172:	f7fe faab 	bl	80006cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002176:	b003      	add	sp, #12
 8002178:	f85d fb04 	ldr.w	pc, [sp], #4
 800217c:	40000800 	.word	0x40000800

08002180 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002180:	b510      	push	{r4, lr}
 8002182:	4604      	mov	r4, r0
 8002184:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002186:	2214      	movs	r2, #20
 8002188:	2100      	movs	r1, #0
 800218a:	a801      	add	r0, sp, #4
 800218c:	f000 f908 	bl	80023a0 <memset>
  if(htim->Instance==TIM3)
 8002190:	6822      	ldr	r2, [r4, #0]
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <HAL_TIM_MspPostInit+0x48>)
 8002194:	429a      	cmp	r2, r3
 8002196:	d114      	bne.n	80021c2 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002198:	2300      	movs	r3, #0
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219e:	480c      	ldr	r0, [pc, #48]	; (80021d0 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021a2:	f042 0201 	orr.w	r2, r2, #1
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021b2:	23c0      	movs	r3, #192	; 0xc0
 80021b4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021bc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021be:	f7fe faa9 	bl	8000714 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021c2:	b006      	add	sp, #24
 80021c4:	bd10      	pop	{r4, pc}
 80021c6:	bf00      	nop
 80021c8:	40000400 	.word	0x40000400
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40020000 	.word	0x40020000

080021d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021d4:	b510      	push	{r4, lr}
 80021d6:	4604      	mov	r4, r0
 80021d8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021da:	2214      	movs	r2, #20
 80021dc:	2100      	movs	r1, #0
 80021de:	a803      	add	r0, sp, #12
 80021e0:	f000 f8de 	bl	80023a0 <memset>
  if(huart->Instance==USART2)
 80021e4:	6822      	ldr	r2, [r4, #0]
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <HAL_UART_MspInit+0x68>)
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d124      	bne.n	8002236 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ec:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80021f0:	2100      	movs	r1, #0
 80021f2:	9101      	str	r1, [sp, #4]
 80021f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	4812      	ldr	r0, [pc, #72]	; (8002240 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80021f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40
 80021fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002200:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002204:	9201      	str	r2, [sp, #4]
 8002206:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002208:	9102      	str	r1, [sp, #8]
 800220a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800220c:	f042 0201 	orr.w	r2, r2, #1
 8002210:	631a      	str	r2, [r3, #48]	; 0x30
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	9302      	str	r3, [sp, #8]
 800221a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800221c:	230c      	movs	r3, #12
 800221e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002224:	2301      	movs	r3, #1
 8002226:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002228:	2303      	movs	r3, #3
 800222a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800222e:	2307      	movs	r3, #7
 8002230:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f7fe fa6f 	bl	8000714 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002236:	b008      	add	sp, #32
 8002238:	bd10      	pop	{r4, pc}
 800223a:	bf00      	nop
 800223c:	40004400 	.word	0x40004400
 8002240:	40020000 	.word	0x40020000

08002244 <NMI_Handler>:
 8002244:	4770      	bx	lr

08002246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002246:	e7fe      	b.n	8002246 <HardFault_Handler>

08002248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002248:	e7fe      	b.n	8002248 <MemManage_Handler>

0800224a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800224a:	e7fe      	b.n	800224a <BusFault_Handler>

0800224c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800224c:	e7fe      	b.n	800224c <UsageFault_Handler>

0800224e <SVC_Handler>:
 800224e:	4770      	bx	lr

08002250 <DebugMon_Handler>:
 8002250:	4770      	bx	lr

08002252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002252:	4770      	bx	lr

08002254 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002254:	f7fe b9e2 	b.w	800061c <HAL_IncTick>

08002258 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002258:	4801      	ldr	r0, [pc, #4]	; (8002260 <TIM2_IRQHandler+0x8>)
 800225a:	f7fe be1e 	b.w	8000e9a <HAL_TIM_IRQHandler>
 800225e:	bf00      	nop
 8002260:	200002cc 	.word	0x200002cc

08002264 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002264:	4801      	ldr	r0, [pc, #4]	; (800226c <TIM4_IRQHandler+0x8>)
 8002266:	f7fe be18 	b.w	8000e9a <HAL_TIM_IRQHandler>
 800226a:	bf00      	nop
 800226c:	2000024c 	.word	0x2000024c

08002270 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002270:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <_sbrk+0x2c>)
 8002274:	6819      	ldr	r1, [r3, #0]
{
 8002276:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002278:	b909      	cbnz	r1, 800227e <_sbrk+0xe>
		heap_end = &end;
 800227a:	4909      	ldr	r1, [pc, #36]	; (80022a0 <_sbrk+0x30>)
 800227c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800227e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002280:	4669      	mov	r1, sp
 8002282:	4402      	add	r2, r0
 8002284:	428a      	cmp	r2, r1
 8002286:	d906      	bls.n	8002296 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002288:	f000 f860 	bl	800234c <__errno>
 800228c:	230c      	movs	r3, #12
 800228e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002294:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002296:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002298:	bd08      	pop	{r3, pc}
 800229a:	bf00      	nop
 800229c:	2000023c 	.word	0x2000023c
 80022a0:	20000350 	.word	0x20000350

080022a4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022a4:	490f      	ldr	r1, [pc, #60]	; (80022e4 <SystemInit+0x40>)
 80022a6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80022aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <SystemInit+0x44>)
 80022b4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022b6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80022b8:	f042 0201 	orr.w	r2, r2, #1
 80022bc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80022be:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80022c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022ca:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80022cc:	4a07      	ldr	r2, [pc, #28]	; (80022ec <SystemInit+0x48>)
 80022ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022d6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80022d8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022de:	608b      	str	r3, [r1, #8]
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00
 80022e8:	40023800 	.word	0x40023800
 80022ec:	24003010 	.word	0x24003010

080022f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002328 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022f6:	e003      	b.n	8002300 <LoopCopyDataInit>

080022f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022fe:	3104      	adds	r1, #4

08002300 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002300:	480b      	ldr	r0, [pc, #44]	; (8002330 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002304:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002306:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002308:	d3f6      	bcc.n	80022f8 <CopyDataInit>
  ldr  r2, =_sbss
 800230a:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800230c:	e002      	b.n	8002314 <LoopFillZerobss>

0800230e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800230e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002310:	f842 3b04 	str.w	r3, [r2], #4

08002314 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002316:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002318:	d3f9      	bcc.n	800230e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800231a:	f7ff ffc3 	bl	80022a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800231e:	f000 f81b 	bl	8002358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002322:	f7ff fcd5 	bl	8001cd0 <main>
  bx  lr    
 8002326:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002328:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800232c:	08003064 	.word	0x08003064
  ldr  r0, =_sdata
 8002330:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002334:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8002338:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 800233c:	20000350 	.word	0x20000350

08002340 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002340:	e7fe      	b.n	8002340 <ADC_IRQHandler>

08002342 <atoi>:
 8002342:	220a      	movs	r2, #10
 8002344:	2100      	movs	r1, #0
 8002346:	f000 b8d7 	b.w	80024f8 <strtol>
	...

0800234c <__errno>:
 800234c:	4b01      	ldr	r3, [pc, #4]	; (8002354 <__errno+0x8>)
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000014 	.word	0x20000014

08002358 <__libc_init_array>:
 8002358:	b570      	push	{r4, r5, r6, lr}
 800235a:	4e0d      	ldr	r6, [pc, #52]	; (8002390 <__libc_init_array+0x38>)
 800235c:	4c0d      	ldr	r4, [pc, #52]	; (8002394 <__libc_init_array+0x3c>)
 800235e:	1ba4      	subs	r4, r4, r6
 8002360:	10a4      	asrs	r4, r4, #2
 8002362:	2500      	movs	r5, #0
 8002364:	42a5      	cmp	r5, r4
 8002366:	d109      	bne.n	800237c <__libc_init_array+0x24>
 8002368:	4e0b      	ldr	r6, [pc, #44]	; (8002398 <__libc_init_array+0x40>)
 800236a:	4c0c      	ldr	r4, [pc, #48]	; (800239c <__libc_init_array+0x44>)
 800236c:	f000 fcf4 	bl	8002d58 <_init>
 8002370:	1ba4      	subs	r4, r4, r6
 8002372:	10a4      	asrs	r4, r4, #2
 8002374:	2500      	movs	r5, #0
 8002376:	42a5      	cmp	r5, r4
 8002378:	d105      	bne.n	8002386 <__libc_init_array+0x2e>
 800237a:	bd70      	pop	{r4, r5, r6, pc}
 800237c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002380:	4798      	blx	r3
 8002382:	3501      	adds	r5, #1
 8002384:	e7ee      	b.n	8002364 <__libc_init_array+0xc>
 8002386:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800238a:	4798      	blx	r3
 800238c:	3501      	adds	r5, #1
 800238e:	e7f2      	b.n	8002376 <__libc_init_array+0x1e>
 8002390:	0800305c 	.word	0x0800305c
 8002394:	0800305c 	.word	0x0800305c
 8002398:	0800305c 	.word	0x0800305c
 800239c:	08003060 	.word	0x08003060

080023a0 <memset>:
 80023a0:	4402      	add	r2, r0
 80023a2:	4603      	mov	r3, r0
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d100      	bne.n	80023aa <memset+0xa>
 80023a8:	4770      	bx	lr
 80023aa:	f803 1b01 	strb.w	r1, [r3], #1
 80023ae:	e7f9      	b.n	80023a4 <memset+0x4>

080023b0 <siprintf>:
 80023b0:	b40e      	push	{r1, r2, r3}
 80023b2:	b500      	push	{lr}
 80023b4:	b09c      	sub	sp, #112	; 0x70
 80023b6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80023ba:	ab1d      	add	r3, sp, #116	; 0x74
 80023bc:	f8ad 1014 	strh.w	r1, [sp, #20]
 80023c0:	9002      	str	r0, [sp, #8]
 80023c2:	9006      	str	r0, [sp, #24]
 80023c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80023c8:	480a      	ldr	r0, [pc, #40]	; (80023f4 <siprintf+0x44>)
 80023ca:	9104      	str	r1, [sp, #16]
 80023cc:	9107      	str	r1, [sp, #28]
 80023ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80023d6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80023da:	6800      	ldr	r0, [r0, #0]
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	a902      	add	r1, sp, #8
 80023e0:	f000 f910 	bl	8002604 <_svfiprintf_r>
 80023e4:	9b02      	ldr	r3, [sp, #8]
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
 80023ea:	b01c      	add	sp, #112	; 0x70
 80023ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80023f0:	b003      	add	sp, #12
 80023f2:	4770      	bx	lr
 80023f4:	20000014 	.word	0x20000014

080023f8 <_strtol_l.isra.0>:
 80023f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023fc:	4680      	mov	r8, r0
 80023fe:	4689      	mov	r9, r1
 8002400:	4692      	mov	sl, r2
 8002402:	461f      	mov	r7, r3
 8002404:	468b      	mov	fp, r1
 8002406:	465d      	mov	r5, fp
 8002408:	980a      	ldr	r0, [sp, #40]	; 0x28
 800240a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800240e:	f000 f889 	bl	8002524 <__locale_ctype_ptr_l>
 8002412:	4420      	add	r0, r4
 8002414:	7846      	ldrb	r6, [r0, #1]
 8002416:	f016 0608 	ands.w	r6, r6, #8
 800241a:	d10b      	bne.n	8002434 <_strtol_l.isra.0+0x3c>
 800241c:	2c2d      	cmp	r4, #45	; 0x2d
 800241e:	d10b      	bne.n	8002438 <_strtol_l.isra.0+0x40>
 8002420:	782c      	ldrb	r4, [r5, #0]
 8002422:	2601      	movs	r6, #1
 8002424:	f10b 0502 	add.w	r5, fp, #2
 8002428:	b167      	cbz	r7, 8002444 <_strtol_l.isra.0+0x4c>
 800242a:	2f10      	cmp	r7, #16
 800242c:	d114      	bne.n	8002458 <_strtol_l.isra.0+0x60>
 800242e:	2c30      	cmp	r4, #48	; 0x30
 8002430:	d00a      	beq.n	8002448 <_strtol_l.isra.0+0x50>
 8002432:	e011      	b.n	8002458 <_strtol_l.isra.0+0x60>
 8002434:	46ab      	mov	fp, r5
 8002436:	e7e6      	b.n	8002406 <_strtol_l.isra.0+0xe>
 8002438:	2c2b      	cmp	r4, #43	; 0x2b
 800243a:	bf04      	itt	eq
 800243c:	782c      	ldrbeq	r4, [r5, #0]
 800243e:	f10b 0502 	addeq.w	r5, fp, #2
 8002442:	e7f1      	b.n	8002428 <_strtol_l.isra.0+0x30>
 8002444:	2c30      	cmp	r4, #48	; 0x30
 8002446:	d127      	bne.n	8002498 <_strtol_l.isra.0+0xa0>
 8002448:	782b      	ldrb	r3, [r5, #0]
 800244a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800244e:	2b58      	cmp	r3, #88	; 0x58
 8002450:	d14b      	bne.n	80024ea <_strtol_l.isra.0+0xf2>
 8002452:	786c      	ldrb	r4, [r5, #1]
 8002454:	2710      	movs	r7, #16
 8002456:	3502      	adds	r5, #2
 8002458:	2e00      	cmp	r6, #0
 800245a:	bf0c      	ite	eq
 800245c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002460:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002464:	2200      	movs	r2, #0
 8002466:	fbb1 fef7 	udiv	lr, r1, r7
 800246a:	4610      	mov	r0, r2
 800246c:	fb07 1c1e 	mls	ip, r7, lr, r1
 8002470:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002474:	2b09      	cmp	r3, #9
 8002476:	d811      	bhi.n	800249c <_strtol_l.isra.0+0xa4>
 8002478:	461c      	mov	r4, r3
 800247a:	42a7      	cmp	r7, r4
 800247c:	dd1d      	ble.n	80024ba <_strtol_l.isra.0+0xc2>
 800247e:	1c53      	adds	r3, r2, #1
 8002480:	d007      	beq.n	8002492 <_strtol_l.isra.0+0x9a>
 8002482:	4586      	cmp	lr, r0
 8002484:	d316      	bcc.n	80024b4 <_strtol_l.isra.0+0xbc>
 8002486:	d101      	bne.n	800248c <_strtol_l.isra.0+0x94>
 8002488:	45a4      	cmp	ip, r4
 800248a:	db13      	blt.n	80024b4 <_strtol_l.isra.0+0xbc>
 800248c:	fb00 4007 	mla	r0, r0, r7, r4
 8002490:	2201      	movs	r2, #1
 8002492:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002496:	e7eb      	b.n	8002470 <_strtol_l.isra.0+0x78>
 8002498:	270a      	movs	r7, #10
 800249a:	e7dd      	b.n	8002458 <_strtol_l.isra.0+0x60>
 800249c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80024a0:	2b19      	cmp	r3, #25
 80024a2:	d801      	bhi.n	80024a8 <_strtol_l.isra.0+0xb0>
 80024a4:	3c37      	subs	r4, #55	; 0x37
 80024a6:	e7e8      	b.n	800247a <_strtol_l.isra.0+0x82>
 80024a8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80024ac:	2b19      	cmp	r3, #25
 80024ae:	d804      	bhi.n	80024ba <_strtol_l.isra.0+0xc2>
 80024b0:	3c57      	subs	r4, #87	; 0x57
 80024b2:	e7e2      	b.n	800247a <_strtol_l.isra.0+0x82>
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024b8:	e7eb      	b.n	8002492 <_strtol_l.isra.0+0x9a>
 80024ba:	1c53      	adds	r3, r2, #1
 80024bc:	d108      	bne.n	80024d0 <_strtol_l.isra.0+0xd8>
 80024be:	2322      	movs	r3, #34	; 0x22
 80024c0:	f8c8 3000 	str.w	r3, [r8]
 80024c4:	4608      	mov	r0, r1
 80024c6:	f1ba 0f00 	cmp.w	sl, #0
 80024ca:	d107      	bne.n	80024dc <_strtol_l.isra.0+0xe4>
 80024cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024d0:	b106      	cbz	r6, 80024d4 <_strtol_l.isra.0+0xdc>
 80024d2:	4240      	negs	r0, r0
 80024d4:	f1ba 0f00 	cmp.w	sl, #0
 80024d8:	d00c      	beq.n	80024f4 <_strtol_l.isra.0+0xfc>
 80024da:	b122      	cbz	r2, 80024e6 <_strtol_l.isra.0+0xee>
 80024dc:	3d01      	subs	r5, #1
 80024de:	f8ca 5000 	str.w	r5, [sl]
 80024e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024e6:	464d      	mov	r5, r9
 80024e8:	e7f9      	b.n	80024de <_strtol_l.isra.0+0xe6>
 80024ea:	2430      	movs	r4, #48	; 0x30
 80024ec:	2f00      	cmp	r7, #0
 80024ee:	d1b3      	bne.n	8002458 <_strtol_l.isra.0+0x60>
 80024f0:	2708      	movs	r7, #8
 80024f2:	e7b1      	b.n	8002458 <_strtol_l.isra.0+0x60>
 80024f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080024f8 <strtol>:
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <strtol+0x24>)
 80024fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024fc:	681c      	ldr	r4, [r3, #0]
 80024fe:	4d08      	ldr	r5, [pc, #32]	; (8002520 <strtol+0x28>)
 8002500:	6a23      	ldr	r3, [r4, #32]
 8002502:	2b00      	cmp	r3, #0
 8002504:	bf08      	it	eq
 8002506:	462b      	moveq	r3, r5
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	4613      	mov	r3, r2
 800250c:	460a      	mov	r2, r1
 800250e:	4601      	mov	r1, r0
 8002510:	4620      	mov	r0, r4
 8002512:	f7ff ff71 	bl	80023f8 <_strtol_l.isra.0>
 8002516:	b003      	add	sp, #12
 8002518:	bd30      	pop	{r4, r5, pc}
 800251a:	bf00      	nop
 800251c:	20000014 	.word	0x20000014
 8002520:	20000078 	.word	0x20000078

08002524 <__locale_ctype_ptr_l>:
 8002524:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8002528:	4770      	bx	lr

0800252a <__ascii_mbtowc>:
 800252a:	b082      	sub	sp, #8
 800252c:	b901      	cbnz	r1, 8002530 <__ascii_mbtowc+0x6>
 800252e:	a901      	add	r1, sp, #4
 8002530:	b142      	cbz	r2, 8002544 <__ascii_mbtowc+0x1a>
 8002532:	b14b      	cbz	r3, 8002548 <__ascii_mbtowc+0x1e>
 8002534:	7813      	ldrb	r3, [r2, #0]
 8002536:	600b      	str	r3, [r1, #0]
 8002538:	7812      	ldrb	r2, [r2, #0]
 800253a:	1c10      	adds	r0, r2, #0
 800253c:	bf18      	it	ne
 800253e:	2001      	movne	r0, #1
 8002540:	b002      	add	sp, #8
 8002542:	4770      	bx	lr
 8002544:	4610      	mov	r0, r2
 8002546:	e7fb      	b.n	8002540 <__ascii_mbtowc+0x16>
 8002548:	f06f 0001 	mvn.w	r0, #1
 800254c:	e7f8      	b.n	8002540 <__ascii_mbtowc+0x16>

0800254e <__ssputs_r>:
 800254e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002552:	688e      	ldr	r6, [r1, #8]
 8002554:	429e      	cmp	r6, r3
 8002556:	4682      	mov	sl, r0
 8002558:	460c      	mov	r4, r1
 800255a:	4691      	mov	r9, r2
 800255c:	4698      	mov	r8, r3
 800255e:	d835      	bhi.n	80025cc <__ssputs_r+0x7e>
 8002560:	898a      	ldrh	r2, [r1, #12]
 8002562:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002566:	d031      	beq.n	80025cc <__ssputs_r+0x7e>
 8002568:	6825      	ldr	r5, [r4, #0]
 800256a:	6909      	ldr	r1, [r1, #16]
 800256c:	1a6f      	subs	r7, r5, r1
 800256e:	6965      	ldr	r5, [r4, #20]
 8002570:	2302      	movs	r3, #2
 8002572:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002576:	fb95 f5f3 	sdiv	r5, r5, r3
 800257a:	f108 0301 	add.w	r3, r8, #1
 800257e:	443b      	add	r3, r7
 8002580:	429d      	cmp	r5, r3
 8002582:	bf38      	it	cc
 8002584:	461d      	movcc	r5, r3
 8002586:	0553      	lsls	r3, r2, #21
 8002588:	d531      	bpl.n	80025ee <__ssputs_r+0xa0>
 800258a:	4629      	mov	r1, r5
 800258c:	f000 fb44 	bl	8002c18 <_malloc_r>
 8002590:	4606      	mov	r6, r0
 8002592:	b950      	cbnz	r0, 80025aa <__ssputs_r+0x5c>
 8002594:	230c      	movs	r3, #12
 8002596:	f8ca 3000 	str.w	r3, [sl]
 800259a:	89a3      	ldrh	r3, [r4, #12]
 800259c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025a0:	81a3      	strh	r3, [r4, #12]
 80025a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025aa:	463a      	mov	r2, r7
 80025ac:	6921      	ldr	r1, [r4, #16]
 80025ae:	f000 fac0 	bl	8002b32 <memcpy>
 80025b2:	89a3      	ldrh	r3, [r4, #12]
 80025b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80025b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025bc:	81a3      	strh	r3, [r4, #12]
 80025be:	6126      	str	r6, [r4, #16]
 80025c0:	6165      	str	r5, [r4, #20]
 80025c2:	443e      	add	r6, r7
 80025c4:	1bed      	subs	r5, r5, r7
 80025c6:	6026      	str	r6, [r4, #0]
 80025c8:	60a5      	str	r5, [r4, #8]
 80025ca:	4646      	mov	r6, r8
 80025cc:	4546      	cmp	r6, r8
 80025ce:	bf28      	it	cs
 80025d0:	4646      	movcs	r6, r8
 80025d2:	4632      	mov	r2, r6
 80025d4:	4649      	mov	r1, r9
 80025d6:	6820      	ldr	r0, [r4, #0]
 80025d8:	f000 fab6 	bl	8002b48 <memmove>
 80025dc:	68a3      	ldr	r3, [r4, #8]
 80025de:	1b9b      	subs	r3, r3, r6
 80025e0:	60a3      	str	r3, [r4, #8]
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	441e      	add	r6, r3
 80025e6:	6026      	str	r6, [r4, #0]
 80025e8:	2000      	movs	r0, #0
 80025ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025ee:	462a      	mov	r2, r5
 80025f0:	f000 fb70 	bl	8002cd4 <_realloc_r>
 80025f4:	4606      	mov	r6, r0
 80025f6:	2800      	cmp	r0, #0
 80025f8:	d1e1      	bne.n	80025be <__ssputs_r+0x70>
 80025fa:	6921      	ldr	r1, [r4, #16]
 80025fc:	4650      	mov	r0, sl
 80025fe:	f000 fabd 	bl	8002b7c <_free_r>
 8002602:	e7c7      	b.n	8002594 <__ssputs_r+0x46>

08002604 <_svfiprintf_r>:
 8002604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002608:	b09d      	sub	sp, #116	; 0x74
 800260a:	4680      	mov	r8, r0
 800260c:	9303      	str	r3, [sp, #12]
 800260e:	898b      	ldrh	r3, [r1, #12]
 8002610:	061c      	lsls	r4, r3, #24
 8002612:	460d      	mov	r5, r1
 8002614:	4616      	mov	r6, r2
 8002616:	d50f      	bpl.n	8002638 <_svfiprintf_r+0x34>
 8002618:	690b      	ldr	r3, [r1, #16]
 800261a:	b96b      	cbnz	r3, 8002638 <_svfiprintf_r+0x34>
 800261c:	2140      	movs	r1, #64	; 0x40
 800261e:	f000 fafb 	bl	8002c18 <_malloc_r>
 8002622:	6028      	str	r0, [r5, #0]
 8002624:	6128      	str	r0, [r5, #16]
 8002626:	b928      	cbnz	r0, 8002634 <_svfiprintf_r+0x30>
 8002628:	230c      	movs	r3, #12
 800262a:	f8c8 3000 	str.w	r3, [r8]
 800262e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002632:	e0c5      	b.n	80027c0 <_svfiprintf_r+0x1bc>
 8002634:	2340      	movs	r3, #64	; 0x40
 8002636:	616b      	str	r3, [r5, #20]
 8002638:	2300      	movs	r3, #0
 800263a:	9309      	str	r3, [sp, #36]	; 0x24
 800263c:	2320      	movs	r3, #32
 800263e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002642:	2330      	movs	r3, #48	; 0x30
 8002644:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002648:	f04f 0b01 	mov.w	fp, #1
 800264c:	4637      	mov	r7, r6
 800264e:	463c      	mov	r4, r7
 8002650:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d13c      	bne.n	80026d2 <_svfiprintf_r+0xce>
 8002658:	ebb7 0a06 	subs.w	sl, r7, r6
 800265c:	d00b      	beq.n	8002676 <_svfiprintf_r+0x72>
 800265e:	4653      	mov	r3, sl
 8002660:	4632      	mov	r2, r6
 8002662:	4629      	mov	r1, r5
 8002664:	4640      	mov	r0, r8
 8002666:	f7ff ff72 	bl	800254e <__ssputs_r>
 800266a:	3001      	adds	r0, #1
 800266c:	f000 80a3 	beq.w	80027b6 <_svfiprintf_r+0x1b2>
 8002670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002672:	4453      	add	r3, sl
 8002674:	9309      	str	r3, [sp, #36]	; 0x24
 8002676:	783b      	ldrb	r3, [r7, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 809c 	beq.w	80027b6 <_svfiprintf_r+0x1b2>
 800267e:	2300      	movs	r3, #0
 8002680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002684:	9304      	str	r3, [sp, #16]
 8002686:	9307      	str	r3, [sp, #28]
 8002688:	9205      	str	r2, [sp, #20]
 800268a:	9306      	str	r3, [sp, #24]
 800268c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002690:	931a      	str	r3, [sp, #104]	; 0x68
 8002692:	2205      	movs	r2, #5
 8002694:	7821      	ldrb	r1, [r4, #0]
 8002696:	4850      	ldr	r0, [pc, #320]	; (80027d8 <_svfiprintf_r+0x1d4>)
 8002698:	f7fd fdaa 	bl	80001f0 <memchr>
 800269c:	1c67      	adds	r7, r4, #1
 800269e:	9b04      	ldr	r3, [sp, #16]
 80026a0:	b9d8      	cbnz	r0, 80026da <_svfiprintf_r+0xd6>
 80026a2:	06d9      	lsls	r1, r3, #27
 80026a4:	bf44      	itt	mi
 80026a6:	2220      	movmi	r2, #32
 80026a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80026ac:	071a      	lsls	r2, r3, #28
 80026ae:	bf44      	itt	mi
 80026b0:	222b      	movmi	r2, #43	; 0x2b
 80026b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80026b6:	7822      	ldrb	r2, [r4, #0]
 80026b8:	2a2a      	cmp	r2, #42	; 0x2a
 80026ba:	d016      	beq.n	80026ea <_svfiprintf_r+0xe6>
 80026bc:	9a07      	ldr	r2, [sp, #28]
 80026be:	2100      	movs	r1, #0
 80026c0:	200a      	movs	r0, #10
 80026c2:	4627      	mov	r7, r4
 80026c4:	3401      	adds	r4, #1
 80026c6:	783b      	ldrb	r3, [r7, #0]
 80026c8:	3b30      	subs	r3, #48	; 0x30
 80026ca:	2b09      	cmp	r3, #9
 80026cc:	d951      	bls.n	8002772 <_svfiprintf_r+0x16e>
 80026ce:	b1c9      	cbz	r1, 8002704 <_svfiprintf_r+0x100>
 80026d0:	e011      	b.n	80026f6 <_svfiprintf_r+0xf2>
 80026d2:	2b25      	cmp	r3, #37	; 0x25
 80026d4:	d0c0      	beq.n	8002658 <_svfiprintf_r+0x54>
 80026d6:	4627      	mov	r7, r4
 80026d8:	e7b9      	b.n	800264e <_svfiprintf_r+0x4a>
 80026da:	4a3f      	ldr	r2, [pc, #252]	; (80027d8 <_svfiprintf_r+0x1d4>)
 80026dc:	1a80      	subs	r0, r0, r2
 80026de:	fa0b f000 	lsl.w	r0, fp, r0
 80026e2:	4318      	orrs	r0, r3
 80026e4:	9004      	str	r0, [sp, #16]
 80026e6:	463c      	mov	r4, r7
 80026e8:	e7d3      	b.n	8002692 <_svfiprintf_r+0x8e>
 80026ea:	9a03      	ldr	r2, [sp, #12]
 80026ec:	1d11      	adds	r1, r2, #4
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	9103      	str	r1, [sp, #12]
 80026f2:	2a00      	cmp	r2, #0
 80026f4:	db01      	blt.n	80026fa <_svfiprintf_r+0xf6>
 80026f6:	9207      	str	r2, [sp, #28]
 80026f8:	e004      	b.n	8002704 <_svfiprintf_r+0x100>
 80026fa:	4252      	negs	r2, r2
 80026fc:	f043 0302 	orr.w	r3, r3, #2
 8002700:	9207      	str	r2, [sp, #28]
 8002702:	9304      	str	r3, [sp, #16]
 8002704:	783b      	ldrb	r3, [r7, #0]
 8002706:	2b2e      	cmp	r3, #46	; 0x2e
 8002708:	d10e      	bne.n	8002728 <_svfiprintf_r+0x124>
 800270a:	787b      	ldrb	r3, [r7, #1]
 800270c:	2b2a      	cmp	r3, #42	; 0x2a
 800270e:	f107 0101 	add.w	r1, r7, #1
 8002712:	d132      	bne.n	800277a <_svfiprintf_r+0x176>
 8002714:	9b03      	ldr	r3, [sp, #12]
 8002716:	1d1a      	adds	r2, r3, #4
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	9203      	str	r2, [sp, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	bfb8      	it	lt
 8002720:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002724:	3702      	adds	r7, #2
 8002726:	9305      	str	r3, [sp, #20]
 8002728:	4c2c      	ldr	r4, [pc, #176]	; (80027dc <_svfiprintf_r+0x1d8>)
 800272a:	7839      	ldrb	r1, [r7, #0]
 800272c:	2203      	movs	r2, #3
 800272e:	4620      	mov	r0, r4
 8002730:	f7fd fd5e 	bl	80001f0 <memchr>
 8002734:	b138      	cbz	r0, 8002746 <_svfiprintf_r+0x142>
 8002736:	2340      	movs	r3, #64	; 0x40
 8002738:	1b00      	subs	r0, r0, r4
 800273a:	fa03 f000 	lsl.w	r0, r3, r0
 800273e:	9b04      	ldr	r3, [sp, #16]
 8002740:	4303      	orrs	r3, r0
 8002742:	9304      	str	r3, [sp, #16]
 8002744:	3701      	adds	r7, #1
 8002746:	7839      	ldrb	r1, [r7, #0]
 8002748:	4825      	ldr	r0, [pc, #148]	; (80027e0 <_svfiprintf_r+0x1dc>)
 800274a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800274e:	2206      	movs	r2, #6
 8002750:	1c7e      	adds	r6, r7, #1
 8002752:	f7fd fd4d 	bl	80001f0 <memchr>
 8002756:	2800      	cmp	r0, #0
 8002758:	d035      	beq.n	80027c6 <_svfiprintf_r+0x1c2>
 800275a:	4b22      	ldr	r3, [pc, #136]	; (80027e4 <_svfiprintf_r+0x1e0>)
 800275c:	b9fb      	cbnz	r3, 800279e <_svfiprintf_r+0x19a>
 800275e:	9b03      	ldr	r3, [sp, #12]
 8002760:	3307      	adds	r3, #7
 8002762:	f023 0307 	bic.w	r3, r3, #7
 8002766:	3308      	adds	r3, #8
 8002768:	9303      	str	r3, [sp, #12]
 800276a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800276c:	444b      	add	r3, r9
 800276e:	9309      	str	r3, [sp, #36]	; 0x24
 8002770:	e76c      	b.n	800264c <_svfiprintf_r+0x48>
 8002772:	fb00 3202 	mla	r2, r0, r2, r3
 8002776:	2101      	movs	r1, #1
 8002778:	e7a3      	b.n	80026c2 <_svfiprintf_r+0xbe>
 800277a:	2300      	movs	r3, #0
 800277c:	9305      	str	r3, [sp, #20]
 800277e:	4618      	mov	r0, r3
 8002780:	240a      	movs	r4, #10
 8002782:	460f      	mov	r7, r1
 8002784:	3101      	adds	r1, #1
 8002786:	783a      	ldrb	r2, [r7, #0]
 8002788:	3a30      	subs	r2, #48	; 0x30
 800278a:	2a09      	cmp	r2, #9
 800278c:	d903      	bls.n	8002796 <_svfiprintf_r+0x192>
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0ca      	beq.n	8002728 <_svfiprintf_r+0x124>
 8002792:	9005      	str	r0, [sp, #20]
 8002794:	e7c8      	b.n	8002728 <_svfiprintf_r+0x124>
 8002796:	fb04 2000 	mla	r0, r4, r0, r2
 800279a:	2301      	movs	r3, #1
 800279c:	e7f1      	b.n	8002782 <_svfiprintf_r+0x17e>
 800279e:	ab03      	add	r3, sp, #12
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	462a      	mov	r2, r5
 80027a4:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <_svfiprintf_r+0x1e4>)
 80027a6:	a904      	add	r1, sp, #16
 80027a8:	4640      	mov	r0, r8
 80027aa:	f3af 8000 	nop.w
 80027ae:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80027b2:	4681      	mov	r9, r0
 80027b4:	d1d9      	bne.n	800276a <_svfiprintf_r+0x166>
 80027b6:	89ab      	ldrh	r3, [r5, #12]
 80027b8:	065b      	lsls	r3, r3, #25
 80027ba:	f53f af38 	bmi.w	800262e <_svfiprintf_r+0x2a>
 80027be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027c0:	b01d      	add	sp, #116	; 0x74
 80027c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027c6:	ab03      	add	r3, sp, #12
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	462a      	mov	r2, r5
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <_svfiprintf_r+0x1e4>)
 80027ce:	a904      	add	r1, sp, #16
 80027d0:	4640      	mov	r0, r8
 80027d2:	f000 f881 	bl	80028d8 <_printf_i>
 80027d6:	e7ea      	b.n	80027ae <_svfiprintf_r+0x1aa>
 80027d8:	08002f20 	.word	0x08002f20
 80027dc:	08002f26 	.word	0x08002f26
 80027e0:	08002f2a 	.word	0x08002f2a
 80027e4:	00000000 	.word	0x00000000
 80027e8:	0800254f 	.word	0x0800254f

080027ec <_printf_common>:
 80027ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027f0:	4691      	mov	r9, r2
 80027f2:	461f      	mov	r7, r3
 80027f4:	688a      	ldr	r2, [r1, #8]
 80027f6:	690b      	ldr	r3, [r1, #16]
 80027f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027fc:	4293      	cmp	r3, r2
 80027fe:	bfb8      	it	lt
 8002800:	4613      	movlt	r3, r2
 8002802:	f8c9 3000 	str.w	r3, [r9]
 8002806:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800280a:	4606      	mov	r6, r0
 800280c:	460c      	mov	r4, r1
 800280e:	b112      	cbz	r2, 8002816 <_printf_common+0x2a>
 8002810:	3301      	adds	r3, #1
 8002812:	f8c9 3000 	str.w	r3, [r9]
 8002816:	6823      	ldr	r3, [r4, #0]
 8002818:	0699      	lsls	r1, r3, #26
 800281a:	bf42      	ittt	mi
 800281c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002820:	3302      	addmi	r3, #2
 8002822:	f8c9 3000 	strmi.w	r3, [r9]
 8002826:	6825      	ldr	r5, [r4, #0]
 8002828:	f015 0506 	ands.w	r5, r5, #6
 800282c:	d107      	bne.n	800283e <_printf_common+0x52>
 800282e:	f104 0a19 	add.w	sl, r4, #25
 8002832:	68e3      	ldr	r3, [r4, #12]
 8002834:	f8d9 2000 	ldr.w	r2, [r9]
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	429d      	cmp	r5, r3
 800283c:	db29      	blt.n	8002892 <_printf_common+0xa6>
 800283e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002842:	6822      	ldr	r2, [r4, #0]
 8002844:	3300      	adds	r3, #0
 8002846:	bf18      	it	ne
 8002848:	2301      	movne	r3, #1
 800284a:	0692      	lsls	r2, r2, #26
 800284c:	d42e      	bmi.n	80028ac <_printf_common+0xc0>
 800284e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002852:	4639      	mov	r1, r7
 8002854:	4630      	mov	r0, r6
 8002856:	47c0      	blx	r8
 8002858:	3001      	adds	r0, #1
 800285a:	d021      	beq.n	80028a0 <_printf_common+0xb4>
 800285c:	6823      	ldr	r3, [r4, #0]
 800285e:	68e5      	ldr	r5, [r4, #12]
 8002860:	f8d9 2000 	ldr.w	r2, [r9]
 8002864:	f003 0306 	and.w	r3, r3, #6
 8002868:	2b04      	cmp	r3, #4
 800286a:	bf08      	it	eq
 800286c:	1aad      	subeq	r5, r5, r2
 800286e:	68a3      	ldr	r3, [r4, #8]
 8002870:	6922      	ldr	r2, [r4, #16]
 8002872:	bf0c      	ite	eq
 8002874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002878:	2500      	movne	r5, #0
 800287a:	4293      	cmp	r3, r2
 800287c:	bfc4      	itt	gt
 800287e:	1a9b      	subgt	r3, r3, r2
 8002880:	18ed      	addgt	r5, r5, r3
 8002882:	f04f 0900 	mov.w	r9, #0
 8002886:	341a      	adds	r4, #26
 8002888:	454d      	cmp	r5, r9
 800288a:	d11b      	bne.n	80028c4 <_printf_common+0xd8>
 800288c:	2000      	movs	r0, #0
 800288e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002892:	2301      	movs	r3, #1
 8002894:	4652      	mov	r2, sl
 8002896:	4639      	mov	r1, r7
 8002898:	4630      	mov	r0, r6
 800289a:	47c0      	blx	r8
 800289c:	3001      	adds	r0, #1
 800289e:	d103      	bne.n	80028a8 <_printf_common+0xbc>
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028a8:	3501      	adds	r5, #1
 80028aa:	e7c2      	b.n	8002832 <_printf_common+0x46>
 80028ac:	18e1      	adds	r1, r4, r3
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	2030      	movs	r0, #48	; 0x30
 80028b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028b6:	4422      	add	r2, r4
 80028b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028c0:	3302      	adds	r3, #2
 80028c2:	e7c4      	b.n	800284e <_printf_common+0x62>
 80028c4:	2301      	movs	r3, #1
 80028c6:	4622      	mov	r2, r4
 80028c8:	4639      	mov	r1, r7
 80028ca:	4630      	mov	r0, r6
 80028cc:	47c0      	blx	r8
 80028ce:	3001      	adds	r0, #1
 80028d0:	d0e6      	beq.n	80028a0 <_printf_common+0xb4>
 80028d2:	f109 0901 	add.w	r9, r9, #1
 80028d6:	e7d7      	b.n	8002888 <_printf_common+0x9c>

080028d8 <_printf_i>:
 80028d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028dc:	4617      	mov	r7, r2
 80028de:	7e0a      	ldrb	r2, [r1, #24]
 80028e0:	b085      	sub	sp, #20
 80028e2:	2a6e      	cmp	r2, #110	; 0x6e
 80028e4:	4698      	mov	r8, r3
 80028e6:	4606      	mov	r6, r0
 80028e8:	460c      	mov	r4, r1
 80028ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80028ec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80028f0:	f000 80bc 	beq.w	8002a6c <_printf_i+0x194>
 80028f4:	d81a      	bhi.n	800292c <_printf_i+0x54>
 80028f6:	2a63      	cmp	r2, #99	; 0x63
 80028f8:	d02e      	beq.n	8002958 <_printf_i+0x80>
 80028fa:	d80a      	bhi.n	8002912 <_printf_i+0x3a>
 80028fc:	2a00      	cmp	r2, #0
 80028fe:	f000 80c8 	beq.w	8002a92 <_printf_i+0x1ba>
 8002902:	2a58      	cmp	r2, #88	; 0x58
 8002904:	f000 808a 	beq.w	8002a1c <_printf_i+0x144>
 8002908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800290c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002910:	e02a      	b.n	8002968 <_printf_i+0x90>
 8002912:	2a64      	cmp	r2, #100	; 0x64
 8002914:	d001      	beq.n	800291a <_printf_i+0x42>
 8002916:	2a69      	cmp	r2, #105	; 0x69
 8002918:	d1f6      	bne.n	8002908 <_printf_i+0x30>
 800291a:	6821      	ldr	r1, [r4, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002922:	d023      	beq.n	800296c <_printf_i+0x94>
 8002924:	1d11      	adds	r1, r2, #4
 8002926:	6019      	str	r1, [r3, #0]
 8002928:	6813      	ldr	r3, [r2, #0]
 800292a:	e027      	b.n	800297c <_printf_i+0xa4>
 800292c:	2a73      	cmp	r2, #115	; 0x73
 800292e:	f000 80b4 	beq.w	8002a9a <_printf_i+0x1c2>
 8002932:	d808      	bhi.n	8002946 <_printf_i+0x6e>
 8002934:	2a6f      	cmp	r2, #111	; 0x6f
 8002936:	d02a      	beq.n	800298e <_printf_i+0xb6>
 8002938:	2a70      	cmp	r2, #112	; 0x70
 800293a:	d1e5      	bne.n	8002908 <_printf_i+0x30>
 800293c:	680a      	ldr	r2, [r1, #0]
 800293e:	f042 0220 	orr.w	r2, r2, #32
 8002942:	600a      	str	r2, [r1, #0]
 8002944:	e003      	b.n	800294e <_printf_i+0x76>
 8002946:	2a75      	cmp	r2, #117	; 0x75
 8002948:	d021      	beq.n	800298e <_printf_i+0xb6>
 800294a:	2a78      	cmp	r2, #120	; 0x78
 800294c:	d1dc      	bne.n	8002908 <_printf_i+0x30>
 800294e:	2278      	movs	r2, #120	; 0x78
 8002950:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002954:	496e      	ldr	r1, [pc, #440]	; (8002b10 <_printf_i+0x238>)
 8002956:	e064      	b.n	8002a22 <_printf_i+0x14a>
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800295e:	1d11      	adds	r1, r2, #4
 8002960:	6019      	str	r1, [r3, #0]
 8002962:	6813      	ldr	r3, [r2, #0]
 8002964:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002968:	2301      	movs	r3, #1
 800296a:	e0a3      	b.n	8002ab4 <_printf_i+0x1dc>
 800296c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002970:	f102 0104 	add.w	r1, r2, #4
 8002974:	6019      	str	r1, [r3, #0]
 8002976:	d0d7      	beq.n	8002928 <_printf_i+0x50>
 8002978:	f9b2 3000 	ldrsh.w	r3, [r2]
 800297c:	2b00      	cmp	r3, #0
 800297e:	da03      	bge.n	8002988 <_printf_i+0xb0>
 8002980:	222d      	movs	r2, #45	; 0x2d
 8002982:	425b      	negs	r3, r3
 8002984:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002988:	4962      	ldr	r1, [pc, #392]	; (8002b14 <_printf_i+0x23c>)
 800298a:	220a      	movs	r2, #10
 800298c:	e017      	b.n	80029be <_printf_i+0xe6>
 800298e:	6820      	ldr	r0, [r4, #0]
 8002990:	6819      	ldr	r1, [r3, #0]
 8002992:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002996:	d003      	beq.n	80029a0 <_printf_i+0xc8>
 8002998:	1d08      	adds	r0, r1, #4
 800299a:	6018      	str	r0, [r3, #0]
 800299c:	680b      	ldr	r3, [r1, #0]
 800299e:	e006      	b.n	80029ae <_printf_i+0xd6>
 80029a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80029a4:	f101 0004 	add.w	r0, r1, #4
 80029a8:	6018      	str	r0, [r3, #0]
 80029aa:	d0f7      	beq.n	800299c <_printf_i+0xc4>
 80029ac:	880b      	ldrh	r3, [r1, #0]
 80029ae:	4959      	ldr	r1, [pc, #356]	; (8002b14 <_printf_i+0x23c>)
 80029b0:	2a6f      	cmp	r2, #111	; 0x6f
 80029b2:	bf14      	ite	ne
 80029b4:	220a      	movne	r2, #10
 80029b6:	2208      	moveq	r2, #8
 80029b8:	2000      	movs	r0, #0
 80029ba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80029be:	6865      	ldr	r5, [r4, #4]
 80029c0:	60a5      	str	r5, [r4, #8]
 80029c2:	2d00      	cmp	r5, #0
 80029c4:	f2c0 809c 	blt.w	8002b00 <_printf_i+0x228>
 80029c8:	6820      	ldr	r0, [r4, #0]
 80029ca:	f020 0004 	bic.w	r0, r0, #4
 80029ce:	6020      	str	r0, [r4, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d13f      	bne.n	8002a54 <_printf_i+0x17c>
 80029d4:	2d00      	cmp	r5, #0
 80029d6:	f040 8095 	bne.w	8002b04 <_printf_i+0x22c>
 80029da:	4675      	mov	r5, lr
 80029dc:	2a08      	cmp	r2, #8
 80029de:	d10b      	bne.n	80029f8 <_printf_i+0x120>
 80029e0:	6823      	ldr	r3, [r4, #0]
 80029e2:	07da      	lsls	r2, r3, #31
 80029e4:	d508      	bpl.n	80029f8 <_printf_i+0x120>
 80029e6:	6923      	ldr	r3, [r4, #16]
 80029e8:	6862      	ldr	r2, [r4, #4]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	bfde      	ittt	le
 80029ee:	2330      	movle	r3, #48	; 0x30
 80029f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80029f8:	ebae 0305 	sub.w	r3, lr, r5
 80029fc:	6123      	str	r3, [r4, #16]
 80029fe:	f8cd 8000 	str.w	r8, [sp]
 8002a02:	463b      	mov	r3, r7
 8002a04:	aa03      	add	r2, sp, #12
 8002a06:	4621      	mov	r1, r4
 8002a08:	4630      	mov	r0, r6
 8002a0a:	f7ff feef 	bl	80027ec <_printf_common>
 8002a0e:	3001      	adds	r0, #1
 8002a10:	d155      	bne.n	8002abe <_printf_i+0x1e6>
 8002a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a16:	b005      	add	sp, #20
 8002a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a1c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002a20:	493c      	ldr	r1, [pc, #240]	; (8002b14 <_printf_i+0x23c>)
 8002a22:	6822      	ldr	r2, [r4, #0]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002a2a:	f100 0504 	add.w	r5, r0, #4
 8002a2e:	601d      	str	r5, [r3, #0]
 8002a30:	d001      	beq.n	8002a36 <_printf_i+0x15e>
 8002a32:	6803      	ldr	r3, [r0, #0]
 8002a34:	e002      	b.n	8002a3c <_printf_i+0x164>
 8002a36:	0655      	lsls	r5, r2, #25
 8002a38:	d5fb      	bpl.n	8002a32 <_printf_i+0x15a>
 8002a3a:	8803      	ldrh	r3, [r0, #0]
 8002a3c:	07d0      	lsls	r0, r2, #31
 8002a3e:	bf44      	itt	mi
 8002a40:	f042 0220 	orrmi.w	r2, r2, #32
 8002a44:	6022      	strmi	r2, [r4, #0]
 8002a46:	b91b      	cbnz	r3, 8002a50 <_printf_i+0x178>
 8002a48:	6822      	ldr	r2, [r4, #0]
 8002a4a:	f022 0220 	bic.w	r2, r2, #32
 8002a4e:	6022      	str	r2, [r4, #0]
 8002a50:	2210      	movs	r2, #16
 8002a52:	e7b1      	b.n	80029b8 <_printf_i+0xe0>
 8002a54:	4675      	mov	r5, lr
 8002a56:	fbb3 f0f2 	udiv	r0, r3, r2
 8002a5a:	fb02 3310 	mls	r3, r2, r0, r3
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002a64:	4603      	mov	r3, r0
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d1f5      	bne.n	8002a56 <_printf_i+0x17e>
 8002a6a:	e7b7      	b.n	80029dc <_printf_i+0x104>
 8002a6c:	6808      	ldr	r0, [r1, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	6949      	ldr	r1, [r1, #20]
 8002a72:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002a76:	d004      	beq.n	8002a82 <_printf_i+0x1aa>
 8002a78:	1d10      	adds	r0, r2, #4
 8002a7a:	6018      	str	r0, [r3, #0]
 8002a7c:	6813      	ldr	r3, [r2, #0]
 8002a7e:	6019      	str	r1, [r3, #0]
 8002a80:	e007      	b.n	8002a92 <_printf_i+0x1ba>
 8002a82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a86:	f102 0004 	add.w	r0, r2, #4
 8002a8a:	6018      	str	r0, [r3, #0]
 8002a8c:	6813      	ldr	r3, [r2, #0]
 8002a8e:	d0f6      	beq.n	8002a7e <_printf_i+0x1a6>
 8002a90:	8019      	strh	r1, [r3, #0]
 8002a92:	2300      	movs	r3, #0
 8002a94:	6123      	str	r3, [r4, #16]
 8002a96:	4675      	mov	r5, lr
 8002a98:	e7b1      	b.n	80029fe <_printf_i+0x126>
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	1d11      	adds	r1, r2, #4
 8002a9e:	6019      	str	r1, [r3, #0]
 8002aa0:	6815      	ldr	r5, [r2, #0]
 8002aa2:	6862      	ldr	r2, [r4, #4]
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	f7fd fba2 	bl	80001f0 <memchr>
 8002aac:	b108      	cbz	r0, 8002ab2 <_printf_i+0x1da>
 8002aae:	1b40      	subs	r0, r0, r5
 8002ab0:	6060      	str	r0, [r4, #4]
 8002ab2:	6863      	ldr	r3, [r4, #4]
 8002ab4:	6123      	str	r3, [r4, #16]
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002abc:	e79f      	b.n	80029fe <_printf_i+0x126>
 8002abe:	6923      	ldr	r3, [r4, #16]
 8002ac0:	462a      	mov	r2, r5
 8002ac2:	4639      	mov	r1, r7
 8002ac4:	4630      	mov	r0, r6
 8002ac6:	47c0      	blx	r8
 8002ac8:	3001      	adds	r0, #1
 8002aca:	d0a2      	beq.n	8002a12 <_printf_i+0x13a>
 8002acc:	6823      	ldr	r3, [r4, #0]
 8002ace:	079b      	lsls	r3, r3, #30
 8002ad0:	d507      	bpl.n	8002ae2 <_printf_i+0x20a>
 8002ad2:	2500      	movs	r5, #0
 8002ad4:	f104 0919 	add.w	r9, r4, #25
 8002ad8:	68e3      	ldr	r3, [r4, #12]
 8002ada:	9a03      	ldr	r2, [sp, #12]
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	429d      	cmp	r5, r3
 8002ae0:	db05      	blt.n	8002aee <_printf_i+0x216>
 8002ae2:	68e0      	ldr	r0, [r4, #12]
 8002ae4:	9b03      	ldr	r3, [sp, #12]
 8002ae6:	4298      	cmp	r0, r3
 8002ae8:	bfb8      	it	lt
 8002aea:	4618      	movlt	r0, r3
 8002aec:	e793      	b.n	8002a16 <_printf_i+0x13e>
 8002aee:	2301      	movs	r3, #1
 8002af0:	464a      	mov	r2, r9
 8002af2:	4639      	mov	r1, r7
 8002af4:	4630      	mov	r0, r6
 8002af6:	47c0      	blx	r8
 8002af8:	3001      	adds	r0, #1
 8002afa:	d08a      	beq.n	8002a12 <_printf_i+0x13a>
 8002afc:	3501      	adds	r5, #1
 8002afe:	e7eb      	b.n	8002ad8 <_printf_i+0x200>
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1a7      	bne.n	8002a54 <_printf_i+0x17c>
 8002b04:	780b      	ldrb	r3, [r1, #0]
 8002b06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b0e:	e765      	b.n	80029dc <_printf_i+0x104>
 8002b10:	08002f42 	.word	0x08002f42
 8002b14:	08002f31 	.word	0x08002f31

08002b18 <__ascii_wctomb>:
 8002b18:	b149      	cbz	r1, 8002b2e <__ascii_wctomb+0x16>
 8002b1a:	2aff      	cmp	r2, #255	; 0xff
 8002b1c:	bf85      	ittet	hi
 8002b1e:	238a      	movhi	r3, #138	; 0x8a
 8002b20:	6003      	strhi	r3, [r0, #0]
 8002b22:	700a      	strbls	r2, [r1, #0]
 8002b24:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8002b28:	bf98      	it	ls
 8002b2a:	2001      	movls	r0, #1
 8002b2c:	4770      	bx	lr
 8002b2e:	4608      	mov	r0, r1
 8002b30:	4770      	bx	lr

08002b32 <memcpy>:
 8002b32:	b510      	push	{r4, lr}
 8002b34:	1e43      	subs	r3, r0, #1
 8002b36:	440a      	add	r2, r1
 8002b38:	4291      	cmp	r1, r2
 8002b3a:	d100      	bne.n	8002b3e <memcpy+0xc>
 8002b3c:	bd10      	pop	{r4, pc}
 8002b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b46:	e7f7      	b.n	8002b38 <memcpy+0x6>

08002b48 <memmove>:
 8002b48:	4288      	cmp	r0, r1
 8002b4a:	b510      	push	{r4, lr}
 8002b4c:	eb01 0302 	add.w	r3, r1, r2
 8002b50:	d803      	bhi.n	8002b5a <memmove+0x12>
 8002b52:	1e42      	subs	r2, r0, #1
 8002b54:	4299      	cmp	r1, r3
 8002b56:	d10c      	bne.n	8002b72 <memmove+0x2a>
 8002b58:	bd10      	pop	{r4, pc}
 8002b5a:	4298      	cmp	r0, r3
 8002b5c:	d2f9      	bcs.n	8002b52 <memmove+0xa>
 8002b5e:	1881      	adds	r1, r0, r2
 8002b60:	1ad2      	subs	r2, r2, r3
 8002b62:	42d3      	cmn	r3, r2
 8002b64:	d100      	bne.n	8002b68 <memmove+0x20>
 8002b66:	bd10      	pop	{r4, pc}
 8002b68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b6c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002b70:	e7f7      	b.n	8002b62 <memmove+0x1a>
 8002b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b76:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002b7a:	e7eb      	b.n	8002b54 <memmove+0xc>

08002b7c <_free_r>:
 8002b7c:	b538      	push	{r3, r4, r5, lr}
 8002b7e:	4605      	mov	r5, r0
 8002b80:	2900      	cmp	r1, #0
 8002b82:	d045      	beq.n	8002c10 <_free_r+0x94>
 8002b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b88:	1f0c      	subs	r4, r1, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bfb8      	it	lt
 8002b8e:	18e4      	addlt	r4, r4, r3
 8002b90:	f000 f8d6 	bl	8002d40 <__malloc_lock>
 8002b94:	4a1f      	ldr	r2, [pc, #124]	; (8002c14 <_free_r+0x98>)
 8002b96:	6813      	ldr	r3, [r2, #0]
 8002b98:	4610      	mov	r0, r2
 8002b9a:	b933      	cbnz	r3, 8002baa <_free_r+0x2e>
 8002b9c:	6063      	str	r3, [r4, #4]
 8002b9e:	6014      	str	r4, [r2, #0]
 8002ba0:	4628      	mov	r0, r5
 8002ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ba6:	f000 b8cc 	b.w	8002d42 <__malloc_unlock>
 8002baa:	42a3      	cmp	r3, r4
 8002bac:	d90c      	bls.n	8002bc8 <_free_r+0x4c>
 8002bae:	6821      	ldr	r1, [r4, #0]
 8002bb0:	1862      	adds	r2, r4, r1
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	bf04      	itt	eq
 8002bb6:	681a      	ldreq	r2, [r3, #0]
 8002bb8:	685b      	ldreq	r3, [r3, #4]
 8002bba:	6063      	str	r3, [r4, #4]
 8002bbc:	bf04      	itt	eq
 8002bbe:	1852      	addeq	r2, r2, r1
 8002bc0:	6022      	streq	r2, [r4, #0]
 8002bc2:	6004      	str	r4, [r0, #0]
 8002bc4:	e7ec      	b.n	8002ba0 <_free_r+0x24>
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	b10a      	cbz	r2, 8002bd0 <_free_r+0x54>
 8002bcc:	42a2      	cmp	r2, r4
 8002bce:	d9fa      	bls.n	8002bc6 <_free_r+0x4a>
 8002bd0:	6819      	ldr	r1, [r3, #0]
 8002bd2:	1858      	adds	r0, r3, r1
 8002bd4:	42a0      	cmp	r0, r4
 8002bd6:	d10b      	bne.n	8002bf0 <_free_r+0x74>
 8002bd8:	6820      	ldr	r0, [r4, #0]
 8002bda:	4401      	add	r1, r0
 8002bdc:	1858      	adds	r0, r3, r1
 8002bde:	4282      	cmp	r2, r0
 8002be0:	6019      	str	r1, [r3, #0]
 8002be2:	d1dd      	bne.n	8002ba0 <_free_r+0x24>
 8002be4:	6810      	ldr	r0, [r2, #0]
 8002be6:	6852      	ldr	r2, [r2, #4]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	4401      	add	r1, r0
 8002bec:	6019      	str	r1, [r3, #0]
 8002bee:	e7d7      	b.n	8002ba0 <_free_r+0x24>
 8002bf0:	d902      	bls.n	8002bf8 <_free_r+0x7c>
 8002bf2:	230c      	movs	r3, #12
 8002bf4:	602b      	str	r3, [r5, #0]
 8002bf6:	e7d3      	b.n	8002ba0 <_free_r+0x24>
 8002bf8:	6820      	ldr	r0, [r4, #0]
 8002bfa:	1821      	adds	r1, r4, r0
 8002bfc:	428a      	cmp	r2, r1
 8002bfe:	bf04      	itt	eq
 8002c00:	6811      	ldreq	r1, [r2, #0]
 8002c02:	6852      	ldreq	r2, [r2, #4]
 8002c04:	6062      	str	r2, [r4, #4]
 8002c06:	bf04      	itt	eq
 8002c08:	1809      	addeq	r1, r1, r0
 8002c0a:	6021      	streq	r1, [r4, #0]
 8002c0c:	605c      	str	r4, [r3, #4]
 8002c0e:	e7c7      	b.n	8002ba0 <_free_r+0x24>
 8002c10:	bd38      	pop	{r3, r4, r5, pc}
 8002c12:	bf00      	nop
 8002c14:	20000240 	.word	0x20000240

08002c18 <_malloc_r>:
 8002c18:	b570      	push	{r4, r5, r6, lr}
 8002c1a:	1ccd      	adds	r5, r1, #3
 8002c1c:	f025 0503 	bic.w	r5, r5, #3
 8002c20:	3508      	adds	r5, #8
 8002c22:	2d0c      	cmp	r5, #12
 8002c24:	bf38      	it	cc
 8002c26:	250c      	movcc	r5, #12
 8002c28:	2d00      	cmp	r5, #0
 8002c2a:	4606      	mov	r6, r0
 8002c2c:	db01      	blt.n	8002c32 <_malloc_r+0x1a>
 8002c2e:	42a9      	cmp	r1, r5
 8002c30:	d903      	bls.n	8002c3a <_malloc_r+0x22>
 8002c32:	230c      	movs	r3, #12
 8002c34:	6033      	str	r3, [r6, #0]
 8002c36:	2000      	movs	r0, #0
 8002c38:	bd70      	pop	{r4, r5, r6, pc}
 8002c3a:	f000 f881 	bl	8002d40 <__malloc_lock>
 8002c3e:	4a23      	ldr	r2, [pc, #140]	; (8002ccc <_malloc_r+0xb4>)
 8002c40:	6814      	ldr	r4, [r2, #0]
 8002c42:	4621      	mov	r1, r4
 8002c44:	b991      	cbnz	r1, 8002c6c <_malloc_r+0x54>
 8002c46:	4c22      	ldr	r4, [pc, #136]	; (8002cd0 <_malloc_r+0xb8>)
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	b91b      	cbnz	r3, 8002c54 <_malloc_r+0x3c>
 8002c4c:	4630      	mov	r0, r6
 8002c4e:	f000 f867 	bl	8002d20 <_sbrk_r>
 8002c52:	6020      	str	r0, [r4, #0]
 8002c54:	4629      	mov	r1, r5
 8002c56:	4630      	mov	r0, r6
 8002c58:	f000 f862 	bl	8002d20 <_sbrk_r>
 8002c5c:	1c43      	adds	r3, r0, #1
 8002c5e:	d126      	bne.n	8002cae <_malloc_r+0x96>
 8002c60:	230c      	movs	r3, #12
 8002c62:	6033      	str	r3, [r6, #0]
 8002c64:	4630      	mov	r0, r6
 8002c66:	f000 f86c 	bl	8002d42 <__malloc_unlock>
 8002c6a:	e7e4      	b.n	8002c36 <_malloc_r+0x1e>
 8002c6c:	680b      	ldr	r3, [r1, #0]
 8002c6e:	1b5b      	subs	r3, r3, r5
 8002c70:	d41a      	bmi.n	8002ca8 <_malloc_r+0x90>
 8002c72:	2b0b      	cmp	r3, #11
 8002c74:	d90f      	bls.n	8002c96 <_malloc_r+0x7e>
 8002c76:	600b      	str	r3, [r1, #0]
 8002c78:	50cd      	str	r5, [r1, r3]
 8002c7a:	18cc      	adds	r4, r1, r3
 8002c7c:	4630      	mov	r0, r6
 8002c7e:	f000 f860 	bl	8002d42 <__malloc_unlock>
 8002c82:	f104 000b 	add.w	r0, r4, #11
 8002c86:	1d23      	adds	r3, r4, #4
 8002c88:	f020 0007 	bic.w	r0, r0, #7
 8002c8c:	1ac3      	subs	r3, r0, r3
 8002c8e:	d01b      	beq.n	8002cc8 <_malloc_r+0xb0>
 8002c90:	425a      	negs	r2, r3
 8002c92:	50e2      	str	r2, [r4, r3]
 8002c94:	bd70      	pop	{r4, r5, r6, pc}
 8002c96:	428c      	cmp	r4, r1
 8002c98:	bf0d      	iteet	eq
 8002c9a:	6863      	ldreq	r3, [r4, #4]
 8002c9c:	684b      	ldrne	r3, [r1, #4]
 8002c9e:	6063      	strne	r3, [r4, #4]
 8002ca0:	6013      	streq	r3, [r2, #0]
 8002ca2:	bf18      	it	ne
 8002ca4:	460c      	movne	r4, r1
 8002ca6:	e7e9      	b.n	8002c7c <_malloc_r+0x64>
 8002ca8:	460c      	mov	r4, r1
 8002caa:	6849      	ldr	r1, [r1, #4]
 8002cac:	e7ca      	b.n	8002c44 <_malloc_r+0x2c>
 8002cae:	1cc4      	adds	r4, r0, #3
 8002cb0:	f024 0403 	bic.w	r4, r4, #3
 8002cb4:	42a0      	cmp	r0, r4
 8002cb6:	d005      	beq.n	8002cc4 <_malloc_r+0xac>
 8002cb8:	1a21      	subs	r1, r4, r0
 8002cba:	4630      	mov	r0, r6
 8002cbc:	f000 f830 	bl	8002d20 <_sbrk_r>
 8002cc0:	3001      	adds	r0, #1
 8002cc2:	d0cd      	beq.n	8002c60 <_malloc_r+0x48>
 8002cc4:	6025      	str	r5, [r4, #0]
 8002cc6:	e7d9      	b.n	8002c7c <_malloc_r+0x64>
 8002cc8:	bd70      	pop	{r4, r5, r6, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000240 	.word	0x20000240
 8002cd0:	20000244 	.word	0x20000244

08002cd4 <_realloc_r>:
 8002cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd6:	4607      	mov	r7, r0
 8002cd8:	4614      	mov	r4, r2
 8002cda:	460e      	mov	r6, r1
 8002cdc:	b921      	cbnz	r1, 8002ce8 <_realloc_r+0x14>
 8002cde:	4611      	mov	r1, r2
 8002ce0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002ce4:	f7ff bf98 	b.w	8002c18 <_malloc_r>
 8002ce8:	b922      	cbnz	r2, 8002cf4 <_realloc_r+0x20>
 8002cea:	f7ff ff47 	bl	8002b7c <_free_r>
 8002cee:	4625      	mov	r5, r4
 8002cf0:	4628      	mov	r0, r5
 8002cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cf4:	f000 f826 	bl	8002d44 <_malloc_usable_size_r>
 8002cf8:	4284      	cmp	r4, r0
 8002cfa:	d90f      	bls.n	8002d1c <_realloc_r+0x48>
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	4638      	mov	r0, r7
 8002d00:	f7ff ff8a 	bl	8002c18 <_malloc_r>
 8002d04:	4605      	mov	r5, r0
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d0f2      	beq.n	8002cf0 <_realloc_r+0x1c>
 8002d0a:	4631      	mov	r1, r6
 8002d0c:	4622      	mov	r2, r4
 8002d0e:	f7ff ff10 	bl	8002b32 <memcpy>
 8002d12:	4631      	mov	r1, r6
 8002d14:	4638      	mov	r0, r7
 8002d16:	f7ff ff31 	bl	8002b7c <_free_r>
 8002d1a:	e7e9      	b.n	8002cf0 <_realloc_r+0x1c>
 8002d1c:	4635      	mov	r5, r6
 8002d1e:	e7e7      	b.n	8002cf0 <_realloc_r+0x1c>

08002d20 <_sbrk_r>:
 8002d20:	b538      	push	{r3, r4, r5, lr}
 8002d22:	4c06      	ldr	r4, [pc, #24]	; (8002d3c <_sbrk_r+0x1c>)
 8002d24:	2300      	movs	r3, #0
 8002d26:	4605      	mov	r5, r0
 8002d28:	4608      	mov	r0, r1
 8002d2a:	6023      	str	r3, [r4, #0]
 8002d2c:	f7ff faa0 	bl	8002270 <_sbrk>
 8002d30:	1c43      	adds	r3, r0, #1
 8002d32:	d102      	bne.n	8002d3a <_sbrk_r+0x1a>
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	b103      	cbz	r3, 8002d3a <_sbrk_r+0x1a>
 8002d38:	602b      	str	r3, [r5, #0]
 8002d3a:	bd38      	pop	{r3, r4, r5, pc}
 8002d3c:	2000034c 	.word	0x2000034c

08002d40 <__malloc_lock>:
 8002d40:	4770      	bx	lr

08002d42 <__malloc_unlock>:
 8002d42:	4770      	bx	lr

08002d44 <_malloc_usable_size_r>:
 8002d44:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	f1a0 0004 	sub.w	r0, r0, #4
 8002d4e:	bfbc      	itt	lt
 8002d50:	580b      	ldrlt	r3, [r1, r0]
 8002d52:	18c0      	addlt	r0, r0, r3
 8002d54:	4770      	bx	lr
	...

08002d58 <_init>:
 8002d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5a:	bf00      	nop
 8002d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5e:	bc08      	pop	{r3}
 8002d60:	469e      	mov	lr, r3
 8002d62:	4770      	bx	lr

08002d64 <_fini>:
 8002d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d66:	bf00      	nop
 8002d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6a:	bc08      	pop	{r3}
 8002d6c:	469e      	mov	lr, r3
 8002d6e:	4770      	bx	lr
