
rover_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08006348  08006348  00016348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006a70  08006a70  00016a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006a78  08006a78  00016a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006a7c  08006a7c  00016a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000220  20000000  08006a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000174  20000220  08006ca0  00020220  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000394  08006ca0  00020394  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e586  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fec  00000000  00000000  0002e7d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000621c  00000000  00000000  000307c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000988  00000000  00000000  000369e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c00  00000000  00000000  00037368  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004638  00000000  00000000  00037f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003da6  00000000  00000000  0003c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00040346  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002cf4  00000000  00000000  000403c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000220 	.word	0x20000220
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006330 	.word	0x08006330

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000224 	.word	0x20000224
 80001dc:	08006330 	.word	0x08006330

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca4:	f000 b97a 	b.w	8000f9c <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f806 	bl	8000cc0 <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__udivmoddi4>:
 8000cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc4:	468c      	mov	ip, r1
 8000cc6:	460d      	mov	r5, r1
 8000cc8:	4604      	mov	r4, r0
 8000cca:	9e08      	ldr	r6, [sp, #32]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d151      	bne.n	8000d74 <__udivmoddi4+0xb4>
 8000cd0:	428a      	cmp	r2, r1
 8000cd2:	4617      	mov	r7, r2
 8000cd4:	d96d      	bls.n	8000db2 <__udivmoddi4+0xf2>
 8000cd6:	fab2 fe82 	clz	lr, r2
 8000cda:	f1be 0f00 	cmp.w	lr, #0
 8000cde:	d00b      	beq.n	8000cf8 <__udivmoddi4+0x38>
 8000ce0:	f1ce 0c20 	rsb	ip, lr, #32
 8000ce4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000ce8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cec:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cf0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cf4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cf8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cfc:	0c25      	lsrs	r5, r4, #16
 8000cfe:	fbbc f8fa 	udiv	r8, ip, sl
 8000d02:	fa1f f987 	uxth.w	r9, r7
 8000d06:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d0a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d0e:	fb08 f309 	mul.w	r3, r8, r9
 8000d12:	42ab      	cmp	r3, r5
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x6c>
 8000d16:	19ed      	adds	r5, r5, r7
 8000d18:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000d1c:	f080 8123 	bcs.w	8000f66 <__udivmoddi4+0x2a6>
 8000d20:	42ab      	cmp	r3, r5
 8000d22:	f240 8120 	bls.w	8000f66 <__udivmoddi4+0x2a6>
 8000d26:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2a:	443d      	add	r5, r7
 8000d2c:	1aed      	subs	r5, r5, r3
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d34:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d3c:	fb00 f909 	mul.w	r9, r0, r9
 8000d40:	45a1      	cmp	r9, r4
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x98>
 8000d44:	19e4      	adds	r4, r4, r7
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 810a 	bcs.w	8000f62 <__udivmoddi4+0x2a2>
 8000d4e:	45a1      	cmp	r9, r4
 8000d50:	f240 8107 	bls.w	8000f62 <__udivmoddi4+0x2a2>
 8000d54:	3802      	subs	r0, #2
 8000d56:	443c      	add	r4, r7
 8000d58:	eba4 0409 	sub.w	r4, r4, r9
 8000d5c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d60:	2100      	movs	r1, #0
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d061      	beq.n	8000e2a <__udivmoddi4+0x16a>
 8000d66:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	6034      	str	r4, [r6, #0]
 8000d6e:	6073      	str	r3, [r6, #4]
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0xc8>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d054      	beq.n	8000e26 <__udivmoddi4+0x166>
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d82:	4608      	mov	r0, r1
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	fab3 f183 	clz	r1, r3
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	f040 808e 	bne.w	8000eae <__udivmoddi4+0x1ee>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xdc>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80fa 	bhi.w	8000f90 <__udivmoddi4+0x2d0>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb65 0503 	sbc.w	r5, r5, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	46ac      	mov	ip, r5
 8000da6:	2e00      	cmp	r6, #0
 8000da8:	d03f      	beq.n	8000e2a <__udivmoddi4+0x16a>
 8000daa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	b912      	cbnz	r2, 8000dba <__udivmoddi4+0xfa>
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dba:	fab7 fe87 	clz	lr, r7
 8000dbe:	f1be 0f00 	cmp.w	lr, #0
 8000dc2:	d134      	bne.n	8000e2e <__udivmoddi4+0x16e>
 8000dc4:	1beb      	subs	r3, r5, r7
 8000dc6:	0c3a      	lsrs	r2, r7, #16
 8000dc8:	fa1f fc87 	uxth.w	ip, r7
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fbb3 f8f2 	udiv	r8, r3, r2
 8000dd2:	0c25      	lsrs	r5, r4, #16
 8000dd4:	fb02 3318 	mls	r3, r2, r8, r3
 8000dd8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ddc:	fb0c f308 	mul.w	r3, ip, r8
 8000de0:	42ab      	cmp	r3, r5
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x134>
 8000de4:	19ed      	adds	r5, r5, r7
 8000de6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x132>
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	f200 80d1 	bhi.w	8000f94 <__udivmoddi4+0x2d4>
 8000df2:	4680      	mov	r8, r0
 8000df4:	1aed      	subs	r5, r5, r3
 8000df6:	b2a3      	uxth	r3, r4
 8000df8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dfc:	fb02 5510 	mls	r5, r2, r0, r5
 8000e00:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e04:	fb0c fc00 	mul.w	ip, ip, r0
 8000e08:	45a4      	cmp	ip, r4
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x15c>
 8000e0c:	19e4      	adds	r4, r4, r7
 8000e0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x15a>
 8000e14:	45a4      	cmp	ip, r4
 8000e16:	f200 80b8 	bhi.w	8000f8a <__udivmoddi4+0x2ca>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	eba4 040c 	sub.w	r4, r4, ip
 8000e20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e24:	e79d      	b.n	8000d62 <__udivmoddi4+0xa2>
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	f1ce 0420 	rsb	r4, lr, #32
 8000e32:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e36:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e3a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e3e:	0c3a      	lsrs	r2, r7, #16
 8000e40:	fa25 f404 	lsr.w	r4, r5, r4
 8000e44:	ea48 0803 	orr.w	r8, r8, r3
 8000e48:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e4c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e50:	fb02 4411 	mls	r4, r2, r1, r4
 8000e54:	fa1f fc87 	uxth.w	ip, r7
 8000e58:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e5c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e60:	42ab      	cmp	r3, r5
 8000e62:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e66:	d909      	bls.n	8000e7c <__udivmoddi4+0x1bc>
 8000e68:	19ed      	adds	r5, r5, r7
 8000e6a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000e6e:	f080 808a 	bcs.w	8000f86 <__udivmoddi4+0x2c6>
 8000e72:	42ab      	cmp	r3, r5
 8000e74:	f240 8087 	bls.w	8000f86 <__udivmoddi4+0x2c6>
 8000e78:	3902      	subs	r1, #2
 8000e7a:	443d      	add	r5, r7
 8000e7c:	1aeb      	subs	r3, r5, r3
 8000e7e:	fa1f f588 	uxth.w	r5, r8
 8000e82:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e86:	fb02 3310 	mls	r3, r2, r0, r3
 8000e8a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e8e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e92:	42ab      	cmp	r3, r5
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1e6>
 8000e96:	19ed      	adds	r5, r5, r7
 8000e98:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e9c:	d26f      	bcs.n	8000f7e <__udivmoddi4+0x2be>
 8000e9e:	42ab      	cmp	r3, r5
 8000ea0:	d96d      	bls.n	8000f7e <__udivmoddi4+0x2be>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	443d      	add	r5, r7
 8000ea6:	1aeb      	subs	r3, r5, r3
 8000ea8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eac:	e78f      	b.n	8000dce <__udivmoddi4+0x10e>
 8000eae:	f1c1 0720 	rsb	r7, r1, #32
 8000eb2:	fa22 f807 	lsr.w	r8, r2, r7
 8000eb6:	408b      	lsls	r3, r1
 8000eb8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebc:	ea48 0303 	orr.w	r3, r8, r3
 8000ec0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ec4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ece:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ed2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ed6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eda:	fa1f f883 	uxth.w	r8, r3
 8000ede:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ee2:	fb09 f408 	mul.w	r4, r9, r8
 8000ee6:	42ac      	cmp	r4, r5
 8000ee8:	fa02 f201 	lsl.w	r2, r2, r1
 8000eec:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x244>
 8000ef2:	18ed      	adds	r5, r5, r3
 8000ef4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ef8:	d243      	bcs.n	8000f82 <__udivmoddi4+0x2c2>
 8000efa:	42ac      	cmp	r4, r5
 8000efc:	d941      	bls.n	8000f82 <__udivmoddi4+0x2c2>
 8000efe:	f1a9 0902 	sub.w	r9, r9, #2
 8000f02:	441d      	add	r5, r3
 8000f04:	1b2d      	subs	r5, r5, r4
 8000f06:	fa1f fe8e 	uxth.w	lr, lr
 8000f0a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f0e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f12:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f16:	fb00 f808 	mul.w	r8, r0, r8
 8000f1a:	45a0      	cmp	r8, r4
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x26e>
 8000f1e:	18e4      	adds	r4, r4, r3
 8000f20:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000f24:	d229      	bcs.n	8000f7a <__udivmoddi4+0x2ba>
 8000f26:	45a0      	cmp	r8, r4
 8000f28:	d927      	bls.n	8000f7a <__udivmoddi4+0x2ba>
 8000f2a:	3802      	subs	r0, #2
 8000f2c:	441c      	add	r4, r3
 8000f2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f32:	eba4 0408 	sub.w	r4, r4, r8
 8000f36:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3a:	454c      	cmp	r4, r9
 8000f3c:	46c6      	mov	lr, r8
 8000f3e:	464d      	mov	r5, r9
 8000f40:	d315      	bcc.n	8000f6e <__udivmoddi4+0x2ae>
 8000f42:	d012      	beq.n	8000f6a <__udivmoddi4+0x2aa>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x29c>
 8000f46:	ebba 030e 	subs.w	r3, sl, lr
 8000f4a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40cb      	lsrs	r3, r1
 8000f54:	431f      	orrs	r7, r3
 8000f56:	40cc      	lsrs	r4, r1
 8000f58:	6037      	str	r7, [r6, #0]
 8000f5a:	6074      	str	r4, [r6, #4]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f62:	4618      	mov	r0, r3
 8000f64:	e6f8      	b.n	8000d58 <__udivmoddi4+0x98>
 8000f66:	4690      	mov	r8, r2
 8000f68:	e6e0      	b.n	8000d2c <__udivmoddi4+0x6c>
 8000f6a:	45c2      	cmp	sl, r8
 8000f6c:	d2ea      	bcs.n	8000f44 <__udivmoddi4+0x284>
 8000f6e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f72:	eb69 0503 	sbc.w	r5, r9, r3
 8000f76:	3801      	subs	r0, #1
 8000f78:	e7e4      	b.n	8000f44 <__udivmoddi4+0x284>
 8000f7a:	4628      	mov	r0, r5
 8000f7c:	e7d7      	b.n	8000f2e <__udivmoddi4+0x26e>
 8000f7e:	4640      	mov	r0, r8
 8000f80:	e791      	b.n	8000ea6 <__udivmoddi4+0x1e6>
 8000f82:	4681      	mov	r9, r0
 8000f84:	e7be      	b.n	8000f04 <__udivmoddi4+0x244>
 8000f86:	4601      	mov	r1, r0
 8000f88:	e778      	b.n	8000e7c <__udivmoddi4+0x1bc>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	443c      	add	r4, r7
 8000f8e:	e745      	b.n	8000e1c <__udivmoddi4+0x15c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e708      	b.n	8000da6 <__udivmoddi4+0xe6>
 8000f94:	f1a8 0802 	sub.w	r8, r8, #2
 8000f98:	443d      	add	r5, r7
 8000f9a:	e72b      	b.n	8000df4 <__udivmoddi4+0x134>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_InitTick+0x3c>)
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_InitTick+0x40>)
{
 8000fa6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	7818      	ldrb	r0, [r3, #0]
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fb2:	6810      	ldr	r0, [r2, #0]
 8000fb4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fb8:	f000 f896 	bl	80010e8 <HAL_SYSTICK_Config>
 8000fbc:	4604      	mov	r4, r0
 8000fbe:	b958      	cbnz	r0, 8000fd8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc0:	2d0f      	cmp	r5, #15
 8000fc2:	d809      	bhi.n	8000fd8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fcc:	f000 f84a 	bl	8001064 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <HAL_InitTick+0x44>)
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	601d      	str	r5, [r3, #0]
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fd8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
 8000fdc:	20000048 	.word	0x20000048
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_Init>:
{
 8000fe8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <HAL_Init+0x30>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ff2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ffa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001002:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001004:	2003      	movs	r0, #3
 8001006:	f000 f81b 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff ffc8 	bl	8000fa0 <HAL_InitTick>
  HAL_MspInit();
 8001010:	f002 f9b8 	bl	8003384 <HAL_MspInit>
}
 8001014:	2000      	movs	r0, #0
 8001016:	bd08      	pop	{r3, pc}
 8001018:	40023c00 	.word	0x40023c00

0800101c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800101c:	4a03      	ldr	r2, [pc, #12]	; (800102c <HAL_IncTick+0x10>)
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <HAL_IncTick+0x14>)
 8001020:	6811      	ldr	r1, [r2, #0]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	440b      	add	r3, r1
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	2000027c 	.word	0x2000027c
 8001030:	20000000 	.word	0x20000000

08001034 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001034:	4b01      	ldr	r3, [pc, #4]	; (800103c <HAL_GetTick+0x8>)
 8001036:	6818      	ldr	r0, [r3, #0]
}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	2000027c 	.word	0x2000027c

08001040 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001042:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001044:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001048:	041b      	lsls	r3, r3, #16
 800104a:	0c1b      	lsrs	r3, r3, #16
 800104c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001050:	0200      	lsls	r0, r0, #8
 8001052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001056:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800105a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800105c:	60d3      	str	r3, [r2, #12]
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001066:	b530      	push	{r4, r5, lr}
 8001068:	68dc      	ldr	r4, [r3, #12]
 800106a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001074:	2b04      	cmp	r3, #4
 8001076:	bf28      	it	cs
 8001078:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 0501 	mov.w	r5, #1
 8001080:	fa05 f303 	lsl.w	r3, r5, r3
 8001084:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001088:	bf8c      	ite	hi
 800108a:	3c03      	subhi	r4, #3
 800108c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108e:	4019      	ands	r1, r3
 8001090:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001092:	fa05 f404 	lsl.w	r4, r5, r4
 8001096:	3c01      	subs	r4, #1
 8001098:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800109a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	ea42 0201 	orr.w	r2, r2, r1
 80010a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	bfad      	iteet	ge
 80010a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	f000 000f 	andlt.w	r0, r0, #15
 80010ae:	4b06      	ldrlt	r3, [pc, #24]	; (80010c8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	bfb5      	itete	lt
 80010b6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80010c0:	bd30      	pop	{r4, r5, pc}
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00
 80010c8:	e000ed14 	.word	0xe000ed14

080010cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80010cc:	2800      	cmp	r0, #0
 80010ce:	db08      	blt.n	80010e2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d0:	0942      	lsrs	r2, r0, #5
 80010d2:	2301      	movs	r3, #1
 80010d4:	f000 001f 	and.w	r0, r0, #31
 80010d8:	fa03 f000 	lsl.w	r0, r3, r0
 80010dc:	4b01      	ldr	r3, [pc, #4]	; (80010e4 <HAL_NVIC_EnableIRQ+0x18>)
 80010de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80010e2:	4770      	bx	lr
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e8:	3801      	subs	r0, #1
 80010ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010ee:	d20a      	bcs.n	8001106 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f2:	4a07      	ldr	r2, [pc, #28]	; (8001110 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	21f0      	movs	r1, #240	; 0xf0
 80010f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001100:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001106:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000e010 	.word	0xe000e010
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001118:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111c:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80012bc <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001120:	4a64      	ldr	r2, [pc, #400]	; (80012b4 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001122:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8001124:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001128:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800112c:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001130:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8001134:	42b7      	cmp	r7, r6
 8001136:	f040 80ad 	bne.w	8001294 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800113a:	684c      	ldr	r4, [r1, #4]
 800113c:	f024 0a10 	bic.w	sl, r4, #16
 8001140:	f1ba 0f02 	cmp.w	sl, #2
 8001144:	d116      	bne.n	8001174 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8001146:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800114a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800114e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001152:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001156:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800115a:	f04f 0e0f 	mov.w	lr, #15
 800115e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001162:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001166:	690d      	ldr	r5, [r1, #16]
 8001168:	fa05 f50b 	lsl.w	r5, r5, fp
 800116c:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001170:	f8cc 5020 	str.w	r5, [ip, #32]
 8001174:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001178:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800117a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800117e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001182:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001184:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001188:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118c:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001190:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001194:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001198:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800119c:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 800119e:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a2:	d815      	bhi.n	80011d0 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80011a4:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a8:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ac:	68cd      	ldr	r5, [r1, #12]
 80011ae:	fa05 fa0c 	lsl.w	sl, r5, ip
 80011b2:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80011b6:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80011ba:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011be:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011c2:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80011c6:	fa0e fe03 	lsl.w	lr, lr, r3
 80011ca:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80011ce:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80011d0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011d2:	9d00      	ldr	r5, [sp, #0]
 80011d4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d6:	688f      	ldr	r7, [r1, #8]
 80011d8:	fa07 f70c 	lsl.w	r7, r7, ip
 80011dc:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80011de:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e0:	00e5      	lsls	r5, r4, #3
 80011e2:	d557      	bpl.n	8001294 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e4:	f04f 0b00 	mov.w	fp, #0
 80011e8:	f8cd b00c 	str.w	fp, [sp, #12]
 80011ec:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f0:	4d31      	ldr	r5, [pc, #196]	; (80012b8 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80011f6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80011fa:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80011fe:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001202:	9703      	str	r7, [sp, #12]
 8001204:	9f03      	ldr	r7, [sp, #12]
 8001206:	f023 0703 	bic.w	r7, r3, #3
 800120a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800120e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001212:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001216:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800121a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800121e:	f04f 0e0f 	mov.w	lr, #15
 8001222:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001226:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001228:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122c:	d039      	beq.n	80012a2 <HAL_GPIO_Init+0x18e>
 800122e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001232:	42a8      	cmp	r0, r5
 8001234:	d037      	beq.n	80012a6 <HAL_GPIO_Init+0x192>
 8001236:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800123a:	42a8      	cmp	r0, r5
 800123c:	d035      	beq.n	80012aa <HAL_GPIO_Init+0x196>
 800123e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001242:	42a8      	cmp	r0, r5
 8001244:	d033      	beq.n	80012ae <HAL_GPIO_Init+0x19a>
 8001246:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800124a:	42a8      	cmp	r0, r5
 800124c:	bf14      	ite	ne
 800124e:	2507      	movne	r5, #7
 8001250:	2504      	moveq	r5, #4
 8001252:	fa05 f50c 	lsl.w	r5, r5, ip
 8001256:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800125a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800125c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800125e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001260:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001264:	bf0c      	ite	eq
 8001266:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001268:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800126a:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800126c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800126e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001272:	bf0c      	ite	eq
 8001274:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001276:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001278:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800127c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001280:	bf0c      	ite	eq
 8001282:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001284:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001286:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001288:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800128a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800128c:	bf54      	ite	pl
 800128e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001290:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001292:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001294:	3301      	adds	r3, #1
 8001296:	2b10      	cmp	r3, #16
 8001298:	f47f af47 	bne.w	800112a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800129c:	b005      	add	sp, #20
 800129e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a2:	465d      	mov	r5, fp
 80012a4:	e7d5      	b.n	8001252 <HAL_GPIO_Init+0x13e>
 80012a6:	2501      	movs	r5, #1
 80012a8:	e7d3      	b.n	8001252 <HAL_GPIO_Init+0x13e>
 80012aa:	2502      	movs	r5, #2
 80012ac:	e7d1      	b.n	8001252 <HAL_GPIO_Init+0x13e>
 80012ae:	2503      	movs	r5, #3
 80012b0:	e7cf      	b.n	8001252 <HAL_GPIO_Init+0x13e>
 80012b2:	bf00      	nop
 80012b4:	40013c00 	.word	0x40013c00
 80012b8:	40020000 	.word	0x40020000
 80012bc:	40023800 	.word	0x40023800

080012c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c0:	b10a      	cbz	r2, 80012c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012c2:	6181      	str	r1, [r0, #24]
 80012c4:	4770      	bx	lr
 80012c6:	0409      	lsls	r1, r1, #16
 80012c8:	e7fb      	b.n	80012c2 <HAL_GPIO_WritePin+0x2>

080012ca <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80012ca:	6943      	ldr	r3, [r0, #20]
 80012cc:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012d0:	bf08      	it	eq
 80012d2:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d4:	6181      	str	r1, [r0, #24]
 80012d6:	4770      	bx	lr

080012d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012dc:	4604      	mov	r4, r0
 80012de:	b918      	cbnz	r0, 80012e8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80012e0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80012e2:	b002      	add	sp, #8
 80012e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e8:	6803      	ldr	r3, [r0, #0]
 80012ea:	07dd      	lsls	r5, r3, #31
 80012ec:	d410      	bmi.n	8001310 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ee:	6823      	ldr	r3, [r4, #0]
 80012f0:	0798      	lsls	r0, r3, #30
 80012f2:	d458      	bmi.n	80013a6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	071a      	lsls	r2, r3, #28
 80012f8:	f100 809a 	bmi.w	8001430 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	075b      	lsls	r3, r3, #29
 8001300:	f100 80b8 	bmi.w	8001474 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001304:	69a2      	ldr	r2, [r4, #24]
 8001306:	2a00      	cmp	r2, #0
 8001308:	f040 8119 	bne.w	800153e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800130c:	2000      	movs	r0, #0
 800130e:	e7e8      	b.n	80012e2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001310:	4ba6      	ldr	r3, [pc, #664]	; (80015ac <HAL_RCC_OscConfig+0x2d4>)
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	f002 020c 	and.w	r2, r2, #12
 8001318:	2a04      	cmp	r2, #4
 800131a:	d007      	beq.n	800132c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001322:	2a08      	cmp	r2, #8
 8001324:	d10a      	bne.n	800133c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	0259      	lsls	r1, r3, #9
 800132a:	d507      	bpl.n	800133c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132c:	4b9f      	ldr	r3, [pc, #636]	; (80015ac <HAL_RCC_OscConfig+0x2d4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	039a      	lsls	r2, r3, #14
 8001332:	d5dc      	bpl.n	80012ee <HAL_RCC_OscConfig+0x16>
 8001334:	6863      	ldr	r3, [r4, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1d9      	bne.n	80012ee <HAL_RCC_OscConfig+0x16>
 800133a:	e7d1      	b.n	80012e0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133c:	6863      	ldr	r3, [r4, #4]
 800133e:	4d9b      	ldr	r5, [pc, #620]	; (80015ac <HAL_RCC_OscConfig+0x2d4>)
 8001340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001344:	d111      	bne.n	800136a <HAL_RCC_OscConfig+0x92>
 8001346:	682b      	ldr	r3, [r5, #0]
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800134e:	f7ff fe71 	bl	8001034 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001352:	4d96      	ldr	r5, [pc, #600]	; (80015ac <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001354:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	682b      	ldr	r3, [r5, #0]
 8001358:	039b      	lsls	r3, r3, #14
 800135a:	d4c8      	bmi.n	80012ee <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800135c:	f7ff fe6a 	bl	8001034 <HAL_GetTick>
 8001360:	1b80      	subs	r0, r0, r6
 8001362:	2864      	cmp	r0, #100	; 0x64
 8001364:	d9f7      	bls.n	8001356 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001366:	2003      	movs	r0, #3
 8001368:	e7bb      	b.n	80012e2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800136e:	d104      	bne.n	800137a <HAL_RCC_OscConfig+0xa2>
 8001370:	682b      	ldr	r3, [r5, #0]
 8001372:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001376:	602b      	str	r3, [r5, #0]
 8001378:	e7e5      	b.n	8001346 <HAL_RCC_OscConfig+0x6e>
 800137a:	682a      	ldr	r2, [r5, #0]
 800137c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001380:	602a      	str	r2, [r5, #0]
 8001382:	682a      	ldr	r2, [r5, #0]
 8001384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001388:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1df      	bne.n	800134e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800138e:	f7ff fe51 	bl	8001034 <HAL_GetTick>
 8001392:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001394:	682b      	ldr	r3, [r5, #0]
 8001396:	039f      	lsls	r7, r3, #14
 8001398:	d5a9      	bpl.n	80012ee <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800139a:	f7ff fe4b 	bl	8001034 <HAL_GetTick>
 800139e:	1b80      	subs	r0, r0, r6
 80013a0:	2864      	cmp	r0, #100	; 0x64
 80013a2:	d9f7      	bls.n	8001394 <HAL_RCC_OscConfig+0xbc>
 80013a4:	e7df      	b.n	8001366 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013a6:	4b81      	ldr	r3, [pc, #516]	; (80015ac <HAL_RCC_OscConfig+0x2d4>)
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	f012 0f0c 	tst.w	r2, #12
 80013ae:	d007      	beq.n	80013c0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013b6:	2a08      	cmp	r2, #8
 80013b8:	d111      	bne.n	80013de <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	025e      	lsls	r6, r3, #9
 80013be:	d40e      	bmi.n	80013de <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c0:	4b7a      	ldr	r3, [pc, #488]	; (80015ac <HAL_RCC_OscConfig+0x2d4>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	0795      	lsls	r5, r2, #30
 80013c6:	d502      	bpl.n	80013ce <HAL_RCC_OscConfig+0xf6>
 80013c8:	68e2      	ldr	r2, [r4, #12]
 80013ca:	2a01      	cmp	r2, #1
 80013cc:	d188      	bne.n	80012e0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	6921      	ldr	r1, [r4, #16]
 80013d2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80013d6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80013da:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013dc:	e78a      	b.n	80012f4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013de:	68e2      	ldr	r2, [r4, #12]
 80013e0:	4b73      	ldr	r3, [pc, #460]	; (80015b0 <HAL_RCC_OscConfig+0x2d8>)
 80013e2:	b1b2      	cbz	r2, 8001412 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013e8:	f7ff fe24 	bl	8001034 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ec:	4d6f      	ldr	r5, [pc, #444]	; (80015ac <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80013ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	682b      	ldr	r3, [r5, #0]
 80013f2:	0798      	lsls	r0, r3, #30
 80013f4:	d507      	bpl.n	8001406 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	682b      	ldr	r3, [r5, #0]
 80013f8:	6922      	ldr	r2, [r4, #16]
 80013fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013fe:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001402:	602b      	str	r3, [r5, #0]
 8001404:	e776      	b.n	80012f4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001406:	f7ff fe15 	bl	8001034 <HAL_GetTick>
 800140a:	1b80      	subs	r0, r0, r6
 800140c:	2802      	cmp	r0, #2
 800140e:	d9ef      	bls.n	80013f0 <HAL_RCC_OscConfig+0x118>
 8001410:	e7a9      	b.n	8001366 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001412:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001414:	f7ff fe0e 	bl	8001034 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001418:	4d64      	ldr	r5, [pc, #400]	; (80015ac <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800141a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141c:	682b      	ldr	r3, [r5, #0]
 800141e:	0799      	lsls	r1, r3, #30
 8001420:	f57f af68 	bpl.w	80012f4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001424:	f7ff fe06 	bl	8001034 <HAL_GetTick>
 8001428:	1b80      	subs	r0, r0, r6
 800142a:	2802      	cmp	r0, #2
 800142c:	d9f6      	bls.n	800141c <HAL_RCC_OscConfig+0x144>
 800142e:	e79a      	b.n	8001366 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001430:	6962      	ldr	r2, [r4, #20]
 8001432:	4b60      	ldr	r3, [pc, #384]	; (80015b4 <HAL_RCC_OscConfig+0x2dc>)
 8001434:	b17a      	cbz	r2, 8001456 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800143a:	f7ff fdfb 	bl	8001034 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143e:	4d5b      	ldr	r5, [pc, #364]	; (80015ac <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001440:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001444:	079f      	lsls	r7, r3, #30
 8001446:	f53f af59 	bmi.w	80012fc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144a:	f7ff fdf3 	bl	8001034 <HAL_GetTick>
 800144e:	1b80      	subs	r0, r0, r6
 8001450:	2802      	cmp	r0, #2
 8001452:	d9f6      	bls.n	8001442 <HAL_RCC_OscConfig+0x16a>
 8001454:	e787      	b.n	8001366 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001456:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001458:	f7ff fdec 	bl	8001034 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145c:	4d53      	ldr	r5, [pc, #332]	; (80015ac <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800145e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001462:	0798      	lsls	r0, r3, #30
 8001464:	f57f af4a 	bpl.w	80012fc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001468:	f7ff fde4 	bl	8001034 <HAL_GetTick>
 800146c:	1b80      	subs	r0, r0, r6
 800146e:	2802      	cmp	r0, #2
 8001470:	d9f6      	bls.n	8001460 <HAL_RCC_OscConfig+0x188>
 8001472:	e778      	b.n	8001366 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001474:	4b4d      	ldr	r3, [pc, #308]	; (80015ac <HAL_RCC_OscConfig+0x2d4>)
 8001476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001478:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800147c:	d128      	bne.n	80014d0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	9201      	str	r2, [sp, #4]
 8001480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001482:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001486:	641a      	str	r2, [r3, #64]	; 0x40
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	9301      	str	r3, [sp, #4]
 8001490:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001492:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001494:	4d48      	ldr	r5, [pc, #288]	; (80015b8 <HAL_RCC_OscConfig+0x2e0>)
 8001496:	682b      	ldr	r3, [r5, #0]
 8001498:	05d9      	lsls	r1, r3, #23
 800149a:	d51b      	bpl.n	80014d4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800149c:	68a3      	ldr	r3, [r4, #8]
 800149e:	4d43      	ldr	r5, [pc, #268]	; (80015ac <HAL_RCC_OscConfig+0x2d4>)
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d127      	bne.n	80014f4 <HAL_RCC_OscConfig+0x21c>
 80014a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80014ac:	f7ff fdc2 	bl	8001034 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b0:	4d3e      	ldr	r5, [pc, #248]	; (80015ac <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80014b2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014ba:	079b      	lsls	r3, r3, #30
 80014bc:	d539      	bpl.n	8001532 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80014be:	2e00      	cmp	r6, #0
 80014c0:	f43f af20 	beq.w	8001304 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c4:	4a39      	ldr	r2, [pc, #228]	; (80015ac <HAL_RCC_OscConfig+0x2d4>)
 80014c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80014c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	e719      	b.n	8001304 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80014d0:	2600      	movs	r6, #0
 80014d2:	e7df      	b.n	8001494 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d4:	682b      	ldr	r3, [r5, #0]
 80014d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014da:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80014dc:	f7ff fdaa 	bl	8001034 <HAL_GetTick>
 80014e0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e2:	682b      	ldr	r3, [r5, #0]
 80014e4:	05da      	lsls	r2, r3, #23
 80014e6:	d4d9      	bmi.n	800149c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e8:	f7ff fda4 	bl	8001034 <HAL_GetTick>
 80014ec:	1bc0      	subs	r0, r0, r7
 80014ee:	2802      	cmp	r0, #2
 80014f0:	d9f7      	bls.n	80014e2 <HAL_RCC_OscConfig+0x20a>
 80014f2:	e738      	b.n	8001366 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f4:	2b05      	cmp	r3, #5
 80014f6:	d104      	bne.n	8001502 <HAL_RCC_OscConfig+0x22a>
 80014f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014fa:	f043 0304 	orr.w	r3, r3, #4
 80014fe:	672b      	str	r3, [r5, #112]	; 0x70
 8001500:	e7d0      	b.n	80014a4 <HAL_RCC_OscConfig+0x1cc>
 8001502:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001504:	f022 0201 	bic.w	r2, r2, #1
 8001508:	672a      	str	r2, [r5, #112]	; 0x70
 800150a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800150c:	f022 0204 	bic.w	r2, r2, #4
 8001510:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1ca      	bne.n	80014ac <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001516:	f7ff fd8d 	bl	8001034 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800151a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800151e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001520:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001522:	0798      	lsls	r0, r3, #30
 8001524:	d5cb      	bpl.n	80014be <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001526:	f7ff fd85 	bl	8001034 <HAL_GetTick>
 800152a:	1bc0      	subs	r0, r0, r7
 800152c:	4540      	cmp	r0, r8
 800152e:	d9f7      	bls.n	8001520 <HAL_RCC_OscConfig+0x248>
 8001530:	e719      	b.n	8001366 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001532:	f7ff fd7f 	bl	8001034 <HAL_GetTick>
 8001536:	1bc0      	subs	r0, r0, r7
 8001538:	4540      	cmp	r0, r8
 800153a:	d9bd      	bls.n	80014b8 <HAL_RCC_OscConfig+0x1e0>
 800153c:	e713      	b.n	8001366 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800153e:	4d1b      	ldr	r5, [pc, #108]	; (80015ac <HAL_RCC_OscConfig+0x2d4>)
 8001540:	68ab      	ldr	r3, [r5, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b08      	cmp	r3, #8
 8001548:	f43f aeca 	beq.w	80012e0 <HAL_RCC_OscConfig+0x8>
 800154c:	4e1b      	ldr	r6, [pc, #108]	; (80015bc <HAL_RCC_OscConfig+0x2e4>)
 800154e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001550:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001552:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001554:	d134      	bne.n	80015c0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001556:	f7ff fd6d 	bl	8001034 <HAL_GetTick>
 800155a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155c:	682b      	ldr	r3, [r5, #0]
 800155e:	0199      	lsls	r1, r3, #6
 8001560:	d41e      	bmi.n	80015a0 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001562:	6a22      	ldr	r2, [r4, #32]
 8001564:	69e3      	ldr	r3, [r4, #28]
 8001566:	4313      	orrs	r3, r2
 8001568:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800156a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800156e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001570:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001574:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001576:	4c0d      	ldr	r4, [pc, #52]	; (80015ac <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001578:	0852      	lsrs	r2, r2, #1
 800157a:	3a01      	subs	r2, #1
 800157c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001580:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001582:	2301      	movs	r3, #1
 8001584:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001586:	f7ff fd55 	bl	8001034 <HAL_GetTick>
 800158a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	019a      	lsls	r2, r3, #6
 8001590:	f53f aebc 	bmi.w	800130c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff fd4e 	bl	8001034 <HAL_GetTick>
 8001598:	1b40      	subs	r0, r0, r5
 800159a:	2802      	cmp	r0, #2
 800159c:	d9f6      	bls.n	800158c <HAL_RCC_OscConfig+0x2b4>
 800159e:	e6e2      	b.n	8001366 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a0:	f7ff fd48 	bl	8001034 <HAL_GetTick>
 80015a4:	1bc0      	subs	r0, r0, r7
 80015a6:	2802      	cmp	r0, #2
 80015a8:	d9d8      	bls.n	800155c <HAL_RCC_OscConfig+0x284>
 80015aa:	e6dc      	b.n	8001366 <HAL_RCC_OscConfig+0x8e>
 80015ac:	40023800 	.word	0x40023800
 80015b0:	42470000 	.word	0x42470000
 80015b4:	42470e80 	.word	0x42470e80
 80015b8:	40007000 	.word	0x40007000
 80015bc:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80015c0:	f7ff fd38 	bl	8001034 <HAL_GetTick>
 80015c4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c6:	682b      	ldr	r3, [r5, #0]
 80015c8:	019b      	lsls	r3, r3, #6
 80015ca:	f57f ae9f 	bpl.w	800130c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ce:	f7ff fd31 	bl	8001034 <HAL_GetTick>
 80015d2:	1b00      	subs	r0, r0, r4
 80015d4:	2802      	cmp	r0, #2
 80015d6:	d9f6      	bls.n	80015c6 <HAL_RCC_OscConfig+0x2ee>
 80015d8:	e6c5      	b.n	8001366 <HAL_RCC_OscConfig+0x8e>
 80015da:	bf00      	nop

080015dc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015dc:	4913      	ldr	r1, [pc, #76]	; (800162c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80015de:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015e0:	688b      	ldr	r3, [r1, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d003      	beq.n	80015f2 <HAL_RCC_GetSysClockFreq+0x16>
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d003      	beq.n	80015f6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015ee:	4810      	ldr	r0, [pc, #64]	; (8001630 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80015f0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80015f2:	4810      	ldr	r0, [pc, #64]	; (8001634 <HAL_RCC_GetSysClockFreq+0x58>)
 80015f4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015f6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015f8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015fa:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015fc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001600:	bf14      	ite	ne
 8001602:	480c      	ldrne	r0, [pc, #48]	; (8001634 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001604:	480a      	ldreq	r0, [pc, #40]	; (8001630 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001606:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800160a:	bf18      	it	ne
 800160c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800160e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001612:	fba1 0100 	umull	r0, r1, r1, r0
 8001616:	f7ff fb3b 	bl	8000c90 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <HAL_RCC_GetSysClockFreq+0x50>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001622:	3301      	adds	r3, #1
 8001624:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001626:	fbb0 f0f3 	udiv	r0, r0, r3
 800162a:	bd08      	pop	{r3, pc}
 800162c:	40023800 	.word	0x40023800
 8001630:	00f42400 	.word	0x00f42400
 8001634:	007a1200 	.word	0x007a1200

08001638 <HAL_RCC_ClockConfig>:
{
 8001638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800163c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800163e:	4604      	mov	r4, r0
 8001640:	b910      	cbnz	r0, 8001648 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001642:	2001      	movs	r0, #1
 8001644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001648:	4b44      	ldr	r3, [pc, #272]	; (800175c <HAL_RCC_ClockConfig+0x124>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	f002 020f 	and.w	r2, r2, #15
 8001650:	428a      	cmp	r2, r1
 8001652:	d328      	bcc.n	80016a6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001654:	6821      	ldr	r1, [r4, #0]
 8001656:	078f      	lsls	r7, r1, #30
 8001658:	d42d      	bmi.n	80016b6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165a:	07c8      	lsls	r0, r1, #31
 800165c:	d440      	bmi.n	80016e0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800165e:	4b3f      	ldr	r3, [pc, #252]	; (800175c <HAL_RCC_ClockConfig+0x124>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	f002 020f 	and.w	r2, r2, #15
 8001666:	4295      	cmp	r5, r2
 8001668:	d366      	bcc.n	8001738 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166a:	6822      	ldr	r2, [r4, #0]
 800166c:	0751      	lsls	r1, r2, #29
 800166e:	d46c      	bmi.n	800174a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001670:	0713      	lsls	r3, r2, #28
 8001672:	d507      	bpl.n	8001684 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001674:	4a3a      	ldr	r2, [pc, #232]	; (8001760 <HAL_RCC_ClockConfig+0x128>)
 8001676:	6921      	ldr	r1, [r4, #16]
 8001678:	6893      	ldr	r3, [r2, #8]
 800167a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800167e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001682:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001684:	f7ff ffaa 	bl	80015dc <HAL_RCC_GetSysClockFreq>
 8001688:	4b35      	ldr	r3, [pc, #212]	; (8001760 <HAL_RCC_ClockConfig+0x128>)
 800168a:	4a36      	ldr	r2, [pc, #216]	; (8001764 <HAL_RCC_ClockConfig+0x12c>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001692:	5cd3      	ldrb	r3, [r2, r3]
 8001694:	40d8      	lsrs	r0, r3
 8001696:	4b34      	ldr	r3, [pc, #208]	; (8001768 <HAL_RCC_ClockConfig+0x130>)
 8001698:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800169a:	2000      	movs	r0, #0
 800169c:	f7ff fc80 	bl	8000fa0 <HAL_InitTick>
  return HAL_OK;
 80016a0:	2000      	movs	r0, #0
 80016a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	b2ca      	uxtb	r2, r1
 80016a8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 030f 	and.w	r3, r3, #15
 80016b0:	4299      	cmp	r1, r3
 80016b2:	d1c6      	bne.n	8001642 <HAL_RCC_ClockConfig+0xa>
 80016b4:	e7ce      	b.n	8001654 <HAL_RCC_ClockConfig+0x1c>
 80016b6:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016bc:	bf1e      	ittt	ne
 80016be:	689a      	ldrne	r2, [r3, #8]
 80016c0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80016c4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016c8:	bf42      	ittt	mi
 80016ca:	689a      	ldrmi	r2, [r3, #8]
 80016cc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80016d0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	68a0      	ldr	r0, [r4, #8]
 80016d6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80016da:	4302      	orrs	r2, r0
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	e7bc      	b.n	800165a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016e0:	6862      	ldr	r2, [r4, #4]
 80016e2:	4b1f      	ldr	r3, [pc, #124]	; (8001760 <HAL_RCC_ClockConfig+0x128>)
 80016e4:	2a01      	cmp	r2, #1
 80016e6:	d11d      	bne.n	8001724 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ee:	d0a8      	beq.n	8001642 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f0:	4e1b      	ldr	r6, [pc, #108]	; (8001760 <HAL_RCC_ClockConfig+0x128>)
 80016f2:	68b3      	ldr	r3, [r6, #8]
 80016f4:	f023 0303 	bic.w	r3, r3, #3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80016fc:	f7ff fc9a 	bl	8001034 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001700:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001704:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001706:	68b3      	ldr	r3, [r6, #8]
 8001708:	6862      	ldr	r2, [r4, #4]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001712:	d0a4      	beq.n	800165e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001714:	f7ff fc8e 	bl	8001034 <HAL_GetTick>
 8001718:	1bc0      	subs	r0, r0, r7
 800171a:	4540      	cmp	r0, r8
 800171c:	d9f3      	bls.n	8001706 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800171e:	2003      	movs	r0, #3
}
 8001720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001724:	1e91      	subs	r1, r2, #2
 8001726:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001728:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172a:	d802      	bhi.n	8001732 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001730:	e7dd      	b.n	80016ee <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	f013 0f02 	tst.w	r3, #2
 8001736:	e7da      	b.n	80016ee <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001738:	b2ea      	uxtb	r2, r5
 800173a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	429d      	cmp	r5, r3
 8001744:	f47f af7d 	bne.w	8001642 <HAL_RCC_ClockConfig+0xa>
 8001748:	e78f      	b.n	800166a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800174a:	4905      	ldr	r1, [pc, #20]	; (8001760 <HAL_RCC_ClockConfig+0x128>)
 800174c:	68e0      	ldr	r0, [r4, #12]
 800174e:	688b      	ldr	r3, [r1, #8]
 8001750:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001754:	4303      	orrs	r3, r0
 8001756:	608b      	str	r3, [r1, #8]
 8001758:	e78a      	b.n	8001670 <HAL_RCC_ClockConfig+0x38>
 800175a:	bf00      	nop
 800175c:	40023c00 	.word	0x40023c00
 8001760:	40023800 	.word	0x40023800
 8001764:	0800668d 	.word	0x0800668d
 8001768:	20000048 	.word	0x20000048

0800176c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <HAL_RCC_GetPCLK1Freq+0x14>)
 800176e:	4a05      	ldr	r2, [pc, #20]	; (8001784 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001776:	5cd3      	ldrb	r3, [r2, r3]
 8001778:	4a03      	ldr	r2, [pc, #12]	; (8001788 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800177a:	6810      	ldr	r0, [r2, #0]
}
 800177c:	40d8      	lsrs	r0, r3
 800177e:	4770      	bx	lr
 8001780:	40023800 	.word	0x40023800
 8001784:	0800669d 	.word	0x0800669d
 8001788:	20000048 	.word	0x20000048

0800178c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001796:	5cd3      	ldrb	r3, [r2, r3]
 8001798:	4a03      	ldr	r2, [pc, #12]	; (80017a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800179a:	6810      	ldr	r0, [r2, #0]
}
 800179c:	40d8      	lsrs	r0, r3
 800179e:	4770      	bx	lr
 80017a0:	40023800 	.word	0x40023800
 80017a4:	0800669d 	.word	0x0800669d
 80017a8:	20000048 	.word	0x20000048

080017ac <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017ac:	6a03      	ldr	r3, [r0, #32]
 80017ae:	f023 0301 	bic.w	r3, r3, #1
 80017b2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017b4:	6a03      	ldr	r3, [r0, #32]
{
 80017b6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017b8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80017ba:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80017bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80017be:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80017c2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80017c4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80017c6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80017ca:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80017cc:	4d0a      	ldr	r5, [pc, #40]	; (80017f8 <TIM_OC1_SetConfig+0x4c>)
 80017ce:	42a8      	cmp	r0, r5
 80017d0:	d10b      	bne.n	80017ea <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80017d2:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80017d4:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 80017d6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80017da:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80017dc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80017de:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80017e2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80017e4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80017e8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017ea:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80017ec:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80017ee:	684a      	ldr	r2, [r1, #4]
 80017f0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017f2:	6203      	str	r3, [r0, #32]
 80017f4:	bd70      	pop	{r4, r5, r6, pc}
 80017f6:	bf00      	nop
 80017f8:	40010000 	.word	0x40010000

080017fc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80017fc:	6a03      	ldr	r3, [r0, #32]
 80017fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001802:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001804:	6a03      	ldr	r3, [r0, #32]
{
 8001806:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001808:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800180a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800180c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800180e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001812:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001814:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001816:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800181a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800181e:	4d0b      	ldr	r5, [pc, #44]	; (800184c <TIM_OC3_SetConfig+0x50>)
 8001820:	42a8      	cmp	r0, r5
 8001822:	d10d      	bne.n	8001840 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001824:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001826:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001828:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800182c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001830:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001832:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001836:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001838:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800183c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001840:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001842:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001844:	684a      	ldr	r2, [r1, #4]
 8001846:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001848:	6203      	str	r3, [r0, #32]
 800184a:	bd70      	pop	{r4, r5, r6, pc}
 800184c:	40010000 	.word	0x40010000

08001850 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001850:	6a03      	ldr	r3, [r0, #32]
 8001852:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001856:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001858:	6a03      	ldr	r3, [r0, #32]
{
 800185a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800185c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800185e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001860:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001862:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001866:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800186a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800186c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001870:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001874:	4d06      	ldr	r5, [pc, #24]	; (8001890 <TIM_OC4_SetConfig+0x40>)
 8001876:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001878:	bf02      	ittt	eq
 800187a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800187c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001880:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001884:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001886:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001888:	684a      	ldr	r2, [r1, #4]
 800188a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800188c:	6203      	str	r3, [r0, #32]
 800188e:	bd30      	pop	{r4, r5, pc}
 8001890:	40010000 	.word	0x40010000

08001894 <HAL_TIM_PeriodElapsedCallback>:
 8001894:	4770      	bx	lr

08001896 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001896:	4770      	bx	lr

08001898 <HAL_TIM_TriggerCallback>:
 8001898:	4770      	bx	lr

0800189a <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800189a:	6803      	ldr	r3, [r0, #0]
 800189c:	691a      	ldr	r2, [r3, #16]
 800189e:	0791      	lsls	r1, r2, #30
{
 80018a0:	b510      	push	{r4, lr}
 80018a2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018a4:	d50e      	bpl.n	80018c4 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	0792      	lsls	r2, r2, #30
 80018aa:	d50b      	bpl.n	80018c4 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018ac:	f06f 0202 	mvn.w	r2, #2
 80018b0:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018b2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018b4:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018b6:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018b8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018ba:	d077      	beq.n	80019ac <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80018bc:	f000 fdc4 	bl	8002448 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018c0:	2300      	movs	r3, #0
 80018c2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	691a      	ldr	r2, [r3, #16]
 80018c8:	0750      	lsls	r0, r2, #29
 80018ca:	d510      	bpl.n	80018ee <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	0751      	lsls	r1, r2, #29
 80018d0:	d50d      	bpl.n	80018ee <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018d2:	f06f 0204 	mvn.w	r2, #4
 80018d6:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018d8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018da:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018dc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018e0:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80018e2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018e4:	d068      	beq.n	80019b8 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80018e6:	f000 fdaf 	bl	8002448 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018ea:	2300      	movs	r3, #0
 80018ec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	691a      	ldr	r2, [r3, #16]
 80018f2:	0712      	lsls	r2, r2, #28
 80018f4:	d50f      	bpl.n	8001916 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	0710      	lsls	r0, r2, #28
 80018fa:	d50c      	bpl.n	8001916 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018fc:	f06f 0208 	mvn.w	r2, #8
 8001900:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001902:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001904:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001906:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001908:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800190a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800190c:	d05a      	beq.n	80019c4 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800190e:	f000 fd9b 	bl	8002448 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001912:	2300      	movs	r3, #0
 8001914:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001916:	6823      	ldr	r3, [r4, #0]
 8001918:	691a      	ldr	r2, [r3, #16]
 800191a:	06d2      	lsls	r2, r2, #27
 800191c:	d510      	bpl.n	8001940 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	06d0      	lsls	r0, r2, #27
 8001922:	d50d      	bpl.n	8001940 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001924:	f06f 0210 	mvn.w	r2, #16
 8001928:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800192a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800192c:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800192e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001932:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001934:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001936:	d04b      	beq.n	80019d0 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001938:	f000 fd86 	bl	8002448 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800193c:	2300      	movs	r3, #0
 800193e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001940:	6823      	ldr	r3, [r4, #0]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	07d1      	lsls	r1, r2, #31
 8001946:	d508      	bpl.n	800195a <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	07d2      	lsls	r2, r2, #31
 800194c:	d505      	bpl.n	800195a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800194e:	f06f 0201 	mvn.w	r2, #1
 8001952:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001954:	4620      	mov	r0, r4
 8001956:	f7ff ff9d 	bl	8001894 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	691a      	ldr	r2, [r3, #16]
 800195e:	0610      	lsls	r0, r2, #24
 8001960:	d508      	bpl.n	8001974 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001962:	68da      	ldr	r2, [r3, #12]
 8001964:	0611      	lsls	r1, r2, #24
 8001966:	d505      	bpl.n	8001974 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001968:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800196c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800196e:	4620      	mov	r0, r4
 8001970:	f000 fafe 	bl	8001f70 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	0652      	lsls	r2, r2, #25
 800197a:	d508      	bpl.n	800198e <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	0650      	lsls	r0, r2, #25
 8001980:	d505      	bpl.n	800198e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001982:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001986:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001988:	4620      	mov	r0, r4
 800198a:	f7ff ff85 	bl	8001898 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	691a      	ldr	r2, [r3, #16]
 8001992:	0691      	lsls	r1, r2, #26
 8001994:	d522      	bpl.n	80019dc <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	0692      	lsls	r2, r2, #26
 800199a:	d51f      	bpl.n	80019dc <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800199c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80019a0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019a2:	611a      	str	r2, [r3, #16]
}
 80019a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80019a8:	f000 bae1 	b.w	8001f6e <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ac:	f001 fc56 	bl	800325c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b0:	4620      	mov	r0, r4
 80019b2:	f7ff ff70 	bl	8001896 <HAL_TIM_PWM_PulseFinishedCallback>
 80019b6:	e783      	b.n	80018c0 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b8:	f001 fc50 	bl	800325c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019bc:	4620      	mov	r0, r4
 80019be:	f7ff ff6a 	bl	8001896 <HAL_TIM_PWM_PulseFinishedCallback>
 80019c2:	e792      	b.n	80018ea <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c4:	f001 fc4a 	bl	800325c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7ff ff64 	bl	8001896 <HAL_TIM_PWM_PulseFinishedCallback>
 80019ce:	e7a0      	b.n	8001912 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019d0:	f001 fc44 	bl	800325c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019d4:	4620      	mov	r0, r4
 80019d6:	f7ff ff5e 	bl	8001896 <HAL_TIM_PWM_PulseFinishedCallback>
 80019da:	e7af      	b.n	800193c <HAL_TIM_IRQHandler+0xa2>
 80019dc:	bd10      	pop	{r4, pc}
	...

080019e0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019e0:	4a24      	ldr	r2, [pc, #144]	; (8001a74 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 80019e2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019e4:	4290      	cmp	r0, r2
 80019e6:	d00e      	beq.n	8001a06 <TIM_Base_SetConfig+0x26>
 80019e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80019ec:	d00b      	beq.n	8001a06 <TIM_Base_SetConfig+0x26>
 80019ee:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80019f2:	4290      	cmp	r0, r2
 80019f4:	d007      	beq.n	8001a06 <TIM_Base_SetConfig+0x26>
 80019f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019fa:	4290      	cmp	r0, r2
 80019fc:	d003      	beq.n	8001a06 <TIM_Base_SetConfig+0x26>
 80019fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a02:	4290      	cmp	r0, r2
 8001a04:	d115      	bne.n	8001a32 <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 8001a06:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001a0c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a0e:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <TIM_Base_SetConfig+0x94>)
 8001a10:	4290      	cmp	r0, r2
 8001a12:	d019      	beq.n	8001a48 <TIM_Base_SetConfig+0x68>
 8001a14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001a18:	d016      	beq.n	8001a48 <TIM_Base_SetConfig+0x68>
 8001a1a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001a1e:	4290      	cmp	r0, r2
 8001a20:	d012      	beq.n	8001a48 <TIM_Base_SetConfig+0x68>
 8001a22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a26:	4290      	cmp	r0, r2
 8001a28:	d00e      	beq.n	8001a48 <TIM_Base_SetConfig+0x68>
 8001a2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a2e:	4290      	cmp	r0, r2
 8001a30:	d00a      	beq.n	8001a48 <TIM_Base_SetConfig+0x68>
 8001a32:	4a11      	ldr	r2, [pc, #68]	; (8001a78 <TIM_Base_SetConfig+0x98>)
 8001a34:	4290      	cmp	r0, r2
 8001a36:	d007      	beq.n	8001a48 <TIM_Base_SetConfig+0x68>
 8001a38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a3c:	4290      	cmp	r0, r2
 8001a3e:	d003      	beq.n	8001a48 <TIM_Base_SetConfig+0x68>
 8001a40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a44:	4290      	cmp	r0, r2
 8001a46:	d103      	bne.n	8001a50 <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a48:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a4e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a50:	694a      	ldr	r2, [r1, #20]
 8001a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a56:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001a58:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a5a:	688b      	ldr	r3, [r1, #8]
 8001a5c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001a5e:	680b      	ldr	r3, [r1, #0]
 8001a60:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <TIM_Base_SetConfig+0x94>)
 8001a64:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001a66:	bf04      	itt	eq
 8001a68:	690b      	ldreq	r3, [r1, #16]
 8001a6a:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	6143      	str	r3, [r0, #20]
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40010000 	.word	0x40010000
 8001a78:	40014000 	.word	0x40014000

08001a7c <HAL_TIM_OC_Init>:
{
 8001a7c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001a7e:	4604      	mov	r4, r0
 8001a80:	b1a0      	cbz	r0, 8001aac <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001a82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a8a:	b91b      	cbnz	r3, 8001a94 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001a8c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8001a90:	f001 fcea 	bl	8003468 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001a94:	2302      	movs	r3, #2
 8001a96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001a9a:	6820      	ldr	r0, [r4, #0]
 8001a9c:	1d21      	adds	r1, r4, #4
 8001a9e:	f7ff ff9f 	bl	80019e0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001aac:	2001      	movs	r0, #1
}
 8001aae:	bd10      	pop	{r4, pc}

08001ab0 <HAL_TIM_PWM_Init>:
{
 8001ab0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	b1a0      	cbz	r0, 8001ae0 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001ab6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001aba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001abe:	b91b      	cbnz	r3, 8001ac8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001ac0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001ac4:	f001 fcb8 	bl	8003438 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ace:	6820      	ldr	r0, [r4, #0]
 8001ad0:	1d21      	adds	r1, r4, #4
 8001ad2:	f7ff ff85 	bl	80019e0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001adc:	2000      	movs	r0, #0
 8001ade:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ae0:	2001      	movs	r0, #1
}
 8001ae2:	bd10      	pop	{r4, pc}

08001ae4 <HAL_TIM_IC_Init>:
{
 8001ae4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001ae6:	4604      	mov	r4, r0
 8001ae8:	b1a0      	cbz	r0, 8001b14 <HAL_TIM_IC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001aea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001aee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001af2:	b91b      	cbnz	r3, 8001afc <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001af4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8001af8:	f001 fc64 	bl	80033c4 <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001afc:	2302      	movs	r3, #2
 8001afe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b02:	6820      	ldr	r0, [r4, #0]
 8001b04:	1d21      	adds	r1, r4, #4
 8001b06:	f7ff ff6b 	bl	80019e0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001b10:	2000      	movs	r0, #0
 8001b12:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b14:	2001      	movs	r0, #1
}
 8001b16:	bd10      	pop	{r4, pc}

08001b18 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b18:	6a03      	ldr	r3, [r0, #32]
 8001b1a:	f023 0310 	bic.w	r3, r3, #16
 8001b1e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001b20:	6a03      	ldr	r3, [r0, #32]
{
 8001b22:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001b24:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001b26:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b28:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001b2a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b2e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b32:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001b34:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b38:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001b3c:	4d0b      	ldr	r5, [pc, #44]	; (8001b6c <TIM_OC2_SetConfig+0x54>)
 8001b3e:	42a8      	cmp	r0, r5
 8001b40:	d10d      	bne.n	8001b5e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b42:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b44:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b4a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001b4e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b50:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b54:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b5a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001b5e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001b60:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001b62:	684a      	ldr	r2, [r1, #4]
 8001b64:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001b66:	6203      	str	r3, [r0, #32]
 8001b68:	bd70      	pop	{r4, r5, r6, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40010000 	.word	0x40010000

08001b70 <HAL_TIM_OC_ConfigChannel>:
{
 8001b70:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001b72:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001b76:	2b01      	cmp	r3, #1
{
 8001b78:	4604      	mov	r4, r0
 8001b7a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001b7e:	d018      	beq.n	8001bb2 <HAL_TIM_OC_ConfigChannel+0x42>
 8001b80:	2301      	movs	r3, #1
 8001b82:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001b86:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 8001b8a:	461d      	mov	r5, r3
  switch (Channel)
 8001b8c:	2a0c      	cmp	r2, #12
 8001b8e:	d80b      	bhi.n	8001ba8 <HAL_TIM_OC_ConfigChannel+0x38>
 8001b90:	e8df f002 	tbb	[pc, r2]
 8001b94:	0a0a0a07 	.word	0x0a0a0a07
 8001b98:	0a0a0a10 	.word	0x0a0a0a10
 8001b9c:	0a0a0a14 	.word	0x0a0a0a14
 8001ba0:	18          	.byte	0x18
 8001ba1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ba2:	6820      	ldr	r0, [r4, #0]
 8001ba4:	f7ff fe02 	bl	80017ac <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8001ba8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001baa:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001bae:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001bb2:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001bb4:	6820      	ldr	r0, [r4, #0]
 8001bb6:	f7ff ffaf 	bl	8001b18 <TIM_OC2_SetConfig>
      break;
 8001bba:	e7f5      	b.n	8001ba8 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001bbc:	6820      	ldr	r0, [r4, #0]
 8001bbe:	f7ff fe1d 	bl	80017fc <TIM_OC3_SetConfig>
      break;
 8001bc2:	e7f1      	b.n	8001ba8 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001bc4:	6820      	ldr	r0, [r4, #0]
 8001bc6:	f7ff fe43 	bl	8001850 <TIM_OC4_SetConfig>
      break;
 8001bca:	e7ed      	b.n	8001ba8 <HAL_TIM_OC_ConfigChannel+0x38>

08001bcc <HAL_TIM_PWM_ConfigChannel>:
{
 8001bcc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001bce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001bd2:	2b01      	cmp	r3, #1
{
 8001bd4:	4604      	mov	r4, r0
 8001bd6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001bda:	d025      	beq.n	8001c28 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001be2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8001be6:	2a0c      	cmp	r2, #12
 8001be8:	d818      	bhi.n	8001c1c <HAL_TIM_PWM_ConfigChannel+0x50>
 8001bea:	e8df f002 	tbb	[pc, r2]
 8001bee:	1707      	.short	0x1707
 8001bf0:	171e1717 	.word	0x171e1717
 8001bf4:	172f1717 	.word	0x172f1717
 8001bf8:	1717      	.short	0x1717
 8001bfa:	40          	.byte	0x40
 8001bfb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bfc:	6820      	ldr	r0, [r4, #0]
 8001bfe:	f7ff fdd5 	bl	80017ac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c02:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c04:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001c06:	699a      	ldr	r2, [r3, #24]
 8001c08:	f042 0208 	orr.w	r2, r2, #8
 8001c0c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c0e:	699a      	ldr	r2, [r3, #24]
 8001c10:	f022 0204 	bic.w	r2, r2, #4
 8001c14:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c16:	699a      	ldr	r2, [r3, #24]
 8001c18:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c1a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001c1c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001c1e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001c20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001c24:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001c28:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c2a:	6820      	ldr	r0, [r4, #0]
 8001c2c:	f7ff ff74 	bl	8001b18 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c30:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c32:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c34:	699a      	ldr	r2, [r3, #24]
 8001c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c3c:	699a      	ldr	r2, [r3, #24]
 8001c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c44:	699a      	ldr	r2, [r3, #24]
 8001c46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c4a:	e7e6      	b.n	8001c1a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c4c:	6820      	ldr	r0, [r4, #0]
 8001c4e:	f7ff fdd5 	bl	80017fc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c52:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c54:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c56:	69da      	ldr	r2, [r3, #28]
 8001c58:	f042 0208 	orr.w	r2, r2, #8
 8001c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c5e:	69da      	ldr	r2, [r3, #28]
 8001c60:	f022 0204 	bic.w	r2, r2, #4
 8001c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c66:	69da      	ldr	r2, [r3, #28]
 8001c68:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c6a:	61da      	str	r2, [r3, #28]
      break;
 8001c6c:	e7d6      	b.n	8001c1c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c6e:	6820      	ldr	r0, [r4, #0]
 8001c70:	f7ff fdee 	bl	8001850 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c74:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c76:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c78:	69da      	ldr	r2, [r3, #28]
 8001c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c7e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c80:	69da      	ldr	r2, [r3, #28]
 8001c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c88:	69da      	ldr	r2, [r3, #28]
 8001c8a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c8e:	e7ec      	b.n	8001c6a <HAL_TIM_PWM_ConfigChannel+0x9e>

08001c90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001c90:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c92:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001c94:	4e16      	ldr	r6, [pc, #88]	; (8001cf0 <TIM_TI1_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c96:	f024 0401 	bic.w	r4, r4, #1
 8001c9a:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001c9c:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8001c9e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001ca0:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001ca2:	d012      	beq.n	8001cca <TIM_TI1_SetConfig+0x3a>
 8001ca4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ca8:	d00f      	beq.n	8001cca <TIM_TI1_SetConfig+0x3a>
 8001caa:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8001cae:	42b0      	cmp	r0, r6
 8001cb0:	d00b      	beq.n	8001cca <TIM_TI1_SetConfig+0x3a>
 8001cb2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001cb6:	42b0      	cmp	r0, r6
 8001cb8:	d007      	beq.n	8001cca <TIM_TI1_SetConfig+0x3a>
 8001cba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001cbe:	42b0      	cmp	r0, r6
 8001cc0:	d003      	beq.n	8001cca <TIM_TI1_SetConfig+0x3a>
 8001cc2:	f506 369a 	add.w	r6, r6, #78848	; 0x13400
 8001cc6:	42b0      	cmp	r0, r6
 8001cc8:	d10f      	bne.n	8001cea <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001cca:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8001cce:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001cd0:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cd2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001cd6:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cd8:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001cdc:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001ce0:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001ce2:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ce4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ce6:	6201      	str	r1, [r0, #32]
}
 8001ce8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001cea:	f044 0201 	orr.w	r2, r4, #1
 8001cee:	e7ef      	b.n	8001cd0 <TIM_TI1_SetConfig+0x40>
 8001cf0:	40010000 	.word	0x40010000

08001cf4 <HAL_TIM_IC_ConfigChannel>:
{
 8001cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001cf6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001cfa:	2b01      	cmp	r3, #1
{
 8001cfc:	4604      	mov	r4, r0
 8001cfe:	460d      	mov	r5, r1
 8001d00:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001d04:	d019      	beq.n	8001d3a <HAL_TIM_IC_ConfigChannel+0x46>
 8001d06:	2301      	movs	r3, #1
 8001d08:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001d0c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 8001d10:	b9a2      	cbnz	r2, 8001d3c <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8001d12:	68cb      	ldr	r3, [r1, #12]
 8001d14:	6820      	ldr	r0, [r4, #0]
 8001d16:	c906      	ldmia	r1, {r1, r2}
 8001d18:	f7ff ffba 	bl	8001c90 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001d1c:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001d1e:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001d20:	699a      	ldr	r2, [r3, #24]
 8001d22:	f022 020c 	bic.w	r2, r2, #12
 8001d26:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001d28:	699a      	ldr	r2, [r3, #24]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001d2e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001d30:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001d36:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8001d3c:	2a04      	cmp	r2, #4
 8001d3e:	688e      	ldr	r6, [r1, #8]
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	68e8      	ldr	r0, [r5, #12]
 8001d44:	c982      	ldmia	r1, {r1, r7}
 8001d46:	d11f      	bne.n	8001d88 <HAL_TIM_IC_ConfigChannel+0x94>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d48:	6a1a      	ldr	r2, [r3, #32]
 8001d4a:	f022 0210 	bic.w	r2, r2, #16
 8001d4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d50:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001d52:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001d54:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001d58:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d5c:	0300      	lsls	r0, r0, #12
 8001d5e:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d60:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001d64:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d66:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001d68:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d6c:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001d70:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d74:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001d76:	699a      	ldr	r2, [r3, #24]
 8001d78:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001d7c:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001d7e:	699a      	ldr	r2, [r3, #24]
 8001d80:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001d84:	619e      	str	r6, [r3, #24]
 8001d86:	e7d2      	b.n	8001d2e <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8001d88:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d8a:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8001d8c:	d11c      	bne.n	8001dc8 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d92:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001d94:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001d96:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001d98:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8001d9c:	433a      	orrs	r2, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001d9e:	0100      	lsls	r0, r0, #4
 8001da0:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001da2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001da6:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001da8:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001daa:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001dae:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001db2:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001db4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001db6:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001db8:	69da      	ldr	r2, [r3, #28]
 8001dba:	f022 020c 	bic.w	r2, r2, #12
 8001dbe:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001dc0:	69da      	ldr	r2, [r3, #28]
 8001dc2:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001dc4:	61de      	str	r6, [r3, #28]
 8001dc6:	e7b2      	b.n	8001d2e <HAL_TIM_IC_ConfigChannel+0x3a>
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001dc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dcc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001dce:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001dd0:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001dd2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001dd6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001dda:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001ddc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001de0:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001de2:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001de4:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001de6:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001dea:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001dee:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001df0:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001df2:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001df4:	69da      	ldr	r2, [r3, #28]
 8001df6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001dfa:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001dfc:	69da      	ldr	r2, [r3, #28]
 8001dfe:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001e02:	e7df      	b.n	8001dc4 <HAL_TIM_IC_ConfigChannel+0xd0>

08001e04 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001e04:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001e06:	f001 011f 	and.w	r1, r1, #31
{
 8001e0a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001e0c:	2401      	movs	r4, #1
 8001e0e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001e10:	ea23 0304 	bic.w	r3, r3, r4
 8001e14:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001e16:	6a03      	ldr	r3, [r0, #32]
 8001e18:	408a      	lsls	r2, r1
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	6202      	str	r2, [r0, #32]
 8001e1e:	bd10      	pop	{r4, pc}

08001e20 <HAL_TIM_PWM_Start>:
{
 8001e20:	b510      	push	{r4, lr}
 8001e22:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e24:	2201      	movs	r2, #1
 8001e26:	6800      	ldr	r0, [r0, #0]
 8001e28:	f7ff ffec 	bl	8001e04 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <HAL_TIM_PWM_Start+0x34>)
 8001e30:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001e32:	bf02      	ittt	eq
 8001e34:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001e36:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001e3a:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e42:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001e44:	bf1e      	ittt	ne
 8001e46:	681a      	ldrne	r2, [r3, #0]
 8001e48:	f042 0201 	orrne.w	r2, r2, #1
 8001e4c:	601a      	strne	r2, [r3, #0]
}
 8001e4e:	2000      	movs	r0, #0
 8001e50:	bd10      	pop	{r4, pc}
 8001e52:	bf00      	nop
 8001e54:	40010000 	.word	0x40010000

08001e58 <HAL_TIM_PWM_Start_IT>:
{
 8001e58:	b510      	push	{r4, lr}
 8001e5a:	4604      	mov	r4, r0
  switch (Channel)
 8001e5c:	290c      	cmp	r1, #12
 8001e5e:	d80d      	bhi.n	8001e7c <HAL_TIM_PWM_Start_IT+0x24>
 8001e60:	e8df f001 	tbb	[pc, r1]
 8001e64:	0c0c0c07 	.word	0x0c0c0c07
 8001e68:	0c0c0c23 	.word	0x0c0c0c23
 8001e6c:	0c0c0c28 	.word	0x0c0c0c28
 8001e70:	2d          	.byte	0x2d
 8001e71:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001e72:	6802      	ldr	r2, [r0, #0]
 8001e74:	68d3      	ldr	r3, [r2, #12]
 8001e76:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001e7a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e7c:	6820      	ldr	r0, [r4, #0]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f7ff ffc0 	bl	8001e04 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	4a10      	ldr	r2, [pc, #64]	; (8001ec8 <HAL_TIM_PWM_Start_IT+0x70>)
 8001e88:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001e8a:	bf02      	ittt	eq
 8001e8c:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001e8e:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001e92:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e9a:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001e9c:	bf1e      	ittt	ne
 8001e9e:	681a      	ldrne	r2, [r3, #0]
 8001ea0:	f042 0201 	orrne.w	r2, r2, #1
 8001ea4:	601a      	strne	r2, [r3, #0]
}
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001eaa:	6802      	ldr	r2, [r0, #0]
 8001eac:	68d3      	ldr	r3, [r2, #12]
 8001eae:	f043 0304 	orr.w	r3, r3, #4
 8001eb2:	e7e2      	b.n	8001e7a <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001eb4:	6802      	ldr	r2, [r0, #0]
 8001eb6:	68d3      	ldr	r3, [r2, #12]
 8001eb8:	f043 0308 	orr.w	r3, r3, #8
 8001ebc:	e7dd      	b.n	8001e7a <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001ebe:	6802      	ldr	r2, [r0, #0]
 8001ec0:	68d3      	ldr	r3, [r2, #12]
 8001ec2:	f043 0310 	orr.w	r3, r3, #16
 8001ec6:	e7d8      	b.n	8001e7a <HAL_TIM_PWM_Start_IT+0x22>
 8001ec8:	40010000 	.word	0x40010000

08001ecc <HAL_TIM_OC_Start_IT>:
 8001ecc:	f7ff bfc4 	b.w	8001e58 <HAL_TIM_PWM_Start_IT>

08001ed0 <HAL_TIM_IC_Start_IT>:
{
 8001ed0:	b510      	push	{r4, lr}
 8001ed2:	4604      	mov	r4, r0
  switch (Channel)
 8001ed4:	290c      	cmp	r1, #12
 8001ed6:	d80d      	bhi.n	8001ef4 <HAL_TIM_IC_Start_IT+0x24>
 8001ed8:	e8df f001 	tbb	[pc, r1]
 8001edc:	0c0c0c07 	.word	0x0c0c0c07
 8001ee0:	0c0c0c1c 	.word	0x0c0c0c1c
 8001ee4:	0c0c0c21 	.word	0x0c0c0c21
 8001ee8:	26          	.byte	0x26
 8001ee9:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001eea:	6802      	ldr	r2, [r0, #0]
 8001eec:	68d3      	ldr	r3, [r2, #12]
 8001eee:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001ef2:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ef4:	6820      	ldr	r0, [r4, #0]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f7ff ff84 	bl	8001e04 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f04:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001f06:	bf1e      	ittt	ne
 8001f08:	681a      	ldrne	r2, [r3, #0]
 8001f0a:	f042 0201 	orrne.w	r2, r2, #1
 8001f0e:	601a      	strne	r2, [r3, #0]
}
 8001f10:	2000      	movs	r0, #0
 8001f12:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001f14:	6802      	ldr	r2, [r0, #0]
 8001f16:	68d3      	ldr	r3, [r2, #12]
 8001f18:	f043 0304 	orr.w	r3, r3, #4
 8001f1c:	e7e9      	b.n	8001ef2 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001f1e:	6802      	ldr	r2, [r0, #0]
 8001f20:	68d3      	ldr	r3, [r2, #12]
 8001f22:	f043 0308 	orr.w	r3, r3, #8
 8001f26:	e7e4      	b.n	8001ef2 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f28:	6802      	ldr	r2, [r0, #0]
 8001f2a:	68d3      	ldr	r3, [r2, #12]
 8001f2c:	f043 0310 	orr.w	r3, r3, #16
 8001f30:	e7df      	b.n	8001ef2 <HAL_TIM_IC_Start_IT+0x22>

08001f32 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f32:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f36:	2b01      	cmp	r3, #1
{
 8001f38:	b530      	push	{r4, r5, lr}
 8001f3a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001f3e:	d014      	beq.n	8001f6a <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f40:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001f42:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001f46:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f48:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f4a:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f4c:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f56:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f58:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f5a:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001f5c:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f64:	2300      	movs	r3, #0
 8001f66:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001f6a:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001f6c:	bd30      	pop	{r4, r5, pc}

08001f6e <HAL_TIMEx_CommutCallback>:
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	4770      	bx	lr
	...

08001f74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f78:	6806      	ldr	r6, [r0, #0]
 8001f7a:	68c2      	ldr	r2, [r0, #12]
 8001f7c:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f7e:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f84:	4313      	orrs	r3, r2
 8001f86:	6133      	str	r3, [r6, #16]
{
 8001f88:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f8a:	6883      	ldr	r3, [r0, #8]
 8001f8c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001f8e:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f90:	4303      	orrs	r3, r0
 8001f92:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001f94:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f98:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001f9a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f9e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fa4:	6973      	ldr	r3, [r6, #20]
 8001fa6:	69a2      	ldr	r2, [r4, #24]
 8001fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fac:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fae:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fb2:	6173      	str	r3, [r6, #20]
 8001fb4:	4b7a      	ldr	r3, [pc, #488]	; (80021a0 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fb6:	d17c      	bne.n	80020b2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fb8:	429e      	cmp	r6, r3
 8001fba:	d003      	beq.n	8001fc4 <UART_SetConfig+0x50>
 8001fbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fc0:	429e      	cmp	r6, r3
 8001fc2:	d144      	bne.n	800204e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001fc4:	f7ff fbe2 	bl	800178c <HAL_RCC_GetPCLK2Freq>
 8001fc8:	2519      	movs	r5, #25
 8001fca:	fb05 f300 	mul.w	r3, r5, r0
 8001fce:	6860      	ldr	r0, [r4, #4]
 8001fd0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001fd4:	0040      	lsls	r0, r0, #1
 8001fd6:	fbb3 f3f0 	udiv	r3, r3, r0
 8001fda:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fde:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001fe2:	f7ff fbd3 	bl	800178c <HAL_RCC_GetPCLK2Freq>
 8001fe6:	6863      	ldr	r3, [r4, #4]
 8001fe8:	4368      	muls	r0, r5
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fbb0 f7f3 	udiv	r7, r0, r3
 8001ff0:	f7ff fbcc 	bl	800178c <HAL_RCC_GetPCLK2Freq>
 8001ff4:	6863      	ldr	r3, [r4, #4]
 8001ff6:	4368      	muls	r0, r5
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffe:	fbb3 f3f9 	udiv	r3, r3, r9
 8002002:	fb09 7313 	mls	r3, r9, r3, r7
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	3332      	adds	r3, #50	; 0x32
 800200a:	fbb3 f3f9 	udiv	r3, r3, r9
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002014:	f7ff fbba 	bl	800178c <HAL_RCC_GetPCLK2Freq>
 8002018:	6862      	ldr	r2, [r4, #4]
 800201a:	4368      	muls	r0, r5
 800201c:	0052      	lsls	r2, r2, #1
 800201e:	fbb0 faf2 	udiv	sl, r0, r2
 8002022:	f7ff fbb3 	bl	800178c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002026:	6863      	ldr	r3, [r4, #4]
 8002028:	4368      	muls	r0, r5
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002030:	fbb3 f3f9 	udiv	r3, r3, r9
 8002034:	fb09 a313 	mls	r3, r9, r3, sl
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	3332      	adds	r3, #50	; 0x32
 800203c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002046:	443b      	add	r3, r7
 8002048:	60b3      	str	r3, [r6, #8]
 800204a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800204e:	f7ff fb8d 	bl	800176c <HAL_RCC_GetPCLK1Freq>
 8002052:	2519      	movs	r5, #25
 8002054:	fb05 f300 	mul.w	r3, r5, r0
 8002058:	6860      	ldr	r0, [r4, #4]
 800205a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800205e:	0040      	lsls	r0, r0, #1
 8002060:	fbb3 f3f0 	udiv	r3, r3, r0
 8002064:	fbb3 f3f9 	udiv	r3, r3, r9
 8002068:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800206c:	f7ff fb7e 	bl	800176c <HAL_RCC_GetPCLK1Freq>
 8002070:	6863      	ldr	r3, [r4, #4]
 8002072:	4368      	muls	r0, r5
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	fbb0 f7f3 	udiv	r7, r0, r3
 800207a:	f7ff fb77 	bl	800176c <HAL_RCC_GetPCLK1Freq>
 800207e:	6863      	ldr	r3, [r4, #4]
 8002080:	4368      	muls	r0, r5
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fbb0 f3f3 	udiv	r3, r0, r3
 8002088:	fbb3 f3f9 	udiv	r3, r3, r9
 800208c:	fb09 7313 	mls	r3, r9, r3, r7
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	3332      	adds	r3, #50	; 0x32
 8002094:	fbb3 f3f9 	udiv	r3, r3, r9
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800209e:	f7ff fb65 	bl	800176c <HAL_RCC_GetPCLK1Freq>
 80020a2:	6862      	ldr	r2, [r4, #4]
 80020a4:	4368      	muls	r0, r5
 80020a6:	0052      	lsls	r2, r2, #1
 80020a8:	fbb0 faf2 	udiv	sl, r0, r2
 80020ac:	f7ff fb5e 	bl	800176c <HAL_RCC_GetPCLK1Freq>
 80020b0:	e7b9      	b.n	8002026 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80020b2:	429e      	cmp	r6, r3
 80020b4:	d002      	beq.n	80020bc <UART_SetConfig+0x148>
 80020b6:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <UART_SetConfig+0x230>)
 80020b8:	429e      	cmp	r6, r3
 80020ba:	d140      	bne.n	800213e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80020bc:	f7ff fb66 	bl	800178c <HAL_RCC_GetPCLK2Freq>
 80020c0:	6867      	ldr	r7, [r4, #4]
 80020c2:	2519      	movs	r5, #25
 80020c4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80020c8:	fb05 f300 	mul.w	r3, r5, r0
 80020cc:	00bf      	lsls	r7, r7, #2
 80020ce:	fbb3 f3f7 	udiv	r3, r3, r7
 80020d2:	fbb3 f3f9 	udiv	r3, r3, r9
 80020d6:	011f      	lsls	r7, r3, #4
 80020d8:	f7ff fb58 	bl	800178c <HAL_RCC_GetPCLK2Freq>
 80020dc:	6863      	ldr	r3, [r4, #4]
 80020de:	4368      	muls	r0, r5
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	fbb0 f8f3 	udiv	r8, r0, r3
 80020e6:	f7ff fb51 	bl	800178c <HAL_RCC_GetPCLK2Freq>
 80020ea:	6863      	ldr	r3, [r4, #4]
 80020ec:	4368      	muls	r0, r5
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f4:	fbb3 f3f9 	udiv	r3, r3, r9
 80020f8:	fb09 8313 	mls	r3, r9, r3, r8
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	3332      	adds	r3, #50	; 0x32
 8002100:	fbb3 f3f9 	udiv	r3, r3, r9
 8002104:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002108:	f7ff fb40 	bl	800178c <HAL_RCC_GetPCLK2Freq>
 800210c:	6862      	ldr	r2, [r4, #4]
 800210e:	4368      	muls	r0, r5
 8002110:	0092      	lsls	r2, r2, #2
 8002112:	fbb0 faf2 	udiv	sl, r0, r2
 8002116:	f7ff fb39 	bl	800178c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800211a:	6863      	ldr	r3, [r4, #4]
 800211c:	4368      	muls	r0, r5
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	fbb0 f3f3 	udiv	r3, r0, r3
 8002124:	fbb3 f3f9 	udiv	r3, r3, r9
 8002128:	fb09 a313 	mls	r3, r9, r3, sl
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	3332      	adds	r3, #50	; 0x32
 8002130:	fbb3 f3f9 	udiv	r3, r3, r9
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	ea43 0308 	orr.w	r3, r3, r8
 800213c:	e783      	b.n	8002046 <UART_SetConfig+0xd2>
 800213e:	f7ff fb15 	bl	800176c <HAL_RCC_GetPCLK1Freq>
 8002142:	6867      	ldr	r7, [r4, #4]
 8002144:	2519      	movs	r5, #25
 8002146:	f04f 0964 	mov.w	r9, #100	; 0x64
 800214a:	fb05 f300 	mul.w	r3, r5, r0
 800214e:	00bf      	lsls	r7, r7, #2
 8002150:	fbb3 f3f7 	udiv	r3, r3, r7
 8002154:	fbb3 f3f9 	udiv	r3, r3, r9
 8002158:	011f      	lsls	r7, r3, #4
 800215a:	f7ff fb07 	bl	800176c <HAL_RCC_GetPCLK1Freq>
 800215e:	6863      	ldr	r3, [r4, #4]
 8002160:	4368      	muls	r0, r5
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fbb0 f8f3 	udiv	r8, r0, r3
 8002168:	f7ff fb00 	bl	800176c <HAL_RCC_GetPCLK1Freq>
 800216c:	6863      	ldr	r3, [r4, #4]
 800216e:	4368      	muls	r0, r5
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	fbb0 f3f3 	udiv	r3, r0, r3
 8002176:	fbb3 f3f9 	udiv	r3, r3, r9
 800217a:	fb09 8313 	mls	r3, r9, r3, r8
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	3332      	adds	r3, #50	; 0x32
 8002182:	fbb3 f3f9 	udiv	r3, r3, r9
 8002186:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800218a:	f7ff faef 	bl	800176c <HAL_RCC_GetPCLK1Freq>
 800218e:	6862      	ldr	r2, [r4, #4]
 8002190:	4368      	muls	r0, r5
 8002192:	0092      	lsls	r2, r2, #2
 8002194:	fbb0 faf2 	udiv	sl, r0, r2
 8002198:	f7ff fae8 	bl	800176c <HAL_RCC_GetPCLK1Freq>
 800219c:	e7bd      	b.n	800211a <UART_SetConfig+0x1a6>
 800219e:	bf00      	nop
 80021a0:	40011000 	.word	0x40011000
 80021a4:	40011400 	.word	0x40011400

080021a8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	4604      	mov	r4, r0
 80021ac:	460e      	mov	r6, r1
 80021ae:	4617      	mov	r7, r2
 80021b0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021b2:	6821      	ldr	r1, [r4, #0]
 80021b4:	680b      	ldr	r3, [r1, #0]
 80021b6:	ea36 0303 	bics.w	r3, r6, r3
 80021ba:	d101      	bne.n	80021c0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80021bc:	2000      	movs	r0, #0
}
 80021be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80021c0:	1c6b      	adds	r3, r5, #1
 80021c2:	d0f7      	beq.n	80021b4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021c4:	b995      	cbnz	r5, 80021ec <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	f022 0201 	bic.w	r2, r2, #1
 80021d6:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80021d8:	2320      	movs	r3, #32
 80021da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80021de:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80021e2:	2300      	movs	r3, #0
 80021e4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80021e8:	2003      	movs	r0, #3
 80021ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021ec:	f7fe ff22 	bl	8001034 <HAL_GetTick>
 80021f0:	1bc0      	subs	r0, r0, r7
 80021f2:	4285      	cmp	r5, r0
 80021f4:	d2dd      	bcs.n	80021b2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80021f6:	e7e6      	b.n	80021c6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080021f8 <HAL_UART_Init>:
{
 80021f8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80021fa:	4604      	mov	r4, r0
 80021fc:	b340      	cbz	r0, 8002250 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80021fe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002202:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002206:	b91b      	cbnz	r3, 8002210 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002208:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800220c:	f001 f974 	bl	80034f8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002210:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002212:	2324      	movs	r3, #36	; 0x24
 8002214:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002218:	68d3      	ldr	r3, [r2, #12]
 800221a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800221e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002220:	4620      	mov	r0, r4
 8002222:	f7ff fea7 	bl	8001f74 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800222e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002236:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800223e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002240:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002242:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002244:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002246:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800224a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800224e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002250:	2001      	movs	r0, #1
}
 8002252:	bd10      	pop	{r4, pc}

08002254 <HAL_UART_Transmit>:
{
 8002254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002258:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800225a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800225e:	2b20      	cmp	r3, #32
{
 8002260:	4604      	mov	r4, r0
 8002262:	460d      	mov	r5, r1
 8002264:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002266:	d14f      	bne.n	8002308 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8002268:	2900      	cmp	r1, #0
 800226a:	d04a      	beq.n	8002302 <HAL_UART_Transmit+0xae>
 800226c:	2a00      	cmp	r2, #0
 800226e:	d048      	beq.n	8002302 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8002270:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002274:	2b01      	cmp	r3, #1
 8002276:	d047      	beq.n	8002308 <HAL_UART_Transmit+0xb4>
 8002278:	2301      	movs	r3, #1
 800227a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800227e:	2300      	movs	r3, #0
 8002280:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002282:	2321      	movs	r3, #33	; 0x21
 8002284:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002288:	f7fe fed4 	bl	8001034 <HAL_GetTick>
    huart->TxXferSize = Size;
 800228c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002290:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002292:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002296:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002298:	b29b      	uxth	r3, r3
 800229a:	b96b      	cbnz	r3, 80022b8 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800229c:	463b      	mov	r3, r7
 800229e:	4632      	mov	r2, r6
 80022a0:	2140      	movs	r1, #64	; 0x40
 80022a2:	4620      	mov	r0, r4
 80022a4:	f7ff ff80 	bl	80021a8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80022a8:	b9b0      	cbnz	r0, 80022d8 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80022aa:	2320      	movs	r3, #32
 80022ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80022b0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80022b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80022b8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b29b      	uxth	r3, r3
 80022be:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022c0:	68a3      	ldr	r3, [r4, #8]
 80022c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022c6:	4632      	mov	r2, r6
 80022c8:	463b      	mov	r3, r7
 80022ca:	f04f 0180 	mov.w	r1, #128	; 0x80
 80022ce:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022d0:	d10e      	bne.n	80022f0 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022d2:	f7ff ff69 	bl	80021a8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80022d6:	b110      	cbz	r0, 80022de <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80022d8:	2003      	movs	r0, #3
 80022da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80022de:	882b      	ldrh	r3, [r5, #0]
 80022e0:	6822      	ldr	r2, [r4, #0]
 80022e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e6:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022e8:	6923      	ldr	r3, [r4, #16]
 80022ea:	b943      	cbnz	r3, 80022fe <HAL_UART_Transmit+0xaa>
          pData += 2U;
 80022ec:	3502      	adds	r5, #2
 80022ee:	e7d2      	b.n	8002296 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022f0:	f7ff ff5a 	bl	80021a8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80022f4:	2800      	cmp	r0, #0
 80022f6:	d1ef      	bne.n	80022d8 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	782a      	ldrb	r2, [r5, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	3501      	adds	r5, #1
 8002300:	e7c9      	b.n	8002296 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002302:	2001      	movs	r0, #1
 8002304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002308:	2002      	movs	r0, #2
}
 800230a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800230e <HAL_UART_Receive>:
{
 800230e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002312:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002314:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002318:	2b20      	cmp	r3, #32
{
 800231a:	4604      	mov	r4, r0
 800231c:	460d      	mov	r5, r1
 800231e:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002320:	d152      	bne.n	80023c8 <HAL_UART_Receive+0xba>
    if ((pData == NULL) || (Size == 0U))
 8002322:	2900      	cmp	r1, #0
 8002324:	d04d      	beq.n	80023c2 <HAL_UART_Receive+0xb4>
 8002326:	2a00      	cmp	r2, #0
 8002328:	d04b      	beq.n	80023c2 <HAL_UART_Receive+0xb4>
    __HAL_LOCK(huart);
 800232a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800232e:	2b01      	cmp	r3, #1
 8002330:	d04a      	beq.n	80023c8 <HAL_UART_Receive+0xba>
 8002332:	2301      	movs	r3, #1
 8002334:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002338:	2300      	movs	r3, #0
 800233a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800233c:	2322      	movs	r3, #34	; 0x22
 800233e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8002342:	f7fe fe77 	bl	8001034 <HAL_GetTick>
    huart->RxXferSize = Size;
 8002346:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 800234a:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 800234c:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002350:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8002352:	b280      	uxth	r0, r0
 8002354:	b930      	cbnz	r0, 8002364 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8002356:	2320      	movs	r3, #32
 8002358:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 800235c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 8002364:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002366:	3b01      	subs	r3, #1
 8002368:	b29b      	uxth	r3, r3
 800236a:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800236c:	68a3      	ldr	r3, [r4, #8]
 800236e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002372:	4632      	mov	r2, r6
 8002374:	463b      	mov	r3, r7
 8002376:	f04f 0120 	mov.w	r1, #32
 800237a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800237c:	d112      	bne.n	80023a4 <HAL_UART_Receive+0x96>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800237e:	f7ff ff13 	bl	80021a8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002382:	b110      	cbz	r0, 800238a <HAL_UART_Receive+0x7c>
          return HAL_TIMEOUT;
 8002384:	2003      	movs	r0, #3
 8002386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800238a:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800238c:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800238e:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002390:	b922      	cbnz	r2, 800239c <HAL_UART_Receive+0x8e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002396:	f825 3b02 	strh.w	r3, [r5], #2
 800239a:	e7d9      	b.n	8002350 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800239c:	b2db      	uxtb	r3, r3
 800239e:	f825 3b01 	strh.w	r3, [r5], #1
 80023a2:	e7d5      	b.n	8002350 <HAL_UART_Receive+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80023a4:	f7ff ff00 	bl	80021a8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80023a8:	2800      	cmp	r0, #0
 80023aa:	d1eb      	bne.n	8002384 <HAL_UART_Receive+0x76>
 80023ac:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023ae:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	1c6a      	adds	r2, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023b4:	b911      	cbnz	r1, 80023bc <HAL_UART_Receive+0xae>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023b6:	702b      	strb	r3, [r5, #0]
 80023b8:	4615      	mov	r5, r2
 80023ba:	e7c9      	b.n	8002350 <HAL_UART_Receive+0x42>
 80023bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023c0:	e7f9      	b.n	80023b6 <HAL_UART_Receive+0xa8>
      return  HAL_ERROR;
 80023c2:	2001      	movs	r0, #1
 80023c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80023c8:	2002      	movs	r0, #2
}
 80023ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080023d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023d0:	b530      	push	{r4, r5, lr}
 80023d2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023d4:	2230      	movs	r2, #48	; 0x30
 80023d6:	2100      	movs	r1, #0
 80023d8:	a808      	add	r0, sp, #32
 80023da:	f001 f9a7 	bl	800372c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023de:	2100      	movs	r1, #0
 80023e0:	2214      	movs	r2, #20
 80023e2:	a803      	add	r0, sp, #12
 80023e4:	f001 f9a2 	bl	800372c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e8:	2400      	movs	r4, #0
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <SystemClock_Config+0x70>)
 80023ec:	9401      	str	r4, [sp, #4]
 80023ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002400:	4b10      	ldr	r3, [pc, #64]	; (8002444 <SystemClock_Config+0x74>)
 8002402:	9402      	str	r4, [sp, #8]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800240e:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002410:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002414:	9302      	str	r3, [sp, #8]
 8002416:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002418:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800241a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800241e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002420:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002422:	9508      	str	r5, [sp, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002424:	f7fe ff58 	bl	80012d8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002428:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800242a:	4621      	mov	r1, r4
 800242c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800242e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002430:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002432:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002434:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002436:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002438:	f7ff f8fe 	bl	8001638 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800243c:	b015      	add	sp, #84	; 0x54
 800243e:	bd30      	pop	{r4, r5, pc}
 8002440:	40023800 	.word	0x40023800
 8002444:	40007000 	.word	0x40007000

08002448 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
//	uint32_t pw_array_length = PW_ARRAY_LENGTH;
	if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) // measure the speed of wheel 1
 8002448:	6803      	ldr	r3, [r0, #0]
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244e:	d106      	bne.n	800245e <HAL_TIM_IC_CaptureCallback+0x16>
 8002450:	7f03      	ldrb	r3, [r0, #28]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d104      	bne.n	8002460 <HAL_TIM_IC_CaptureCallback+0x18>
	{
		input_capture1++;
 8002456:	4a04      	ldr	r2, [pc, #16]	; (8002468 <HAL_TIM_IC_CaptureCallback+0x20>)
	}

	else if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) // measure the speed of wheel 2
	{
		input_capture2++;
 8002458:	6813      	ldr	r3, [r2, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4770      	bx	lr
	else if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) // measure the speed of wheel 2
 8002460:	2b02      	cmp	r3, #2
 8002462:	d1fc      	bne.n	800245e <HAL_TIM_IC_CaptureCallback+0x16>
		input_capture2++;
 8002464:	4a01      	ldr	r2, [pc, #4]	; (800246c <HAL_TIM_IC_CaptureCallback+0x24>)
 8002466:	e7f7      	b.n	8002458 <HAL_TIM_IC_CaptureCallback+0x10>
 8002468:	2000024c 	.word	0x2000024c
 800246c:	20000250 	.word	0x20000250

08002470 <printWelcomeMessage>:
		n_pulse1 = 0;
		n_pulse2 = 0;
	}
}

void printWelcomeMessage(void) {
 8002470:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[0;0H", strlen("\033[0;0H"), HAL_MAX_DELAY);
 8002472:	4c0f      	ldr	r4, [pc, #60]	; (80024b0 <printWelcomeMessage+0x40>)
 8002474:	490f      	ldr	r1, [pc, #60]	; (80024b4 <printWelcomeMessage+0x44>)
 8002476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800247a:	2206      	movs	r2, #6
 800247c:	4620      	mov	r0, r4
 800247e:	f7ff fee9 	bl	8002254 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[2J", strlen("\033[2J"), HAL_MAX_DELAY);
 8002482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002486:	2204      	movs	r2, #4
 8002488:	490b      	ldr	r1, [pc, #44]	; (80024b8 <printWelcomeMessage+0x48>)
 800248a:	4620      	mov	r0, r4
 800248c:	f7ff fee2 	bl	8002254 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)WELCOME_MSG, strlen(WELCOME_MSG), HAL_MAX_DELAY);
 8002490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002494:	222a      	movs	r2, #42	; 0x2a
 8002496:	4909      	ldr	r1, [pc, #36]	; (80024bc <printWelcomeMessage+0x4c>)
 8002498:	4620      	mov	r0, r4
 800249a:	f7ff fedb 	bl	8002254 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 800249e:	4620      	mov	r0, r4
 80024a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024a4:	2276      	movs	r2, #118	; 0x76
 80024a6:	4906      	ldr	r1, [pc, #24]	; (80024c0 <printWelcomeMessage+0x50>)
}
 80024a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 80024ac:	f7ff bed2 	b.w	8002254 <HAL_UART_Transmit>
 80024b0:	20000350 	.word	0x20000350
 80024b4:	08006458 	.word	0x08006458
 80024b8:	0800645f 	.word	0x0800645f
 80024bc:	08006464 	.word	0x08006464
 80024c0:	0800648f 	.word	0x0800648f

080024c4 <readUserInput>:

uint32_t readUserInput(void) {
 80024c4:	b513      	push	{r0, r1, r4, lr}
	char readBuf[1];

	HAL_UART_Transmit(&huart2, (uint8_t*)PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
 80024c6:	4c0a      	ldr	r4, [pc, #40]	; (80024f0 <readUserInput+0x2c>)
 80024c8:	490a      	ldr	r1, [pc, #40]	; (80024f4 <readUserInput+0x30>)
 80024ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ce:	2204      	movs	r2, #4
 80024d0:	4620      	mov	r0, r4
 80024d2:	f7ff febf 	bl	8002254 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, (uint8_t*)readBuf, 1, HAL_MAX_DELAY);
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024da:	2201      	movs	r2, #1
 80024dc:	a901      	add	r1, sp, #4
 80024de:	4620      	mov	r0, r4
 80024e0:	f7ff ff15 	bl	800230e <HAL_UART_Receive>
	return atoi(readBuf);
 80024e4:	a801      	add	r0, sp, #4
 80024e6:	f001 f8f2 	bl	80036ce <atoi>
}
 80024ea:	b002      	add	sp, #8
 80024ec:	bd10      	pop	{r4, pc}
 80024ee:	bf00      	nop
 80024f0:	20000350 	.word	0x20000350
 80024f4:	08006620 	.word	0x08006620

080024f8 <processUserInput>:


uint32_t processUserInput(uint32_t opt) {
 80024f8:	b570      	push	{r4, r5, r6, lr}
	char msg0[100] = "\r\nYour desired speed is: ";
 80024fa:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <processUserInput+0xcc>)
uint32_t processUserInput(uint32_t opt) {
 80024fc:	f5ad 6daf 	sub.w	sp, sp, #1400	; 0x578
 8002500:	4604      	mov	r4, r0
	char msg0[100] = "\r\nYour desired speed is: ";
 8002502:	466a      	mov	r2, sp
 8002504:	f103 0618 	add.w	r6, r3, #24
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	4615      	mov	r5, r2
 800250e:	c503      	stmia	r5!, {r0, r1}
 8002510:	3308      	adds	r3, #8
 8002512:	42b3      	cmp	r3, r6
 8002514:	462a      	mov	r2, r5
 8002516:	d1f7      	bne.n	8002508 <processUserInput+0x10>
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	802b      	strh	r3, [r5, #0]
 800251c:	224a      	movs	r2, #74	; 0x4a
 800251e:	2100      	movs	r1, #0
 8002520:	f10d 001a 	add.w	r0, sp, #26
 8002524:	f001 f902 	bl	800372c <memset>
	char msg11[100];
	char msg12[100];
	char msg13[100];
	char readN_PULSE[3];

	if(!opt || opt > 3)
 8002528:	1e63      	subs	r3, r4, #1
 800252a:	2b02      	cmp	r3, #2
 800252c:	f200 817f 	bhi.w	800282e <processUserInput+0x336>
		return 0;

	sprintf(msg1, "%ld", opt);
 8002530:	4622      	mov	r2, r4
 8002532:	4925      	ldr	r1, [pc, #148]	; (80025c8 <processUserInput+0xd0>)
 8002534:	a819      	add	r0, sp, #100	; 0x64
 8002536:	f001 f97d 	bl	8003834 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 800253a:	a819      	add	r0, sp, #100	; 0x64
 800253c:	f7fd fe50 	bl	80001e0 <strlen>
 8002540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002544:	b282      	uxth	r2, r0
 8002546:	a919      	add	r1, sp, #100	; 0x64
 8002548:	4820      	ldr	r0, [pc, #128]	; (80025cc <processUserInput+0xd4>)
 800254a:	f7ff fe83 	bl	8002254 <HAL_UART_Transmit>

	switch(opt) {
 800254e:	2c02      	cmp	r4, #2
 8002550:	d042      	beq.n	80025d8 <processUserInput+0xe0>
 8002552:	2c03      	cmp	r4, #3
 8002554:	f000 816d 	beq.w	8002832 <processUserInput+0x33a>
	case 1: // Set n_pulse

		HAL_UART_Transmit(&huart2, (uint8_t*)msg0, strlen(msg0), HAL_MAX_DELAY);
 8002558:	4668      	mov	r0, sp
 800255a:	f7fd fe41 	bl	80001e0 <strlen>
 800255e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002562:	b282      	uxth	r2, r0
 8002564:	4669      	mov	r1, sp
 8002566:	4819      	ldr	r0, [pc, #100]	; (80025cc <processUserInput+0xd4>)
		HAL_UART_Receive(&huart2, (uint8_t*)readN_PULSE, 3, HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2, (uint8_t*)readN_PULSE, 3, HAL_MAX_DELAY);

		my_rover.trg_x = (float) atoi(readN_PULSE);
 8002568:	4c19      	ldr	r4, [pc, #100]	; (80025d0 <processUserInput+0xd8>)
		HAL_UART_Transmit(&huart2, (uint8_t*)msg0, strlen(msg0), HAL_MAX_DELAY);
 800256a:	f7ff fe73 	bl	8002254 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, (uint8_t*)readN_PULSE, 3, HAL_MAX_DELAY);
 800256e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002572:	2203      	movs	r2, #3
 8002574:	f20d 5114 	addw	r1, sp, #1300	; 0x514
 8002578:	4814      	ldr	r0, [pc, #80]	; (80025cc <processUserInput+0xd4>)
 800257a:	f7ff fec8 	bl	800230e <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, (uint8_t*)readN_PULSE, 3, HAL_MAX_DELAY);
 800257e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002582:	2203      	movs	r2, #3
 8002584:	f20d 5114 	addw	r1, sp, #1300	; 0x514
 8002588:	4810      	ldr	r0, [pc, #64]	; (80025cc <processUserInput+0xd4>)
 800258a:	f7ff fe63 	bl	8002254 <HAL_UART_Transmit>
		my_rover.trg_x = (float) atoi(readN_PULSE);
 800258e:	f20d 5014 	addw	r0, sp, #1300	; 0x514
 8002592:	f001 f89c 	bl	80036ce <atoi>
 8002596:	ee07 0a90 	vmov	s15, r0
 800259a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		my_rover.trg_y = (float) atoi(readN_PULSE);
 800259e:	f20d 5014 	addw	r0, sp, #1300	; 0x514
		my_rover.trg_x = (float) atoi(readN_PULSE);
 80025a2:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
		my_rover.trg_y = (float) atoi(readN_PULSE);
 80025a6:	f001 f892 	bl	80036ce <atoi>
 80025aa:	ee07 0a90 	vmov	s15, r0

		give_command = 1;
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <processUserInput+0xdc>)
		my_rover.trg_y = (float) atoi(readN_PULSE);
 80025b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		give_command = 1;
 80025b4:	2001      	movs	r0, #1
		my_rover.trg_y = (float) atoi(readN_PULSE);
 80025b6:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
		give_command = 1;
 80025ba:	7018      	strb	r0, [r3, #0]
	case 3:
		return 2;
	};

	return 1;
}
 80025bc:	f50d 6daf 	add.w	sp, sp, #1400	; 0x578
 80025c0:	bd70      	pop	{r4, r5, r6, pc}
 80025c2:	bf00      	nop
 80025c4:	08006348 	.word	0x08006348
 80025c8:	08006506 	.word	0x08006506
 80025cc:	20000350 	.word	0x20000350
 80025d0:	20000008 	.word	0x20000008
 80025d4:	20000248 	.word	0x20000248
		sprintf(msg1, "\r\n X: %d", (int) (my_rover.x));
 80025d8:	4c9b      	ldr	r4, [pc, #620]	; (8002848 <processUserInput+0x350>)
 80025da:	499c      	ldr	r1, [pc, #624]	; (800284c <processUserInput+0x354>)
 80025dc:	edd4 7a00 	vldr	s15, [r4]
 80025e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025e4:	a819      	add	r0, sp, #100	; 0x64
 80025e6:	ee17 2a90 	vmov	r2, s15
 80025ea:	f001 f923 	bl	8003834 <siprintf>
		sprintf(msg2, "\r\n Y: %d", (int) (my_rover.y));
 80025ee:	edd4 7a01 	vldr	s15, [r4, #4]
 80025f2:	4997      	ldr	r1, [pc, #604]	; (8002850 <processUserInput+0x358>)
 80025f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025f8:	a832      	add	r0, sp, #200	; 0xc8
 80025fa:	ee17 2a90 	vmov	r2, s15
 80025fe:	f001 f919 	bl	8003834 <siprintf>
		sprintf(msg3, "\r\n Phi (in degree): %d", (int) (my_rover.phi/3.14*180.0));
 8002602:	68a0      	ldr	r0, [r4, #8]
 8002604:	f7fd ffa8 	bl	8000558 <__aeabi_f2d>
 8002608:	a38b      	add	r3, pc, #556	; (adr r3, 8002838 <processUserInput+0x340>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	f7fe f921 	bl	8000854 <__aeabi_ddiv>
 8002612:	4b90      	ldr	r3, [pc, #576]	; (8002854 <processUserInput+0x35c>)
 8002614:	2200      	movs	r2, #0
 8002616:	f7fd fff3 	bl	8000600 <__aeabi_dmul>
 800261a:	f7fe faa1 	bl	8000b60 <__aeabi_d2iz>
 800261e:	498e      	ldr	r1, [pc, #568]	; (8002858 <processUserInput+0x360>)
 8002620:	4602      	mov	r2, r0
 8002622:	a84b      	add	r0, sp, #300	; 0x12c
 8002624:	f001 f906 	bl	8003834 <siprintf>
		sprintf(msg4, "\r\n n_pulse1: %d", n_pulse1);
 8002628:	4b8c      	ldr	r3, [pc, #560]	; (800285c <processUserInput+0x364>)
 800262a:	498d      	ldr	r1, [pc, #564]	; (8002860 <processUserInput+0x368>)
 800262c:	881a      	ldrh	r2, [r3, #0]
 800262e:	a864      	add	r0, sp, #400	; 0x190
 8002630:	f001 f900 	bl	8003834 <siprintf>
		sprintf(msg5, "\r\n n_pulse2: %d", n_pulse2);
 8002634:	4b8b      	ldr	r3, [pc, #556]	; (8002864 <processUserInput+0x36c>)
 8002636:	498c      	ldr	r1, [pc, #560]	; (8002868 <processUserInput+0x370>)
 8002638:	881a      	ldrh	r2, [r3, #0]
 800263a:	a87d      	add	r0, sp, #500	; 0x1f4
 800263c:	f001 f8fa 	bl	8003834 <siprintf>
		sprintf(msg6, "\r\n my_rover.trg_wheel_spd1: %d", my_rover.trg_wheel_spd1);
 8002640:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8002642:	498a      	ldr	r1, [pc, #552]	; (800286c <processUserInput+0x374>)
 8002644:	a896      	add	r0, sp, #600	; 0x258
 8002646:	f001 f8f5 	bl	8003834 <siprintf>
		sprintf(msg7, "\r\n my_rover.trg_wheel_spd2: %d", my_rover.trg_wheel_spd2);
 800264a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 800264c:	4988      	ldr	r1, [pc, #544]	; (8002870 <processUserInput+0x378>)
 800264e:	a8af      	add	r0, sp, #700	; 0x2bc
 8002650:	f001 f8f0 	bl	8003834 <siprintf>
		sprintf(msg8, "\r\n PWM 1: %u", returned_pwm1);
 8002654:	4b87      	ldr	r3, [pc, #540]	; (8002874 <processUserInput+0x37c>)
 8002656:	4988      	ldr	r1, [pc, #544]	; (8002878 <processUserInput+0x380>)
 8002658:	881a      	ldrh	r2, [r3, #0]
 800265a:	a8c8      	add	r0, sp, #800	; 0x320
 800265c:	f001 f8ea 	bl	8003834 <siprintf>
		sprintf(msg9, "\r\n PWM 2: %u", returned_pwm2);
 8002660:	4b86      	ldr	r3, [pc, #536]	; (800287c <processUserInput+0x384>)
 8002662:	4987      	ldr	r1, [pc, #540]	; (8002880 <processUserInput+0x388>)
 8002664:	881a      	ldrh	r2, [r3, #0]
 8002666:	a8e1      	add	r0, sp, #900	; 0x384
 8002668:	f001 f8e4 	bl	8003834 <siprintf>
		sprintf(msg10, "\r\n angular_vel in degree/s: %d", (int) (my_rover.angular_vel/3.1415*180.0));
 800266c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800266e:	f7fd ff73 	bl	8000558 <__aeabi_f2d>
 8002672:	a373      	add	r3, pc, #460	; (adr r3, 8002840 <processUserInput+0x348>)
 8002674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002678:	f7fe f8ec 	bl	8000854 <__aeabi_ddiv>
 800267c:	4b75      	ldr	r3, [pc, #468]	; (8002854 <processUserInput+0x35c>)
 800267e:	2200      	movs	r2, #0
 8002680:	f7fd ffbe 	bl	8000600 <__aeabi_dmul>
 8002684:	f7fe fa6c 	bl	8000b60 <__aeabi_d2iz>
 8002688:	497e      	ldr	r1, [pc, #504]	; (8002884 <processUserInput+0x38c>)
 800268a:	4602      	mov	r2, r0
 800268c:	a8fa      	add	r0, sp, #1000	; 0x3e8
 800268e:	f001 f8d1 	bl	8003834 <siprintf>
		sprintf(msg11, "\r\n linear_vel in mm/s: %d", (int) (my_rover.linear_vel));
 8002692:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8002696:	497c      	ldr	r1, [pc, #496]	; (8002888 <processUserInput+0x390>)
 8002698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800269c:	f20d 404c 	addw	r0, sp, #1100	; 0x44c
 80026a0:	ee17 2a90 	vmov	r2, s15
 80026a4:	f001 f8c6 	bl	8003834 <siprintf>
		sprintf(msg12, "\r\n Desired heading: %d, Error heading: %d", (int) (desired_heading/3.1415*180), (int) (error_heading/3.1415*180));
 80026a8:	4b78      	ldr	r3, [pc, #480]	; (800288c <processUserInput+0x394>)
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	f7fd ff54 	bl	8000558 <__aeabi_f2d>
 80026b0:	a363      	add	r3, pc, #396	; (adr r3, 8002840 <processUserInput+0x348>)
 80026b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b6:	f7fe f8cd 	bl	8000854 <__aeabi_ddiv>
 80026ba:	2200      	movs	r2, #0
 80026bc:	4b65      	ldr	r3, [pc, #404]	; (8002854 <processUserInput+0x35c>)
 80026be:	f7fd ff9f 	bl	8000600 <__aeabi_dmul>
 80026c2:	f7fe fa4d 	bl	8000b60 <__aeabi_d2iz>
 80026c6:	4b72      	ldr	r3, [pc, #456]	; (8002890 <processUserInput+0x398>)
 80026c8:	4604      	mov	r4, r0
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	f7fd ff44 	bl	8000558 <__aeabi_f2d>
 80026d0:	a35b      	add	r3, pc, #364	; (adr r3, 8002840 <processUserInput+0x348>)
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d6:	f7fe f8bd 	bl	8000854 <__aeabi_ddiv>
 80026da:	2200      	movs	r2, #0
 80026dc:	4b5d      	ldr	r3, [pc, #372]	; (8002854 <processUserInput+0x35c>)
 80026de:	f7fd ff8f 	bl	8000600 <__aeabi_dmul>
 80026e2:	f7fe fa3d 	bl	8000b60 <__aeabi_d2iz>
 80026e6:	4623      	mov	r3, r4
 80026e8:	4602      	mov	r2, r0
 80026ea:	496a      	ldr	r1, [pc, #424]	; (8002894 <processUserInput+0x39c>)
 80026ec:	f50d 6096 	add.w	r0, sp, #1200	; 0x4b0
 80026f0:	f001 f8a0 	bl	8003834 <siprintf>
		sprintf(msg13, "\r\n u1: %d, u2: %d", (int) (u1), (int) (u2));
 80026f4:	4b68      	ldr	r3, [pc, #416]	; (8002898 <processUserInput+0x3a0>)
 80026f6:	4969      	ldr	r1, [pc, #420]	; (800289c <processUserInput+0x3a4>)
 80026f8:	ed93 7a00 	vldr	s14, [r3]
 80026fc:	4b68      	ldr	r3, [pc, #416]	; (80028a0 <processUserInput+0x3a8>)
 80026fe:	edd3 7a00 	vldr	s15, [r3]
 8002702:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8002706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800270a:	ee17 3a10 	vmov	r3, s14
 800270e:	ee17 2a90 	vmov	r2, s15
 8002712:	f20d 5014 	addw	r0, sp, #1300	; 0x514
 8002716:	f001 f88d 	bl	8003834 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 800271a:	a819      	add	r0, sp, #100	; 0x64
 800271c:	f7fd fd60 	bl	80001e0 <strlen>
 8002720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002724:	b282      	uxth	r2, r0
 8002726:	a919      	add	r1, sp, #100	; 0x64
 8002728:	485e      	ldr	r0, [pc, #376]	; (80028a4 <processUserInput+0x3ac>)
 800272a:	f7ff fd93 	bl	8002254 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg2, strlen(msg2), HAL_MAX_DELAY);
 800272e:	a832      	add	r0, sp, #200	; 0xc8
 8002730:	f7fd fd56 	bl	80001e0 <strlen>
 8002734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002738:	b282      	uxth	r2, r0
 800273a:	a932      	add	r1, sp, #200	; 0xc8
 800273c:	4859      	ldr	r0, [pc, #356]	; (80028a4 <processUserInput+0x3ac>)
 800273e:	f7ff fd89 	bl	8002254 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg3, strlen(msg3), HAL_MAX_DELAY);
 8002742:	a84b      	add	r0, sp, #300	; 0x12c
 8002744:	f7fd fd4c 	bl	80001e0 <strlen>
 8002748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800274c:	b282      	uxth	r2, r0
 800274e:	a94b      	add	r1, sp, #300	; 0x12c
 8002750:	4854      	ldr	r0, [pc, #336]	; (80028a4 <processUserInput+0x3ac>)
 8002752:	f7ff fd7f 	bl	8002254 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg4, strlen(msg4), HAL_MAX_DELAY);
 8002756:	a864      	add	r0, sp, #400	; 0x190
 8002758:	f7fd fd42 	bl	80001e0 <strlen>
 800275c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002760:	b282      	uxth	r2, r0
 8002762:	a964      	add	r1, sp, #400	; 0x190
 8002764:	484f      	ldr	r0, [pc, #316]	; (80028a4 <processUserInput+0x3ac>)
 8002766:	f7ff fd75 	bl	8002254 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg5, strlen(msg5), HAL_MAX_DELAY);
 800276a:	a87d      	add	r0, sp, #500	; 0x1f4
 800276c:	f7fd fd38 	bl	80001e0 <strlen>
 8002770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002774:	b282      	uxth	r2, r0
 8002776:	a97d      	add	r1, sp, #500	; 0x1f4
 8002778:	484a      	ldr	r0, [pc, #296]	; (80028a4 <processUserInput+0x3ac>)
 800277a:	f7ff fd6b 	bl	8002254 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg6, strlen(msg6), HAL_MAX_DELAY);
 800277e:	a896      	add	r0, sp, #600	; 0x258
 8002780:	f7fd fd2e 	bl	80001e0 <strlen>
 8002784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002788:	b282      	uxth	r2, r0
 800278a:	a996      	add	r1, sp, #600	; 0x258
 800278c:	4845      	ldr	r0, [pc, #276]	; (80028a4 <processUserInput+0x3ac>)
 800278e:	f7ff fd61 	bl	8002254 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg7, strlen(msg7), HAL_MAX_DELAY);
 8002792:	a8af      	add	r0, sp, #700	; 0x2bc
 8002794:	f7fd fd24 	bl	80001e0 <strlen>
 8002798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800279c:	b282      	uxth	r2, r0
 800279e:	a9af      	add	r1, sp, #700	; 0x2bc
 80027a0:	4840      	ldr	r0, [pc, #256]	; (80028a4 <processUserInput+0x3ac>)
 80027a2:	f7ff fd57 	bl	8002254 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg8, strlen(msg8), HAL_MAX_DELAY);
 80027a6:	a8c8      	add	r0, sp, #800	; 0x320
 80027a8:	f7fd fd1a 	bl	80001e0 <strlen>
 80027ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027b0:	b282      	uxth	r2, r0
 80027b2:	a9c8      	add	r1, sp, #800	; 0x320
 80027b4:	483b      	ldr	r0, [pc, #236]	; (80028a4 <processUserInput+0x3ac>)
 80027b6:	f7ff fd4d 	bl	8002254 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg9, strlen(msg9), HAL_MAX_DELAY);
 80027ba:	a8e1      	add	r0, sp, #900	; 0x384
 80027bc:	f7fd fd10 	bl	80001e0 <strlen>
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027c4:	b282      	uxth	r2, r0
 80027c6:	a9e1      	add	r1, sp, #900	; 0x384
 80027c8:	4836      	ldr	r0, [pc, #216]	; (80028a4 <processUserInput+0x3ac>)
 80027ca:	f7ff fd43 	bl	8002254 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg10, strlen(msg10), HAL_MAX_DELAY);
 80027ce:	a8fa      	add	r0, sp, #1000	; 0x3e8
 80027d0:	f7fd fd06 	bl	80001e0 <strlen>
 80027d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027d8:	b282      	uxth	r2, r0
 80027da:	a9fa      	add	r1, sp, #1000	; 0x3e8
 80027dc:	4831      	ldr	r0, [pc, #196]	; (80028a4 <processUserInput+0x3ac>)
 80027de:	f7ff fd39 	bl	8002254 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg11, strlen(msg11), HAL_MAX_DELAY);
 80027e2:	f20d 404c 	addw	r0, sp, #1100	; 0x44c
 80027e6:	f7fd fcfb 	bl	80001e0 <strlen>
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027ee:	b282      	uxth	r2, r0
 80027f0:	f20d 414c 	addw	r1, sp, #1100	; 0x44c
 80027f4:	482b      	ldr	r0, [pc, #172]	; (80028a4 <processUserInput+0x3ac>)
 80027f6:	f7ff fd2d 	bl	8002254 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg12, strlen(msg12), HAL_MAX_DELAY);
 80027fa:	f50d 6096 	add.w	r0, sp, #1200	; 0x4b0
 80027fe:	f7fd fcef 	bl	80001e0 <strlen>
 8002802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002806:	b282      	uxth	r2, r0
 8002808:	f50d 6196 	add.w	r1, sp, #1200	; 0x4b0
 800280c:	4825      	ldr	r0, [pc, #148]	; (80028a4 <processUserInput+0x3ac>)
 800280e:	f7ff fd21 	bl	8002254 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg13, strlen(msg13), HAL_MAX_DELAY);
 8002812:	f20d 5014 	addw	r0, sp, #1300	; 0x514
 8002816:	f7fd fce3 	bl	80001e0 <strlen>
 800281a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800281e:	b282      	uxth	r2, r0
 8002820:	f20d 5114 	addw	r1, sp, #1300	; 0x514
 8002824:	481f      	ldr	r0, [pc, #124]	; (80028a4 <processUserInput+0x3ac>)
 8002826:	f7ff fd15 	bl	8002254 <HAL_UART_Transmit>
	return 1;
 800282a:	2001      	movs	r0, #1
		break;
 800282c:	e6c6      	b.n	80025bc <processUserInput+0xc4>
		return 0;
 800282e:	2000      	movs	r0, #0
 8002830:	e6c4      	b.n	80025bc <processUserInput+0xc4>
		return 2;
 8002832:	2002      	movs	r0, #2
 8002834:	e6c2      	b.n	80025bc <processUserInput+0xc4>
 8002836:	bf00      	nop
 8002838:	51eb851f 	.word	0x51eb851f
 800283c:	40091eb8 	.word	0x40091eb8
 8002840:	c083126f 	.word	0xc083126f
 8002844:	400921ca 	.word	0x400921ca
 8002848:	20000008 	.word	0x20000008
 800284c:	0800650a 	.word	0x0800650a
 8002850:	08006513 	.word	0x08006513
 8002854:	40668000 	.word	0x40668000
 8002858:	0800651c 	.word	0x0800651c
 800285c:	20000268 	.word	0x20000268
 8002860:	08006533 	.word	0x08006533
 8002864:	2000026a 	.word	0x2000026a
 8002868:	08006543 	.word	0x08006543
 800286c:	08006553 	.word	0x08006553
 8002870:	08006572 	.word	0x08006572
 8002874:	2000026c 	.word	0x2000026c
 8002878:	08006591 	.word	0x08006591
 800287c:	2000026e 	.word	0x2000026e
 8002880:	0800659e 	.word	0x0800659e
 8002884:	080065ab 	.word	0x080065ab
 8002888:	080065ca 	.word	0x080065ca
 800288c:	200002c4 	.word	0x200002c4
 8002890:	2000030c 	.word	0x2000030c
 8002894:	080065e4 	.word	0x080065e4
 8002898:	200002c0 	.word	0x200002c0
 800289c:	0800660e 	.word	0x0800660e
 80028a0:	200002c8 	.word	0x200002c8
 80028a4:	20000350 	.word	0x20000350

080028a8 <main>:
{
 80028a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028ac:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 80028ae:	f7fe fb9b 	bl	8000fe8 <HAL_Init>
  SystemClock_Config();
 80028b2:	f7ff fd8d 	bl	80023d0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b6:	2214      	movs	r2, #20
 80028b8:	2100      	movs	r1, #0
 80028ba:	a807      	add	r0, sp, #28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028bc:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028be:	f000 ff35 	bl	800372c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c2:	4b81      	ldr	r3, [pc, #516]	; (8002ac8 <main+0x220>)
 80028c4:	9401      	str	r4, [sp, #4]
 80028c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80028c8:	4880      	ldr	r0, [pc, #512]	; (8002acc <main+0x224>)
  htim3.Instance = TIM3;
 80028ca:	4d81      	ldr	r5, [pc, #516]	; (8002ad0 <main+0x228>)
  htim4.Instance = TIM4;
 80028cc:	4f81      	ldr	r7, [pc, #516]	; (8002ad4 <main+0x22c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ce:	f042 0204 	orr.w	r2, r2, #4
 80028d2:	631a      	str	r2, [r3, #48]	; 0x30
 80028d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d6:	f002 0204 	and.w	r2, r2, #4
 80028da:	9201      	str	r2, [sp, #4]
 80028dc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028de:	9402      	str	r4, [sp, #8]
 80028e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028e6:	631a      	str	r2, [r3, #48]	; 0x30
 80028e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ea:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80028ee:	9202      	str	r2, [sp, #8]
 80028f0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	9403      	str	r4, [sp, #12]
 80028f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
 80028fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028fe:	f002 0201 	and.w	r2, r2, #1
 8002902:	9203      	str	r2, [sp, #12]
 8002904:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002906:	9404      	str	r4, [sp, #16]
 8002908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800290a:	f042 0202 	orr.w	r2, r2, #2
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8002918:	4622      	mov	r2, r4
 800291a:	f44f 7108 	mov.w	r1, #544	; 0x220
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800291e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8002920:	f7fe fcce 	bl	80012c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002924:	4622      	mov	r2, r4
 8002926:	2180      	movs	r1, #128	; 0x80
 8002928:	486b      	ldr	r0, [pc, #428]	; (8002ad8 <main+0x230>)
 800292a:	f7fe fcc9 	bl	80012c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800292e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002932:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002934:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002936:	4b69      	ldr	r3, [pc, #420]	; (8002adc <main+0x234>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002938:	4867      	ldr	r0, [pc, #412]	; (8002ad8 <main+0x230>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800293a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293c:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002942:	f7fe fbe7 	bl	8001114 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8002946:	f44f 7308 	mov.w	r3, #544	; 0x220
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294a:	a907      	add	r1, sp, #28
 800294c:	485f      	ldr	r0, [pc, #380]	; (8002acc <main+0x224>)
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 800294e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002950:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002958:	f7fe fbdc 	bl	8001114 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800295c:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800295e:	a907      	add	r1, sp, #28
 8002960:	485d      	ldr	r0, [pc, #372]	; (8002ad8 <main+0x230>)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002962:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002964:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800296c:	f7fe fbd2 	bl	8001114 <HAL_GPIO_Init>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002970:	221c      	movs	r2, #28
 8002972:	eb0d 0002 	add.w	r0, sp, r2
 8002976:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002978:	9405      	str	r4, [sp, #20]
 800297a:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800297c:	f000 fed6 	bl	800372c <memset>
  htim3.Instance = TIM3;
 8002980:	4b57      	ldr	r3, [pc, #348]	; (8002ae0 <main+0x238>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002982:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 400-1;
 8002984:	f240 168f 	movw	r6, #399	; 0x18f
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002988:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 1-1;
 800298a:	e885 0018 	stmia.w	r5, {r3, r4}
  htim3.Init.Period = 400-1;
 800298e:	60ee      	str	r6, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002990:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002992:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002994:	f7ff f88c 	bl	8001ab0 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002998:	a905      	add	r1, sp, #20
 800299a:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800299c:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800299e:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029a0:	f7ff fac7 	bl	8001f32 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029a4:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029a6:	4622      	mov	r2, r4
 80029a8:	a907      	add	r1, sp, #28
 80029aa:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ac:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 399;
 80029ae:	9608      	str	r6, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029b0:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029b2:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029b4:	f7ff f90a 	bl	8001bcc <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029b8:	2204      	movs	r2, #4
 80029ba:	a907      	add	r1, sp, #28
 80029bc:	4628      	mov	r0, r5
 80029be:	f7ff f905 	bl	8001bcc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 80029c2:	4628      	mov	r0, r5
 80029c4:	f000 fd6e 	bl	80034a4 <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029c8:	221c      	movs	r2, #28
 80029ca:	eb0d 0002 	add.w	r0, sp, r2
 80029ce:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029d0:	9405      	str	r4, [sp, #20]
 80029d2:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029d4:	f000 feaa 	bl	800372c <memset>
  htim4.Init.Prescaler = 8000-1;
 80029d8:	4b42      	ldr	r3, [pc, #264]	; (8002ae4 <main+0x23c>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029da:	60bc      	str	r4, [r7, #8]
  htim4.Init.Prescaler = 8000-1;
 80029dc:	f641 793f 	movw	r9, #7999	; 0x1f3f
 80029e0:	e887 0208 	stmia.w	r7, {r3, r9}
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80029e4:	4638      	mov	r0, r7
  htim4.Init.Period = 50-1;
 80029e6:	2331      	movs	r3, #49	; 0x31
 80029e8:	60fb      	str	r3, [r7, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ea:	613c      	str	r4, [r7, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ec:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80029ee:	f7ff f845 	bl	8001a7c <HAL_TIM_OC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029f2:	a905      	add	r1, sp, #20
 80029f4:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f6:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f8:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029fa:	f7ff fa9a 	bl	8001f32 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029fe:	a907      	add	r1, sp, #28
 8002a00:	4622      	mov	r2, r4
 8002a02:	4638      	mov	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002a04:	9407      	str	r4, [sp, #28]
  sConfigOC.Pulse = 0;
 8002a06:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a08:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a0a:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a0c:	f7ff f8b0 	bl	8001b70 <HAL_TIM_OC_ConfigChannel>
  huart2.Instance = USART2;
 8002a10:	4835      	ldr	r0, [pc, #212]	; (8002ae8 <main+0x240>)
  huart2.Init.BaudRate = 115200;
 8002a12:	4a36      	ldr	r2, [pc, #216]	; (8002aec <main+0x244>)
  htim2.Instance = TIM2;
 8002a14:	4e36      	ldr	r6, [pc, #216]	; (8002af0 <main+0x248>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a16:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002a18:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002a1c:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a20:	230c      	movs	r3, #12
 8002a22:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a24:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a26:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a28:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a2a:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a2c:	f7ff fbe4 	bl	80021f8 <HAL_UART_Init>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a30:	2210      	movs	r2, #16
 8002a32:	4621      	mov	r1, r4
 8002a34:	a807      	add	r0, sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a36:	9405      	str	r4, [sp, #20]
 8002a38:	9406      	str	r4, [sp, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002a3a:	f000 fe77 	bl	800372c <memset>
  htim2.Instance = TIM2;
 8002a3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 8000-1;
 8002a42:	e886 0208 	stmia.w	r6, {r3, r9}
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002a46:	4630      	mov	r0, r6
  htim2.Init.Period = 4294967295;
 8002a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a4c:	60f3      	str	r3, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a4e:	60b4      	str	r4, [r6, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a50:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a52:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002a54:	f7ff f846 	bl	8001ae4 <HAL_TIM_IC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a58:	a905      	add	r1, sp, #20
 8002a5a:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a5c:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a5e:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a60:	f7ff fa67 	bl	8001f32 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002a64:	4622      	mov	r2, r4
 8002a66:	a907      	add	r1, sp, #28
 8002a68:	4630      	mov	r0, r6
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a6a:	9407      	str	r4, [sp, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002a6c:	f8cd 8020 	str.w	r8, [sp, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002a70:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8002a72:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002a74:	f7ff f93e 	bl	8001cf4 <HAL_TIM_IC_ConfigChannel>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002a78:	2204      	movs	r2, #4
 8002a7a:	a907      	add	r1, sp, #28
 8002a7c:	4630      	mov	r0, r6
 8002a7e:	f7ff f939 	bl	8001cf4 <HAL_TIM_IC_ConfigChannel>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002a82:	4621      	mov	r1, r4
 8002a84:	4630      	mov	r0, r6
 8002a86:	f7ff fa23 	bl	8001ed0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8002a8a:	2104      	movs	r1, #4
 8002a8c:	4630      	mov	r0, r6
 8002a8e:	f7ff fa1f 	bl	8001ed0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8002a92:	4621      	mov	r1, r4
 8002a94:	4628      	mov	r0, r5
 8002a96:	f7ff f9c3 	bl	8001e20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8002a9a:	2104      	movs	r1, #4
 8002a9c:	4628      	mov	r0, r5
 8002a9e:	f7ff f9bf 	bl	8001e20 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start_IT(&htim4,TIM_CHANNEL_1);
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	4638      	mov	r0, r7
 8002aa6:	f7ff fa11 	bl	8001ecc <HAL_TIM_OC_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 8002aaa:	682b      	ldr	r3, [r5, #0]
 8002aac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ab0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
 8002ab2:	639a      	str	r2, [r3, #56]	; 0x38
    	printWelcomeMessage();
 8002ab4:	f7ff fcdc 	bl	8002470 <printWelcomeMessage>
    		opt = readUserInput();
 8002ab8:	f7ff fd04 	bl	80024c4 <readUserInput>
 8002abc:	4604      	mov	r4, r0
    		processUserInput(opt);
 8002abe:	f7ff fd1b 	bl	80024f8 <processUserInput>
    		if(opt == 3)
 8002ac2:	2c03      	cmp	r4, #3
 8002ac4:	d1f8      	bne.n	8002ab8 <main+0x210>
 8002ac6:	e7f5      	b.n	8002ab4 <main+0x20c>
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40020000 	.word	0x40020000
 8002ad0:	200002cc 	.word	0x200002cc
 8002ad4:	20000280 	.word	0x20000280
 8002ad8:	40020800 	.word	0x40020800
 8002adc:	10210000 	.word	0x10210000
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	40000800 	.word	0x40000800
 8002ae8:	20000350 	.word	0x20000350
 8002aec:	40004400 	.word	0x40004400
 8002af0:	20000310 	.word	0x20000310

08002af4 <pid_controller_wheels>:

	int32_t output_pwm = 0;
	int32_t return_pwm = 0;


	if (wheel_id == 1)
 8002af4:	2a01      	cmp	r2, #1
{
 8002af6:	b510      	push	{r4, lr}
	if (wheel_id == 1)
 8002af8:	d11f      	bne.n	8002b3a <pid_controller_wheels+0x46>
	{
		error1 = desired_point - current_point;
 8002afa:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <pid_controller_wheels+0x58>)
 8002afc:	1a09      	subs	r1, r1, r0
 8002afe:	6019      	str	r1, [r3, #0]
		output_pwm = (Kp*error1) + (Ki*integrated_error1);
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <pid_controller_wheels+0x5c>)

	}
	else if (wheel_id == 2)
	{
		error2 = desired_point - current_point;
		output_pwm = (Kp*error2) + (Ki*integrated_error2);
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	f06f 0003 	mvn.w	r0, #3
 8002b08:	f06f 0410 	mvn.w	r4, #16
 8002b0c:	4350      	muls	r0, r2
 8002b0e:	fb04 0001 	mla	r0, r4, r1, r0

		if ((abs(integrated_error2)<200) || ((error2*integrated_error2)<=0)) // anti winding
 8002b12:	f102 04c7 	add.w	r4, r2, #199	; 0xc7
 8002b16:	f5b4 7fc7 	cmp.w	r4, #398	; 0x18e
 8002b1a:	d903      	bls.n	8002b24 <pid_controller_wheels+0x30>
 8002b1c:	fb02 f401 	mul.w	r4, r2, r1
 8002b20:	2c00      	cmp	r4, #0
 8002b22:	dc01      	bgt.n	8002b28 <pid_controller_wheels+0x34>
		{
			integrated_error2 += error2;
 8002b24:	4411      	add	r1, r2
 8002b26:	6019      	str	r1, [r3, #0]
 8002b28:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8002b2c:	bfa8      	it	ge
 8002b2e:	f44f 70c8 	movge.w	r0, #400	; 0x190
 8002b32:	2832      	cmp	r0, #50	; 0x32
 8002b34:	bfb8      	it	lt
 8002b36:	2032      	movlt	r0, #50	; 0x32
 8002b38:	bd10      	pop	{r4, pc}
	else if (wheel_id == 2)
 8002b3a:	2a02      	cmp	r2, #2
 8002b3c:	d104      	bne.n	8002b48 <pid_controller_wheels+0x54>
		error2 = desired_point - current_point;
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <pid_controller_wheels+0x60>)
 8002b40:	1a09      	subs	r1, r1, r0
 8002b42:	6019      	str	r1, [r3, #0]
		output_pwm = (Kp*error2) + (Ki*integrated_error2);
 8002b44:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <pid_controller_wheels+0x64>)
 8002b46:	e7dc      	b.n	8002b02 <pid_controller_wheels+0xe>
		}
	}

	if (output_pwm < 50)
	{
		return_pwm = 50;
 8002b48:	2032      	movs	r0, #50	; 0x32
	{
		return_pwm = output_pwm;
	}

	return return_pwm;
}
 8002b4a:	bd10      	pop	{r4, pc}
 8002b4c:	20000240 	.word	0x20000240
 8002b50:	2000025c 	.word	0x2000025c
 8002b54:	20000244 	.word	0x20000244
 8002b58:	20000260 	.word	0x20000260
 8002b5c:	00000000 	.word	0x00000000

08002b60 <update_my_position>:

void update_my_position(void)
{
 8002b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  float dx,dy;

  dx = my_rover.trg_x - my_rover.x;
 8002b64:	4ca8      	ldr	r4, [pc, #672]	; (8002e08 <update_my_position+0x2a8>)
{
 8002b66:	ed2d 8b0a 	vpush	{d8-d12}
  dx = my_rover.trg_x - my_rover.x;
 8002b6a:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8002b6e:	ed94 aa00 	vldr	s20, [r4]
  dy = my_rover.trg_y - my_rover.y;
 8002b72:	edd4 9a01 	vldr	s19, [r4, #4]
 8002b76:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
  dx = my_rover.trg_x - my_rover.x;
 8002b7a:	ee77 7aca 	vsub.f32	s15, s15, s20
  dy = my_rover.trg_y - my_rover.y;
 8002b7e:	ee38 8a69 	vsub.f32	s16, s16, s19

  if ((abs(dx)<10) && (abs(dy)<10))
 8002b82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b86:	ee17 5a90 	vmov	r5, s15
 8002b8a:	3509      	adds	r5, #9
 8002b8c:	2d12      	cmp	r5, #18
 8002b8e:	d810      	bhi.n	8002bb2 <update_my_position+0x52>
 8002b90:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8002b94:	ee17 3a90 	vmov	r3, s15
 8002b98:	3309      	adds	r3, #9
 8002b9a:	2b12      	cmp	r3, #18
 8002b9c:	d809      	bhi.n	8002bb2 <update_my_position+0x52>
  printf("my_rover.phi: %d\n", (int) (my_rover.phi*100));

	printf("dx: %d\n", (int) (my_rover.dx*100));
	printf("dy: %d\n", (int) (my_rover.dy*100));
	printf("dphi: %d\n", (int) (my_rover.dphi*100));
}
 8002b9e:	ecbd 8b0a 	vpop	{d8-d12}
    my_rover.trg_wheel_spd1 = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	85a3      	strh	r3, [r4, #44]	; 0x2c
    my_rover.trg_wheel_spd2 = 0;
 8002ba6:	85e3      	strh	r3, [r4, #46]	; 0x2e
    my_rover.linear_vel = 0.0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	6363      	str	r3, [r4, #52]	; 0x34
    my_rover.angular_vel = 0.0;
 8002bac:	6323      	str	r3, [r4, #48]	; 0x30
}
 8002bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	my_rover.s1 = (float) wheel_dir1*((n_pulse1/270.0)*3.1415*2*R);
 8002bb2:	4f96      	ldr	r7, [pc, #600]	; (8002e0c <update_my_position+0x2ac>)
	my_rover.s2 = (float) wheel_dir2*((n_pulse2/270.0)*3.1415*2*R);
 8002bb4:	4e96      	ldr	r6, [pc, #600]	; (8002e10 <update_my_position+0x2b0>)
	my_rover.s1 = (float) wheel_dir1*((n_pulse1/270.0)*3.1415*2*R);
 8002bb6:	8838      	ldrh	r0, [r7, #0]
 8002bb8:	f7fd fcbc 	bl	8000534 <__aeabi_i2d>
 8002bbc:	a38e      	add	r3, pc, #568	; (adr r3, 8002df8 <update_my_position+0x298>)
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	f7fd fe47 	bl	8000854 <__aeabi_ddiv>
 8002bc6:	a38e      	add	r3, pc, #568	; (adr r3, 8002e00 <update_my_position+0x2a0>)
 8002bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bcc:	f7fd fd18 	bl	8000600 <__aeabi_dmul>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	f7fd fb62 	bl	800029c <__adddf3>
 8002bd8:	2200      	movs	r2, #0
 8002bda:	4b8e      	ldr	r3, [pc, #568]	; (8002e14 <update_my_position+0x2b4>)
 8002bdc:	f7fd fd10 	bl	8000600 <__aeabi_dmul>
 8002be0:	4b8d      	ldr	r3, [pc, #564]	; (8002e18 <update_my_position+0x2b8>)
 8002be2:	4680      	mov	r8, r0
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	4689      	mov	r9, r1
 8002be8:	f7fd fcb6 	bl	8000558 <__aeabi_f2d>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4640      	mov	r0, r8
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	f7fd fd04 	bl	8000600 <__aeabi_dmul>
 8002bf8:	f7fd fffa 	bl	8000bf0 <__aeabi_d2f>
 8002bfc:	ee0a 0a90 	vmov	s21, r0
 8002c00:	61a0      	str	r0, [r4, #24]
	my_rover.s2 = (float) wheel_dir2*((n_pulse2/270.0)*3.1415*2*R);
 8002c02:	8830      	ldrh	r0, [r6, #0]
 8002c04:	f7fd fc96 	bl	8000534 <__aeabi_i2d>
 8002c08:	a37b      	add	r3, pc, #492	; (adr r3, 8002df8 <update_my_position+0x298>)
 8002c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0e:	f7fd fe21 	bl	8000854 <__aeabi_ddiv>
 8002c12:	a37b      	add	r3, pc, #492	; (adr r3, 8002e00 <update_my_position+0x2a0>)
 8002c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c18:	f7fd fcf2 	bl	8000600 <__aeabi_dmul>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	f7fd fb3c 	bl	800029c <__adddf3>
 8002c24:	2200      	movs	r2, #0
 8002c26:	4b7b      	ldr	r3, [pc, #492]	; (8002e14 <update_my_position+0x2b4>)
 8002c28:	f7fd fcea 	bl	8000600 <__aeabi_dmul>
 8002c2c:	4b7b      	ldr	r3, [pc, #492]	; (8002e1c <update_my_position+0x2bc>)
 8002c2e:	4680      	mov	r8, r0
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	4689      	mov	r9, r1
 8002c34:	f7fd fc90 	bl	8000558 <__aeabi_f2d>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4640      	mov	r0, r8
 8002c3e:	4649      	mov	r1, r9
 8002c40:	f7fd fcde 	bl	8000600 <__aeabi_dmul>
 8002c44:	f7fd ffd4 	bl	8000bf0 <__aeabi_d2f>
 8002c48:	ee09 0a10 	vmov	s18, r0
	my_rover.s_mean = (float) (my_rover.s1+my_rover.s2)/2.0;
 8002c4c:	ee7a 7a89 	vadd.f32	s15, s21, s18
 8002c50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c54:	ee67 7a87 	vmul.f32	s15, s15, s14
	my_rover.s2 = (float) wheel_dir2*((n_pulse2/270.0)*3.1415*2*R);
 8002c58:	61e0      	str	r0, [r4, #28]
	my_rover.s_mean = (float) (my_rover.s1+my_rover.s2)/2.0;
 8002c5a:	edc4 7a08 	vstr	s15, [r4, #32]
	my_rover.dx = (float) my_rover.s_mean*cos(my_rover.phi); // in mm
 8002c5e:	ee17 0a90 	vmov	r0, s15
 8002c62:	f7fd fc79 	bl	8000558 <__aeabi_f2d>
 8002c66:	edd4 8a02 	vldr	s17, [r4, #8]
 8002c6a:	4680      	mov	r8, r0
 8002c6c:	ee18 0a90 	vmov	r0, s17
 8002c70:	4689      	mov	r9, r1
 8002c72:	f7fd fc71 	bl	8000558 <__aeabi_f2d>
 8002c76:	ec41 0b10 	vmov	d0, r0, r1
 8002c7a:	ec41 0b1c 	vmov	d12, r0, r1
 8002c7e:	f002 f8e3 	bl	8004e48 <cos>
 8002c82:	4640      	mov	r0, r8
 8002c84:	ec53 2b10 	vmov	r2, r3, d0
 8002c88:	4649      	mov	r1, r9
 8002c8a:	f7fd fcb9 	bl	8000600 <__aeabi_dmul>
 8002c8e:	f7fd ffaf 	bl	8000bf0 <__aeabi_d2f>
	my_rover.dy = (float) my_rover.s_mean*sin(my_rover.phi); // in mm
 8002c92:	eeb0 0a4c 	vmov.f32	s0, s24
 8002c96:	eef0 0a6c 	vmov.f32	s1, s25
	my_rover.dx = (float) my_rover.s_mean*cos(my_rover.phi); // in mm
 8002c9a:	ee0b 0a10 	vmov	s22, r0
 8002c9e:	60e0      	str	r0, [r4, #12]
	my_rover.dy = (float) my_rover.s_mean*sin(my_rover.phi); // in mm
 8002ca0:	f002 f91e 	bl	8004ee0 <sin>
 8002ca4:	4640      	mov	r0, r8
 8002ca6:	ec53 2b10 	vmov	r2, r3, d0
 8002caa:	4649      	mov	r1, r9
 8002cac:	f7fd fca8 	bl	8000600 <__aeabi_dmul>
 8002cb0:	f7fd ff9e 	bl	8000bf0 <__aeabi_d2f>
	my_rover.dphi = (float) (my_rover.s2-my_rover.s1)/(2*L); // in rad
 8002cb4:	ee39 9a6a 	vsub.f32	s18, s18, s21
 8002cb8:	eddf 6a59 	vldr	s13, [pc, #356]	; 8002e20 <update_my_position+0x2c0>
	my_rover.dy = (float) my_rover.s_mean*sin(my_rover.phi); // in mm
 8002cbc:	6120      	str	r0, [r4, #16]
	my_rover.dphi = (float) (my_rover.s2-my_rover.s1)/(2*L); // in rad
 8002cbe:	eec9 7a26 	vdiv.f32	s15, s18, s13
	my_rover.dy = (float) my_rover.s_mean*sin(my_rover.phi); // in mm
 8002cc2:	ee07 0a10 	vmov	s14, r0
	my_rover.phi = my_rover.phi + my_rover.dphi;
 8002cc6:	ee78 8aa7 	vadd.f32	s17, s17, s15
	my_rover.y = my_rover.y + my_rover.dy;
 8002cca:	ee79 9a87 	vadd.f32	s19, s19, s14
	my_rover.x = my_rover.x + my_rover.dx;
 8002cce:	ee3a aa0b 	vadd.f32	s20, s20, s22
	my_rover.dphi = (float) (my_rover.s2-my_rover.s1)/(2*L); // in rad
 8002cd2:	edc4 7a05 	vstr	s15, [r4, #20]
	my_rover.x = my_rover.x + my_rover.dx;
 8002cd6:	ed84 aa00 	vstr	s20, [r4]
	my_rover.phi = atan2(sin(my_rover.phi),cos(my_rover.phi)); // map phi between [-pi,pi]
 8002cda:	ee18 0a90 	vmov	r0, s17
	my_rover.y = my_rover.y + my_rover.dy;
 8002cde:	edc4 9a01 	vstr	s19, [r4, #4]
	my_rover.phi = my_rover.phi + my_rover.dphi;
 8002ce2:	edc4 8a02 	vstr	s17, [r4, #8]
	my_rover.phi = atan2(sin(my_rover.phi),cos(my_rover.phi)); // map phi between [-pi,pi]
 8002ce6:	f7fd fc37 	bl	8000558 <__aeabi_f2d>
 8002cea:	ec41 0b10 	vmov	d0, r0, r1
 8002cee:	ec41 0b19 	vmov	d9, r0, r1
 8002cf2:	f002 f8f5 	bl	8004ee0 <sin>
 8002cf6:	eeb0 aa40 	vmov.f32	s20, s0
 8002cfa:	eef0 aa60 	vmov.f32	s21, s1
 8002cfe:	eeb0 0a49 	vmov.f32	s0, s18
 8002d02:	eef0 0a69 	vmov.f32	s1, s19
 8002d06:	f002 f89f 	bl	8004e48 <cos>
 8002d0a:	eeb0 1a40 	vmov.f32	s2, s0
 8002d0e:	eef0 1a60 	vmov.f32	s3, s1
 8002d12:	eeb0 0a4a 	vmov.f32	s0, s20
 8002d16:	eef0 0a6a 	vmov.f32	s1, s21
 8002d1a:	f002 f929 	bl	8004f70 <atan2>
 8002d1e:	ec51 0b10 	vmov	r0, r1, d0
 8002d22:	f7fd ff65 	bl	8000bf0 <__aeabi_d2f>
  if ((abs(dx)<10) && (abs(dy)<10))
 8002d26:	2d12      	cmp	r5, #18
	my_rover.phi = atan2(sin(my_rover.phi),cos(my_rover.phi)); // map phi between [-pi,pi]
 8002d28:	60a0      	str	r0, [r4, #8]
  if ((abs(dx)<10) && (abs(dy)<10))
 8002d2a:	d807      	bhi.n	8002d3c <update_my_position+0x1dc>
 8002d2c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8002d30:	ee17 3a90 	vmov	r3, s15
 8002d34:	3309      	adds	r3, #9
 8002d36:	2b12      	cmp	r3, #18
 8002d38:	f67f af31 	bls.w	8002b9e <update_my_position+0x3e>
	printf("# Update position\n");
 8002d3c:	4839      	ldr	r0, [pc, #228]	; (8002e24 <update_my_position+0x2c4>)
	printf("s1: %d\n", (int) (my_rover.s1*100));
 8002d3e:	ed9f 8a3a 	vldr	s16, [pc, #232]	; 8002e28 <update_my_position+0x2c8>
	printf("# Update position\n");
 8002d42:	f000 fd6f 	bl	8003824 <puts>
  printf("n_pulse1: %d\n", n_pulse1);
 8002d46:	8839      	ldrh	r1, [r7, #0]
 8002d48:	4838      	ldr	r0, [pc, #224]	; (8002e2c <update_my_position+0x2cc>)
 8002d4a:	f000 fcf7 	bl	800373c <iprintf>
  printf("n_pulse2: %d\n", n_pulse2);
 8002d4e:	8831      	ldrh	r1, [r6, #0]
 8002d50:	4837      	ldr	r0, [pc, #220]	; (8002e30 <update_my_position+0x2d0>)
 8002d52:	f000 fcf3 	bl	800373c <iprintf>
	printf("s1: %d\n", (int) (my_rover.s1*100));
 8002d56:	edd4 7a06 	vldr	s15, [r4, #24]
 8002d5a:	4836      	ldr	r0, [pc, #216]	; (8002e34 <update_my_position+0x2d4>)
 8002d5c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d64:	ee17 1a90 	vmov	r1, s15
 8002d68:	f000 fce8 	bl	800373c <iprintf>
	printf("s2: %d\n", (int) (my_rover.s2*100));
 8002d6c:	edd4 7a07 	vldr	s15, [r4, #28]
 8002d70:	4831      	ldr	r0, [pc, #196]	; (8002e38 <update_my_position+0x2d8>)
 8002d72:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002d76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d7a:	ee17 1a90 	vmov	r1, s15
 8002d7e:	f000 fcdd 	bl	800373c <iprintf>
	printf("s_mean: %d\n", (int) (my_rover.s_mean*100));
 8002d82:	edd4 7a08 	vldr	s15, [r4, #32]
 8002d86:	482d      	ldr	r0, [pc, #180]	; (8002e3c <update_my_position+0x2dc>)
 8002d88:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d90:	ee17 1a90 	vmov	r1, s15
 8002d94:	f000 fcd2 	bl	800373c <iprintf>
  printf("my_rover.phi: %d\n", (int) (my_rover.phi*100));
 8002d98:	edd4 7a02 	vldr	s15, [r4, #8]
 8002d9c:	4828      	ldr	r0, [pc, #160]	; (8002e40 <update_my_position+0x2e0>)
 8002d9e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002da2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002da6:	ee17 1a90 	vmov	r1, s15
 8002daa:	f000 fcc7 	bl	800373c <iprintf>
	printf("dx: %d\n", (int) (my_rover.dx*100));
 8002dae:	edd4 7a03 	vldr	s15, [r4, #12]
 8002db2:	4824      	ldr	r0, [pc, #144]	; (8002e44 <update_my_position+0x2e4>)
 8002db4:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002db8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dbc:	ee17 1a90 	vmov	r1, s15
 8002dc0:	f000 fcbc 	bl	800373c <iprintf>
	printf("dy: %d\n", (int) (my_rover.dy*100));
 8002dc4:	edd4 7a04 	vldr	s15, [r4, #16]
 8002dc8:	481f      	ldr	r0, [pc, #124]	; (8002e48 <update_my_position+0x2e8>)
 8002dca:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002dce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dd2:	ee17 1a90 	vmov	r1, s15
 8002dd6:	f000 fcb1 	bl	800373c <iprintf>
	printf("dphi: %d\n", (int) (my_rover.dphi*100));
 8002dda:	edd4 7a05 	vldr	s15, [r4, #20]
 8002dde:	481b      	ldr	r0, [pc, #108]	; (8002e4c <update_my_position+0x2ec>)
 8002de0:	ee27 8a88 	vmul.f32	s16, s15, s16
 8002de4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
}
 8002de8:	ecbd 8b0a 	vpop	{d8-d12}
	printf("dphi: %d\n", (int) (my_rover.dphi*100));
 8002dec:	ee17 1a90 	vmov	r1, s15
}
 8002df0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	printf("dphi: %d\n", (int) (my_rover.dphi*100));
 8002df4:	f000 bca2 	b.w	800373c <iprintf>
 8002df8:	00000000 	.word	0x00000000
 8002dfc:	4070e000 	.word	0x4070e000
 8002e00:	c083126f 	.word	0xc083126f
 8002e04:	400921ca 	.word	0x400921ca
 8002e08:	20000008 	.word	0x20000008
 8002e0c:	20000268 	.word	0x20000268
 8002e10:	2000026a 	.word	0x2000026a
 8002e14:	40440000 	.word	0x40440000
 8002e18:	20000040 	.word	0x20000040
 8002e1c:	20000044 	.word	0x20000044
 8002e20:	43aa0000 	.word	0x43aa0000
 8002e24:	08006625 	.word	0x08006625
 8002e28:	42c80000 	.word	0x42c80000
 8002e2c:	08006436 	.word	0x08006436
 8002e30:	08006637 	.word	0x08006637
 8002e34:	08006645 	.word	0x08006645
 8002e38:	0800664d 	.word	0x0800664d
 8002e3c:	08006655 	.word	0x08006655
 8002e40:	08006661 	.word	0x08006661
 8002e44:	08006673 	.word	0x08006673
 8002e48:	0800667b 	.word	0x0800667b
 8002e4c:	08006683 	.word	0x08006683

08002e50 <heading_pid_controller>:

float heading_pid_controller(float error_heading)
{
 8002e50:	b510      	push	{r4, lr}
	float kp = 0.5;
	float ki = 0;

	if (integrated_error_heading < 0.52 || integrated_error_heading*error_heading < 0)
 8002e52:	4c17      	ldr	r4, [pc, #92]	; (8002eb0 <heading_pid_controller+0x60>)
{
 8002e54:	ed2d 8b02 	vpush	{d8}
	if (integrated_error_heading < 0.52 || integrated_error_heading*error_heading < 0)
 8002e58:	ed94 8a00 	vldr	s16, [r4]
 8002e5c:	ee18 0a10 	vmov	r0, s16
{
 8002e60:	eef0 8a40 	vmov.f32	s17, s0
	if (integrated_error_heading < 0.52 || integrated_error_heading*error_heading < 0)
 8002e64:	f7fd fb78 	bl	8000558 <__aeabi_f2d>
 8002e68:	a30f      	add	r3, pc, #60	; (adr r3, 8002ea8 <heading_pid_controller+0x58>)
 8002e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6e:	f7fd fe39 	bl	8000ae4 <__aeabi_dcmplt>
 8002e72:	b930      	cbnz	r0, 8002e82 <heading_pid_controller+0x32>
 8002e74:	ee68 7a28 	vmul.f32	s15, s16, s17
 8002e78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e80:	d503      	bpl.n	8002e8a <heading_pid_controller+0x3a>
	{
		integrated_error_heading += error_heading;
 8002e82:	ee38 8a28 	vadd.f32	s16, s16, s17
 8002e86:	ed84 8a00 	vstr	s16, [r4]
	}

	return kp*error_heading + ki*integrated_error_heading;
 8002e8a:	edd4 7a00 	vldr	s15, [r4]
 8002e8e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8002eb4 <heading_pid_controller+0x64>
 8002e92:	ee27 0a80 	vmul.f32	s0, s15, s0

}
 8002e96:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e9a:	eea8 0a87 	vfma.f32	s0, s17, s14
 8002e9e:	ecbd 8b02 	vpop	{d8}
 8002ea2:	bd10      	pop	{r4, pc}
 8002ea4:	f3af 8000 	nop.w
 8002ea8:	0a3d70a4 	.word	0x0a3d70a4
 8002eac:	3fe0a3d7 	.word	0x3fe0a3d7
 8002eb0:	20000264 	.word	0x20000264
 8002eb4:	00000000 	.word	0x00000000

08002eb8 <calculate_new_speed>:

void calculate_new_speed(void)
{
 8002eb8:	b570      	push	{r4, r5, r6, lr}

	float left_wheel_cmd, right_wheel_cmd;
	float faster_speed;

	// Calculate error vector
	dx = my_rover.trg_x - my_rover.x;
 8002eba:	4dd5      	ldr	r5, [pc, #852]	; (8003210 <calculate_new_speed+0x358>)
{
 8002ebc:	ed2d 8b04 	vpush	{d8-d9}
	dx = my_rover.trg_x - my_rover.x;
 8002ec0:	edd5 7a00 	vldr	s15, [r5]
 8002ec4:	edd5 8a09 	vldr	s17, [r5, #36]	; 0x24
	dy = my_rover.trg_y - my_rover.y;
 8002ec8:	ed95 8a0a 	vldr	s16, [r5, #40]	; 0x28
	dx = my_rover.trg_x - my_rover.x;
 8002ecc:	ee78 8ae7 	vsub.f32	s17, s17, s15
	dy = my_rover.trg_y - my_rover.y;
 8002ed0:	edd5 7a01 	vldr	s15, [r5, #4]
 8002ed4:	ee38 8a67 	vsub.f32	s16, s16, s15
{
 8002ed8:	b082      	sub	sp, #8

	error_distance = sqrt(dx*dx+dy*dy);
 8002eda:	ee68 7a08 	vmul.f32	s15, s16, s16
 8002ede:	462c      	mov	r4, r5
 8002ee0:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8002ee4:	ee17 0a90 	vmov	r0, s15
 8002ee8:	f7fd fb36 	bl	8000558 <__aeabi_f2d>
 8002eec:	ec41 0b10 	vmov	d0, r0, r1
 8002ef0:	f002 f840 	bl	8004f74 <sqrt>

	if ((abs(dx)<10) && (abs(dy)<10))
 8002ef4:	eefd 7ae8 	vcvt.s32.f32	s15, s17
	error_distance = sqrt(dx*dx+dy*dy);
 8002ef8:	ec51 0b10 	vmov	r0, r1, d0
	if ((abs(dx)<10) && (abs(dy)<10))
 8002efc:	ee17 3a90 	vmov	r3, s15
 8002f00:	3309      	adds	r3, #9
 8002f02:	2b12      	cmp	r3, #18
 8002f04:	d810      	bhi.n	8002f28 <calculate_new_speed+0x70>
 8002f06:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8002f0a:	ee17 3a90 	vmov	r3, s15
 8002f0e:	3309      	adds	r3, #9
 8002f10:	2b12      	cmp	r3, #18
 8002f12:	d809      	bhi.n	8002f28 <calculate_new_speed+0x70>
	{
		my_rover.trg_wheel_spd1 = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	85ab      	strh	r3, [r5, #44]	; 0x2c
		my_rover.trg_wheel_spd2 = 0;
 8002f18:	85eb      	strh	r3, [r5, #46]	; 0x2e
		my_rover.linear_vel = 0.0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	636b      	str	r3, [r5, #52]	; 0x34
		my_rover.angular_vel = 0.0;
 8002f1e:	632b      	str	r3, [r5, #48]	; 0x30
	printf("Left cmd: %d\n", (int) (left_wheel_cmd*100));
	printf("Right cmd: %d\n", (int) (right_wheel_cmd*100));
	printf("Target n_pulse1: %d\n", (int) (my_rover.trg_wheel_spd1));
	printf("Target n_pulse2 %d\n", (int) (my_rover.trg_wheel_spd2));

}
 8002f20:	b002      	add	sp, #8
 8002f22:	ecbd 8b04 	vpop	{d8-d9}
 8002f26:	bd70      	pop	{r4, r5, r6, pc}
	error_distance = sqrt(dx*dx+dy*dy);
 8002f28:	f7fd fe62 	bl	8000bf0 <__aeabi_d2f>
 8002f2c:	ee09 0a10 	vmov	s18, r0
		k = atan(error_distance)/1.57*150.0;
 8002f30:	f7fd fb12 	bl	8000558 <__aeabi_f2d>
 8002f34:	ec41 0b10 	vmov	d0, r0, r1
 8002f38:	f001 fdde 	bl	8004af8 <atan>
 8002f3c:	a3aa      	add	r3, pc, #680	; (adr r3, 80031e8 <calculate_new_speed+0x330>)
 8002f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f42:	ec51 0b10 	vmov	r0, r1, d0
 8002f46:	f7fd fc85 	bl	8000854 <__aeabi_ddiv>
 8002f4a:	a3a9      	add	r3, pc, #676	; (adr r3, 80031f0 <calculate_new_speed+0x338>)
 8002f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f50:	f7fd fb56 	bl	8000600 <__aeabi_dmul>
 8002f54:	f7fd fe4c 	bl	8000bf0 <__aeabi_d2f>
 8002f58:	ee07 0a90 	vmov	s15, r0
		u2 = k*dy/error_distance;
 8002f5c:	ee28 8a27 	vmul.f32	s16, s16, s15
		u1 = k*dx/error_distance;
 8002f60:	ee68 8aa7 	vmul.f32	s17, s17, s15
		u2 = k*dy/error_distance;
 8002f64:	eec8 7a09 	vdiv.f32	s15, s16, s18
 8002f68:	4daa      	ldr	r5, [pc, #680]	; (8003214 <calculate_new_speed+0x35c>)
		u1 = k*dx/error_distance;
 8002f6a:	4eab      	ldr	r6, [pc, #684]	; (8003218 <calculate_new_speed+0x360>)
 8002f6c:	ee88 7a89 	vdiv.f32	s14, s17, s18
		u2 = k*dy/error_distance;
 8002f70:	edc5 7a00 	vstr	s15, [r5]
	my_rover.linear_vel = sqrt(u1*u1 + u2*u2);
 8002f74:	ee67 7aa7 	vmul.f32	s15, s15, s15
		u1 = k*dx/error_distance;
 8002f78:	ed86 7a00 	vstr	s14, [r6]
	my_rover.linear_vel = sqrt(u1*u1 + u2*u2);
 8002f7c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8002f80:	ee17 0a90 	vmov	r0, s15
 8002f84:	f7fd fae8 	bl	8000558 <__aeabi_f2d>
 8002f88:	ec41 0b10 	vmov	d0, r0, r1
 8002f8c:	f001 fff2 	bl	8004f74 <sqrt>
 8002f90:	ec51 0b10 	vmov	r0, r1, d0
 8002f94:	f7fd fe2c 	bl	8000bf0 <__aeabi_d2f>
 8002f98:	6360      	str	r0, [r4, #52]	; 0x34
	desired_heading = atan2(u2,u1);
 8002f9a:	6830      	ldr	r0, [r6, #0]
 8002f9c:	f7fd fadc 	bl	8000558 <__aeabi_f2d>
 8002fa0:	e9cd 0100 	strd	r0, r1, [sp]
 8002fa4:	6828      	ldr	r0, [r5, #0]
 8002fa6:	f7fd fad7 	bl	8000558 <__aeabi_f2d>
 8002faa:	ed9d 1b00 	vldr	d1, [sp]
 8002fae:	ec41 0b10 	vmov	d0, r0, r1
 8002fb2:	f001 ffdd 	bl	8004f70 <atan2>
 8002fb6:	ec51 0b10 	vmov	r0, r1, d0
 8002fba:	f7fd fe19 	bl	8000bf0 <__aeabi_d2f>
	error_heading = atan2(sin(desired_heading - my_rover.phi),cos(desired_heading - my_rover.phi));
 8002fbe:	ed94 7a02 	vldr	s14, [r4, #8]
	desired_heading = atan2(u2,u1);
 8002fc2:	4b96      	ldr	r3, [pc, #600]	; (800321c <calculate_new_speed+0x364>)
 8002fc4:	ee07 0a90 	vmov	s15, r0
	error_heading = atan2(sin(desired_heading - my_rover.phi),cos(desired_heading - my_rover.phi));
 8002fc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
	desired_heading = atan2(u2,u1);
 8002fcc:	6018      	str	r0, [r3, #0]
	error_heading = atan2(sin(desired_heading - my_rover.phi),cos(desired_heading - my_rover.phi));
 8002fce:	ee17 0a90 	vmov	r0, s15
 8002fd2:	f7fd fac1 	bl	8000558 <__aeabi_f2d>
 8002fd6:	ec41 0b10 	vmov	d0, r0, r1
 8002fda:	ec41 0b18 	vmov	d8, r0, r1
 8002fde:	f001 ff7f 	bl	8004ee0 <sin>
 8002fe2:	eeb0 9a40 	vmov.f32	s18, s0
 8002fe6:	eef0 9a60 	vmov.f32	s19, s1
 8002fea:	eeb0 0a48 	vmov.f32	s0, s16
 8002fee:	eef0 0a68 	vmov.f32	s1, s17
 8002ff2:	f001 ff29 	bl	8004e48 <cos>
 8002ff6:	eeb0 1a40 	vmov.f32	s2, s0
 8002ffa:	eef0 1a60 	vmov.f32	s3, s1
 8002ffe:	eeb0 0a49 	vmov.f32	s0, s18
 8003002:	eef0 0a69 	vmov.f32	s1, s19
 8003006:	f001 ffb3 	bl	8004f70 <atan2>
 800300a:	ec51 0b10 	vmov	r0, r1, d0
 800300e:	f7fd fdef 	bl	8000bf0 <__aeabi_d2f>
 8003012:	4b83      	ldr	r3, [pc, #524]	; (8003220 <calculate_new_speed+0x368>)
	my_rover.angular_vel = heading_pid_controller(error_heading);
 8003014:	ee00 0a10 	vmov	s0, r0
	error_heading = atan2(sin(desired_heading - my_rover.phi),cos(desired_heading - my_rover.phi));
 8003018:	6018      	str	r0, [r3, #0]
	my_rover.angular_vel = heading_pid_controller(error_heading);
 800301a:	f7ff ff19 	bl	8002e50 <heading_pid_controller>
	left_wheel_cmd = (2*my_rover.linear_vel - my_rover.angular_vel*L)/(2*R); // in rad/s
 800301e:	eddf 7a81 	vldr	s15, [pc, #516]	; 8003224 <calculate_new_speed+0x36c>
	my_rover.angular_vel = heading_pid_controller(error_heading);
 8003022:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
	left_wheel_cmd = (2*my_rover.linear_vel - my_rover.angular_vel*L)/(2*R); // in rad/s
 8003026:	ee20 0a27 	vmul.f32	s0, s0, s15
 800302a:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 800302e:	eddf 7a7e 	vldr	s15, [pc, #504]	; 8003228 <calculate_new_speed+0x370>
 8003032:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003036:	eeb0 6a40 	vmov.f32	s12, s0
 800303a:	ee96 6a87 	vfnms.f32	s12, s13, s14
	right_wheel_cmd = (2*my_rover.linear_vel + my_rover.angular_vel*L)/(2*R);
 800303e:	eea6 0a87 	vfma.f32	s0, s13, s14
	left_wheel_cmd = (2*my_rover.linear_vel - my_rover.angular_vel*L)/(2*R); // in rad/s
 8003042:	ee86 9a27 	vdiv.f32	s18, s12, s15
	right_wheel_cmd = (2*my_rover.linear_vel + my_rover.angular_vel*L)/(2*R);
 8003046:	eec0 8a27 	vdiv.f32	s17, s0, s15
	if ((abs(left_wheel_cmd) > 14) || (abs(right_wheel_cmd) > 14))
 800304a:	eebd 8ac9 	vcvt.s32.f32	s16, s18
 800304e:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8003052:	ee18 3a10 	vmov	r3, s16
 8003056:	2b00      	cmp	r3, #0
 8003058:	bfb8      	it	lt
 800305a:	425b      	neglt	r3, r3
 800305c:	2b0e      	cmp	r3, #14
 800305e:	ee17 2a90 	vmov	r2, s15
 8003062:	dc05      	bgt.n	8003070 <calculate_new_speed+0x1b8>
 8003064:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 8003068:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 800306c:	290e      	cmp	r1, #14
 800306e:	dd2f      	ble.n	80030d0 <calculate_new_speed+0x218>
		faster_speed = abs(left_wheel_cmd);
 8003070:	ee07 3a90 	vmov	s15, r3
		if (abs(right_wheel_cmd) > faster_speed)
 8003074:	2a00      	cmp	r2, #0
 8003076:	bfb8      	it	lt
 8003078:	4252      	neglt	r2, r2
		faster_speed = abs(left_wheel_cmd);
 800307a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
		if (abs(right_wheel_cmd) > faster_speed)
 800307e:	ee07 2a90 	vmov	s15, r2
 8003082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			faster_speed = abs(right_wheel_cmd);
 8003086:	eeb4 8a67 	vcmp.f32	s16, s15
 800308a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308e:	bf48      	it	mi
 8003090:	eeb0 8a67 	vmovmi.f32	s16, s15
		left_wheel_cmd = left_wheel_cmd/faster_speed*11.635;
 8003094:	eec9 7a08 	vdiv.f32	s15, s18, s16
 8003098:	ee17 0a90 	vmov	r0, s15
 800309c:	f7fd fa5c 	bl	8000558 <__aeabi_f2d>
 80030a0:	a355      	add	r3, pc, #340	; (adr r3, 80031f8 <calculate_new_speed+0x340>)
 80030a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a6:	f7fd faab 	bl	8000600 <__aeabi_dmul>
 80030aa:	f7fd fda1 	bl	8000bf0 <__aeabi_d2f>
		right_wheel_cmd = right_wheel_cmd/faster_speed*11.635;
 80030ae:	eec8 7a88 	vdiv.f32	s15, s17, s16
		left_wheel_cmd = left_wheel_cmd/faster_speed*11.635;
 80030b2:	ee09 0a10 	vmov	s18, r0
		right_wheel_cmd = right_wheel_cmd/faster_speed*11.635;
 80030b6:	ee17 0a90 	vmov	r0, s15
 80030ba:	f7fd fa4d 	bl	8000558 <__aeabi_f2d>
 80030be:	a34e      	add	r3, pc, #312	; (adr r3, 80031f8 <calculate_new_speed+0x340>)
 80030c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c4:	f7fd fa9c 	bl	8000600 <__aeabi_dmul>
 80030c8:	f7fd fd92 	bl	8000bf0 <__aeabi_d2f>
 80030cc:	ee08 0a90 	vmov	s17, r0
	if (left_wheel_cmd > 0)
 80030d0:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80030d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	my_rover.trg_wheel_spd1 = (uint16_t) abs(left_wheel_cmd*270/(3.1415*2))*0.05; // n_pulse
 80030d8:	ed9f 8a54 	vldr	s16, [pc, #336]	; 800322c <calculate_new_speed+0x374>
 80030dc:	4b54      	ldr	r3, [pc, #336]	; (8003230 <calculate_new_speed+0x378>)
		wheel_dir1 = -1.0;
 80030de:	bfd8      	it	le
 80030e0:	4a54      	ldrle	r2, [pc, #336]	; (8003234 <calculate_new_speed+0x37c>)
	if (right_wheel_cmd > 0)
 80030e2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
		wheel_dir1 = 1.0;
 80030e6:	bfc8      	it	gt
 80030e8:	f04f 527e 	movgt.w	r2, #1065353216	; 0x3f800000
	my_rover.trg_wheel_spd1 = (uint16_t) abs(left_wheel_cmd*270/(3.1415*2))*0.05; // n_pulse
 80030ec:	ee69 7a08 	vmul.f32	s15, s18, s16
	if (right_wheel_cmd > 0)
 80030f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		wheel_dir1 = -1.0;
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	4b50      	ldr	r3, [pc, #320]	; (8003238 <calculate_new_speed+0x380>)
		wheel_dir2 = -1.0;
 80030f8:	bfd4      	ite	le
 80030fa:	4a4e      	ldrle	r2, [pc, #312]	; (8003234 <calculate_new_speed+0x37c>)
		wheel_dir2 = 1.0;
 80030fc:	f04f 527e 	movgt.w	r2, #1065353216	; 0x3f800000
	my_rover.trg_wheel_spd1 = (uint16_t) abs(left_wheel_cmd*270/(3.1415*2))*0.05; // n_pulse
 8003100:	ee17 0a90 	vmov	r0, s15
		wheel_dir2 = -1.0;
 8003104:	601a      	str	r2, [r3, #0]
	my_rover.trg_wheel_spd1 = (uint16_t) abs(left_wheel_cmd*270/(3.1415*2))*0.05; // n_pulse
 8003106:	f7fd fa27 	bl	8000558 <__aeabi_f2d>
 800310a:	a33d      	add	r3, pc, #244	; (adr r3, 8003200 <calculate_new_speed+0x348>)
 800310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_ddiv>
 8003114:	f7fd fd24 	bl	8000b60 <__aeabi_d2iz>
 8003118:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 800311c:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8003120:	b298      	uxth	r0, r3
 8003122:	f7fd fa07 	bl	8000534 <__aeabi_i2d>
 8003126:	a338      	add	r3, pc, #224	; (adr r3, 8003208 <calculate_new_speed+0x350>)
 8003128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312c:	f7fd fa68 	bl	8000600 <__aeabi_dmul>
 8003130:	f7fd fd3e 	bl	8000bb0 <__aeabi_d2uiz>
	my_rover.trg_wheel_spd2 = (uint16_t) abs(right_wheel_cmd*270/(3.1415*2))*0.05;
 8003134:	ee68 7a88 	vmul.f32	s15, s17, s16
	my_rover.trg_wheel_spd1 = (uint16_t) abs(left_wheel_cmd*270/(3.1415*2))*0.05; // n_pulse
 8003138:	85a0      	strh	r0, [r4, #44]	; 0x2c
	my_rover.trg_wheel_spd2 = (uint16_t) abs(right_wheel_cmd*270/(3.1415*2))*0.05;
 800313a:	ee17 0a90 	vmov	r0, s15
 800313e:	f7fd fa0b 	bl	8000558 <__aeabi_f2d>
 8003142:	a32f      	add	r3, pc, #188	; (adr r3, 8003200 <calculate_new_speed+0x348>)
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	f7fd fb84 	bl	8000854 <__aeabi_ddiv>
 800314c:	f7fd fd08 	bl	8000b60 <__aeabi_d2iz>
 8003150:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8003154:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8003158:	b298      	uxth	r0, r3
 800315a:	f7fd f9eb 	bl	8000534 <__aeabi_i2d>
 800315e:	a32a      	add	r3, pc, #168	; (adr r3, 8003208 <calculate_new_speed+0x350>)
 8003160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003164:	f7fd fa4c 	bl	8000600 <__aeabi_dmul>
 8003168:	f7fd fd22 	bl	8000bb0 <__aeabi_d2uiz>
 800316c:	85e0      	strh	r0, [r4, #46]	; 0x2e
	printf("# Calculate new speed \n");
 800316e:	4833      	ldr	r0, [pc, #204]	; (800323c <calculate_new_speed+0x384>)
	printf("Linear velocity: %d\n", (int) (my_rover.linear_vel*100));
 8003170:	ed9f 8a33 	vldr	s16, [pc, #204]	; 8003240 <calculate_new_speed+0x388>
	printf("# Calculate new speed \n");
 8003174:	f000 fb56 	bl	8003824 <puts>
	printf("Linear velocity: %d\n", (int) (my_rover.linear_vel*100));
 8003178:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800317c:	4831      	ldr	r0, [pc, #196]	; (8003244 <calculate_new_speed+0x38c>)
 800317e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8003182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003186:	ee17 1a90 	vmov	r1, s15
 800318a:	f000 fad7 	bl	800373c <iprintf>
	printf("Angular velocity: %d\n", (int) (my_rover.angular_vel*100));
 800318e:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8003192:	482d      	ldr	r0, [pc, #180]	; (8003248 <calculate_new_speed+0x390>)
 8003194:	ee67 7a88 	vmul.f32	s15, s15, s16
 8003198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800319c:	ee17 1a90 	vmov	r1, s15
 80031a0:	f000 facc 	bl	800373c <iprintf>
	printf("Left cmd: %d\n", (int) (left_wheel_cmd*100));
 80031a4:	ee29 9a08 	vmul.f32	s18, s18, s16
 80031a8:	4828      	ldr	r0, [pc, #160]	; (800324c <calculate_new_speed+0x394>)
 80031aa:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 80031ae:	ee17 1a90 	vmov	r1, s15
 80031b2:	f000 fac3 	bl	800373c <iprintf>
	printf("Right cmd: %d\n", (int) (right_wheel_cmd*100));
 80031b6:	ee68 8a88 	vmul.f32	s17, s17, s16
 80031ba:	4825      	ldr	r0, [pc, #148]	; (8003250 <calculate_new_speed+0x398>)
 80031bc:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 80031c0:	ee17 1a90 	vmov	r1, s15
 80031c4:	f000 faba 	bl	800373c <iprintf>
	printf("Target n_pulse1: %d\n", (int) (my_rover.trg_wheel_spd1));
 80031c8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80031ca:	4822      	ldr	r0, [pc, #136]	; (8003254 <calculate_new_speed+0x39c>)
 80031cc:	f000 fab6 	bl	800373c <iprintf>
	printf("Target n_pulse2 %d\n", (int) (my_rover.trg_wheel_spd2));
 80031d0:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80031d2:	4821      	ldr	r0, [pc, #132]	; (8003258 <calculate_new_speed+0x3a0>)
}
 80031d4:	b002      	add	sp, #8
 80031d6:	ecbd 8b04 	vpop	{d8-d9}
 80031da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("Target n_pulse2 %d\n", (int) (my_rover.trg_wheel_spd2));
 80031de:	f000 baad 	b.w	800373c <iprintf>
 80031e2:	bf00      	nop
 80031e4:	f3af 8000 	nop.w
 80031e8:	51eb851f 	.word	0x51eb851f
 80031ec:	3ff91eb8 	.word	0x3ff91eb8
 80031f0:	00000000 	.word	0x00000000
 80031f4:	4062c000 	.word	0x4062c000
 80031f8:	b851eb85 	.word	0xb851eb85
 80031fc:	4027451e 	.word	0x4027451e
 8003200:	c083126f 	.word	0xc083126f
 8003204:	401921ca 	.word	0x401921ca
 8003208:	9999999a 	.word	0x9999999a
 800320c:	3fa99999 	.word	0x3fa99999
 8003210:	20000008 	.word	0x20000008
 8003214:	200002c0 	.word	0x200002c0
 8003218:	200002c8 	.word	0x200002c8
 800321c:	2000030c 	.word	0x2000030c
 8003220:	200002c4 	.word	0x200002c4
 8003224:	432a0000 	.word	0x432a0000
 8003228:	42a00000 	.word	0x42a00000
 800322c:	43870000 	.word	0x43870000
 8003230:	20000040 	.word	0x20000040
 8003234:	bf800000 	.word	0xbf800000
 8003238:	20000044 	.word	0x20000044
 800323c:	080063d0 	.word	0x080063d0
 8003240:	42c80000 	.word	0x42c80000
 8003244:	080063e7 	.word	0x080063e7
 8003248:	080063fc 	.word	0x080063fc
 800324c:	08006412 	.word	0x08006412
 8003250:	08006420 	.word	0x08006420
 8003254:	0800642f 	.word	0x0800642f
 8003258:	08006444 	.word	0x08006444

0800325c <HAL_TIM_OC_DelayElapsedCallback>:
{
 800325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((htim->Instance == TIM4) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) && give_command == 1)
 800325e:	6802      	ldr	r2, [r0, #0]
 8003260:	4b36      	ldr	r3, [pc, #216]	; (800333c <HAL_TIM_OC_DelayElapsedCallback+0xe0>)
 8003262:	429a      	cmp	r2, r3
{
 8003264:	ed2d 8b02 	vpush	{d8}
	if ((htim->Instance == TIM4) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) && give_command == 1)
 8003268:	d165      	bne.n	8003336 <HAL_TIM_OC_DelayElapsedCallback+0xda>
 800326a:	7f03      	ldrb	r3, [r0, #28]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d162      	bne.n	8003336 <HAL_TIM_OC_DelayElapsedCallback+0xda>
 8003270:	4b33      	ldr	r3, [pc, #204]	; (8003340 <HAL_TIM_OC_DelayElapsedCallback+0xe4>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d15e      	bne.n	8003336 <HAL_TIM_OC_DelayElapsedCallback+0xda>
		counting++;
 8003278:	4f32      	ldr	r7, [pc, #200]	; (8003344 <HAL_TIM_OC_DelayElapsedCallback+0xe8>)
		printf("------------ New state ------------\n");
 800327a:	4833      	ldr	r0, [pc, #204]	; (8003348 <HAL_TIM_OC_DelayElapsedCallback+0xec>)
		n_pulse1 = input_capture1 - input_capture_prev1;
 800327c:	4e33      	ldr	r6, [pc, #204]	; (800334c <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
		n_pulse2 = input_capture2 - input_capture_prev2;
 800327e:	4c34      	ldr	r4, [pc, #208]	; (8003350 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
		printf("------------ New state ------------\n");
 8003280:	f000 fad0 	bl	8003824 <puts>
		HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8003284:	2120      	movs	r1, #32
 8003286:	4833      	ldr	r0, [pc, #204]	; (8003354 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8003288:	f7fe f81f 	bl	80012ca <HAL_GPIO_TogglePin>
		counting++;
 800328c:	783b      	ldrb	r3, [r7, #0]
		n_pulse1 = input_capture1 - input_capture_prev1;
 800328e:	4a32      	ldr	r2, [pc, #200]	; (8003358 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
		counting++;
 8003290:	3301      	adds	r3, #1
 8003292:	703b      	strb	r3, [r7, #0]
		n_pulse1 = input_capture1 - input_capture_prev1;
 8003294:	4b31      	ldr	r3, [pc, #196]	; (800335c <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 8003296:	6819      	ldr	r1, [r3, #0]
 8003298:	6813      	ldr	r3, [r2, #0]
		input_capture_prev1 = input_capture1;
 800329a:	6011      	str	r1, [r2, #0]
		n_pulse1 = input_capture1 - input_capture_prev1;
 800329c:	1acb      	subs	r3, r1, r3
		n_pulse2 = input_capture2 - input_capture_prev2;
 800329e:	4a30      	ldr	r2, [pc, #192]	; (8003360 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
		n_pulse1 = input_capture1 - input_capture_prev1;
 80032a0:	8033      	strh	r3, [r6, #0]
		n_pulse2 = input_capture2 - input_capture_prev2;
 80032a2:	4b30      	ldr	r3, [pc, #192]	; (8003364 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 80032a4:	6819      	ldr	r1, [r3, #0]
 80032a6:	6813      	ldr	r3, [r2, #0]
		input_capture_prev2 = input_capture2;
 80032a8:	6011      	str	r1, [r2, #0]
		n_pulse2 = input_capture2 - input_capture_prev2;
 80032aa:	1acb      	subs	r3, r1, r3
 80032ac:	8023      	strh	r3, [r4, #0]
		 update_my_position();
 80032ae:	f7ff fc57 	bl	8002b60 <update_my_position>
		 if (counting == 10)	{
 80032b2:	783b      	ldrb	r3, [r7, #0]
 80032b4:	2b0a      	cmp	r3, #10
 80032b6:	4625      	mov	r5, r4
 80032b8:	d103      	bne.n	80032c2 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			 counting = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	703b      	strb	r3, [r7, #0]
			 calculate_new_speed();
 80032be:	f7ff fdfb 	bl	8002eb8 <calculate_new_speed>
		returned_pwm1 = pid_controller_wheels(n_pulse1, my_rover.trg_wheel_spd1, 1);
 80032c2:	4f29      	ldr	r7, [pc, #164]	; (8003368 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 80032c4:	8830      	ldrh	r0, [r6, #0]
 80032c6:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80032c8:	4c28      	ldr	r4, [pc, #160]	; (800336c <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	f7ff fc12 	bl	8002af4 <pid_controller_wheels>
		returned_pwm2 = pid_controller_wheels(n_pulse2, my_rover.trg_wheel_spd2, 2);
 80032d0:	2202      	movs	r2, #2
		returned_pwm1 = pid_controller_wheels(n_pulse1, my_rover.trg_wheel_spd1, 1);
 80032d2:	8020      	strh	r0, [r4, #0]
		returned_pwm2 = pid_controller_wheels(n_pulse2, my_rover.trg_wheel_spd2, 2);
 80032d4:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80032d6:	8828      	ldrh	r0, [r5, #0]
 80032d8:	f7ff fc0c 	bl	8002af4 <pid_controller_wheels>
		if (wheel_dir1 == 1) // Pin C7
 80032dc:	4a24      	ldr	r2, [pc, #144]	; (8003370 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
		returned_pwm2 = pid_controller_wheels(n_pulse2, my_rover.trg_wheel_spd2, 2);
 80032de:	4b25      	ldr	r3, [pc, #148]	; (8003374 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
		if (wheel_dir1 == 1) // Pin C7
 80032e0:	ed92 7a00 	vldr	s14, [r2]
		returned_pwm2 = pid_controller_wheels(n_pulse2, my_rover.trg_wheel_spd2, 2);
 80032e4:	8018      	strh	r0, [r3, #0]
		if (wheel_dir1 == 1) // Pin C7
 80032e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80032ea:	eeb4 7a67 	vcmp.f32	s14, s15
 80032ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
 80032f2:	bf0c      	ite	eq
 80032f4:	2200      	moveq	r2, #0
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 80032f6:	2201      	movne	r2, #1
 80032f8:	2180      	movs	r1, #128	; 0x80
 80032fa:	481f      	ldr	r0, [pc, #124]	; (8003378 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 80032fc:	4625      	mov	r5, r4
 80032fe:	eeb0 8a67 	vmov.f32	s16, s15
 8003302:	461c      	mov	r4, r3
 8003304:	f7fd ffdc 	bl	80012c0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, returned_pwm1);
 8003308:	4b1c      	ldr	r3, [pc, #112]	; (800337c <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 800330a:	8829      	ldrh	r1, [r5, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 800330e:	4811      	ldr	r0, [pc, #68]	; (8003354 <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, returned_pwm1);
 8003310:	6351      	str	r1, [r2, #52]	; 0x34
		if (wheel_dir2 == 1) // Pin A9
 8003312:	4a1b      	ldr	r2, [pc, #108]	; (8003380 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8003314:	edd2 7a00 	vldr	s15, [r2]
 8003318:	eef4 7a48 	vcmp.f32	s15, s16
 800331c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003320:	461d      	mov	r5, r3
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 8003322:	bf0c      	ite	eq
 8003324:	2201      	moveq	r2, #1
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8003326:	2200      	movne	r2, #0
 8003328:	f44f 7100 	mov.w	r1, #512	; 0x200
 800332c:	f7fd ffc8 	bl	80012c0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, returned_pwm2);
 8003330:	682b      	ldr	r3, [r5, #0]
 8003332:	8822      	ldrh	r2, [r4, #0]
 8003334:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003336:	ecbd 8b02 	vpop	{d8}
 800333a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800333c:	40000800 	.word	0x40000800
 8003340:	20000248 	.word	0x20000248
 8003344:	2000023c 	.word	0x2000023c
 8003348:	080063ac 	.word	0x080063ac
 800334c:	20000268 	.word	0x20000268
 8003350:	2000026a 	.word	0x2000026a
 8003354:	40020000 	.word	0x40020000
 8003358:	20000254 	.word	0x20000254
 800335c:	2000024c 	.word	0x2000024c
 8003360:	20000258 	.word	0x20000258
 8003364:	20000250 	.word	0x20000250
 8003368:	20000008 	.word	0x20000008
 800336c:	2000026c 	.word	0x2000026c
 8003370:	20000040 	.word	0x20000040
 8003374:	2000026e 	.word	0x2000026e
 8003378:	40020800 	.word	0x40020800
 800337c:	200002cc 	.word	0x200002cc
 8003380:	20000044 	.word	0x20000044

08003384 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003384:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003386:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_MspInit+0x3c>)
 8003388:	2100      	movs	r1, #0
 800338a:	9100      	str	r1, [sp, #0]
 800338c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800338e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003392:	645a      	str	r2, [r3, #68]	; 0x44
 8003394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003396:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800339a:	9200      	str	r2, [sp, #0]
 800339c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800339e:	9101      	str	r1, [sp, #4]
 80033a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ae:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80033b0:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80033b4:	f7fd fe44 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033b8:	b003      	add	sp, #12
 80033ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800

080033c4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80033c4:	b510      	push	{r4, lr}
 80033c6:	4604      	mov	r4, r0
 80033c8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ca:	2214      	movs	r2, #20
 80033cc:	2100      	movs	r1, #0
 80033ce:	a803      	add	r0, sp, #12
 80033d0:	f000 f9ac 	bl	800372c <memset>
  if(htim_ic->Instance==TIM2)
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033da:	d128      	bne.n	800342e <HAL_TIM_IC_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033dc:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80033e0:	2400      	movs	r4, #0
 80033e2:	9401      	str	r4, [sp, #4]
 80033e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e6:	4813      	ldr	r0, [pc, #76]	; (8003434 <HAL_TIM_IC_MspInit+0x70>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033e8:	f042 0201 	orr.w	r2, r2, #1
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
 80033ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f0:	f002 0201 	and.w	r2, r2, #1
 80033f4:	9201      	str	r2, [sp, #4]
 80033f6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f8:	9402      	str	r4, [sp, #8]
 80033fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fc:	f042 0201 	orr.w	r2, r2, #1
 8003400:	631a      	str	r2, [r3, #48]	; 0x30
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	9302      	str	r3, [sp, #8]
 800340a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800340c:	2303      	movs	r3, #3
 800340e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003410:	2302      	movs	r3, #2
 8003412:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003414:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003416:	2301      	movs	r3, #1
 8003418:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341a:	f7fd fe7b 	bl	8001114 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800341e:	201c      	movs	r0, #28
 8003420:	4622      	mov	r2, r4
 8003422:	4621      	mov	r1, r4
 8003424:	f7fd fe1e 	bl	8001064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003428:	201c      	movs	r0, #28
 800342a:	f7fd fe4f 	bl	80010cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800342e:	b008      	add	sp, #32
 8003430:	bd10      	pop	{r4, pc}
 8003432:	bf00      	nop
 8003434:	40020000 	.word	0x40020000

08003438 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8003438:	6802      	ldr	r2, [r0, #0]
 800343a:	4b09      	ldr	r3, [pc, #36]	; (8003460 <HAL_TIM_PWM_MspInit+0x28>)
 800343c:	429a      	cmp	r2, r3
{
 800343e:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 8003440:	d10b      	bne.n	800345a <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	4b07      	ldr	r3, [pc, #28]	; (8003464 <HAL_TIM_PWM_MspInit+0x2c>)
 8003448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800344a:	f042 0202 	orr.w	r2, r2, #2
 800344e:	641a      	str	r2, [r3, #64]	; 0x40
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	9301      	str	r3, [sp, #4]
 8003458:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800345a:	b002      	add	sp, #8
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40000400 	.word	0x40000400
 8003464:	40023800 	.word	0x40023800

08003468 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003468:	b507      	push	{r0, r1, r2, lr}
  if(htim_oc->Instance==TIM4)
 800346a:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <HAL_TIM_OC_MspInit+0x38>)
 800346c:	6802      	ldr	r2, [r0, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d113      	bne.n	800349a <HAL_TIM_OC_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003472:	2200      	movs	r2, #0
 8003474:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8003478:	9201      	str	r2, [sp, #4]
 800347a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800347c:	f041 0104 	orr.w	r1, r1, #4
 8003480:	6419      	str	r1, [r3, #64]	; 0x40
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	9301      	str	r3, [sp, #4]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800348a:	201e      	movs	r0, #30
 800348c:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 800348e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003490:	f7fd fde8 	bl	8001064 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003494:	201e      	movs	r0, #30
 8003496:	f7fd fe19 	bl	80010cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800349a:	b003      	add	sp, #12
 800349c:	f85d fb04 	ldr.w	pc, [sp], #4
 80034a0:	40000800 	.word	0x40000800

080034a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034a4:	b510      	push	{r4, lr}
 80034a6:	4604      	mov	r4, r0
 80034a8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034aa:	2214      	movs	r2, #20
 80034ac:	2100      	movs	r1, #0
 80034ae:	a801      	add	r0, sp, #4
 80034b0:	f000 f93c 	bl	800372c <memset>
  if(htim->Instance==TIM3)
 80034b4:	6822      	ldr	r2, [r4, #0]
 80034b6:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <HAL_TIM_MspPostInit+0x48>)
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d114      	bne.n	80034e6 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034bc:	2300      	movs	r3, #0
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c2:	480c      	ldr	r0, [pc, #48]	; (80034f4 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c6:	f042 0201 	orr.w	r2, r2, #1
 80034ca:	631a      	str	r2, [r3, #48]	; 0x30
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034d6:	23c0      	movs	r3, #192	; 0xc0
 80034d8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034da:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034dc:	2302      	movs	r3, #2
 80034de:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034e0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e2:	f7fd fe17 	bl	8001114 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80034e6:	b006      	add	sp, #24
 80034e8:	bd10      	pop	{r4, pc}
 80034ea:	bf00      	nop
 80034ec:	40000400 	.word	0x40000400
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40020000 	.word	0x40020000

080034f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034f8:	b510      	push	{r4, lr}
 80034fa:	4604      	mov	r4, r0
 80034fc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fe:	2214      	movs	r2, #20
 8003500:	2100      	movs	r1, #0
 8003502:	a803      	add	r0, sp, #12
 8003504:	f000 f912 	bl	800372c <memset>
  if(huart->Instance==USART2)
 8003508:	6822      	ldr	r2, [r4, #0]
 800350a:	4b15      	ldr	r3, [pc, #84]	; (8003560 <HAL_UART_MspInit+0x68>)
 800350c:	429a      	cmp	r2, r3
 800350e:	d124      	bne.n	800355a <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003510:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003514:	2100      	movs	r1, #0
 8003516:	9101      	str	r1, [sp, #4]
 8003518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351a:	4812      	ldr	r0, [pc, #72]	; (8003564 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800351c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003520:	641a      	str	r2, [r3, #64]	; 0x40
 8003522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003524:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003528:	9201      	str	r2, [sp, #4]
 800352a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800352c:	9102      	str	r1, [sp, #8]
 800352e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003530:	f042 0201 	orr.w	r2, r2, #1
 8003534:	631a      	str	r2, [r3, #48]	; 0x30
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	9302      	str	r3, [sp, #8]
 800353e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003540:	230c      	movs	r3, #12
 8003542:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003544:	2302      	movs	r3, #2
 8003546:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003548:	2301      	movs	r3, #1
 800354a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800354c:	2303      	movs	r3, #3
 800354e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003550:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003552:	2307      	movs	r3, #7
 8003554:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003556:	f7fd fddd 	bl	8001114 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800355a:	b008      	add	sp, #32
 800355c:	bd10      	pop	{r4, pc}
 800355e:	bf00      	nop
 8003560:	40004400 	.word	0x40004400
 8003564:	40020000 	.word	0x40020000

08003568 <NMI_Handler>:
 8003568:	4770      	bx	lr

0800356a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800356a:	e7fe      	b.n	800356a <HardFault_Handler>

0800356c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800356c:	e7fe      	b.n	800356c <MemManage_Handler>

0800356e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800356e:	e7fe      	b.n	800356e <BusFault_Handler>

08003570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003570:	e7fe      	b.n	8003570 <UsageFault_Handler>

08003572 <SVC_Handler>:
 8003572:	4770      	bx	lr

08003574 <DebugMon_Handler>:
 8003574:	4770      	bx	lr

08003576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003576:	4770      	bx	lr

08003578 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003578:	f7fd bd50 	b.w	800101c <HAL_IncTick>

0800357c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800357c:	4801      	ldr	r0, [pc, #4]	; (8003584 <TIM2_IRQHandler+0x8>)
 800357e:	f7fe b98c 	b.w	800189a <HAL_TIM_IRQHandler>
 8003582:	bf00      	nop
 8003584:	20000310 	.word	0x20000310

08003588 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003588:	4801      	ldr	r0, [pc, #4]	; (8003590 <TIM4_IRQHandler+0x8>)
 800358a:	f7fe b986 	b.w	800189a <HAL_TIM_IRQHandler>
 800358e:	bf00      	nop
 8003590:	20000280 	.word	0x20000280

08003594 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	460e      	mov	r6, r1
 8003598:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800359a:	460c      	mov	r4, r1
 800359c:	1ba3      	subs	r3, r4, r6
 800359e:	429d      	cmp	r5, r3
 80035a0:	dc01      	bgt.n	80035a6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80035a2:	4628      	mov	r0, r5
 80035a4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80035a6:	f3af 8000 	nop.w
 80035aa:	f804 0b01 	strb.w	r0, [r4], #1
 80035ae:	e7f5      	b.n	800359c <_read+0x8>

080035b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035b0:	b510      	push	{r4, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b2:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80035b4:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 80035b8:	4293      	cmp	r3, r2
 80035ba:	db01      	blt.n	80035c0 <_write+0x10>
	{
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
	}
	return len;
}
 80035bc:	4610      	mov	r0, r2
 80035be:	bd10      	pop	{r4, pc}
 80035c0:	f8d4 0e80 	ldr.w	r0, [r4, #3712]	; 0xe80
 80035c4:	07c0      	lsls	r0, r0, #31
 80035c6:	d503      	bpl.n	80035d0 <_write+0x20>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80035c8:	f8d4 0e00 	ldr.w	r0, [r4, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80035cc:	07c0      	lsls	r0, r0, #31
 80035ce:	d402      	bmi.n	80035d6 <_write+0x26>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035d0:	3301      	adds	r3, #1
 80035d2:	e7f1      	b.n	80035b8 <_write+0x8>
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 80035d4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80035d6:	6820      	ldr	r0, [r4, #0]
 80035d8:	2800      	cmp	r0, #0
 80035da:	d0fb      	beq.n	80035d4 <_write+0x24>
		ITM_SendChar(*ptr++);
 80035dc:	5cc8      	ldrb	r0, [r1, r3]
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80035de:	7020      	strb	r0, [r4, #0]
 80035e0:	e7f6      	b.n	80035d0 <_write+0x20>
	...

080035e4 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80035e4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80035e6:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <_sbrk+0x2c>)
 80035e8:	6819      	ldr	r1, [r3, #0]
{
 80035ea:	4602      	mov	r2, r0
	if (heap_end == 0)
 80035ec:	b909      	cbnz	r1, 80035f2 <_sbrk+0xe>
		heap_end = &end;
 80035ee:	4909      	ldr	r1, [pc, #36]	; (8003614 <_sbrk+0x30>)
 80035f0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80035f2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80035f4:	4669      	mov	r1, sp
 80035f6:	4402      	add	r2, r0
 80035f8:	428a      	cmp	r2, r1
 80035fa:	d906      	bls.n	800360a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80035fc:	f000 f86c 	bl	80036d8 <__errno>
 8003600:	230c      	movs	r3, #12
 8003602:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003608:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800360a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800360c:	bd08      	pop	{r3, pc}
 800360e:	bf00      	nop
 8003610:	20000270 	.word	0x20000270
 8003614:	20000394 	.word	0x20000394

08003618 <_close>:

int _close(int file)
{
	return -1;
}
 8003618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800361c:	4770      	bx	lr

0800361e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800361e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003622:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003624:	2000      	movs	r0, #0
 8003626:	4770      	bx	lr

08003628 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003628:	2001      	movs	r0, #1
 800362a:	4770      	bx	lr

0800362c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800362c:	2000      	movs	r0, #0
 800362e:	4770      	bx	lr

08003630 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003630:	490f      	ldr	r1, [pc, #60]	; (8003670 <SystemInit+0x40>)
 8003632:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003636:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800363e:	4b0d      	ldr	r3, [pc, #52]	; (8003674 <SystemInit+0x44>)
 8003640:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003642:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003644:	f042 0201 	orr.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800364a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003652:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003656:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003658:	4a07      	ldr	r2, [pc, #28]	; (8003678 <SystemInit+0x48>)
 800365a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003662:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003664:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003666:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800366a:	608b      	str	r3, [r1, #8]
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	e000ed00 	.word	0xe000ed00
 8003674:	40023800 	.word	0x40023800
 8003678:	24003010 	.word	0x24003010

0800367c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800367c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003680:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003682:	e003      	b.n	800368c <LoopCopyDataInit>

08003684 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003686:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003688:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800368a:	3104      	adds	r1, #4

0800368c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800368c:	480b      	ldr	r0, [pc, #44]	; (80036bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800368e:	4b0c      	ldr	r3, [pc, #48]	; (80036c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003690:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003692:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003694:	d3f6      	bcc.n	8003684 <CopyDataInit>
  ldr  r2, =_sbss
 8003696:	4a0b      	ldr	r2, [pc, #44]	; (80036c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003698:	e002      	b.n	80036a0 <LoopFillZerobss>

0800369a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800369a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800369c:	f842 3b04 	str.w	r3, [r2], #4

080036a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80036a0:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80036a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80036a4:	d3f9      	bcc.n	800369a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80036a6:	f7ff ffc3 	bl	8003630 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036aa:	f000 f81b 	bl	80036e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036ae:	f7ff f8fb 	bl	80028a8 <main>
  bx  lr    
 80036b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80036b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80036b8:	08006a80 	.word	0x08006a80
  ldr  r0, =_sdata
 80036bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80036c0:	20000220 	.word	0x20000220
  ldr  r2, =_sbss
 80036c4:	20000220 	.word	0x20000220
  ldr  r3, = _ebss
 80036c8:	20000394 	.word	0x20000394

080036cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036cc:	e7fe      	b.n	80036cc <ADC_IRQHandler>

080036ce <atoi>:
 80036ce:	220a      	movs	r2, #10
 80036d0:	2100      	movs	r1, #0
 80036d2:	f000 b953 	b.w	800397c <strtol>
	...

080036d8 <__errno>:
 80036d8:	4b01      	ldr	r3, [pc, #4]	; (80036e0 <__errno+0x8>)
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	2000004c 	.word	0x2000004c

080036e4 <__libc_init_array>:
 80036e4:	b570      	push	{r4, r5, r6, lr}
 80036e6:	4e0d      	ldr	r6, [pc, #52]	; (800371c <__libc_init_array+0x38>)
 80036e8:	4c0d      	ldr	r4, [pc, #52]	; (8003720 <__libc_init_array+0x3c>)
 80036ea:	1ba4      	subs	r4, r4, r6
 80036ec:	10a4      	asrs	r4, r4, #2
 80036ee:	2500      	movs	r5, #0
 80036f0:	42a5      	cmp	r5, r4
 80036f2:	d109      	bne.n	8003708 <__libc_init_array+0x24>
 80036f4:	4e0b      	ldr	r6, [pc, #44]	; (8003724 <__libc_init_array+0x40>)
 80036f6:	4c0c      	ldr	r4, [pc, #48]	; (8003728 <__libc_init_array+0x44>)
 80036f8:	f002 fe1a 	bl	8006330 <_init>
 80036fc:	1ba4      	subs	r4, r4, r6
 80036fe:	10a4      	asrs	r4, r4, #2
 8003700:	2500      	movs	r5, #0
 8003702:	42a5      	cmp	r5, r4
 8003704:	d105      	bne.n	8003712 <__libc_init_array+0x2e>
 8003706:	bd70      	pop	{r4, r5, r6, pc}
 8003708:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800370c:	4798      	blx	r3
 800370e:	3501      	adds	r5, #1
 8003710:	e7ee      	b.n	80036f0 <__libc_init_array+0xc>
 8003712:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003716:	4798      	blx	r3
 8003718:	3501      	adds	r5, #1
 800371a:	e7f2      	b.n	8003702 <__libc_init_array+0x1e>
 800371c:	08006a78 	.word	0x08006a78
 8003720:	08006a78 	.word	0x08006a78
 8003724:	08006a78 	.word	0x08006a78
 8003728:	08006a7c 	.word	0x08006a7c

0800372c <memset>:
 800372c:	4402      	add	r2, r0
 800372e:	4603      	mov	r3, r0
 8003730:	4293      	cmp	r3, r2
 8003732:	d100      	bne.n	8003736 <memset+0xa>
 8003734:	4770      	bx	lr
 8003736:	f803 1b01 	strb.w	r1, [r3], #1
 800373a:	e7f9      	b.n	8003730 <memset+0x4>

0800373c <iprintf>:
 800373c:	b40f      	push	{r0, r1, r2, r3}
 800373e:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <iprintf+0x2c>)
 8003740:	b513      	push	{r0, r1, r4, lr}
 8003742:	681c      	ldr	r4, [r3, #0]
 8003744:	b124      	cbz	r4, 8003750 <iprintf+0x14>
 8003746:	69a3      	ldr	r3, [r4, #24]
 8003748:	b913      	cbnz	r3, 8003750 <iprintf+0x14>
 800374a:	4620      	mov	r0, r4
 800374c:	f000 fade 	bl	8003d0c <__sinit>
 8003750:	ab05      	add	r3, sp, #20
 8003752:	9a04      	ldr	r2, [sp, #16]
 8003754:	68a1      	ldr	r1, [r4, #8]
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	4620      	mov	r0, r4
 800375a:	f000 fe01 	bl	8004360 <_vfiprintf_r>
 800375e:	b002      	add	sp, #8
 8003760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003764:	b004      	add	sp, #16
 8003766:	4770      	bx	lr
 8003768:	2000004c 	.word	0x2000004c

0800376c <_puts_r>:
 800376c:	b570      	push	{r4, r5, r6, lr}
 800376e:	460e      	mov	r6, r1
 8003770:	4605      	mov	r5, r0
 8003772:	b118      	cbz	r0, 800377c <_puts_r+0x10>
 8003774:	6983      	ldr	r3, [r0, #24]
 8003776:	b90b      	cbnz	r3, 800377c <_puts_r+0x10>
 8003778:	f000 fac8 	bl	8003d0c <__sinit>
 800377c:	69ab      	ldr	r3, [r5, #24]
 800377e:	68ac      	ldr	r4, [r5, #8]
 8003780:	b913      	cbnz	r3, 8003788 <_puts_r+0x1c>
 8003782:	4628      	mov	r0, r5
 8003784:	f000 fac2 	bl	8003d0c <__sinit>
 8003788:	4b23      	ldr	r3, [pc, #140]	; (8003818 <_puts_r+0xac>)
 800378a:	429c      	cmp	r4, r3
 800378c:	d117      	bne.n	80037be <_puts_r+0x52>
 800378e:	686c      	ldr	r4, [r5, #4]
 8003790:	89a3      	ldrh	r3, [r4, #12]
 8003792:	071b      	lsls	r3, r3, #28
 8003794:	d51d      	bpl.n	80037d2 <_puts_r+0x66>
 8003796:	6923      	ldr	r3, [r4, #16]
 8003798:	b1db      	cbz	r3, 80037d2 <_puts_r+0x66>
 800379a:	3e01      	subs	r6, #1
 800379c:	68a3      	ldr	r3, [r4, #8]
 800379e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80037a2:	3b01      	subs	r3, #1
 80037a4:	60a3      	str	r3, [r4, #8]
 80037a6:	b9e9      	cbnz	r1, 80037e4 <_puts_r+0x78>
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	da2e      	bge.n	800380a <_puts_r+0x9e>
 80037ac:	4622      	mov	r2, r4
 80037ae:	210a      	movs	r1, #10
 80037b0:	4628      	mov	r0, r5
 80037b2:	f000 f8f9 	bl	80039a8 <__swbuf_r>
 80037b6:	3001      	adds	r0, #1
 80037b8:	d011      	beq.n	80037de <_puts_r+0x72>
 80037ba:	200a      	movs	r0, #10
 80037bc:	bd70      	pop	{r4, r5, r6, pc}
 80037be:	4b17      	ldr	r3, [pc, #92]	; (800381c <_puts_r+0xb0>)
 80037c0:	429c      	cmp	r4, r3
 80037c2:	d101      	bne.n	80037c8 <_puts_r+0x5c>
 80037c4:	68ac      	ldr	r4, [r5, #8]
 80037c6:	e7e3      	b.n	8003790 <_puts_r+0x24>
 80037c8:	4b15      	ldr	r3, [pc, #84]	; (8003820 <_puts_r+0xb4>)
 80037ca:	429c      	cmp	r4, r3
 80037cc:	bf08      	it	eq
 80037ce:	68ec      	ldreq	r4, [r5, #12]
 80037d0:	e7de      	b.n	8003790 <_puts_r+0x24>
 80037d2:	4621      	mov	r1, r4
 80037d4:	4628      	mov	r0, r5
 80037d6:	f000 f939 	bl	8003a4c <__swsetup_r>
 80037da:	2800      	cmp	r0, #0
 80037dc:	d0dd      	beq.n	800379a <_puts_r+0x2e>
 80037de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037e2:	bd70      	pop	{r4, r5, r6, pc}
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	da04      	bge.n	80037f2 <_puts_r+0x86>
 80037e8:	69a2      	ldr	r2, [r4, #24]
 80037ea:	4293      	cmp	r3, r2
 80037ec:	db06      	blt.n	80037fc <_puts_r+0x90>
 80037ee:	290a      	cmp	r1, #10
 80037f0:	d004      	beq.n	80037fc <_puts_r+0x90>
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	6022      	str	r2, [r4, #0]
 80037f8:	7019      	strb	r1, [r3, #0]
 80037fa:	e7cf      	b.n	800379c <_puts_r+0x30>
 80037fc:	4622      	mov	r2, r4
 80037fe:	4628      	mov	r0, r5
 8003800:	f000 f8d2 	bl	80039a8 <__swbuf_r>
 8003804:	3001      	adds	r0, #1
 8003806:	d1c9      	bne.n	800379c <_puts_r+0x30>
 8003808:	e7e9      	b.n	80037de <_puts_r+0x72>
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	200a      	movs	r0, #10
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	6022      	str	r2, [r4, #0]
 8003812:	7018      	strb	r0, [r3, #0]
 8003814:	bd70      	pop	{r4, r5, r6, pc}
 8003816:	bf00      	nop
 8003818:	080066cc 	.word	0x080066cc
 800381c:	080066ec 	.word	0x080066ec
 8003820:	080066ac 	.word	0x080066ac

08003824 <puts>:
 8003824:	4b02      	ldr	r3, [pc, #8]	; (8003830 <puts+0xc>)
 8003826:	4601      	mov	r1, r0
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	f7ff bf9f 	b.w	800376c <_puts_r>
 800382e:	bf00      	nop
 8003830:	2000004c 	.word	0x2000004c

08003834 <siprintf>:
 8003834:	b40e      	push	{r1, r2, r3}
 8003836:	b500      	push	{lr}
 8003838:	b09c      	sub	sp, #112	; 0x70
 800383a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800383e:	ab1d      	add	r3, sp, #116	; 0x74
 8003840:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003844:	9002      	str	r0, [sp, #8]
 8003846:	9006      	str	r0, [sp, #24]
 8003848:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800384c:	480a      	ldr	r0, [pc, #40]	; (8003878 <siprintf+0x44>)
 800384e:	9104      	str	r1, [sp, #16]
 8003850:	9107      	str	r1, [sp, #28]
 8003852:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003856:	f853 2b04 	ldr.w	r2, [r3], #4
 800385a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800385e:	6800      	ldr	r0, [r0, #0]
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	a902      	add	r1, sp, #8
 8003864:	f000 fc5e 	bl	8004124 <_svfiprintf_r>
 8003868:	9b02      	ldr	r3, [sp, #8]
 800386a:	2200      	movs	r2, #0
 800386c:	701a      	strb	r2, [r3, #0]
 800386e:	b01c      	add	sp, #112	; 0x70
 8003870:	f85d eb04 	ldr.w	lr, [sp], #4
 8003874:	b003      	add	sp, #12
 8003876:	4770      	bx	lr
 8003878:	2000004c 	.word	0x2000004c

0800387c <_strtol_l.isra.0>:
 800387c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003880:	4680      	mov	r8, r0
 8003882:	4689      	mov	r9, r1
 8003884:	4692      	mov	sl, r2
 8003886:	461f      	mov	r7, r3
 8003888:	468b      	mov	fp, r1
 800388a:	465d      	mov	r5, fp
 800388c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800388e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003892:	f000 fac5 	bl	8003e20 <__locale_ctype_ptr_l>
 8003896:	4420      	add	r0, r4
 8003898:	7846      	ldrb	r6, [r0, #1]
 800389a:	f016 0608 	ands.w	r6, r6, #8
 800389e:	d10b      	bne.n	80038b8 <_strtol_l.isra.0+0x3c>
 80038a0:	2c2d      	cmp	r4, #45	; 0x2d
 80038a2:	d10b      	bne.n	80038bc <_strtol_l.isra.0+0x40>
 80038a4:	782c      	ldrb	r4, [r5, #0]
 80038a6:	2601      	movs	r6, #1
 80038a8:	f10b 0502 	add.w	r5, fp, #2
 80038ac:	b167      	cbz	r7, 80038c8 <_strtol_l.isra.0+0x4c>
 80038ae:	2f10      	cmp	r7, #16
 80038b0:	d114      	bne.n	80038dc <_strtol_l.isra.0+0x60>
 80038b2:	2c30      	cmp	r4, #48	; 0x30
 80038b4:	d00a      	beq.n	80038cc <_strtol_l.isra.0+0x50>
 80038b6:	e011      	b.n	80038dc <_strtol_l.isra.0+0x60>
 80038b8:	46ab      	mov	fp, r5
 80038ba:	e7e6      	b.n	800388a <_strtol_l.isra.0+0xe>
 80038bc:	2c2b      	cmp	r4, #43	; 0x2b
 80038be:	bf04      	itt	eq
 80038c0:	782c      	ldrbeq	r4, [r5, #0]
 80038c2:	f10b 0502 	addeq.w	r5, fp, #2
 80038c6:	e7f1      	b.n	80038ac <_strtol_l.isra.0+0x30>
 80038c8:	2c30      	cmp	r4, #48	; 0x30
 80038ca:	d127      	bne.n	800391c <_strtol_l.isra.0+0xa0>
 80038cc:	782b      	ldrb	r3, [r5, #0]
 80038ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80038d2:	2b58      	cmp	r3, #88	; 0x58
 80038d4:	d14b      	bne.n	800396e <_strtol_l.isra.0+0xf2>
 80038d6:	786c      	ldrb	r4, [r5, #1]
 80038d8:	2710      	movs	r7, #16
 80038da:	3502      	adds	r5, #2
 80038dc:	2e00      	cmp	r6, #0
 80038de:	bf0c      	ite	eq
 80038e0:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80038e4:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80038e8:	2200      	movs	r2, #0
 80038ea:	fbb1 fef7 	udiv	lr, r1, r7
 80038ee:	4610      	mov	r0, r2
 80038f0:	fb07 1c1e 	mls	ip, r7, lr, r1
 80038f4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80038f8:	2b09      	cmp	r3, #9
 80038fa:	d811      	bhi.n	8003920 <_strtol_l.isra.0+0xa4>
 80038fc:	461c      	mov	r4, r3
 80038fe:	42a7      	cmp	r7, r4
 8003900:	dd1d      	ble.n	800393e <_strtol_l.isra.0+0xc2>
 8003902:	1c53      	adds	r3, r2, #1
 8003904:	d007      	beq.n	8003916 <_strtol_l.isra.0+0x9a>
 8003906:	4586      	cmp	lr, r0
 8003908:	d316      	bcc.n	8003938 <_strtol_l.isra.0+0xbc>
 800390a:	d101      	bne.n	8003910 <_strtol_l.isra.0+0x94>
 800390c:	45a4      	cmp	ip, r4
 800390e:	db13      	blt.n	8003938 <_strtol_l.isra.0+0xbc>
 8003910:	fb00 4007 	mla	r0, r0, r7, r4
 8003914:	2201      	movs	r2, #1
 8003916:	f815 4b01 	ldrb.w	r4, [r5], #1
 800391a:	e7eb      	b.n	80038f4 <_strtol_l.isra.0+0x78>
 800391c:	270a      	movs	r7, #10
 800391e:	e7dd      	b.n	80038dc <_strtol_l.isra.0+0x60>
 8003920:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003924:	2b19      	cmp	r3, #25
 8003926:	d801      	bhi.n	800392c <_strtol_l.isra.0+0xb0>
 8003928:	3c37      	subs	r4, #55	; 0x37
 800392a:	e7e8      	b.n	80038fe <_strtol_l.isra.0+0x82>
 800392c:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003930:	2b19      	cmp	r3, #25
 8003932:	d804      	bhi.n	800393e <_strtol_l.isra.0+0xc2>
 8003934:	3c57      	subs	r4, #87	; 0x57
 8003936:	e7e2      	b.n	80038fe <_strtol_l.isra.0+0x82>
 8003938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800393c:	e7eb      	b.n	8003916 <_strtol_l.isra.0+0x9a>
 800393e:	1c53      	adds	r3, r2, #1
 8003940:	d108      	bne.n	8003954 <_strtol_l.isra.0+0xd8>
 8003942:	2322      	movs	r3, #34	; 0x22
 8003944:	f8c8 3000 	str.w	r3, [r8]
 8003948:	4608      	mov	r0, r1
 800394a:	f1ba 0f00 	cmp.w	sl, #0
 800394e:	d107      	bne.n	8003960 <_strtol_l.isra.0+0xe4>
 8003950:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003954:	b106      	cbz	r6, 8003958 <_strtol_l.isra.0+0xdc>
 8003956:	4240      	negs	r0, r0
 8003958:	f1ba 0f00 	cmp.w	sl, #0
 800395c:	d00c      	beq.n	8003978 <_strtol_l.isra.0+0xfc>
 800395e:	b122      	cbz	r2, 800396a <_strtol_l.isra.0+0xee>
 8003960:	3d01      	subs	r5, #1
 8003962:	f8ca 5000 	str.w	r5, [sl]
 8003966:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800396a:	464d      	mov	r5, r9
 800396c:	e7f9      	b.n	8003962 <_strtol_l.isra.0+0xe6>
 800396e:	2430      	movs	r4, #48	; 0x30
 8003970:	2f00      	cmp	r7, #0
 8003972:	d1b3      	bne.n	80038dc <_strtol_l.isra.0+0x60>
 8003974:	2708      	movs	r7, #8
 8003976:	e7b1      	b.n	80038dc <_strtol_l.isra.0+0x60>
 8003978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800397c <strtol>:
 800397c:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <strtol+0x24>)
 800397e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003980:	681c      	ldr	r4, [r3, #0]
 8003982:	4d08      	ldr	r5, [pc, #32]	; (80039a4 <strtol+0x28>)
 8003984:	6a23      	ldr	r3, [r4, #32]
 8003986:	2b00      	cmp	r3, #0
 8003988:	bf08      	it	eq
 800398a:	462b      	moveq	r3, r5
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	4613      	mov	r3, r2
 8003990:	460a      	mov	r2, r1
 8003992:	4601      	mov	r1, r0
 8003994:	4620      	mov	r0, r4
 8003996:	f7ff ff71 	bl	800387c <_strtol_l.isra.0>
 800399a:	b003      	add	sp, #12
 800399c:	bd30      	pop	{r4, r5, pc}
 800399e:	bf00      	nop
 80039a0:	2000004c 	.word	0x2000004c
 80039a4:	200000b0 	.word	0x200000b0

080039a8 <__swbuf_r>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	460e      	mov	r6, r1
 80039ac:	4614      	mov	r4, r2
 80039ae:	4605      	mov	r5, r0
 80039b0:	b118      	cbz	r0, 80039ba <__swbuf_r+0x12>
 80039b2:	6983      	ldr	r3, [r0, #24]
 80039b4:	b90b      	cbnz	r3, 80039ba <__swbuf_r+0x12>
 80039b6:	f000 f9a9 	bl	8003d0c <__sinit>
 80039ba:	4b21      	ldr	r3, [pc, #132]	; (8003a40 <__swbuf_r+0x98>)
 80039bc:	429c      	cmp	r4, r3
 80039be:	d12a      	bne.n	8003a16 <__swbuf_r+0x6e>
 80039c0:	686c      	ldr	r4, [r5, #4]
 80039c2:	69a3      	ldr	r3, [r4, #24]
 80039c4:	60a3      	str	r3, [r4, #8]
 80039c6:	89a3      	ldrh	r3, [r4, #12]
 80039c8:	071a      	lsls	r2, r3, #28
 80039ca:	d52e      	bpl.n	8003a2a <__swbuf_r+0x82>
 80039cc:	6923      	ldr	r3, [r4, #16]
 80039ce:	b363      	cbz	r3, 8003a2a <__swbuf_r+0x82>
 80039d0:	6923      	ldr	r3, [r4, #16]
 80039d2:	6820      	ldr	r0, [r4, #0]
 80039d4:	1ac0      	subs	r0, r0, r3
 80039d6:	6963      	ldr	r3, [r4, #20]
 80039d8:	b2f6      	uxtb	r6, r6
 80039da:	4298      	cmp	r0, r3
 80039dc:	4637      	mov	r7, r6
 80039de:	db04      	blt.n	80039ea <__swbuf_r+0x42>
 80039e0:	4621      	mov	r1, r4
 80039e2:	4628      	mov	r0, r5
 80039e4:	f000 f928 	bl	8003c38 <_fflush_r>
 80039e8:	bb28      	cbnz	r0, 8003a36 <__swbuf_r+0x8e>
 80039ea:	68a3      	ldr	r3, [r4, #8]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	60a3      	str	r3, [r4, #8]
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	6022      	str	r2, [r4, #0]
 80039f6:	701e      	strb	r6, [r3, #0]
 80039f8:	6963      	ldr	r3, [r4, #20]
 80039fa:	3001      	adds	r0, #1
 80039fc:	4298      	cmp	r0, r3
 80039fe:	d004      	beq.n	8003a0a <__swbuf_r+0x62>
 8003a00:	89a3      	ldrh	r3, [r4, #12]
 8003a02:	07db      	lsls	r3, r3, #31
 8003a04:	d519      	bpl.n	8003a3a <__swbuf_r+0x92>
 8003a06:	2e0a      	cmp	r6, #10
 8003a08:	d117      	bne.n	8003a3a <__swbuf_r+0x92>
 8003a0a:	4621      	mov	r1, r4
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	f000 f913 	bl	8003c38 <_fflush_r>
 8003a12:	b190      	cbz	r0, 8003a3a <__swbuf_r+0x92>
 8003a14:	e00f      	b.n	8003a36 <__swbuf_r+0x8e>
 8003a16:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <__swbuf_r+0x9c>)
 8003a18:	429c      	cmp	r4, r3
 8003a1a:	d101      	bne.n	8003a20 <__swbuf_r+0x78>
 8003a1c:	68ac      	ldr	r4, [r5, #8]
 8003a1e:	e7d0      	b.n	80039c2 <__swbuf_r+0x1a>
 8003a20:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <__swbuf_r+0xa0>)
 8003a22:	429c      	cmp	r4, r3
 8003a24:	bf08      	it	eq
 8003a26:	68ec      	ldreq	r4, [r5, #12]
 8003a28:	e7cb      	b.n	80039c2 <__swbuf_r+0x1a>
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	f000 f80d 	bl	8003a4c <__swsetup_r>
 8003a32:	2800      	cmp	r0, #0
 8003a34:	d0cc      	beq.n	80039d0 <__swbuf_r+0x28>
 8003a36:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003a3a:	4638      	mov	r0, r7
 8003a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	080066cc 	.word	0x080066cc
 8003a44:	080066ec 	.word	0x080066ec
 8003a48:	080066ac 	.word	0x080066ac

08003a4c <__swsetup_r>:
 8003a4c:	4b32      	ldr	r3, [pc, #200]	; (8003b18 <__swsetup_r+0xcc>)
 8003a4e:	b570      	push	{r4, r5, r6, lr}
 8003a50:	681d      	ldr	r5, [r3, #0]
 8003a52:	4606      	mov	r6, r0
 8003a54:	460c      	mov	r4, r1
 8003a56:	b125      	cbz	r5, 8003a62 <__swsetup_r+0x16>
 8003a58:	69ab      	ldr	r3, [r5, #24]
 8003a5a:	b913      	cbnz	r3, 8003a62 <__swsetup_r+0x16>
 8003a5c:	4628      	mov	r0, r5
 8003a5e:	f000 f955 	bl	8003d0c <__sinit>
 8003a62:	4b2e      	ldr	r3, [pc, #184]	; (8003b1c <__swsetup_r+0xd0>)
 8003a64:	429c      	cmp	r4, r3
 8003a66:	d10f      	bne.n	8003a88 <__swsetup_r+0x3c>
 8003a68:	686c      	ldr	r4, [r5, #4]
 8003a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	0715      	lsls	r5, r2, #28
 8003a72:	d42c      	bmi.n	8003ace <__swsetup_r+0x82>
 8003a74:	06d0      	lsls	r0, r2, #27
 8003a76:	d411      	bmi.n	8003a9c <__swsetup_r+0x50>
 8003a78:	2209      	movs	r2, #9
 8003a7a:	6032      	str	r2, [r6, #0]
 8003a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a80:	81a3      	strh	r3, [r4, #12]
 8003a82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a86:	bd70      	pop	{r4, r5, r6, pc}
 8003a88:	4b25      	ldr	r3, [pc, #148]	; (8003b20 <__swsetup_r+0xd4>)
 8003a8a:	429c      	cmp	r4, r3
 8003a8c:	d101      	bne.n	8003a92 <__swsetup_r+0x46>
 8003a8e:	68ac      	ldr	r4, [r5, #8]
 8003a90:	e7eb      	b.n	8003a6a <__swsetup_r+0x1e>
 8003a92:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <__swsetup_r+0xd8>)
 8003a94:	429c      	cmp	r4, r3
 8003a96:	bf08      	it	eq
 8003a98:	68ec      	ldreq	r4, [r5, #12]
 8003a9a:	e7e6      	b.n	8003a6a <__swsetup_r+0x1e>
 8003a9c:	0751      	lsls	r1, r2, #29
 8003a9e:	d512      	bpl.n	8003ac6 <__swsetup_r+0x7a>
 8003aa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003aa2:	b141      	cbz	r1, 8003ab6 <__swsetup_r+0x6a>
 8003aa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003aa8:	4299      	cmp	r1, r3
 8003aaa:	d002      	beq.n	8003ab2 <__swsetup_r+0x66>
 8003aac:	4630      	mov	r0, r6
 8003aae:	f000 fa31 	bl	8003f14 <_free_r>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	6363      	str	r3, [r4, #52]	; 0x34
 8003ab6:	89a3      	ldrh	r3, [r4, #12]
 8003ab8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003abc:	81a3      	strh	r3, [r4, #12]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	6063      	str	r3, [r4, #4]
 8003ac2:	6923      	ldr	r3, [r4, #16]
 8003ac4:	6023      	str	r3, [r4, #0]
 8003ac6:	89a3      	ldrh	r3, [r4, #12]
 8003ac8:	f043 0308 	orr.w	r3, r3, #8
 8003acc:	81a3      	strh	r3, [r4, #12]
 8003ace:	6923      	ldr	r3, [r4, #16]
 8003ad0:	b94b      	cbnz	r3, 8003ae6 <__swsetup_r+0x9a>
 8003ad2:	89a3      	ldrh	r3, [r4, #12]
 8003ad4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003adc:	d003      	beq.n	8003ae6 <__swsetup_r+0x9a>
 8003ade:	4621      	mov	r1, r4
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	f000 f9c5 	bl	8003e70 <__smakebuf_r>
 8003ae6:	89a2      	ldrh	r2, [r4, #12]
 8003ae8:	f012 0301 	ands.w	r3, r2, #1
 8003aec:	d00c      	beq.n	8003b08 <__swsetup_r+0xbc>
 8003aee:	2300      	movs	r3, #0
 8003af0:	60a3      	str	r3, [r4, #8]
 8003af2:	6963      	ldr	r3, [r4, #20]
 8003af4:	425b      	negs	r3, r3
 8003af6:	61a3      	str	r3, [r4, #24]
 8003af8:	6923      	ldr	r3, [r4, #16]
 8003afa:	b953      	cbnz	r3, 8003b12 <__swsetup_r+0xc6>
 8003afc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b00:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003b04:	d1ba      	bne.n	8003a7c <__swsetup_r+0x30>
 8003b06:	bd70      	pop	{r4, r5, r6, pc}
 8003b08:	0792      	lsls	r2, r2, #30
 8003b0a:	bf58      	it	pl
 8003b0c:	6963      	ldrpl	r3, [r4, #20]
 8003b0e:	60a3      	str	r3, [r4, #8]
 8003b10:	e7f2      	b.n	8003af8 <__swsetup_r+0xac>
 8003b12:	2000      	movs	r0, #0
 8003b14:	e7f7      	b.n	8003b06 <__swsetup_r+0xba>
 8003b16:	bf00      	nop
 8003b18:	2000004c 	.word	0x2000004c
 8003b1c:	080066cc 	.word	0x080066cc
 8003b20:	080066ec 	.word	0x080066ec
 8003b24:	080066ac 	.word	0x080066ac

08003b28 <__sflush_r>:
 8003b28:	898a      	ldrh	r2, [r1, #12]
 8003b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b2e:	4605      	mov	r5, r0
 8003b30:	0710      	lsls	r0, r2, #28
 8003b32:	460c      	mov	r4, r1
 8003b34:	d45a      	bmi.n	8003bec <__sflush_r+0xc4>
 8003b36:	684b      	ldr	r3, [r1, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	dc05      	bgt.n	8003b48 <__sflush_r+0x20>
 8003b3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	dc02      	bgt.n	8003b48 <__sflush_r+0x20>
 8003b42:	2000      	movs	r0, #0
 8003b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b4a:	2e00      	cmp	r6, #0
 8003b4c:	d0f9      	beq.n	8003b42 <__sflush_r+0x1a>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b54:	682f      	ldr	r7, [r5, #0]
 8003b56:	602b      	str	r3, [r5, #0]
 8003b58:	d033      	beq.n	8003bc2 <__sflush_r+0x9a>
 8003b5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b5c:	89a3      	ldrh	r3, [r4, #12]
 8003b5e:	075a      	lsls	r2, r3, #29
 8003b60:	d505      	bpl.n	8003b6e <__sflush_r+0x46>
 8003b62:	6863      	ldr	r3, [r4, #4]
 8003b64:	1ac0      	subs	r0, r0, r3
 8003b66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b68:	b10b      	cbz	r3, 8003b6e <__sflush_r+0x46>
 8003b6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b6c:	1ac0      	subs	r0, r0, r3
 8003b6e:	2300      	movs	r3, #0
 8003b70:	4602      	mov	r2, r0
 8003b72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b74:	6a21      	ldr	r1, [r4, #32]
 8003b76:	4628      	mov	r0, r5
 8003b78:	47b0      	blx	r6
 8003b7a:	1c43      	adds	r3, r0, #1
 8003b7c:	89a3      	ldrh	r3, [r4, #12]
 8003b7e:	d106      	bne.n	8003b8e <__sflush_r+0x66>
 8003b80:	6829      	ldr	r1, [r5, #0]
 8003b82:	291d      	cmp	r1, #29
 8003b84:	d84b      	bhi.n	8003c1e <__sflush_r+0xf6>
 8003b86:	4a2b      	ldr	r2, [pc, #172]	; (8003c34 <__sflush_r+0x10c>)
 8003b88:	40ca      	lsrs	r2, r1
 8003b8a:	07d6      	lsls	r6, r2, #31
 8003b8c:	d547      	bpl.n	8003c1e <__sflush_r+0xf6>
 8003b8e:	2200      	movs	r2, #0
 8003b90:	6062      	str	r2, [r4, #4]
 8003b92:	04d9      	lsls	r1, r3, #19
 8003b94:	6922      	ldr	r2, [r4, #16]
 8003b96:	6022      	str	r2, [r4, #0]
 8003b98:	d504      	bpl.n	8003ba4 <__sflush_r+0x7c>
 8003b9a:	1c42      	adds	r2, r0, #1
 8003b9c:	d101      	bne.n	8003ba2 <__sflush_r+0x7a>
 8003b9e:	682b      	ldr	r3, [r5, #0]
 8003ba0:	b903      	cbnz	r3, 8003ba4 <__sflush_r+0x7c>
 8003ba2:	6560      	str	r0, [r4, #84]	; 0x54
 8003ba4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ba6:	602f      	str	r7, [r5, #0]
 8003ba8:	2900      	cmp	r1, #0
 8003baa:	d0ca      	beq.n	8003b42 <__sflush_r+0x1a>
 8003bac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bb0:	4299      	cmp	r1, r3
 8003bb2:	d002      	beq.n	8003bba <__sflush_r+0x92>
 8003bb4:	4628      	mov	r0, r5
 8003bb6:	f000 f9ad 	bl	8003f14 <_free_r>
 8003bba:	2000      	movs	r0, #0
 8003bbc:	6360      	str	r0, [r4, #52]	; 0x34
 8003bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bc2:	6a21      	ldr	r1, [r4, #32]
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	47b0      	blx	r6
 8003bca:	1c41      	adds	r1, r0, #1
 8003bcc:	d1c6      	bne.n	8003b5c <__sflush_r+0x34>
 8003bce:	682b      	ldr	r3, [r5, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0c3      	beq.n	8003b5c <__sflush_r+0x34>
 8003bd4:	2b1d      	cmp	r3, #29
 8003bd6:	d001      	beq.n	8003bdc <__sflush_r+0xb4>
 8003bd8:	2b16      	cmp	r3, #22
 8003bda:	d101      	bne.n	8003be0 <__sflush_r+0xb8>
 8003bdc:	602f      	str	r7, [r5, #0]
 8003bde:	e7b0      	b.n	8003b42 <__sflush_r+0x1a>
 8003be0:	89a3      	ldrh	r3, [r4, #12]
 8003be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003be6:	81a3      	strh	r3, [r4, #12]
 8003be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bec:	690f      	ldr	r7, [r1, #16]
 8003bee:	2f00      	cmp	r7, #0
 8003bf0:	d0a7      	beq.n	8003b42 <__sflush_r+0x1a>
 8003bf2:	0793      	lsls	r3, r2, #30
 8003bf4:	680e      	ldr	r6, [r1, #0]
 8003bf6:	bf08      	it	eq
 8003bf8:	694b      	ldreq	r3, [r1, #20]
 8003bfa:	600f      	str	r7, [r1, #0]
 8003bfc:	bf18      	it	ne
 8003bfe:	2300      	movne	r3, #0
 8003c00:	eba6 0807 	sub.w	r8, r6, r7
 8003c04:	608b      	str	r3, [r1, #8]
 8003c06:	f1b8 0f00 	cmp.w	r8, #0
 8003c0a:	dd9a      	ble.n	8003b42 <__sflush_r+0x1a>
 8003c0c:	4643      	mov	r3, r8
 8003c0e:	463a      	mov	r2, r7
 8003c10:	6a21      	ldr	r1, [r4, #32]
 8003c12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003c14:	4628      	mov	r0, r5
 8003c16:	47b0      	blx	r6
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	dc07      	bgt.n	8003c2c <__sflush_r+0x104>
 8003c1c:	89a3      	ldrh	r3, [r4, #12]
 8003c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c22:	81a3      	strh	r3, [r4, #12]
 8003c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c2c:	4407      	add	r7, r0
 8003c2e:	eba8 0800 	sub.w	r8, r8, r0
 8003c32:	e7e8      	b.n	8003c06 <__sflush_r+0xde>
 8003c34:	20400001 	.word	0x20400001

08003c38 <_fflush_r>:
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	690b      	ldr	r3, [r1, #16]
 8003c3c:	4605      	mov	r5, r0
 8003c3e:	460c      	mov	r4, r1
 8003c40:	b1db      	cbz	r3, 8003c7a <_fflush_r+0x42>
 8003c42:	b118      	cbz	r0, 8003c4c <_fflush_r+0x14>
 8003c44:	6983      	ldr	r3, [r0, #24]
 8003c46:	b90b      	cbnz	r3, 8003c4c <_fflush_r+0x14>
 8003c48:	f000 f860 	bl	8003d0c <__sinit>
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <_fflush_r+0x48>)
 8003c4e:	429c      	cmp	r4, r3
 8003c50:	d109      	bne.n	8003c66 <_fflush_r+0x2e>
 8003c52:	686c      	ldr	r4, [r5, #4]
 8003c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c58:	b17b      	cbz	r3, 8003c7a <_fflush_r+0x42>
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c62:	f7ff bf61 	b.w	8003b28 <__sflush_r>
 8003c66:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <_fflush_r+0x4c>)
 8003c68:	429c      	cmp	r4, r3
 8003c6a:	d101      	bne.n	8003c70 <_fflush_r+0x38>
 8003c6c:	68ac      	ldr	r4, [r5, #8]
 8003c6e:	e7f1      	b.n	8003c54 <_fflush_r+0x1c>
 8003c70:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <_fflush_r+0x50>)
 8003c72:	429c      	cmp	r4, r3
 8003c74:	bf08      	it	eq
 8003c76:	68ec      	ldreq	r4, [r5, #12]
 8003c78:	e7ec      	b.n	8003c54 <_fflush_r+0x1c>
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	bd38      	pop	{r3, r4, r5, pc}
 8003c7e:	bf00      	nop
 8003c80:	080066cc 	.word	0x080066cc
 8003c84:	080066ec 	.word	0x080066ec
 8003c88:	080066ac 	.word	0x080066ac

08003c8c <_cleanup_r>:
 8003c8c:	4901      	ldr	r1, [pc, #4]	; (8003c94 <_cleanup_r+0x8>)
 8003c8e:	f000 b8a9 	b.w	8003de4 <_fwalk_reent>
 8003c92:	bf00      	nop
 8003c94:	08003c39 	.word	0x08003c39

08003c98 <std.isra.0>:
 8003c98:	2300      	movs	r3, #0
 8003c9a:	b510      	push	{r4, lr}
 8003c9c:	4604      	mov	r4, r0
 8003c9e:	6003      	str	r3, [r0, #0]
 8003ca0:	6043      	str	r3, [r0, #4]
 8003ca2:	6083      	str	r3, [r0, #8]
 8003ca4:	8181      	strh	r1, [r0, #12]
 8003ca6:	6643      	str	r3, [r0, #100]	; 0x64
 8003ca8:	81c2      	strh	r2, [r0, #14]
 8003caa:	6103      	str	r3, [r0, #16]
 8003cac:	6143      	str	r3, [r0, #20]
 8003cae:	6183      	str	r3, [r0, #24]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	2208      	movs	r2, #8
 8003cb4:	305c      	adds	r0, #92	; 0x5c
 8003cb6:	f7ff fd39 	bl	800372c <memset>
 8003cba:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <std.isra.0+0x38>)
 8003cbc:	6263      	str	r3, [r4, #36]	; 0x24
 8003cbe:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <std.isra.0+0x3c>)
 8003cc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cc2:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <std.isra.0+0x40>)
 8003cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003cc6:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <std.isra.0+0x44>)
 8003cc8:	6224      	str	r4, [r4, #32]
 8003cca:	6323      	str	r3, [r4, #48]	; 0x30
 8003ccc:	bd10      	pop	{r4, pc}
 8003cce:	bf00      	nop
 8003cd0:	080048d9 	.word	0x080048d9
 8003cd4:	080048fb 	.word	0x080048fb
 8003cd8:	08004933 	.word	0x08004933
 8003cdc:	08004957 	.word	0x08004957

08003ce0 <__sfmoreglue>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	1e4a      	subs	r2, r1, #1
 8003ce4:	2568      	movs	r5, #104	; 0x68
 8003ce6:	4355      	muls	r5, r2
 8003ce8:	460e      	mov	r6, r1
 8003cea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003cee:	f000 f95f 	bl	8003fb0 <_malloc_r>
 8003cf2:	4604      	mov	r4, r0
 8003cf4:	b140      	cbz	r0, 8003d08 <__sfmoreglue+0x28>
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	e880 0042 	stmia.w	r0, {r1, r6}
 8003cfc:	300c      	adds	r0, #12
 8003cfe:	60a0      	str	r0, [r4, #8]
 8003d00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d04:	f7ff fd12 	bl	800372c <memset>
 8003d08:	4620      	mov	r0, r4
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}

08003d0c <__sinit>:
 8003d0c:	6983      	ldr	r3, [r0, #24]
 8003d0e:	b510      	push	{r4, lr}
 8003d10:	4604      	mov	r4, r0
 8003d12:	bb33      	cbnz	r3, 8003d62 <__sinit+0x56>
 8003d14:	6483      	str	r3, [r0, #72]	; 0x48
 8003d16:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003d18:	6503      	str	r3, [r0, #80]	; 0x50
 8003d1a:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <__sinit+0x58>)
 8003d1c:	4a12      	ldr	r2, [pc, #72]	; (8003d68 <__sinit+0x5c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6282      	str	r2, [r0, #40]	; 0x28
 8003d22:	4298      	cmp	r0, r3
 8003d24:	bf04      	itt	eq
 8003d26:	2301      	moveq	r3, #1
 8003d28:	6183      	streq	r3, [r0, #24]
 8003d2a:	f000 f81f 	bl	8003d6c <__sfp>
 8003d2e:	6060      	str	r0, [r4, #4]
 8003d30:	4620      	mov	r0, r4
 8003d32:	f000 f81b 	bl	8003d6c <__sfp>
 8003d36:	60a0      	str	r0, [r4, #8]
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f000 f817 	bl	8003d6c <__sfp>
 8003d3e:	2200      	movs	r2, #0
 8003d40:	60e0      	str	r0, [r4, #12]
 8003d42:	2104      	movs	r1, #4
 8003d44:	6860      	ldr	r0, [r4, #4]
 8003d46:	f7ff ffa7 	bl	8003c98 <std.isra.0>
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	2109      	movs	r1, #9
 8003d4e:	68a0      	ldr	r0, [r4, #8]
 8003d50:	f7ff ffa2 	bl	8003c98 <std.isra.0>
 8003d54:	2202      	movs	r2, #2
 8003d56:	2112      	movs	r1, #18
 8003d58:	68e0      	ldr	r0, [r4, #12]
 8003d5a:	f7ff ff9d 	bl	8003c98 <std.isra.0>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	61a3      	str	r3, [r4, #24]
 8003d62:	bd10      	pop	{r4, pc}
 8003d64:	080066a8 	.word	0x080066a8
 8003d68:	08003c8d 	.word	0x08003c8d

08003d6c <__sfp>:
 8003d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6e:	4b1c      	ldr	r3, [pc, #112]	; (8003de0 <__sfp+0x74>)
 8003d70:	681e      	ldr	r6, [r3, #0]
 8003d72:	69b3      	ldr	r3, [r6, #24]
 8003d74:	4607      	mov	r7, r0
 8003d76:	b913      	cbnz	r3, 8003d7e <__sfp+0x12>
 8003d78:	4630      	mov	r0, r6
 8003d7a:	f7ff ffc7 	bl	8003d0c <__sinit>
 8003d7e:	3648      	adds	r6, #72	; 0x48
 8003d80:	68b4      	ldr	r4, [r6, #8]
 8003d82:	6873      	ldr	r3, [r6, #4]
 8003d84:	3b01      	subs	r3, #1
 8003d86:	d503      	bpl.n	8003d90 <__sfp+0x24>
 8003d88:	6833      	ldr	r3, [r6, #0]
 8003d8a:	b133      	cbz	r3, 8003d9a <__sfp+0x2e>
 8003d8c:	6836      	ldr	r6, [r6, #0]
 8003d8e:	e7f7      	b.n	8003d80 <__sfp+0x14>
 8003d90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003d94:	b16d      	cbz	r5, 8003db2 <__sfp+0x46>
 8003d96:	3468      	adds	r4, #104	; 0x68
 8003d98:	e7f4      	b.n	8003d84 <__sfp+0x18>
 8003d9a:	2104      	movs	r1, #4
 8003d9c:	4638      	mov	r0, r7
 8003d9e:	f7ff ff9f 	bl	8003ce0 <__sfmoreglue>
 8003da2:	6030      	str	r0, [r6, #0]
 8003da4:	2800      	cmp	r0, #0
 8003da6:	d1f1      	bne.n	8003d8c <__sfp+0x20>
 8003da8:	230c      	movs	r3, #12
 8003daa:	603b      	str	r3, [r7, #0]
 8003dac:	4604      	mov	r4, r0
 8003dae:	4620      	mov	r0, r4
 8003db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003db2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003db6:	81e3      	strh	r3, [r4, #14]
 8003db8:	2301      	movs	r3, #1
 8003dba:	81a3      	strh	r3, [r4, #12]
 8003dbc:	6665      	str	r5, [r4, #100]	; 0x64
 8003dbe:	6025      	str	r5, [r4, #0]
 8003dc0:	60a5      	str	r5, [r4, #8]
 8003dc2:	6065      	str	r5, [r4, #4]
 8003dc4:	6125      	str	r5, [r4, #16]
 8003dc6:	6165      	str	r5, [r4, #20]
 8003dc8:	61a5      	str	r5, [r4, #24]
 8003dca:	2208      	movs	r2, #8
 8003dcc:	4629      	mov	r1, r5
 8003dce:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003dd2:	f7ff fcab 	bl	800372c <memset>
 8003dd6:	6365      	str	r5, [r4, #52]	; 0x34
 8003dd8:	63a5      	str	r5, [r4, #56]	; 0x38
 8003dda:	64a5      	str	r5, [r4, #72]	; 0x48
 8003ddc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003dde:	e7e6      	b.n	8003dae <__sfp+0x42>
 8003de0:	080066a8 	.word	0x080066a8

08003de4 <_fwalk_reent>:
 8003de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003de8:	4680      	mov	r8, r0
 8003dea:	4689      	mov	r9, r1
 8003dec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003df0:	2600      	movs	r6, #0
 8003df2:	b914      	cbnz	r4, 8003dfa <_fwalk_reent+0x16>
 8003df4:	4630      	mov	r0, r6
 8003df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dfa:	68a5      	ldr	r5, [r4, #8]
 8003dfc:	6867      	ldr	r7, [r4, #4]
 8003dfe:	3f01      	subs	r7, #1
 8003e00:	d501      	bpl.n	8003e06 <_fwalk_reent+0x22>
 8003e02:	6824      	ldr	r4, [r4, #0]
 8003e04:	e7f5      	b.n	8003df2 <_fwalk_reent+0xe>
 8003e06:	89ab      	ldrh	r3, [r5, #12]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d907      	bls.n	8003e1c <_fwalk_reent+0x38>
 8003e0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e10:	3301      	adds	r3, #1
 8003e12:	d003      	beq.n	8003e1c <_fwalk_reent+0x38>
 8003e14:	4629      	mov	r1, r5
 8003e16:	4640      	mov	r0, r8
 8003e18:	47c8      	blx	r9
 8003e1a:	4306      	orrs	r6, r0
 8003e1c:	3568      	adds	r5, #104	; 0x68
 8003e1e:	e7ee      	b.n	8003dfe <_fwalk_reent+0x1a>

08003e20 <__locale_ctype_ptr_l>:
 8003e20:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003e24:	4770      	bx	lr

08003e26 <__swhatbuf_r>:
 8003e26:	b570      	push	{r4, r5, r6, lr}
 8003e28:	460e      	mov	r6, r1
 8003e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e2e:	2900      	cmp	r1, #0
 8003e30:	b090      	sub	sp, #64	; 0x40
 8003e32:	4614      	mov	r4, r2
 8003e34:	461d      	mov	r5, r3
 8003e36:	da07      	bge.n	8003e48 <__swhatbuf_r+0x22>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	602b      	str	r3, [r5, #0]
 8003e3c:	89b3      	ldrh	r3, [r6, #12]
 8003e3e:	061a      	lsls	r2, r3, #24
 8003e40:	d410      	bmi.n	8003e64 <__swhatbuf_r+0x3e>
 8003e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e46:	e00e      	b.n	8003e66 <__swhatbuf_r+0x40>
 8003e48:	aa01      	add	r2, sp, #4
 8003e4a:	f000 fdb7 	bl	80049bc <_fstat_r>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	dbf2      	blt.n	8003e38 <__swhatbuf_r+0x12>
 8003e52:	9a02      	ldr	r2, [sp, #8]
 8003e54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e5c:	425a      	negs	r2, r3
 8003e5e:	415a      	adcs	r2, r3
 8003e60:	602a      	str	r2, [r5, #0]
 8003e62:	e7ee      	b.n	8003e42 <__swhatbuf_r+0x1c>
 8003e64:	2340      	movs	r3, #64	; 0x40
 8003e66:	2000      	movs	r0, #0
 8003e68:	6023      	str	r3, [r4, #0]
 8003e6a:	b010      	add	sp, #64	; 0x40
 8003e6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e70 <__smakebuf_r>:
 8003e70:	898b      	ldrh	r3, [r1, #12]
 8003e72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e74:	079d      	lsls	r5, r3, #30
 8003e76:	4606      	mov	r6, r0
 8003e78:	460c      	mov	r4, r1
 8003e7a:	d507      	bpl.n	8003e8c <__smakebuf_r+0x1c>
 8003e7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e80:	6023      	str	r3, [r4, #0]
 8003e82:	6123      	str	r3, [r4, #16]
 8003e84:	2301      	movs	r3, #1
 8003e86:	6163      	str	r3, [r4, #20]
 8003e88:	b002      	add	sp, #8
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}
 8003e8c:	ab01      	add	r3, sp, #4
 8003e8e:	466a      	mov	r2, sp
 8003e90:	f7ff ffc9 	bl	8003e26 <__swhatbuf_r>
 8003e94:	9900      	ldr	r1, [sp, #0]
 8003e96:	4605      	mov	r5, r0
 8003e98:	4630      	mov	r0, r6
 8003e9a:	f000 f889 	bl	8003fb0 <_malloc_r>
 8003e9e:	b948      	cbnz	r0, 8003eb4 <__smakebuf_r+0x44>
 8003ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ea4:	059a      	lsls	r2, r3, #22
 8003ea6:	d4ef      	bmi.n	8003e88 <__smakebuf_r+0x18>
 8003ea8:	f023 0303 	bic.w	r3, r3, #3
 8003eac:	f043 0302 	orr.w	r3, r3, #2
 8003eb0:	81a3      	strh	r3, [r4, #12]
 8003eb2:	e7e3      	b.n	8003e7c <__smakebuf_r+0xc>
 8003eb4:	4b0d      	ldr	r3, [pc, #52]	; (8003eec <__smakebuf_r+0x7c>)
 8003eb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8003eb8:	89a3      	ldrh	r3, [r4, #12]
 8003eba:	6020      	str	r0, [r4, #0]
 8003ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec0:	81a3      	strh	r3, [r4, #12]
 8003ec2:	9b00      	ldr	r3, [sp, #0]
 8003ec4:	6163      	str	r3, [r4, #20]
 8003ec6:	9b01      	ldr	r3, [sp, #4]
 8003ec8:	6120      	str	r0, [r4, #16]
 8003eca:	b15b      	cbz	r3, 8003ee4 <__smakebuf_r+0x74>
 8003ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ed0:	4630      	mov	r0, r6
 8003ed2:	f000 fd85 	bl	80049e0 <_isatty_r>
 8003ed6:	b128      	cbz	r0, 8003ee4 <__smakebuf_r+0x74>
 8003ed8:	89a3      	ldrh	r3, [r4, #12]
 8003eda:	f023 0303 	bic.w	r3, r3, #3
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	81a3      	strh	r3, [r4, #12]
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	431d      	orrs	r5, r3
 8003ee8:	81a5      	strh	r5, [r4, #12]
 8003eea:	e7cd      	b.n	8003e88 <__smakebuf_r+0x18>
 8003eec:	08003c8d 	.word	0x08003c8d

08003ef0 <__ascii_mbtowc>:
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	b901      	cbnz	r1, 8003ef6 <__ascii_mbtowc+0x6>
 8003ef4:	a901      	add	r1, sp, #4
 8003ef6:	b142      	cbz	r2, 8003f0a <__ascii_mbtowc+0x1a>
 8003ef8:	b14b      	cbz	r3, 8003f0e <__ascii_mbtowc+0x1e>
 8003efa:	7813      	ldrb	r3, [r2, #0]
 8003efc:	600b      	str	r3, [r1, #0]
 8003efe:	7812      	ldrb	r2, [r2, #0]
 8003f00:	1c10      	adds	r0, r2, #0
 8003f02:	bf18      	it	ne
 8003f04:	2001      	movne	r0, #1
 8003f06:	b002      	add	sp, #8
 8003f08:	4770      	bx	lr
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	e7fb      	b.n	8003f06 <__ascii_mbtowc+0x16>
 8003f0e:	f06f 0001 	mvn.w	r0, #1
 8003f12:	e7f8      	b.n	8003f06 <__ascii_mbtowc+0x16>

08003f14 <_free_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	4605      	mov	r5, r0
 8003f18:	2900      	cmp	r1, #0
 8003f1a:	d045      	beq.n	8003fa8 <_free_r+0x94>
 8003f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f20:	1f0c      	subs	r4, r1, #4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	bfb8      	it	lt
 8003f26:	18e4      	addlt	r4, r4, r3
 8003f28:	f000 fda1 	bl	8004a6e <__malloc_lock>
 8003f2c:	4a1f      	ldr	r2, [pc, #124]	; (8003fac <_free_r+0x98>)
 8003f2e:	6813      	ldr	r3, [r2, #0]
 8003f30:	4610      	mov	r0, r2
 8003f32:	b933      	cbnz	r3, 8003f42 <_free_r+0x2e>
 8003f34:	6063      	str	r3, [r4, #4]
 8003f36:	6014      	str	r4, [r2, #0]
 8003f38:	4628      	mov	r0, r5
 8003f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f3e:	f000 bd97 	b.w	8004a70 <__malloc_unlock>
 8003f42:	42a3      	cmp	r3, r4
 8003f44:	d90c      	bls.n	8003f60 <_free_r+0x4c>
 8003f46:	6821      	ldr	r1, [r4, #0]
 8003f48:	1862      	adds	r2, r4, r1
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	bf04      	itt	eq
 8003f4e:	681a      	ldreq	r2, [r3, #0]
 8003f50:	685b      	ldreq	r3, [r3, #4]
 8003f52:	6063      	str	r3, [r4, #4]
 8003f54:	bf04      	itt	eq
 8003f56:	1852      	addeq	r2, r2, r1
 8003f58:	6022      	streq	r2, [r4, #0]
 8003f5a:	6004      	str	r4, [r0, #0]
 8003f5c:	e7ec      	b.n	8003f38 <_free_r+0x24>
 8003f5e:	4613      	mov	r3, r2
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	b10a      	cbz	r2, 8003f68 <_free_r+0x54>
 8003f64:	42a2      	cmp	r2, r4
 8003f66:	d9fa      	bls.n	8003f5e <_free_r+0x4a>
 8003f68:	6819      	ldr	r1, [r3, #0]
 8003f6a:	1858      	adds	r0, r3, r1
 8003f6c:	42a0      	cmp	r0, r4
 8003f6e:	d10b      	bne.n	8003f88 <_free_r+0x74>
 8003f70:	6820      	ldr	r0, [r4, #0]
 8003f72:	4401      	add	r1, r0
 8003f74:	1858      	adds	r0, r3, r1
 8003f76:	4282      	cmp	r2, r0
 8003f78:	6019      	str	r1, [r3, #0]
 8003f7a:	d1dd      	bne.n	8003f38 <_free_r+0x24>
 8003f7c:	6810      	ldr	r0, [r2, #0]
 8003f7e:	6852      	ldr	r2, [r2, #4]
 8003f80:	605a      	str	r2, [r3, #4]
 8003f82:	4401      	add	r1, r0
 8003f84:	6019      	str	r1, [r3, #0]
 8003f86:	e7d7      	b.n	8003f38 <_free_r+0x24>
 8003f88:	d902      	bls.n	8003f90 <_free_r+0x7c>
 8003f8a:	230c      	movs	r3, #12
 8003f8c:	602b      	str	r3, [r5, #0]
 8003f8e:	e7d3      	b.n	8003f38 <_free_r+0x24>
 8003f90:	6820      	ldr	r0, [r4, #0]
 8003f92:	1821      	adds	r1, r4, r0
 8003f94:	428a      	cmp	r2, r1
 8003f96:	bf04      	itt	eq
 8003f98:	6811      	ldreq	r1, [r2, #0]
 8003f9a:	6852      	ldreq	r2, [r2, #4]
 8003f9c:	6062      	str	r2, [r4, #4]
 8003f9e:	bf04      	itt	eq
 8003fa0:	1809      	addeq	r1, r1, r0
 8003fa2:	6021      	streq	r1, [r4, #0]
 8003fa4:	605c      	str	r4, [r3, #4]
 8003fa6:	e7c7      	b.n	8003f38 <_free_r+0x24>
 8003fa8:	bd38      	pop	{r3, r4, r5, pc}
 8003faa:	bf00      	nop
 8003fac:	20000274 	.word	0x20000274

08003fb0 <_malloc_r>:
 8003fb0:	b570      	push	{r4, r5, r6, lr}
 8003fb2:	1ccd      	adds	r5, r1, #3
 8003fb4:	f025 0503 	bic.w	r5, r5, #3
 8003fb8:	3508      	adds	r5, #8
 8003fba:	2d0c      	cmp	r5, #12
 8003fbc:	bf38      	it	cc
 8003fbe:	250c      	movcc	r5, #12
 8003fc0:	2d00      	cmp	r5, #0
 8003fc2:	4606      	mov	r6, r0
 8003fc4:	db01      	blt.n	8003fca <_malloc_r+0x1a>
 8003fc6:	42a9      	cmp	r1, r5
 8003fc8:	d903      	bls.n	8003fd2 <_malloc_r+0x22>
 8003fca:	230c      	movs	r3, #12
 8003fcc:	6033      	str	r3, [r6, #0]
 8003fce:	2000      	movs	r0, #0
 8003fd0:	bd70      	pop	{r4, r5, r6, pc}
 8003fd2:	f000 fd4c 	bl	8004a6e <__malloc_lock>
 8003fd6:	4a23      	ldr	r2, [pc, #140]	; (8004064 <_malloc_r+0xb4>)
 8003fd8:	6814      	ldr	r4, [r2, #0]
 8003fda:	4621      	mov	r1, r4
 8003fdc:	b991      	cbnz	r1, 8004004 <_malloc_r+0x54>
 8003fde:	4c22      	ldr	r4, [pc, #136]	; (8004068 <_malloc_r+0xb8>)
 8003fe0:	6823      	ldr	r3, [r4, #0]
 8003fe2:	b91b      	cbnz	r3, 8003fec <_malloc_r+0x3c>
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	f000 fc67 	bl	80048b8 <_sbrk_r>
 8003fea:	6020      	str	r0, [r4, #0]
 8003fec:	4629      	mov	r1, r5
 8003fee:	4630      	mov	r0, r6
 8003ff0:	f000 fc62 	bl	80048b8 <_sbrk_r>
 8003ff4:	1c43      	adds	r3, r0, #1
 8003ff6:	d126      	bne.n	8004046 <_malloc_r+0x96>
 8003ff8:	230c      	movs	r3, #12
 8003ffa:	6033      	str	r3, [r6, #0]
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	f000 fd37 	bl	8004a70 <__malloc_unlock>
 8004002:	e7e4      	b.n	8003fce <_malloc_r+0x1e>
 8004004:	680b      	ldr	r3, [r1, #0]
 8004006:	1b5b      	subs	r3, r3, r5
 8004008:	d41a      	bmi.n	8004040 <_malloc_r+0x90>
 800400a:	2b0b      	cmp	r3, #11
 800400c:	d90f      	bls.n	800402e <_malloc_r+0x7e>
 800400e:	600b      	str	r3, [r1, #0]
 8004010:	50cd      	str	r5, [r1, r3]
 8004012:	18cc      	adds	r4, r1, r3
 8004014:	4630      	mov	r0, r6
 8004016:	f000 fd2b 	bl	8004a70 <__malloc_unlock>
 800401a:	f104 000b 	add.w	r0, r4, #11
 800401e:	1d23      	adds	r3, r4, #4
 8004020:	f020 0007 	bic.w	r0, r0, #7
 8004024:	1ac3      	subs	r3, r0, r3
 8004026:	d01b      	beq.n	8004060 <_malloc_r+0xb0>
 8004028:	425a      	negs	r2, r3
 800402a:	50e2      	str	r2, [r4, r3]
 800402c:	bd70      	pop	{r4, r5, r6, pc}
 800402e:	428c      	cmp	r4, r1
 8004030:	bf0d      	iteet	eq
 8004032:	6863      	ldreq	r3, [r4, #4]
 8004034:	684b      	ldrne	r3, [r1, #4]
 8004036:	6063      	strne	r3, [r4, #4]
 8004038:	6013      	streq	r3, [r2, #0]
 800403a:	bf18      	it	ne
 800403c:	460c      	movne	r4, r1
 800403e:	e7e9      	b.n	8004014 <_malloc_r+0x64>
 8004040:	460c      	mov	r4, r1
 8004042:	6849      	ldr	r1, [r1, #4]
 8004044:	e7ca      	b.n	8003fdc <_malloc_r+0x2c>
 8004046:	1cc4      	adds	r4, r0, #3
 8004048:	f024 0403 	bic.w	r4, r4, #3
 800404c:	42a0      	cmp	r0, r4
 800404e:	d005      	beq.n	800405c <_malloc_r+0xac>
 8004050:	1a21      	subs	r1, r4, r0
 8004052:	4630      	mov	r0, r6
 8004054:	f000 fc30 	bl	80048b8 <_sbrk_r>
 8004058:	3001      	adds	r0, #1
 800405a:	d0cd      	beq.n	8003ff8 <_malloc_r+0x48>
 800405c:	6025      	str	r5, [r4, #0]
 800405e:	e7d9      	b.n	8004014 <_malloc_r+0x64>
 8004060:	bd70      	pop	{r4, r5, r6, pc}
 8004062:	bf00      	nop
 8004064:	20000274 	.word	0x20000274
 8004068:	20000278 	.word	0x20000278

0800406c <__ssputs_r>:
 800406c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004070:	688e      	ldr	r6, [r1, #8]
 8004072:	429e      	cmp	r6, r3
 8004074:	4682      	mov	sl, r0
 8004076:	460c      	mov	r4, r1
 8004078:	4691      	mov	r9, r2
 800407a:	4698      	mov	r8, r3
 800407c:	d835      	bhi.n	80040ea <__ssputs_r+0x7e>
 800407e:	898a      	ldrh	r2, [r1, #12]
 8004080:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004084:	d031      	beq.n	80040ea <__ssputs_r+0x7e>
 8004086:	6825      	ldr	r5, [r4, #0]
 8004088:	6909      	ldr	r1, [r1, #16]
 800408a:	1a6f      	subs	r7, r5, r1
 800408c:	6965      	ldr	r5, [r4, #20]
 800408e:	2302      	movs	r3, #2
 8004090:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004094:	fb95 f5f3 	sdiv	r5, r5, r3
 8004098:	f108 0301 	add.w	r3, r8, #1
 800409c:	443b      	add	r3, r7
 800409e:	429d      	cmp	r5, r3
 80040a0:	bf38      	it	cc
 80040a2:	461d      	movcc	r5, r3
 80040a4:	0553      	lsls	r3, r2, #21
 80040a6:	d531      	bpl.n	800410c <__ssputs_r+0xa0>
 80040a8:	4629      	mov	r1, r5
 80040aa:	f7ff ff81 	bl	8003fb0 <_malloc_r>
 80040ae:	4606      	mov	r6, r0
 80040b0:	b950      	cbnz	r0, 80040c8 <__ssputs_r+0x5c>
 80040b2:	230c      	movs	r3, #12
 80040b4:	f8ca 3000 	str.w	r3, [sl]
 80040b8:	89a3      	ldrh	r3, [r4, #12]
 80040ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040be:	81a3      	strh	r3, [r4, #12]
 80040c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c8:	463a      	mov	r2, r7
 80040ca:	6921      	ldr	r1, [r4, #16]
 80040cc:	f000 fcaa 	bl	8004a24 <memcpy>
 80040d0:	89a3      	ldrh	r3, [r4, #12]
 80040d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80040d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040da:	81a3      	strh	r3, [r4, #12]
 80040dc:	6126      	str	r6, [r4, #16]
 80040de:	6165      	str	r5, [r4, #20]
 80040e0:	443e      	add	r6, r7
 80040e2:	1bed      	subs	r5, r5, r7
 80040e4:	6026      	str	r6, [r4, #0]
 80040e6:	60a5      	str	r5, [r4, #8]
 80040e8:	4646      	mov	r6, r8
 80040ea:	4546      	cmp	r6, r8
 80040ec:	bf28      	it	cs
 80040ee:	4646      	movcs	r6, r8
 80040f0:	4632      	mov	r2, r6
 80040f2:	4649      	mov	r1, r9
 80040f4:	6820      	ldr	r0, [r4, #0]
 80040f6:	f000 fca0 	bl	8004a3a <memmove>
 80040fa:	68a3      	ldr	r3, [r4, #8]
 80040fc:	1b9b      	subs	r3, r3, r6
 80040fe:	60a3      	str	r3, [r4, #8]
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	441e      	add	r6, r3
 8004104:	6026      	str	r6, [r4, #0]
 8004106:	2000      	movs	r0, #0
 8004108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800410c:	462a      	mov	r2, r5
 800410e:	f000 fcb0 	bl	8004a72 <_realloc_r>
 8004112:	4606      	mov	r6, r0
 8004114:	2800      	cmp	r0, #0
 8004116:	d1e1      	bne.n	80040dc <__ssputs_r+0x70>
 8004118:	6921      	ldr	r1, [r4, #16]
 800411a:	4650      	mov	r0, sl
 800411c:	f7ff fefa 	bl	8003f14 <_free_r>
 8004120:	e7c7      	b.n	80040b2 <__ssputs_r+0x46>
	...

08004124 <_svfiprintf_r>:
 8004124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004128:	b09d      	sub	sp, #116	; 0x74
 800412a:	4680      	mov	r8, r0
 800412c:	9303      	str	r3, [sp, #12]
 800412e:	898b      	ldrh	r3, [r1, #12]
 8004130:	061c      	lsls	r4, r3, #24
 8004132:	460d      	mov	r5, r1
 8004134:	4616      	mov	r6, r2
 8004136:	d50f      	bpl.n	8004158 <_svfiprintf_r+0x34>
 8004138:	690b      	ldr	r3, [r1, #16]
 800413a:	b96b      	cbnz	r3, 8004158 <_svfiprintf_r+0x34>
 800413c:	2140      	movs	r1, #64	; 0x40
 800413e:	f7ff ff37 	bl	8003fb0 <_malloc_r>
 8004142:	6028      	str	r0, [r5, #0]
 8004144:	6128      	str	r0, [r5, #16]
 8004146:	b928      	cbnz	r0, 8004154 <_svfiprintf_r+0x30>
 8004148:	230c      	movs	r3, #12
 800414a:	f8c8 3000 	str.w	r3, [r8]
 800414e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004152:	e0c5      	b.n	80042e0 <_svfiprintf_r+0x1bc>
 8004154:	2340      	movs	r3, #64	; 0x40
 8004156:	616b      	str	r3, [r5, #20]
 8004158:	2300      	movs	r3, #0
 800415a:	9309      	str	r3, [sp, #36]	; 0x24
 800415c:	2320      	movs	r3, #32
 800415e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004162:	2330      	movs	r3, #48	; 0x30
 8004164:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004168:	f04f 0b01 	mov.w	fp, #1
 800416c:	4637      	mov	r7, r6
 800416e:	463c      	mov	r4, r7
 8004170:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d13c      	bne.n	80041f2 <_svfiprintf_r+0xce>
 8004178:	ebb7 0a06 	subs.w	sl, r7, r6
 800417c:	d00b      	beq.n	8004196 <_svfiprintf_r+0x72>
 800417e:	4653      	mov	r3, sl
 8004180:	4632      	mov	r2, r6
 8004182:	4629      	mov	r1, r5
 8004184:	4640      	mov	r0, r8
 8004186:	f7ff ff71 	bl	800406c <__ssputs_r>
 800418a:	3001      	adds	r0, #1
 800418c:	f000 80a3 	beq.w	80042d6 <_svfiprintf_r+0x1b2>
 8004190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004192:	4453      	add	r3, sl
 8004194:	9309      	str	r3, [sp, #36]	; 0x24
 8004196:	783b      	ldrb	r3, [r7, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 809c 	beq.w	80042d6 <_svfiprintf_r+0x1b2>
 800419e:	2300      	movs	r3, #0
 80041a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041a4:	9304      	str	r3, [sp, #16]
 80041a6:	9307      	str	r3, [sp, #28]
 80041a8:	9205      	str	r2, [sp, #20]
 80041aa:	9306      	str	r3, [sp, #24]
 80041ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041b0:	931a      	str	r3, [sp, #104]	; 0x68
 80041b2:	2205      	movs	r2, #5
 80041b4:	7821      	ldrb	r1, [r4, #0]
 80041b6:	4850      	ldr	r0, [pc, #320]	; (80042f8 <_svfiprintf_r+0x1d4>)
 80041b8:	f7fc f81a 	bl	80001f0 <memchr>
 80041bc:	1c67      	adds	r7, r4, #1
 80041be:	9b04      	ldr	r3, [sp, #16]
 80041c0:	b9d8      	cbnz	r0, 80041fa <_svfiprintf_r+0xd6>
 80041c2:	06d9      	lsls	r1, r3, #27
 80041c4:	bf44      	itt	mi
 80041c6:	2220      	movmi	r2, #32
 80041c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041cc:	071a      	lsls	r2, r3, #28
 80041ce:	bf44      	itt	mi
 80041d0:	222b      	movmi	r2, #43	; 0x2b
 80041d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041d6:	7822      	ldrb	r2, [r4, #0]
 80041d8:	2a2a      	cmp	r2, #42	; 0x2a
 80041da:	d016      	beq.n	800420a <_svfiprintf_r+0xe6>
 80041dc:	9a07      	ldr	r2, [sp, #28]
 80041de:	2100      	movs	r1, #0
 80041e0:	200a      	movs	r0, #10
 80041e2:	4627      	mov	r7, r4
 80041e4:	3401      	adds	r4, #1
 80041e6:	783b      	ldrb	r3, [r7, #0]
 80041e8:	3b30      	subs	r3, #48	; 0x30
 80041ea:	2b09      	cmp	r3, #9
 80041ec:	d951      	bls.n	8004292 <_svfiprintf_r+0x16e>
 80041ee:	b1c9      	cbz	r1, 8004224 <_svfiprintf_r+0x100>
 80041f0:	e011      	b.n	8004216 <_svfiprintf_r+0xf2>
 80041f2:	2b25      	cmp	r3, #37	; 0x25
 80041f4:	d0c0      	beq.n	8004178 <_svfiprintf_r+0x54>
 80041f6:	4627      	mov	r7, r4
 80041f8:	e7b9      	b.n	800416e <_svfiprintf_r+0x4a>
 80041fa:	4a3f      	ldr	r2, [pc, #252]	; (80042f8 <_svfiprintf_r+0x1d4>)
 80041fc:	1a80      	subs	r0, r0, r2
 80041fe:	fa0b f000 	lsl.w	r0, fp, r0
 8004202:	4318      	orrs	r0, r3
 8004204:	9004      	str	r0, [sp, #16]
 8004206:	463c      	mov	r4, r7
 8004208:	e7d3      	b.n	80041b2 <_svfiprintf_r+0x8e>
 800420a:	9a03      	ldr	r2, [sp, #12]
 800420c:	1d11      	adds	r1, r2, #4
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	9103      	str	r1, [sp, #12]
 8004212:	2a00      	cmp	r2, #0
 8004214:	db01      	blt.n	800421a <_svfiprintf_r+0xf6>
 8004216:	9207      	str	r2, [sp, #28]
 8004218:	e004      	b.n	8004224 <_svfiprintf_r+0x100>
 800421a:	4252      	negs	r2, r2
 800421c:	f043 0302 	orr.w	r3, r3, #2
 8004220:	9207      	str	r2, [sp, #28]
 8004222:	9304      	str	r3, [sp, #16]
 8004224:	783b      	ldrb	r3, [r7, #0]
 8004226:	2b2e      	cmp	r3, #46	; 0x2e
 8004228:	d10e      	bne.n	8004248 <_svfiprintf_r+0x124>
 800422a:	787b      	ldrb	r3, [r7, #1]
 800422c:	2b2a      	cmp	r3, #42	; 0x2a
 800422e:	f107 0101 	add.w	r1, r7, #1
 8004232:	d132      	bne.n	800429a <_svfiprintf_r+0x176>
 8004234:	9b03      	ldr	r3, [sp, #12]
 8004236:	1d1a      	adds	r2, r3, #4
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	9203      	str	r2, [sp, #12]
 800423c:	2b00      	cmp	r3, #0
 800423e:	bfb8      	it	lt
 8004240:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004244:	3702      	adds	r7, #2
 8004246:	9305      	str	r3, [sp, #20]
 8004248:	4c2c      	ldr	r4, [pc, #176]	; (80042fc <_svfiprintf_r+0x1d8>)
 800424a:	7839      	ldrb	r1, [r7, #0]
 800424c:	2203      	movs	r2, #3
 800424e:	4620      	mov	r0, r4
 8004250:	f7fb ffce 	bl	80001f0 <memchr>
 8004254:	b138      	cbz	r0, 8004266 <_svfiprintf_r+0x142>
 8004256:	2340      	movs	r3, #64	; 0x40
 8004258:	1b00      	subs	r0, r0, r4
 800425a:	fa03 f000 	lsl.w	r0, r3, r0
 800425e:	9b04      	ldr	r3, [sp, #16]
 8004260:	4303      	orrs	r3, r0
 8004262:	9304      	str	r3, [sp, #16]
 8004264:	3701      	adds	r7, #1
 8004266:	7839      	ldrb	r1, [r7, #0]
 8004268:	4825      	ldr	r0, [pc, #148]	; (8004300 <_svfiprintf_r+0x1dc>)
 800426a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800426e:	2206      	movs	r2, #6
 8004270:	1c7e      	adds	r6, r7, #1
 8004272:	f7fb ffbd 	bl	80001f0 <memchr>
 8004276:	2800      	cmp	r0, #0
 8004278:	d035      	beq.n	80042e6 <_svfiprintf_r+0x1c2>
 800427a:	4b22      	ldr	r3, [pc, #136]	; (8004304 <_svfiprintf_r+0x1e0>)
 800427c:	b9fb      	cbnz	r3, 80042be <_svfiprintf_r+0x19a>
 800427e:	9b03      	ldr	r3, [sp, #12]
 8004280:	3307      	adds	r3, #7
 8004282:	f023 0307 	bic.w	r3, r3, #7
 8004286:	3308      	adds	r3, #8
 8004288:	9303      	str	r3, [sp, #12]
 800428a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800428c:	444b      	add	r3, r9
 800428e:	9309      	str	r3, [sp, #36]	; 0x24
 8004290:	e76c      	b.n	800416c <_svfiprintf_r+0x48>
 8004292:	fb00 3202 	mla	r2, r0, r2, r3
 8004296:	2101      	movs	r1, #1
 8004298:	e7a3      	b.n	80041e2 <_svfiprintf_r+0xbe>
 800429a:	2300      	movs	r3, #0
 800429c:	9305      	str	r3, [sp, #20]
 800429e:	4618      	mov	r0, r3
 80042a0:	240a      	movs	r4, #10
 80042a2:	460f      	mov	r7, r1
 80042a4:	3101      	adds	r1, #1
 80042a6:	783a      	ldrb	r2, [r7, #0]
 80042a8:	3a30      	subs	r2, #48	; 0x30
 80042aa:	2a09      	cmp	r2, #9
 80042ac:	d903      	bls.n	80042b6 <_svfiprintf_r+0x192>
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0ca      	beq.n	8004248 <_svfiprintf_r+0x124>
 80042b2:	9005      	str	r0, [sp, #20]
 80042b4:	e7c8      	b.n	8004248 <_svfiprintf_r+0x124>
 80042b6:	fb04 2000 	mla	r0, r4, r0, r2
 80042ba:	2301      	movs	r3, #1
 80042bc:	e7f1      	b.n	80042a2 <_svfiprintf_r+0x17e>
 80042be:	ab03      	add	r3, sp, #12
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	462a      	mov	r2, r5
 80042c4:	4b10      	ldr	r3, [pc, #64]	; (8004308 <_svfiprintf_r+0x1e4>)
 80042c6:	a904      	add	r1, sp, #16
 80042c8:	4640      	mov	r0, r8
 80042ca:	f3af 8000 	nop.w
 80042ce:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80042d2:	4681      	mov	r9, r0
 80042d4:	d1d9      	bne.n	800428a <_svfiprintf_r+0x166>
 80042d6:	89ab      	ldrh	r3, [r5, #12]
 80042d8:	065b      	lsls	r3, r3, #25
 80042da:	f53f af38 	bmi.w	800414e <_svfiprintf_r+0x2a>
 80042de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042e0:	b01d      	add	sp, #116	; 0x74
 80042e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042e6:	ab03      	add	r3, sp, #12
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	462a      	mov	r2, r5
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <_svfiprintf_r+0x1e4>)
 80042ee:	a904      	add	r1, sp, #16
 80042f0:	4640      	mov	r0, r8
 80042f2:	f000 f9c1 	bl	8004678 <_printf_i>
 80042f6:	e7ea      	b.n	80042ce <_svfiprintf_r+0x1aa>
 80042f8:	08006716 	.word	0x08006716
 80042fc:	0800671c 	.word	0x0800671c
 8004300:	08006720 	.word	0x08006720
 8004304:	00000000 	.word	0x00000000
 8004308:	0800406d 	.word	0x0800406d

0800430c <__sfputc_r>:
 800430c:	6893      	ldr	r3, [r2, #8]
 800430e:	3b01      	subs	r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	b410      	push	{r4}
 8004314:	6093      	str	r3, [r2, #8]
 8004316:	da09      	bge.n	800432c <__sfputc_r+0x20>
 8004318:	6994      	ldr	r4, [r2, #24]
 800431a:	42a3      	cmp	r3, r4
 800431c:	db02      	blt.n	8004324 <__sfputc_r+0x18>
 800431e:	b2cb      	uxtb	r3, r1
 8004320:	2b0a      	cmp	r3, #10
 8004322:	d103      	bne.n	800432c <__sfputc_r+0x20>
 8004324:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004328:	f7ff bb3e 	b.w	80039a8 <__swbuf_r>
 800432c:	6813      	ldr	r3, [r2, #0]
 800432e:	1c58      	adds	r0, r3, #1
 8004330:	6010      	str	r0, [r2, #0]
 8004332:	7019      	strb	r1, [r3, #0]
 8004334:	b2c8      	uxtb	r0, r1
 8004336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800433a:	4770      	bx	lr

0800433c <__sfputs_r>:
 800433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433e:	4606      	mov	r6, r0
 8004340:	460f      	mov	r7, r1
 8004342:	4614      	mov	r4, r2
 8004344:	18d5      	adds	r5, r2, r3
 8004346:	42ac      	cmp	r4, r5
 8004348:	d101      	bne.n	800434e <__sfputs_r+0x12>
 800434a:	2000      	movs	r0, #0
 800434c:	e007      	b.n	800435e <__sfputs_r+0x22>
 800434e:	463a      	mov	r2, r7
 8004350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004354:	4630      	mov	r0, r6
 8004356:	f7ff ffd9 	bl	800430c <__sfputc_r>
 800435a:	1c43      	adds	r3, r0, #1
 800435c:	d1f3      	bne.n	8004346 <__sfputs_r+0xa>
 800435e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004360 <_vfiprintf_r>:
 8004360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004364:	b09d      	sub	sp, #116	; 0x74
 8004366:	460c      	mov	r4, r1
 8004368:	4617      	mov	r7, r2
 800436a:	9303      	str	r3, [sp, #12]
 800436c:	4606      	mov	r6, r0
 800436e:	b118      	cbz	r0, 8004378 <_vfiprintf_r+0x18>
 8004370:	6983      	ldr	r3, [r0, #24]
 8004372:	b90b      	cbnz	r3, 8004378 <_vfiprintf_r+0x18>
 8004374:	f7ff fcca 	bl	8003d0c <__sinit>
 8004378:	4b7c      	ldr	r3, [pc, #496]	; (800456c <_vfiprintf_r+0x20c>)
 800437a:	429c      	cmp	r4, r3
 800437c:	d157      	bne.n	800442e <_vfiprintf_r+0xce>
 800437e:	6874      	ldr	r4, [r6, #4]
 8004380:	89a3      	ldrh	r3, [r4, #12]
 8004382:	0718      	lsls	r0, r3, #28
 8004384:	d55d      	bpl.n	8004442 <_vfiprintf_r+0xe2>
 8004386:	6923      	ldr	r3, [r4, #16]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d05a      	beq.n	8004442 <_vfiprintf_r+0xe2>
 800438c:	2300      	movs	r3, #0
 800438e:	9309      	str	r3, [sp, #36]	; 0x24
 8004390:	2320      	movs	r3, #32
 8004392:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004396:	2330      	movs	r3, #48	; 0x30
 8004398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800439c:	f04f 0b01 	mov.w	fp, #1
 80043a0:	46b8      	mov	r8, r7
 80043a2:	4645      	mov	r5, r8
 80043a4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d155      	bne.n	8004458 <_vfiprintf_r+0xf8>
 80043ac:	ebb8 0a07 	subs.w	sl, r8, r7
 80043b0:	d00b      	beq.n	80043ca <_vfiprintf_r+0x6a>
 80043b2:	4653      	mov	r3, sl
 80043b4:	463a      	mov	r2, r7
 80043b6:	4621      	mov	r1, r4
 80043b8:	4630      	mov	r0, r6
 80043ba:	f7ff ffbf 	bl	800433c <__sfputs_r>
 80043be:	3001      	adds	r0, #1
 80043c0:	f000 80c4 	beq.w	800454c <_vfiprintf_r+0x1ec>
 80043c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043c6:	4453      	add	r3, sl
 80043c8:	9309      	str	r3, [sp, #36]	; 0x24
 80043ca:	f898 3000 	ldrb.w	r3, [r8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 80bc 	beq.w	800454c <_vfiprintf_r+0x1ec>
 80043d4:	2300      	movs	r3, #0
 80043d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043da:	9304      	str	r3, [sp, #16]
 80043dc:	9307      	str	r3, [sp, #28]
 80043de:	9205      	str	r2, [sp, #20]
 80043e0:	9306      	str	r3, [sp, #24]
 80043e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043e6:	931a      	str	r3, [sp, #104]	; 0x68
 80043e8:	2205      	movs	r2, #5
 80043ea:	7829      	ldrb	r1, [r5, #0]
 80043ec:	4860      	ldr	r0, [pc, #384]	; (8004570 <_vfiprintf_r+0x210>)
 80043ee:	f7fb feff 	bl	80001f0 <memchr>
 80043f2:	f105 0801 	add.w	r8, r5, #1
 80043f6:	9b04      	ldr	r3, [sp, #16]
 80043f8:	2800      	cmp	r0, #0
 80043fa:	d131      	bne.n	8004460 <_vfiprintf_r+0x100>
 80043fc:	06d9      	lsls	r1, r3, #27
 80043fe:	bf44      	itt	mi
 8004400:	2220      	movmi	r2, #32
 8004402:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004406:	071a      	lsls	r2, r3, #28
 8004408:	bf44      	itt	mi
 800440a:	222b      	movmi	r2, #43	; 0x2b
 800440c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004410:	782a      	ldrb	r2, [r5, #0]
 8004412:	2a2a      	cmp	r2, #42	; 0x2a
 8004414:	d02c      	beq.n	8004470 <_vfiprintf_r+0x110>
 8004416:	9a07      	ldr	r2, [sp, #28]
 8004418:	2100      	movs	r1, #0
 800441a:	200a      	movs	r0, #10
 800441c:	46a8      	mov	r8, r5
 800441e:	3501      	adds	r5, #1
 8004420:	f898 3000 	ldrb.w	r3, [r8]
 8004424:	3b30      	subs	r3, #48	; 0x30
 8004426:	2b09      	cmp	r3, #9
 8004428:	d96d      	bls.n	8004506 <_vfiprintf_r+0x1a6>
 800442a:	b371      	cbz	r1, 800448a <_vfiprintf_r+0x12a>
 800442c:	e026      	b.n	800447c <_vfiprintf_r+0x11c>
 800442e:	4b51      	ldr	r3, [pc, #324]	; (8004574 <_vfiprintf_r+0x214>)
 8004430:	429c      	cmp	r4, r3
 8004432:	d101      	bne.n	8004438 <_vfiprintf_r+0xd8>
 8004434:	68b4      	ldr	r4, [r6, #8]
 8004436:	e7a3      	b.n	8004380 <_vfiprintf_r+0x20>
 8004438:	4b4f      	ldr	r3, [pc, #316]	; (8004578 <_vfiprintf_r+0x218>)
 800443a:	429c      	cmp	r4, r3
 800443c:	bf08      	it	eq
 800443e:	68f4      	ldreq	r4, [r6, #12]
 8004440:	e79e      	b.n	8004380 <_vfiprintf_r+0x20>
 8004442:	4621      	mov	r1, r4
 8004444:	4630      	mov	r0, r6
 8004446:	f7ff fb01 	bl	8003a4c <__swsetup_r>
 800444a:	2800      	cmp	r0, #0
 800444c:	d09e      	beq.n	800438c <_vfiprintf_r+0x2c>
 800444e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004452:	b01d      	add	sp, #116	; 0x74
 8004454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004458:	2b25      	cmp	r3, #37	; 0x25
 800445a:	d0a7      	beq.n	80043ac <_vfiprintf_r+0x4c>
 800445c:	46a8      	mov	r8, r5
 800445e:	e7a0      	b.n	80043a2 <_vfiprintf_r+0x42>
 8004460:	4a43      	ldr	r2, [pc, #268]	; (8004570 <_vfiprintf_r+0x210>)
 8004462:	1a80      	subs	r0, r0, r2
 8004464:	fa0b f000 	lsl.w	r0, fp, r0
 8004468:	4318      	orrs	r0, r3
 800446a:	9004      	str	r0, [sp, #16]
 800446c:	4645      	mov	r5, r8
 800446e:	e7bb      	b.n	80043e8 <_vfiprintf_r+0x88>
 8004470:	9a03      	ldr	r2, [sp, #12]
 8004472:	1d11      	adds	r1, r2, #4
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	9103      	str	r1, [sp, #12]
 8004478:	2a00      	cmp	r2, #0
 800447a:	db01      	blt.n	8004480 <_vfiprintf_r+0x120>
 800447c:	9207      	str	r2, [sp, #28]
 800447e:	e004      	b.n	800448a <_vfiprintf_r+0x12a>
 8004480:	4252      	negs	r2, r2
 8004482:	f043 0302 	orr.w	r3, r3, #2
 8004486:	9207      	str	r2, [sp, #28]
 8004488:	9304      	str	r3, [sp, #16]
 800448a:	f898 3000 	ldrb.w	r3, [r8]
 800448e:	2b2e      	cmp	r3, #46	; 0x2e
 8004490:	d110      	bne.n	80044b4 <_vfiprintf_r+0x154>
 8004492:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004496:	2b2a      	cmp	r3, #42	; 0x2a
 8004498:	f108 0101 	add.w	r1, r8, #1
 800449c:	d137      	bne.n	800450e <_vfiprintf_r+0x1ae>
 800449e:	9b03      	ldr	r3, [sp, #12]
 80044a0:	1d1a      	adds	r2, r3, #4
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	9203      	str	r2, [sp, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	bfb8      	it	lt
 80044aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80044ae:	f108 0802 	add.w	r8, r8, #2
 80044b2:	9305      	str	r3, [sp, #20]
 80044b4:	4d31      	ldr	r5, [pc, #196]	; (800457c <_vfiprintf_r+0x21c>)
 80044b6:	f898 1000 	ldrb.w	r1, [r8]
 80044ba:	2203      	movs	r2, #3
 80044bc:	4628      	mov	r0, r5
 80044be:	f7fb fe97 	bl	80001f0 <memchr>
 80044c2:	b140      	cbz	r0, 80044d6 <_vfiprintf_r+0x176>
 80044c4:	2340      	movs	r3, #64	; 0x40
 80044c6:	1b40      	subs	r0, r0, r5
 80044c8:	fa03 f000 	lsl.w	r0, r3, r0
 80044cc:	9b04      	ldr	r3, [sp, #16]
 80044ce:	4303      	orrs	r3, r0
 80044d0:	9304      	str	r3, [sp, #16]
 80044d2:	f108 0801 	add.w	r8, r8, #1
 80044d6:	f898 1000 	ldrb.w	r1, [r8]
 80044da:	4829      	ldr	r0, [pc, #164]	; (8004580 <_vfiprintf_r+0x220>)
 80044dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044e0:	2206      	movs	r2, #6
 80044e2:	f108 0701 	add.w	r7, r8, #1
 80044e6:	f7fb fe83 	bl	80001f0 <memchr>
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d034      	beq.n	8004558 <_vfiprintf_r+0x1f8>
 80044ee:	4b25      	ldr	r3, [pc, #148]	; (8004584 <_vfiprintf_r+0x224>)
 80044f0:	bb03      	cbnz	r3, 8004534 <_vfiprintf_r+0x1d4>
 80044f2:	9b03      	ldr	r3, [sp, #12]
 80044f4:	3307      	adds	r3, #7
 80044f6:	f023 0307 	bic.w	r3, r3, #7
 80044fa:	3308      	adds	r3, #8
 80044fc:	9303      	str	r3, [sp, #12]
 80044fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004500:	444b      	add	r3, r9
 8004502:	9309      	str	r3, [sp, #36]	; 0x24
 8004504:	e74c      	b.n	80043a0 <_vfiprintf_r+0x40>
 8004506:	fb00 3202 	mla	r2, r0, r2, r3
 800450a:	2101      	movs	r1, #1
 800450c:	e786      	b.n	800441c <_vfiprintf_r+0xbc>
 800450e:	2300      	movs	r3, #0
 8004510:	9305      	str	r3, [sp, #20]
 8004512:	4618      	mov	r0, r3
 8004514:	250a      	movs	r5, #10
 8004516:	4688      	mov	r8, r1
 8004518:	3101      	adds	r1, #1
 800451a:	f898 2000 	ldrb.w	r2, [r8]
 800451e:	3a30      	subs	r2, #48	; 0x30
 8004520:	2a09      	cmp	r2, #9
 8004522:	d903      	bls.n	800452c <_vfiprintf_r+0x1cc>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0c5      	beq.n	80044b4 <_vfiprintf_r+0x154>
 8004528:	9005      	str	r0, [sp, #20]
 800452a:	e7c3      	b.n	80044b4 <_vfiprintf_r+0x154>
 800452c:	fb05 2000 	mla	r0, r5, r0, r2
 8004530:	2301      	movs	r3, #1
 8004532:	e7f0      	b.n	8004516 <_vfiprintf_r+0x1b6>
 8004534:	ab03      	add	r3, sp, #12
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	4622      	mov	r2, r4
 800453a:	4b13      	ldr	r3, [pc, #76]	; (8004588 <_vfiprintf_r+0x228>)
 800453c:	a904      	add	r1, sp, #16
 800453e:	4630      	mov	r0, r6
 8004540:	f3af 8000 	nop.w
 8004544:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004548:	4681      	mov	r9, r0
 800454a:	d1d8      	bne.n	80044fe <_vfiprintf_r+0x19e>
 800454c:	89a3      	ldrh	r3, [r4, #12]
 800454e:	065b      	lsls	r3, r3, #25
 8004550:	f53f af7d 	bmi.w	800444e <_vfiprintf_r+0xee>
 8004554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004556:	e77c      	b.n	8004452 <_vfiprintf_r+0xf2>
 8004558:	ab03      	add	r3, sp, #12
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	4622      	mov	r2, r4
 800455e:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <_vfiprintf_r+0x228>)
 8004560:	a904      	add	r1, sp, #16
 8004562:	4630      	mov	r0, r6
 8004564:	f000 f888 	bl	8004678 <_printf_i>
 8004568:	e7ec      	b.n	8004544 <_vfiprintf_r+0x1e4>
 800456a:	bf00      	nop
 800456c:	080066cc 	.word	0x080066cc
 8004570:	08006716 	.word	0x08006716
 8004574:	080066ec 	.word	0x080066ec
 8004578:	080066ac 	.word	0x080066ac
 800457c:	0800671c 	.word	0x0800671c
 8004580:	08006720 	.word	0x08006720
 8004584:	00000000 	.word	0x00000000
 8004588:	0800433d 	.word	0x0800433d

0800458c <_printf_common>:
 800458c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004590:	4691      	mov	r9, r2
 8004592:	461f      	mov	r7, r3
 8004594:	688a      	ldr	r2, [r1, #8]
 8004596:	690b      	ldr	r3, [r1, #16]
 8004598:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800459c:	4293      	cmp	r3, r2
 800459e:	bfb8      	it	lt
 80045a0:	4613      	movlt	r3, r2
 80045a2:	f8c9 3000 	str.w	r3, [r9]
 80045a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045aa:	4606      	mov	r6, r0
 80045ac:	460c      	mov	r4, r1
 80045ae:	b112      	cbz	r2, 80045b6 <_printf_common+0x2a>
 80045b0:	3301      	adds	r3, #1
 80045b2:	f8c9 3000 	str.w	r3, [r9]
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	0699      	lsls	r1, r3, #26
 80045ba:	bf42      	ittt	mi
 80045bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80045c0:	3302      	addmi	r3, #2
 80045c2:	f8c9 3000 	strmi.w	r3, [r9]
 80045c6:	6825      	ldr	r5, [r4, #0]
 80045c8:	f015 0506 	ands.w	r5, r5, #6
 80045cc:	d107      	bne.n	80045de <_printf_common+0x52>
 80045ce:	f104 0a19 	add.w	sl, r4, #25
 80045d2:	68e3      	ldr	r3, [r4, #12]
 80045d4:	f8d9 2000 	ldr.w	r2, [r9]
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	429d      	cmp	r5, r3
 80045dc:	db29      	blt.n	8004632 <_printf_common+0xa6>
 80045de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	3300      	adds	r3, #0
 80045e6:	bf18      	it	ne
 80045e8:	2301      	movne	r3, #1
 80045ea:	0692      	lsls	r2, r2, #26
 80045ec:	d42e      	bmi.n	800464c <_printf_common+0xc0>
 80045ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045f2:	4639      	mov	r1, r7
 80045f4:	4630      	mov	r0, r6
 80045f6:	47c0      	blx	r8
 80045f8:	3001      	adds	r0, #1
 80045fa:	d021      	beq.n	8004640 <_printf_common+0xb4>
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	68e5      	ldr	r5, [r4, #12]
 8004600:	f8d9 2000 	ldr.w	r2, [r9]
 8004604:	f003 0306 	and.w	r3, r3, #6
 8004608:	2b04      	cmp	r3, #4
 800460a:	bf08      	it	eq
 800460c:	1aad      	subeq	r5, r5, r2
 800460e:	68a3      	ldr	r3, [r4, #8]
 8004610:	6922      	ldr	r2, [r4, #16]
 8004612:	bf0c      	ite	eq
 8004614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004618:	2500      	movne	r5, #0
 800461a:	4293      	cmp	r3, r2
 800461c:	bfc4      	itt	gt
 800461e:	1a9b      	subgt	r3, r3, r2
 8004620:	18ed      	addgt	r5, r5, r3
 8004622:	f04f 0900 	mov.w	r9, #0
 8004626:	341a      	adds	r4, #26
 8004628:	454d      	cmp	r5, r9
 800462a:	d11b      	bne.n	8004664 <_printf_common+0xd8>
 800462c:	2000      	movs	r0, #0
 800462e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004632:	2301      	movs	r3, #1
 8004634:	4652      	mov	r2, sl
 8004636:	4639      	mov	r1, r7
 8004638:	4630      	mov	r0, r6
 800463a:	47c0      	blx	r8
 800463c:	3001      	adds	r0, #1
 800463e:	d103      	bne.n	8004648 <_printf_common+0xbc>
 8004640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004648:	3501      	adds	r5, #1
 800464a:	e7c2      	b.n	80045d2 <_printf_common+0x46>
 800464c:	18e1      	adds	r1, r4, r3
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	2030      	movs	r0, #48	; 0x30
 8004652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004656:	4422      	add	r2, r4
 8004658:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800465c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004660:	3302      	adds	r3, #2
 8004662:	e7c4      	b.n	80045ee <_printf_common+0x62>
 8004664:	2301      	movs	r3, #1
 8004666:	4622      	mov	r2, r4
 8004668:	4639      	mov	r1, r7
 800466a:	4630      	mov	r0, r6
 800466c:	47c0      	blx	r8
 800466e:	3001      	adds	r0, #1
 8004670:	d0e6      	beq.n	8004640 <_printf_common+0xb4>
 8004672:	f109 0901 	add.w	r9, r9, #1
 8004676:	e7d7      	b.n	8004628 <_printf_common+0x9c>

08004678 <_printf_i>:
 8004678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800467c:	4617      	mov	r7, r2
 800467e:	7e0a      	ldrb	r2, [r1, #24]
 8004680:	b085      	sub	sp, #20
 8004682:	2a6e      	cmp	r2, #110	; 0x6e
 8004684:	4698      	mov	r8, r3
 8004686:	4606      	mov	r6, r0
 8004688:	460c      	mov	r4, r1
 800468a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800468c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004690:	f000 80bc 	beq.w	800480c <_printf_i+0x194>
 8004694:	d81a      	bhi.n	80046cc <_printf_i+0x54>
 8004696:	2a63      	cmp	r2, #99	; 0x63
 8004698:	d02e      	beq.n	80046f8 <_printf_i+0x80>
 800469a:	d80a      	bhi.n	80046b2 <_printf_i+0x3a>
 800469c:	2a00      	cmp	r2, #0
 800469e:	f000 80c8 	beq.w	8004832 <_printf_i+0x1ba>
 80046a2:	2a58      	cmp	r2, #88	; 0x58
 80046a4:	f000 808a 	beq.w	80047bc <_printf_i+0x144>
 80046a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046ac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80046b0:	e02a      	b.n	8004708 <_printf_i+0x90>
 80046b2:	2a64      	cmp	r2, #100	; 0x64
 80046b4:	d001      	beq.n	80046ba <_printf_i+0x42>
 80046b6:	2a69      	cmp	r2, #105	; 0x69
 80046b8:	d1f6      	bne.n	80046a8 <_printf_i+0x30>
 80046ba:	6821      	ldr	r1, [r4, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	f011 0f80 	tst.w	r1, #128	; 0x80
 80046c2:	d023      	beq.n	800470c <_printf_i+0x94>
 80046c4:	1d11      	adds	r1, r2, #4
 80046c6:	6019      	str	r1, [r3, #0]
 80046c8:	6813      	ldr	r3, [r2, #0]
 80046ca:	e027      	b.n	800471c <_printf_i+0xa4>
 80046cc:	2a73      	cmp	r2, #115	; 0x73
 80046ce:	f000 80b4 	beq.w	800483a <_printf_i+0x1c2>
 80046d2:	d808      	bhi.n	80046e6 <_printf_i+0x6e>
 80046d4:	2a6f      	cmp	r2, #111	; 0x6f
 80046d6:	d02a      	beq.n	800472e <_printf_i+0xb6>
 80046d8:	2a70      	cmp	r2, #112	; 0x70
 80046da:	d1e5      	bne.n	80046a8 <_printf_i+0x30>
 80046dc:	680a      	ldr	r2, [r1, #0]
 80046de:	f042 0220 	orr.w	r2, r2, #32
 80046e2:	600a      	str	r2, [r1, #0]
 80046e4:	e003      	b.n	80046ee <_printf_i+0x76>
 80046e6:	2a75      	cmp	r2, #117	; 0x75
 80046e8:	d021      	beq.n	800472e <_printf_i+0xb6>
 80046ea:	2a78      	cmp	r2, #120	; 0x78
 80046ec:	d1dc      	bne.n	80046a8 <_printf_i+0x30>
 80046ee:	2278      	movs	r2, #120	; 0x78
 80046f0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80046f4:	496e      	ldr	r1, [pc, #440]	; (80048b0 <_printf_i+0x238>)
 80046f6:	e064      	b.n	80047c2 <_printf_i+0x14a>
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80046fe:	1d11      	adds	r1, r2, #4
 8004700:	6019      	str	r1, [r3, #0]
 8004702:	6813      	ldr	r3, [r2, #0]
 8004704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004708:	2301      	movs	r3, #1
 800470a:	e0a3      	b.n	8004854 <_printf_i+0x1dc>
 800470c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004710:	f102 0104 	add.w	r1, r2, #4
 8004714:	6019      	str	r1, [r3, #0]
 8004716:	d0d7      	beq.n	80046c8 <_printf_i+0x50>
 8004718:	f9b2 3000 	ldrsh.w	r3, [r2]
 800471c:	2b00      	cmp	r3, #0
 800471e:	da03      	bge.n	8004728 <_printf_i+0xb0>
 8004720:	222d      	movs	r2, #45	; 0x2d
 8004722:	425b      	negs	r3, r3
 8004724:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004728:	4962      	ldr	r1, [pc, #392]	; (80048b4 <_printf_i+0x23c>)
 800472a:	220a      	movs	r2, #10
 800472c:	e017      	b.n	800475e <_printf_i+0xe6>
 800472e:	6820      	ldr	r0, [r4, #0]
 8004730:	6819      	ldr	r1, [r3, #0]
 8004732:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004736:	d003      	beq.n	8004740 <_printf_i+0xc8>
 8004738:	1d08      	adds	r0, r1, #4
 800473a:	6018      	str	r0, [r3, #0]
 800473c:	680b      	ldr	r3, [r1, #0]
 800473e:	e006      	b.n	800474e <_printf_i+0xd6>
 8004740:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004744:	f101 0004 	add.w	r0, r1, #4
 8004748:	6018      	str	r0, [r3, #0]
 800474a:	d0f7      	beq.n	800473c <_printf_i+0xc4>
 800474c:	880b      	ldrh	r3, [r1, #0]
 800474e:	4959      	ldr	r1, [pc, #356]	; (80048b4 <_printf_i+0x23c>)
 8004750:	2a6f      	cmp	r2, #111	; 0x6f
 8004752:	bf14      	ite	ne
 8004754:	220a      	movne	r2, #10
 8004756:	2208      	moveq	r2, #8
 8004758:	2000      	movs	r0, #0
 800475a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800475e:	6865      	ldr	r5, [r4, #4]
 8004760:	60a5      	str	r5, [r4, #8]
 8004762:	2d00      	cmp	r5, #0
 8004764:	f2c0 809c 	blt.w	80048a0 <_printf_i+0x228>
 8004768:	6820      	ldr	r0, [r4, #0]
 800476a:	f020 0004 	bic.w	r0, r0, #4
 800476e:	6020      	str	r0, [r4, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d13f      	bne.n	80047f4 <_printf_i+0x17c>
 8004774:	2d00      	cmp	r5, #0
 8004776:	f040 8095 	bne.w	80048a4 <_printf_i+0x22c>
 800477a:	4675      	mov	r5, lr
 800477c:	2a08      	cmp	r2, #8
 800477e:	d10b      	bne.n	8004798 <_printf_i+0x120>
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	07da      	lsls	r2, r3, #31
 8004784:	d508      	bpl.n	8004798 <_printf_i+0x120>
 8004786:	6923      	ldr	r3, [r4, #16]
 8004788:	6862      	ldr	r2, [r4, #4]
 800478a:	429a      	cmp	r2, r3
 800478c:	bfde      	ittt	le
 800478e:	2330      	movle	r3, #48	; 0x30
 8004790:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004794:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004798:	ebae 0305 	sub.w	r3, lr, r5
 800479c:	6123      	str	r3, [r4, #16]
 800479e:	f8cd 8000 	str.w	r8, [sp]
 80047a2:	463b      	mov	r3, r7
 80047a4:	aa03      	add	r2, sp, #12
 80047a6:	4621      	mov	r1, r4
 80047a8:	4630      	mov	r0, r6
 80047aa:	f7ff feef 	bl	800458c <_printf_common>
 80047ae:	3001      	adds	r0, #1
 80047b0:	d155      	bne.n	800485e <_printf_i+0x1e6>
 80047b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047b6:	b005      	add	sp, #20
 80047b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047bc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80047c0:	493c      	ldr	r1, [pc, #240]	; (80048b4 <_printf_i+0x23c>)
 80047c2:	6822      	ldr	r2, [r4, #0]
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80047ca:	f100 0504 	add.w	r5, r0, #4
 80047ce:	601d      	str	r5, [r3, #0]
 80047d0:	d001      	beq.n	80047d6 <_printf_i+0x15e>
 80047d2:	6803      	ldr	r3, [r0, #0]
 80047d4:	e002      	b.n	80047dc <_printf_i+0x164>
 80047d6:	0655      	lsls	r5, r2, #25
 80047d8:	d5fb      	bpl.n	80047d2 <_printf_i+0x15a>
 80047da:	8803      	ldrh	r3, [r0, #0]
 80047dc:	07d0      	lsls	r0, r2, #31
 80047de:	bf44      	itt	mi
 80047e0:	f042 0220 	orrmi.w	r2, r2, #32
 80047e4:	6022      	strmi	r2, [r4, #0]
 80047e6:	b91b      	cbnz	r3, 80047f0 <_printf_i+0x178>
 80047e8:	6822      	ldr	r2, [r4, #0]
 80047ea:	f022 0220 	bic.w	r2, r2, #32
 80047ee:	6022      	str	r2, [r4, #0]
 80047f0:	2210      	movs	r2, #16
 80047f2:	e7b1      	b.n	8004758 <_printf_i+0xe0>
 80047f4:	4675      	mov	r5, lr
 80047f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80047fa:	fb02 3310 	mls	r3, r2, r0, r3
 80047fe:	5ccb      	ldrb	r3, [r1, r3]
 8004800:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004804:	4603      	mov	r3, r0
 8004806:	2800      	cmp	r0, #0
 8004808:	d1f5      	bne.n	80047f6 <_printf_i+0x17e>
 800480a:	e7b7      	b.n	800477c <_printf_i+0x104>
 800480c:	6808      	ldr	r0, [r1, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	6949      	ldr	r1, [r1, #20]
 8004812:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004816:	d004      	beq.n	8004822 <_printf_i+0x1aa>
 8004818:	1d10      	adds	r0, r2, #4
 800481a:	6018      	str	r0, [r3, #0]
 800481c:	6813      	ldr	r3, [r2, #0]
 800481e:	6019      	str	r1, [r3, #0]
 8004820:	e007      	b.n	8004832 <_printf_i+0x1ba>
 8004822:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004826:	f102 0004 	add.w	r0, r2, #4
 800482a:	6018      	str	r0, [r3, #0]
 800482c:	6813      	ldr	r3, [r2, #0]
 800482e:	d0f6      	beq.n	800481e <_printf_i+0x1a6>
 8004830:	8019      	strh	r1, [r3, #0]
 8004832:	2300      	movs	r3, #0
 8004834:	6123      	str	r3, [r4, #16]
 8004836:	4675      	mov	r5, lr
 8004838:	e7b1      	b.n	800479e <_printf_i+0x126>
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	1d11      	adds	r1, r2, #4
 800483e:	6019      	str	r1, [r3, #0]
 8004840:	6815      	ldr	r5, [r2, #0]
 8004842:	6862      	ldr	r2, [r4, #4]
 8004844:	2100      	movs	r1, #0
 8004846:	4628      	mov	r0, r5
 8004848:	f7fb fcd2 	bl	80001f0 <memchr>
 800484c:	b108      	cbz	r0, 8004852 <_printf_i+0x1da>
 800484e:	1b40      	subs	r0, r0, r5
 8004850:	6060      	str	r0, [r4, #4]
 8004852:	6863      	ldr	r3, [r4, #4]
 8004854:	6123      	str	r3, [r4, #16]
 8004856:	2300      	movs	r3, #0
 8004858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800485c:	e79f      	b.n	800479e <_printf_i+0x126>
 800485e:	6923      	ldr	r3, [r4, #16]
 8004860:	462a      	mov	r2, r5
 8004862:	4639      	mov	r1, r7
 8004864:	4630      	mov	r0, r6
 8004866:	47c0      	blx	r8
 8004868:	3001      	adds	r0, #1
 800486a:	d0a2      	beq.n	80047b2 <_printf_i+0x13a>
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	079b      	lsls	r3, r3, #30
 8004870:	d507      	bpl.n	8004882 <_printf_i+0x20a>
 8004872:	2500      	movs	r5, #0
 8004874:	f104 0919 	add.w	r9, r4, #25
 8004878:	68e3      	ldr	r3, [r4, #12]
 800487a:	9a03      	ldr	r2, [sp, #12]
 800487c:	1a9b      	subs	r3, r3, r2
 800487e:	429d      	cmp	r5, r3
 8004880:	db05      	blt.n	800488e <_printf_i+0x216>
 8004882:	68e0      	ldr	r0, [r4, #12]
 8004884:	9b03      	ldr	r3, [sp, #12]
 8004886:	4298      	cmp	r0, r3
 8004888:	bfb8      	it	lt
 800488a:	4618      	movlt	r0, r3
 800488c:	e793      	b.n	80047b6 <_printf_i+0x13e>
 800488e:	2301      	movs	r3, #1
 8004890:	464a      	mov	r2, r9
 8004892:	4639      	mov	r1, r7
 8004894:	4630      	mov	r0, r6
 8004896:	47c0      	blx	r8
 8004898:	3001      	adds	r0, #1
 800489a:	d08a      	beq.n	80047b2 <_printf_i+0x13a>
 800489c:	3501      	adds	r5, #1
 800489e:	e7eb      	b.n	8004878 <_printf_i+0x200>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1a7      	bne.n	80047f4 <_printf_i+0x17c>
 80048a4:	780b      	ldrb	r3, [r1, #0]
 80048a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048ae:	e765      	b.n	800477c <_printf_i+0x104>
 80048b0:	08006738 	.word	0x08006738
 80048b4:	08006727 	.word	0x08006727

080048b8 <_sbrk_r>:
 80048b8:	b538      	push	{r3, r4, r5, lr}
 80048ba:	4c06      	ldr	r4, [pc, #24]	; (80048d4 <_sbrk_r+0x1c>)
 80048bc:	2300      	movs	r3, #0
 80048be:	4605      	mov	r5, r0
 80048c0:	4608      	mov	r0, r1
 80048c2:	6023      	str	r3, [r4, #0]
 80048c4:	f7fe fe8e 	bl	80035e4 <_sbrk>
 80048c8:	1c43      	adds	r3, r0, #1
 80048ca:	d102      	bne.n	80048d2 <_sbrk_r+0x1a>
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	b103      	cbz	r3, 80048d2 <_sbrk_r+0x1a>
 80048d0:	602b      	str	r3, [r5, #0]
 80048d2:	bd38      	pop	{r3, r4, r5, pc}
 80048d4:	20000390 	.word	0x20000390

080048d8 <__sread>:
 80048d8:	b510      	push	{r4, lr}
 80048da:	460c      	mov	r4, r1
 80048dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e0:	f000 f8ee 	bl	8004ac0 <_read_r>
 80048e4:	2800      	cmp	r0, #0
 80048e6:	bfab      	itete	ge
 80048e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048ea:	89a3      	ldrhlt	r3, [r4, #12]
 80048ec:	181b      	addge	r3, r3, r0
 80048ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048f2:	bfac      	ite	ge
 80048f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80048f6:	81a3      	strhlt	r3, [r4, #12]
 80048f8:	bd10      	pop	{r4, pc}

080048fa <__swrite>:
 80048fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048fe:	461f      	mov	r7, r3
 8004900:	898b      	ldrh	r3, [r1, #12]
 8004902:	05db      	lsls	r3, r3, #23
 8004904:	4605      	mov	r5, r0
 8004906:	460c      	mov	r4, r1
 8004908:	4616      	mov	r6, r2
 800490a:	d505      	bpl.n	8004918 <__swrite+0x1e>
 800490c:	2302      	movs	r3, #2
 800490e:	2200      	movs	r2, #0
 8004910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004914:	f000 f874 	bl	8004a00 <_lseek_r>
 8004918:	89a3      	ldrh	r3, [r4, #12]
 800491a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800491e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004922:	81a3      	strh	r3, [r4, #12]
 8004924:	4632      	mov	r2, r6
 8004926:	463b      	mov	r3, r7
 8004928:	4628      	mov	r0, r5
 800492a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800492e:	f000 b823 	b.w	8004978 <_write_r>

08004932 <__sseek>:
 8004932:	b510      	push	{r4, lr}
 8004934:	460c      	mov	r4, r1
 8004936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800493a:	f000 f861 	bl	8004a00 <_lseek_r>
 800493e:	1c43      	adds	r3, r0, #1
 8004940:	89a3      	ldrh	r3, [r4, #12]
 8004942:	bf15      	itete	ne
 8004944:	6560      	strne	r0, [r4, #84]	; 0x54
 8004946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800494a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800494e:	81a3      	strheq	r3, [r4, #12]
 8004950:	bf18      	it	ne
 8004952:	81a3      	strhne	r3, [r4, #12]
 8004954:	bd10      	pop	{r4, pc}

08004956 <__sclose>:
 8004956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800495a:	f000 b81f 	b.w	800499c <_close_r>

0800495e <__ascii_wctomb>:
 800495e:	b149      	cbz	r1, 8004974 <__ascii_wctomb+0x16>
 8004960:	2aff      	cmp	r2, #255	; 0xff
 8004962:	bf85      	ittet	hi
 8004964:	238a      	movhi	r3, #138	; 0x8a
 8004966:	6003      	strhi	r3, [r0, #0]
 8004968:	700a      	strbls	r2, [r1, #0]
 800496a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800496e:	bf98      	it	ls
 8004970:	2001      	movls	r0, #1
 8004972:	4770      	bx	lr
 8004974:	4608      	mov	r0, r1
 8004976:	4770      	bx	lr

08004978 <_write_r>:
 8004978:	b538      	push	{r3, r4, r5, lr}
 800497a:	4c07      	ldr	r4, [pc, #28]	; (8004998 <_write_r+0x20>)
 800497c:	4605      	mov	r5, r0
 800497e:	4608      	mov	r0, r1
 8004980:	4611      	mov	r1, r2
 8004982:	2200      	movs	r2, #0
 8004984:	6022      	str	r2, [r4, #0]
 8004986:	461a      	mov	r2, r3
 8004988:	f7fe fe12 	bl	80035b0 <_write>
 800498c:	1c43      	adds	r3, r0, #1
 800498e:	d102      	bne.n	8004996 <_write_r+0x1e>
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	b103      	cbz	r3, 8004996 <_write_r+0x1e>
 8004994:	602b      	str	r3, [r5, #0]
 8004996:	bd38      	pop	{r3, r4, r5, pc}
 8004998:	20000390 	.word	0x20000390

0800499c <_close_r>:
 800499c:	b538      	push	{r3, r4, r5, lr}
 800499e:	4c06      	ldr	r4, [pc, #24]	; (80049b8 <_close_r+0x1c>)
 80049a0:	2300      	movs	r3, #0
 80049a2:	4605      	mov	r5, r0
 80049a4:	4608      	mov	r0, r1
 80049a6:	6023      	str	r3, [r4, #0]
 80049a8:	f7fe fe36 	bl	8003618 <_close>
 80049ac:	1c43      	adds	r3, r0, #1
 80049ae:	d102      	bne.n	80049b6 <_close_r+0x1a>
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	b103      	cbz	r3, 80049b6 <_close_r+0x1a>
 80049b4:	602b      	str	r3, [r5, #0]
 80049b6:	bd38      	pop	{r3, r4, r5, pc}
 80049b8:	20000390 	.word	0x20000390

080049bc <_fstat_r>:
 80049bc:	b538      	push	{r3, r4, r5, lr}
 80049be:	4c07      	ldr	r4, [pc, #28]	; (80049dc <_fstat_r+0x20>)
 80049c0:	2300      	movs	r3, #0
 80049c2:	4605      	mov	r5, r0
 80049c4:	4608      	mov	r0, r1
 80049c6:	4611      	mov	r1, r2
 80049c8:	6023      	str	r3, [r4, #0]
 80049ca:	f7fe fe28 	bl	800361e <_fstat>
 80049ce:	1c43      	adds	r3, r0, #1
 80049d0:	d102      	bne.n	80049d8 <_fstat_r+0x1c>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	b103      	cbz	r3, 80049d8 <_fstat_r+0x1c>
 80049d6:	602b      	str	r3, [r5, #0]
 80049d8:	bd38      	pop	{r3, r4, r5, pc}
 80049da:	bf00      	nop
 80049dc:	20000390 	.word	0x20000390

080049e0 <_isatty_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	4c06      	ldr	r4, [pc, #24]	; (80049fc <_isatty_r+0x1c>)
 80049e4:	2300      	movs	r3, #0
 80049e6:	4605      	mov	r5, r0
 80049e8:	4608      	mov	r0, r1
 80049ea:	6023      	str	r3, [r4, #0]
 80049ec:	f7fe fe1c 	bl	8003628 <_isatty>
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d102      	bne.n	80049fa <_isatty_r+0x1a>
 80049f4:	6823      	ldr	r3, [r4, #0]
 80049f6:	b103      	cbz	r3, 80049fa <_isatty_r+0x1a>
 80049f8:	602b      	str	r3, [r5, #0]
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	20000390 	.word	0x20000390

08004a00 <_lseek_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4c07      	ldr	r4, [pc, #28]	; (8004a20 <_lseek_r+0x20>)
 8004a04:	4605      	mov	r5, r0
 8004a06:	4608      	mov	r0, r1
 8004a08:	4611      	mov	r1, r2
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	6022      	str	r2, [r4, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f7fe fe0c 	bl	800362c <_lseek>
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	d102      	bne.n	8004a1e <_lseek_r+0x1e>
 8004a18:	6823      	ldr	r3, [r4, #0]
 8004a1a:	b103      	cbz	r3, 8004a1e <_lseek_r+0x1e>
 8004a1c:	602b      	str	r3, [r5, #0]
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	20000390 	.word	0x20000390

08004a24 <memcpy>:
 8004a24:	b510      	push	{r4, lr}
 8004a26:	1e43      	subs	r3, r0, #1
 8004a28:	440a      	add	r2, r1
 8004a2a:	4291      	cmp	r1, r2
 8004a2c:	d100      	bne.n	8004a30 <memcpy+0xc>
 8004a2e:	bd10      	pop	{r4, pc}
 8004a30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a38:	e7f7      	b.n	8004a2a <memcpy+0x6>

08004a3a <memmove>:
 8004a3a:	4288      	cmp	r0, r1
 8004a3c:	b510      	push	{r4, lr}
 8004a3e:	eb01 0302 	add.w	r3, r1, r2
 8004a42:	d803      	bhi.n	8004a4c <memmove+0x12>
 8004a44:	1e42      	subs	r2, r0, #1
 8004a46:	4299      	cmp	r1, r3
 8004a48:	d10c      	bne.n	8004a64 <memmove+0x2a>
 8004a4a:	bd10      	pop	{r4, pc}
 8004a4c:	4298      	cmp	r0, r3
 8004a4e:	d2f9      	bcs.n	8004a44 <memmove+0xa>
 8004a50:	1881      	adds	r1, r0, r2
 8004a52:	1ad2      	subs	r2, r2, r3
 8004a54:	42d3      	cmn	r3, r2
 8004a56:	d100      	bne.n	8004a5a <memmove+0x20>
 8004a58:	bd10      	pop	{r4, pc}
 8004a5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a5e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004a62:	e7f7      	b.n	8004a54 <memmove+0x1a>
 8004a64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a68:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004a6c:	e7eb      	b.n	8004a46 <memmove+0xc>

08004a6e <__malloc_lock>:
 8004a6e:	4770      	bx	lr

08004a70 <__malloc_unlock>:
 8004a70:	4770      	bx	lr

08004a72 <_realloc_r>:
 8004a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a74:	4607      	mov	r7, r0
 8004a76:	4614      	mov	r4, r2
 8004a78:	460e      	mov	r6, r1
 8004a7a:	b921      	cbnz	r1, 8004a86 <_realloc_r+0x14>
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a82:	f7ff ba95 	b.w	8003fb0 <_malloc_r>
 8004a86:	b922      	cbnz	r2, 8004a92 <_realloc_r+0x20>
 8004a88:	f7ff fa44 	bl	8003f14 <_free_r>
 8004a8c:	4625      	mov	r5, r4
 8004a8e:	4628      	mov	r0, r5
 8004a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a92:	f000 f827 	bl	8004ae4 <_malloc_usable_size_r>
 8004a96:	4284      	cmp	r4, r0
 8004a98:	d90f      	bls.n	8004aba <_realloc_r+0x48>
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	4638      	mov	r0, r7
 8004a9e:	f7ff fa87 	bl	8003fb0 <_malloc_r>
 8004aa2:	4605      	mov	r5, r0
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	d0f2      	beq.n	8004a8e <_realloc_r+0x1c>
 8004aa8:	4631      	mov	r1, r6
 8004aaa:	4622      	mov	r2, r4
 8004aac:	f7ff ffba 	bl	8004a24 <memcpy>
 8004ab0:	4631      	mov	r1, r6
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	f7ff fa2e 	bl	8003f14 <_free_r>
 8004ab8:	e7e9      	b.n	8004a8e <_realloc_r+0x1c>
 8004aba:	4635      	mov	r5, r6
 8004abc:	e7e7      	b.n	8004a8e <_realloc_r+0x1c>
	...

08004ac0 <_read_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	4c07      	ldr	r4, [pc, #28]	; (8004ae0 <_read_r+0x20>)
 8004ac4:	4605      	mov	r5, r0
 8004ac6:	4608      	mov	r0, r1
 8004ac8:	4611      	mov	r1, r2
 8004aca:	2200      	movs	r2, #0
 8004acc:	6022      	str	r2, [r4, #0]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f7fe fd60 	bl	8003594 <_read>
 8004ad4:	1c43      	adds	r3, r0, #1
 8004ad6:	d102      	bne.n	8004ade <_read_r+0x1e>
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	b103      	cbz	r3, 8004ade <_read_r+0x1e>
 8004adc:	602b      	str	r3, [r5, #0]
 8004ade:	bd38      	pop	{r3, r4, r5, pc}
 8004ae0:	20000390 	.word	0x20000390

08004ae4 <_malloc_usable_size_r>:
 8004ae4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	f1a0 0004 	sub.w	r0, r0, #4
 8004aee:	bfbc      	itt	lt
 8004af0:	580b      	ldrlt	r3, [r1, r0]
 8004af2:	18c0      	addlt	r0, r0, r3
 8004af4:	4770      	bx	lr
	...

08004af8 <atan>:
 8004af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afc:	ec55 4b10 	vmov	r4, r5, d0
 8004b00:	4bc7      	ldr	r3, [pc, #796]	; (8004e20 <atan+0x328>)
 8004b02:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004b06:	429e      	cmp	r6, r3
 8004b08:	46ab      	mov	fp, r5
 8004b0a:	dd18      	ble.n	8004b3e <atan+0x46>
 8004b0c:	4ac5      	ldr	r2, [pc, #788]	; (8004e24 <atan+0x32c>)
 8004b0e:	4296      	cmp	r6, r2
 8004b10:	dc01      	bgt.n	8004b16 <atan+0x1e>
 8004b12:	d109      	bne.n	8004b28 <atan+0x30>
 8004b14:	b144      	cbz	r4, 8004b28 <atan+0x30>
 8004b16:	4622      	mov	r2, r4
 8004b18:	462b      	mov	r3, r5
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	f7fb fbbd 	bl	800029c <__adddf3>
 8004b22:	4604      	mov	r4, r0
 8004b24:	460d      	mov	r5, r1
 8004b26:	e006      	b.n	8004b36 <atan+0x3e>
 8004b28:	f1bb 0f00 	cmp.w	fp, #0
 8004b2c:	f300 813a 	bgt.w	8004da4 <atan+0x2ac>
 8004b30:	a59f      	add	r5, pc, #636	; (adr r5, 8004db0 <atan+0x2b8>)
 8004b32:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004b36:	ec45 4b10 	vmov	d0, r4, r5
 8004b3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b3e:	4bba      	ldr	r3, [pc, #744]	; (8004e28 <atan+0x330>)
 8004b40:	429e      	cmp	r6, r3
 8004b42:	dc14      	bgt.n	8004b6e <atan+0x76>
 8004b44:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004b48:	429e      	cmp	r6, r3
 8004b4a:	dc0d      	bgt.n	8004b68 <atan+0x70>
 8004b4c:	a39a      	add	r3, pc, #616	; (adr r3, 8004db8 <atan+0x2c0>)
 8004b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b52:	ee10 0a10 	vmov	r0, s0
 8004b56:	4629      	mov	r1, r5
 8004b58:	f7fb fba0 	bl	800029c <__adddf3>
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	4bb3      	ldr	r3, [pc, #716]	; (8004e2c <atan+0x334>)
 8004b60:	f7fb ffde 	bl	8000b20 <__aeabi_dcmpgt>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d1e6      	bne.n	8004b36 <atan+0x3e>
 8004b68:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004b6c:	e02b      	b.n	8004bc6 <atan+0xce>
 8004b6e:	f000 f9af 	bl	8004ed0 <fabs>
 8004b72:	4baf      	ldr	r3, [pc, #700]	; (8004e30 <atan+0x338>)
 8004b74:	429e      	cmp	r6, r3
 8004b76:	ec55 4b10 	vmov	r4, r5, d0
 8004b7a:	f300 80bf 	bgt.w	8004cfc <atan+0x204>
 8004b7e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004b82:	429e      	cmp	r6, r3
 8004b84:	f300 80a0 	bgt.w	8004cc8 <atan+0x1d0>
 8004b88:	ee10 2a10 	vmov	r2, s0
 8004b8c:	ee10 0a10 	vmov	r0, s0
 8004b90:	462b      	mov	r3, r5
 8004b92:	4629      	mov	r1, r5
 8004b94:	f7fb fb82 	bl	800029c <__adddf3>
 8004b98:	2200      	movs	r2, #0
 8004b9a:	4ba4      	ldr	r3, [pc, #656]	; (8004e2c <atan+0x334>)
 8004b9c:	f7fb fb7c 	bl	8000298 <__aeabi_dsub>
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	4606      	mov	r6, r0
 8004ba4:	460f      	mov	r7, r1
 8004ba6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004baa:	4620      	mov	r0, r4
 8004bac:	4629      	mov	r1, r5
 8004bae:	f7fb fb75 	bl	800029c <__adddf3>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	4639      	mov	r1, r7
 8004bba:	f7fb fe4b 	bl	8000854 <__aeabi_ddiv>
 8004bbe:	f04f 0a00 	mov.w	sl, #0
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	460d      	mov	r5, r1
 8004bc6:	4622      	mov	r2, r4
 8004bc8:	462b      	mov	r3, r5
 8004bca:	4620      	mov	r0, r4
 8004bcc:	4629      	mov	r1, r5
 8004bce:	f7fb fd17 	bl	8000600 <__aeabi_dmul>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4680      	mov	r8, r0
 8004bd8:	4689      	mov	r9, r1
 8004bda:	f7fb fd11 	bl	8000600 <__aeabi_dmul>
 8004bde:	a378      	add	r3, pc, #480	; (adr r3, 8004dc0 <atan+0x2c8>)
 8004be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be4:	4606      	mov	r6, r0
 8004be6:	460f      	mov	r7, r1
 8004be8:	f7fb fd0a 	bl	8000600 <__aeabi_dmul>
 8004bec:	a376      	add	r3, pc, #472	; (adr r3, 8004dc8 <atan+0x2d0>)
 8004bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf2:	f7fb fb53 	bl	800029c <__adddf3>
 8004bf6:	4632      	mov	r2, r6
 8004bf8:	463b      	mov	r3, r7
 8004bfa:	f7fb fd01 	bl	8000600 <__aeabi_dmul>
 8004bfe:	a374      	add	r3, pc, #464	; (adr r3, 8004dd0 <atan+0x2d8>)
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f7fb fb4a 	bl	800029c <__adddf3>
 8004c08:	4632      	mov	r2, r6
 8004c0a:	463b      	mov	r3, r7
 8004c0c:	f7fb fcf8 	bl	8000600 <__aeabi_dmul>
 8004c10:	a371      	add	r3, pc, #452	; (adr r3, 8004dd8 <atan+0x2e0>)
 8004c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c16:	f7fb fb41 	bl	800029c <__adddf3>
 8004c1a:	4632      	mov	r2, r6
 8004c1c:	463b      	mov	r3, r7
 8004c1e:	f7fb fcef 	bl	8000600 <__aeabi_dmul>
 8004c22:	a36f      	add	r3, pc, #444	; (adr r3, 8004de0 <atan+0x2e8>)
 8004c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c28:	f7fb fb38 	bl	800029c <__adddf3>
 8004c2c:	4632      	mov	r2, r6
 8004c2e:	463b      	mov	r3, r7
 8004c30:	f7fb fce6 	bl	8000600 <__aeabi_dmul>
 8004c34:	a36c      	add	r3, pc, #432	; (adr r3, 8004de8 <atan+0x2f0>)
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	f7fb fb2f 	bl	800029c <__adddf3>
 8004c3e:	4642      	mov	r2, r8
 8004c40:	464b      	mov	r3, r9
 8004c42:	f7fb fcdd 	bl	8000600 <__aeabi_dmul>
 8004c46:	a36a      	add	r3, pc, #424	; (adr r3, 8004df0 <atan+0x2f8>)
 8004c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4c:	4680      	mov	r8, r0
 8004c4e:	4689      	mov	r9, r1
 8004c50:	4630      	mov	r0, r6
 8004c52:	4639      	mov	r1, r7
 8004c54:	f7fb fcd4 	bl	8000600 <__aeabi_dmul>
 8004c58:	a367      	add	r3, pc, #412	; (adr r3, 8004df8 <atan+0x300>)
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f7fb fb1b 	bl	8000298 <__aeabi_dsub>
 8004c62:	4632      	mov	r2, r6
 8004c64:	463b      	mov	r3, r7
 8004c66:	f7fb fccb 	bl	8000600 <__aeabi_dmul>
 8004c6a:	a365      	add	r3, pc, #404	; (adr r3, 8004e00 <atan+0x308>)
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	f7fb fb12 	bl	8000298 <__aeabi_dsub>
 8004c74:	4632      	mov	r2, r6
 8004c76:	463b      	mov	r3, r7
 8004c78:	f7fb fcc2 	bl	8000600 <__aeabi_dmul>
 8004c7c:	a362      	add	r3, pc, #392	; (adr r3, 8004e08 <atan+0x310>)
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f7fb fb09 	bl	8000298 <__aeabi_dsub>
 8004c86:	4632      	mov	r2, r6
 8004c88:	463b      	mov	r3, r7
 8004c8a:	f7fb fcb9 	bl	8000600 <__aeabi_dmul>
 8004c8e:	a360      	add	r3, pc, #384	; (adr r3, 8004e10 <atan+0x318>)
 8004c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c94:	f7fb fb00 	bl	8000298 <__aeabi_dsub>
 8004c98:	4632      	mov	r2, r6
 8004c9a:	463b      	mov	r3, r7
 8004c9c:	f7fb fcb0 	bl	8000600 <__aeabi_dmul>
 8004ca0:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	d155      	bne.n	8004d56 <atan+0x25e>
 8004caa:	4640      	mov	r0, r8
 8004cac:	4649      	mov	r1, r9
 8004cae:	f7fb faf5 	bl	800029c <__adddf3>
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	462b      	mov	r3, r5
 8004cb6:	f7fb fca3 	bl	8000600 <__aeabi_dmul>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	f7fb fae9 	bl	8000298 <__aeabi_dsub>
 8004cc6:	e72c      	b.n	8004b22 <atan+0x2a>
 8004cc8:	ee10 0a10 	vmov	r0, s0
 8004ccc:	2200      	movs	r2, #0
 8004cce:	4b57      	ldr	r3, [pc, #348]	; (8004e2c <atan+0x334>)
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	f7fb fae1 	bl	8000298 <__aeabi_dsub>
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	4606      	mov	r6, r0
 8004cda:	460f      	mov	r7, r1
 8004cdc:	4b53      	ldr	r3, [pc, #332]	; (8004e2c <atan+0x334>)
 8004cde:	4620      	mov	r0, r4
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	f7fb fadb 	bl	800029c <__adddf3>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4630      	mov	r0, r6
 8004cec:	4639      	mov	r1, r7
 8004cee:	f7fb fdb1 	bl	8000854 <__aeabi_ddiv>
 8004cf2:	f04f 0a01 	mov.w	sl, #1
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	460d      	mov	r5, r1
 8004cfa:	e764      	b.n	8004bc6 <atan+0xce>
 8004cfc:	4b4d      	ldr	r3, [pc, #308]	; (8004e34 <atan+0x33c>)
 8004cfe:	429e      	cmp	r6, r3
 8004d00:	dc1d      	bgt.n	8004d3e <atan+0x246>
 8004d02:	ee10 0a10 	vmov	r0, s0
 8004d06:	2200      	movs	r2, #0
 8004d08:	4b4b      	ldr	r3, [pc, #300]	; (8004e38 <atan+0x340>)
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	f7fb fac4 	bl	8000298 <__aeabi_dsub>
 8004d10:	2200      	movs	r2, #0
 8004d12:	4606      	mov	r6, r0
 8004d14:	460f      	mov	r7, r1
 8004d16:	4b48      	ldr	r3, [pc, #288]	; (8004e38 <atan+0x340>)
 8004d18:	4620      	mov	r0, r4
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	f7fb fc70 	bl	8000600 <__aeabi_dmul>
 8004d20:	2200      	movs	r2, #0
 8004d22:	4b42      	ldr	r3, [pc, #264]	; (8004e2c <atan+0x334>)
 8004d24:	f7fb faba 	bl	800029c <__adddf3>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4630      	mov	r0, r6
 8004d2e:	4639      	mov	r1, r7
 8004d30:	f7fb fd90 	bl	8000854 <__aeabi_ddiv>
 8004d34:	f04f 0a02 	mov.w	sl, #2
 8004d38:	4604      	mov	r4, r0
 8004d3a:	460d      	mov	r5, r1
 8004d3c:	e743      	b.n	8004bc6 <atan+0xce>
 8004d3e:	462b      	mov	r3, r5
 8004d40:	ee10 2a10 	vmov	r2, s0
 8004d44:	2000      	movs	r0, #0
 8004d46:	493d      	ldr	r1, [pc, #244]	; (8004e3c <atan+0x344>)
 8004d48:	f7fb fd84 	bl	8000854 <__aeabi_ddiv>
 8004d4c:	f04f 0a03 	mov.w	sl, #3
 8004d50:	4604      	mov	r4, r0
 8004d52:	460d      	mov	r5, r1
 8004d54:	e737      	b.n	8004bc6 <atan+0xce>
 8004d56:	4640      	mov	r0, r8
 8004d58:	4649      	mov	r1, r9
 8004d5a:	f7fb fa9f 	bl	800029c <__adddf3>
 8004d5e:	4622      	mov	r2, r4
 8004d60:	462b      	mov	r3, r5
 8004d62:	f7fb fc4d 	bl	8000600 <__aeabi_dmul>
 8004d66:	4e36      	ldr	r6, [pc, #216]	; (8004e40 <atan+0x348>)
 8004d68:	4b36      	ldr	r3, [pc, #216]	; (8004e44 <atan+0x34c>)
 8004d6a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8004d6e:	4456      	add	r6, sl
 8004d70:	449a      	add	sl, r3
 8004d72:	e9da 2300 	ldrd	r2, r3, [sl]
 8004d76:	f7fb fa8f 	bl	8000298 <__aeabi_dsub>
 8004d7a:	4622      	mov	r2, r4
 8004d7c:	462b      	mov	r3, r5
 8004d7e:	f7fb fa8b 	bl	8000298 <__aeabi_dsub>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	e9d6 0100 	ldrd	r0, r1, [r6]
 8004d8a:	f7fb fa85 	bl	8000298 <__aeabi_dsub>
 8004d8e:	f1bb 0f00 	cmp.w	fp, #0
 8004d92:	4604      	mov	r4, r0
 8004d94:	460d      	mov	r5, r1
 8004d96:	f6bf aece 	bge.w	8004b36 <atan+0x3e>
 8004d9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d9e:	4604      	mov	r4, r0
 8004da0:	461d      	mov	r5, r3
 8004da2:	e6c8      	b.n	8004b36 <atan+0x3e>
 8004da4:	a51c      	add	r5, pc, #112	; (adr r5, 8004e18 <atan+0x320>)
 8004da6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004daa:	e6c4      	b.n	8004b36 <atan+0x3e>
 8004dac:	f3af 8000 	nop.w
 8004db0:	54442d18 	.word	0x54442d18
 8004db4:	bff921fb 	.word	0xbff921fb
 8004db8:	8800759c 	.word	0x8800759c
 8004dbc:	7e37e43c 	.word	0x7e37e43c
 8004dc0:	e322da11 	.word	0xe322da11
 8004dc4:	3f90ad3a 	.word	0x3f90ad3a
 8004dc8:	24760deb 	.word	0x24760deb
 8004dcc:	3fa97b4b 	.word	0x3fa97b4b
 8004dd0:	a0d03d51 	.word	0xa0d03d51
 8004dd4:	3fb10d66 	.word	0x3fb10d66
 8004dd8:	c54c206e 	.word	0xc54c206e
 8004ddc:	3fb745cd 	.word	0x3fb745cd
 8004de0:	920083ff 	.word	0x920083ff
 8004de4:	3fc24924 	.word	0x3fc24924
 8004de8:	5555550d 	.word	0x5555550d
 8004dec:	3fd55555 	.word	0x3fd55555
 8004df0:	2c6a6c2f 	.word	0x2c6a6c2f
 8004df4:	bfa2b444 	.word	0xbfa2b444
 8004df8:	52defd9a 	.word	0x52defd9a
 8004dfc:	3fadde2d 	.word	0x3fadde2d
 8004e00:	af749a6d 	.word	0xaf749a6d
 8004e04:	3fb3b0f2 	.word	0x3fb3b0f2
 8004e08:	fe231671 	.word	0xfe231671
 8004e0c:	3fbc71c6 	.word	0x3fbc71c6
 8004e10:	9998ebc4 	.word	0x9998ebc4
 8004e14:	3fc99999 	.word	0x3fc99999
 8004e18:	54442d18 	.word	0x54442d18
 8004e1c:	3ff921fb 	.word	0x3ff921fb
 8004e20:	440fffff 	.word	0x440fffff
 8004e24:	7ff00000 	.word	0x7ff00000
 8004e28:	3fdbffff 	.word	0x3fdbffff
 8004e2c:	3ff00000 	.word	0x3ff00000
 8004e30:	3ff2ffff 	.word	0x3ff2ffff
 8004e34:	40037fff 	.word	0x40037fff
 8004e38:	3ff80000 	.word	0x3ff80000
 8004e3c:	bff00000 	.word	0xbff00000
 8004e40:	08006850 	.word	0x08006850
 8004e44:	08006870 	.word	0x08006870

08004e48 <cos>:
 8004e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e4a:	ec51 0b10 	vmov	r0, r1, d0
 8004e4e:	4a1e      	ldr	r2, [pc, #120]	; (8004ec8 <cos+0x80>)
 8004e50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004e54:	4293      	cmp	r3, r2
 8004e56:	dc06      	bgt.n	8004e66 <cos+0x1e>
 8004e58:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8004ec0 <cos+0x78>
 8004e5c:	f000 fc64 	bl	8005728 <__kernel_cos>
 8004e60:	ec51 0b10 	vmov	r0, r1, d0
 8004e64:	e007      	b.n	8004e76 <cos+0x2e>
 8004e66:	4a19      	ldr	r2, [pc, #100]	; (8004ecc <cos+0x84>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	dd09      	ble.n	8004e80 <cos+0x38>
 8004e6c:	ee10 2a10 	vmov	r2, s0
 8004e70:	460b      	mov	r3, r1
 8004e72:	f7fb fa11 	bl	8000298 <__aeabi_dsub>
 8004e76:	ec41 0b10 	vmov	d0, r0, r1
 8004e7a:	b005      	add	sp, #20
 8004e7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e80:	4668      	mov	r0, sp
 8004e82:	f000 f9ad 	bl	80051e0 <__ieee754_rem_pio2>
 8004e86:	f000 0003 	and.w	r0, r0, #3
 8004e8a:	2801      	cmp	r0, #1
 8004e8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004e90:	ed9d 0b00 	vldr	d0, [sp]
 8004e94:	d007      	beq.n	8004ea6 <cos+0x5e>
 8004e96:	2802      	cmp	r0, #2
 8004e98:	d00e      	beq.n	8004eb8 <cos+0x70>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d0de      	beq.n	8004e5c <cos+0x14>
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	f001 f87a 	bl	8005f98 <__kernel_sin>
 8004ea4:	e7dc      	b.n	8004e60 <cos+0x18>
 8004ea6:	f001 f877 	bl	8005f98 <__kernel_sin>
 8004eaa:	ec53 2b10 	vmov	r2, r3, d0
 8004eae:	ee10 0a10 	vmov	r0, s0
 8004eb2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004eb6:	e7de      	b.n	8004e76 <cos+0x2e>
 8004eb8:	f000 fc36 	bl	8005728 <__kernel_cos>
 8004ebc:	e7f5      	b.n	8004eaa <cos+0x62>
 8004ebe:	bf00      	nop
	...
 8004ec8:	3fe921fb 	.word	0x3fe921fb
 8004ecc:	7fefffff 	.word	0x7fefffff

08004ed0 <fabs>:
 8004ed0:	ec53 2b10 	vmov	r2, r3, d0
 8004ed4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ed8:	ec43 2b10 	vmov	d0, r2, r3
 8004edc:	4770      	bx	lr
	...

08004ee0 <sin>:
 8004ee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ee2:	ec51 0b10 	vmov	r0, r1, d0
 8004ee6:	4a20      	ldr	r2, [pc, #128]	; (8004f68 <sin+0x88>)
 8004ee8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004eec:	4293      	cmp	r3, r2
 8004eee:	dc07      	bgt.n	8004f00 <sin+0x20>
 8004ef0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8004f60 <sin+0x80>
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	f001 f84f 	bl	8005f98 <__kernel_sin>
 8004efa:	ec51 0b10 	vmov	r0, r1, d0
 8004efe:	e007      	b.n	8004f10 <sin+0x30>
 8004f00:	4a1a      	ldr	r2, [pc, #104]	; (8004f6c <sin+0x8c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	dd09      	ble.n	8004f1a <sin+0x3a>
 8004f06:	ee10 2a10 	vmov	r2, s0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	f7fb f9c4 	bl	8000298 <__aeabi_dsub>
 8004f10:	ec41 0b10 	vmov	d0, r0, r1
 8004f14:	b005      	add	sp, #20
 8004f16:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f1a:	4668      	mov	r0, sp
 8004f1c:	f000 f960 	bl	80051e0 <__ieee754_rem_pio2>
 8004f20:	f000 0003 	and.w	r0, r0, #3
 8004f24:	2801      	cmp	r0, #1
 8004f26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004f2a:	ed9d 0b00 	vldr	d0, [sp]
 8004f2e:	d004      	beq.n	8004f3a <sin+0x5a>
 8004f30:	2802      	cmp	r0, #2
 8004f32:	d005      	beq.n	8004f40 <sin+0x60>
 8004f34:	b970      	cbnz	r0, 8004f54 <sin+0x74>
 8004f36:	2001      	movs	r0, #1
 8004f38:	e7dd      	b.n	8004ef6 <sin+0x16>
 8004f3a:	f000 fbf5 	bl	8005728 <__kernel_cos>
 8004f3e:	e7dc      	b.n	8004efa <sin+0x1a>
 8004f40:	2001      	movs	r0, #1
 8004f42:	f001 f829 	bl	8005f98 <__kernel_sin>
 8004f46:	ec53 2b10 	vmov	r2, r3, d0
 8004f4a:	ee10 0a10 	vmov	r0, s0
 8004f4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004f52:	e7dd      	b.n	8004f10 <sin+0x30>
 8004f54:	f000 fbe8 	bl	8005728 <__kernel_cos>
 8004f58:	e7f5      	b.n	8004f46 <sin+0x66>
 8004f5a:	bf00      	nop
 8004f5c:	f3af 8000 	nop.w
	...
 8004f68:	3fe921fb 	.word	0x3fe921fb
 8004f6c:	7fefffff 	.word	0x7fefffff

08004f70 <atan2>:
 8004f70:	f000 b85a 	b.w	8005028 <__ieee754_atan2>

08004f74 <sqrt>:
 8004f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f78:	ed2d 8b02 	vpush	{d8}
 8004f7c:	b08b      	sub	sp, #44	; 0x2c
 8004f7e:	ec55 4b10 	vmov	r4, r5, d0
 8004f82:	f000 fb1f 	bl	80055c4 <__ieee754_sqrt>
 8004f86:	4b26      	ldr	r3, [pc, #152]	; (8005020 <sqrt+0xac>)
 8004f88:	eeb0 8a40 	vmov.f32	s16, s0
 8004f8c:	eef0 8a60 	vmov.f32	s17, s1
 8004f90:	f993 6000 	ldrsb.w	r6, [r3]
 8004f94:	1c73      	adds	r3, r6, #1
 8004f96:	d02a      	beq.n	8004fee <sqrt+0x7a>
 8004f98:	4622      	mov	r2, r4
 8004f9a:	462b      	mov	r3, r5
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	4629      	mov	r1, r5
 8004fa0:	f7fb fdc8 	bl	8000b34 <__aeabi_dcmpun>
 8004fa4:	4607      	mov	r7, r0
 8004fa6:	bb10      	cbnz	r0, 8004fee <sqrt+0x7a>
 8004fa8:	f04f 0800 	mov.w	r8, #0
 8004fac:	f04f 0900 	mov.w	r9, #0
 8004fb0:	4642      	mov	r2, r8
 8004fb2:	464b      	mov	r3, r9
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	f7fb fd94 	bl	8000ae4 <__aeabi_dcmplt>
 8004fbc:	b1b8      	cbz	r0, 8004fee <sqrt+0x7a>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	4b18      	ldr	r3, [pc, #96]	; (8005024 <sqrt+0xb0>)
 8004fc4:	9301      	str	r3, [sp, #4]
 8004fc6:	9708      	str	r7, [sp, #32]
 8004fc8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004fcc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004fd0:	b9b6      	cbnz	r6, 8005000 <sqrt+0x8c>
 8004fd2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004fd6:	4668      	mov	r0, sp
 8004fd8:	f001 f91e 	bl	8006218 <matherr>
 8004fdc:	b1d0      	cbz	r0, 8005014 <sqrt+0xa0>
 8004fde:	9b08      	ldr	r3, [sp, #32]
 8004fe0:	b11b      	cbz	r3, 8004fea <sqrt+0x76>
 8004fe2:	f7fe fb79 	bl	80036d8 <__errno>
 8004fe6:	9b08      	ldr	r3, [sp, #32]
 8004fe8:	6003      	str	r3, [r0, #0]
 8004fea:	ed9d 8b06 	vldr	d8, [sp, #24]
 8004fee:	eeb0 0a48 	vmov.f32	s0, s16
 8004ff2:	eef0 0a68 	vmov.f32	s1, s17
 8004ff6:	b00b      	add	sp, #44	; 0x2c
 8004ff8:	ecbd 8b02 	vpop	{d8}
 8004ffc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005000:	4642      	mov	r2, r8
 8005002:	464b      	mov	r3, r9
 8005004:	4640      	mov	r0, r8
 8005006:	4649      	mov	r1, r9
 8005008:	f7fb fc24 	bl	8000854 <__aeabi_ddiv>
 800500c:	2e02      	cmp	r6, #2
 800500e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005012:	d1e0      	bne.n	8004fd6 <sqrt+0x62>
 8005014:	f7fe fb60 	bl	80036d8 <__errno>
 8005018:	2321      	movs	r3, #33	; 0x21
 800501a:	6003      	str	r3, [r0, #0]
 800501c:	e7df      	b.n	8004fde <sqrt+0x6a>
 800501e:	bf00      	nop
 8005020:	2000021c 	.word	0x2000021c
 8005024:	08006890 	.word	0x08006890

08005028 <__ieee754_atan2>:
 8005028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800502c:	ec57 6b11 	vmov	r6, r7, d1
 8005030:	4273      	negs	r3, r6
 8005032:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8005036:	4333      	orrs	r3, r6
 8005038:	f8df c19c 	ldr.w	ip, [pc, #412]	; 80051d8 <__ieee754_atan2+0x1b0>
 800503c:	ec51 0b10 	vmov	r0, r1, d0
 8005040:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005044:	4563      	cmp	r3, ip
 8005046:	ee11 8a10 	vmov	r8, s2
 800504a:	ee10 9a10 	vmov	r9, s0
 800504e:	468e      	mov	lr, r1
 8005050:	d807      	bhi.n	8005062 <__ieee754_atan2+0x3a>
 8005052:	4244      	negs	r4, r0
 8005054:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005058:	4304      	orrs	r4, r0
 800505a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800505e:	4564      	cmp	r4, ip
 8005060:	d907      	bls.n	8005072 <__ieee754_atan2+0x4a>
 8005062:	4632      	mov	r2, r6
 8005064:	463b      	mov	r3, r7
 8005066:	f7fb f919 	bl	800029c <__adddf3>
 800506a:	ec41 0b10 	vmov	d0, r0, r1
 800506e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005072:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8005076:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800507a:	4334      	orrs	r4, r6
 800507c:	d103      	bne.n	8005086 <__ieee754_atan2+0x5e>
 800507e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005082:	f7ff bd39 	b.w	8004af8 <atan>
 8005086:	17bc      	asrs	r4, r7, #30
 8005088:	f004 0402 	and.w	r4, r4, #2
 800508c:	ea59 0903 	orrs.w	r9, r9, r3
 8005090:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8005094:	d107      	bne.n	80050a6 <__ieee754_atan2+0x7e>
 8005096:	2c02      	cmp	r4, #2
 8005098:	d030      	beq.n	80050fc <__ieee754_atan2+0xd4>
 800509a:	2c03      	cmp	r4, #3
 800509c:	d1e5      	bne.n	800506a <__ieee754_atan2+0x42>
 800509e:	a13c      	add	r1, pc, #240	; (adr r1, 8005190 <__ieee754_atan2+0x168>)
 80050a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050a4:	e7e1      	b.n	800506a <__ieee754_atan2+0x42>
 80050a6:	ea58 0802 	orrs.w	r8, r8, r2
 80050aa:	d106      	bne.n	80050ba <__ieee754_atan2+0x92>
 80050ac:	f1be 0f00 	cmp.w	lr, #0
 80050b0:	da6a      	bge.n	8005188 <__ieee754_atan2+0x160>
 80050b2:	a139      	add	r1, pc, #228	; (adr r1, 8005198 <__ieee754_atan2+0x170>)
 80050b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050b8:	e7d7      	b.n	800506a <__ieee754_atan2+0x42>
 80050ba:	4562      	cmp	r2, ip
 80050bc:	d122      	bne.n	8005104 <__ieee754_atan2+0xdc>
 80050be:	4293      	cmp	r3, r2
 80050c0:	d111      	bne.n	80050e6 <__ieee754_atan2+0xbe>
 80050c2:	2c02      	cmp	r4, #2
 80050c4:	d007      	beq.n	80050d6 <__ieee754_atan2+0xae>
 80050c6:	2c03      	cmp	r4, #3
 80050c8:	d009      	beq.n	80050de <__ieee754_atan2+0xb6>
 80050ca:	2c01      	cmp	r4, #1
 80050cc:	d156      	bne.n	800517c <__ieee754_atan2+0x154>
 80050ce:	a134      	add	r1, pc, #208	; (adr r1, 80051a0 <__ieee754_atan2+0x178>)
 80050d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050d4:	e7c9      	b.n	800506a <__ieee754_atan2+0x42>
 80050d6:	a134      	add	r1, pc, #208	; (adr r1, 80051a8 <__ieee754_atan2+0x180>)
 80050d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050dc:	e7c5      	b.n	800506a <__ieee754_atan2+0x42>
 80050de:	a134      	add	r1, pc, #208	; (adr r1, 80051b0 <__ieee754_atan2+0x188>)
 80050e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050e4:	e7c1      	b.n	800506a <__ieee754_atan2+0x42>
 80050e6:	2c02      	cmp	r4, #2
 80050e8:	d008      	beq.n	80050fc <__ieee754_atan2+0xd4>
 80050ea:	2c03      	cmp	r4, #3
 80050ec:	d0d7      	beq.n	800509e <__ieee754_atan2+0x76>
 80050ee:	2c01      	cmp	r4, #1
 80050f0:	f04f 0000 	mov.w	r0, #0
 80050f4:	d146      	bne.n	8005184 <__ieee754_atan2+0x15c>
 80050f6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80050fa:	e7b6      	b.n	800506a <__ieee754_atan2+0x42>
 80050fc:	a12e      	add	r1, pc, #184	; (adr r1, 80051b8 <__ieee754_atan2+0x190>)
 80050fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005102:	e7b2      	b.n	800506a <__ieee754_atan2+0x42>
 8005104:	4563      	cmp	r3, ip
 8005106:	d0d1      	beq.n	80050ac <__ieee754_atan2+0x84>
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	151b      	asrs	r3, r3, #20
 800510c:	2b3c      	cmp	r3, #60	; 0x3c
 800510e:	dc1e      	bgt.n	800514e <__ieee754_atan2+0x126>
 8005110:	2f00      	cmp	r7, #0
 8005112:	da01      	bge.n	8005118 <__ieee754_atan2+0xf0>
 8005114:	333c      	adds	r3, #60	; 0x3c
 8005116:	db1e      	blt.n	8005156 <__ieee754_atan2+0x12e>
 8005118:	4632      	mov	r2, r6
 800511a:	463b      	mov	r3, r7
 800511c:	f7fb fb9a 	bl	8000854 <__aeabi_ddiv>
 8005120:	ec41 0b10 	vmov	d0, r0, r1
 8005124:	f7ff fed4 	bl	8004ed0 <fabs>
 8005128:	f7ff fce6 	bl	8004af8 <atan>
 800512c:	ec51 0b10 	vmov	r0, r1, d0
 8005130:	2c01      	cmp	r4, #1
 8005132:	d013      	beq.n	800515c <__ieee754_atan2+0x134>
 8005134:	2c02      	cmp	r4, #2
 8005136:	d014      	beq.n	8005162 <__ieee754_atan2+0x13a>
 8005138:	2c00      	cmp	r4, #0
 800513a:	d096      	beq.n	800506a <__ieee754_atan2+0x42>
 800513c:	a320      	add	r3, pc, #128	; (adr r3, 80051c0 <__ieee754_atan2+0x198>)
 800513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005142:	f7fb f8a9 	bl	8000298 <__aeabi_dsub>
 8005146:	a31c      	add	r3, pc, #112	; (adr r3, 80051b8 <__ieee754_atan2+0x190>)
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	e013      	b.n	8005176 <__ieee754_atan2+0x14e>
 800514e:	a11e      	add	r1, pc, #120	; (adr r1, 80051c8 <__ieee754_atan2+0x1a0>)
 8005150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005154:	e7ec      	b.n	8005130 <__ieee754_atan2+0x108>
 8005156:	2000      	movs	r0, #0
 8005158:	2100      	movs	r1, #0
 800515a:	e7e9      	b.n	8005130 <__ieee754_atan2+0x108>
 800515c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005160:	e783      	b.n	800506a <__ieee754_atan2+0x42>
 8005162:	a317      	add	r3, pc, #92	; (adr r3, 80051c0 <__ieee754_atan2+0x198>)
 8005164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005168:	f7fb f896 	bl	8000298 <__aeabi_dsub>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	a111      	add	r1, pc, #68	; (adr r1, 80051b8 <__ieee754_atan2+0x190>)
 8005172:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005176:	f7fb f88f 	bl	8000298 <__aeabi_dsub>
 800517a:	e776      	b.n	800506a <__ieee754_atan2+0x42>
 800517c:	a114      	add	r1, pc, #80	; (adr r1, 80051d0 <__ieee754_atan2+0x1a8>)
 800517e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005182:	e772      	b.n	800506a <__ieee754_atan2+0x42>
 8005184:	2100      	movs	r1, #0
 8005186:	e770      	b.n	800506a <__ieee754_atan2+0x42>
 8005188:	a10f      	add	r1, pc, #60	; (adr r1, 80051c8 <__ieee754_atan2+0x1a0>)
 800518a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800518e:	e76c      	b.n	800506a <__ieee754_atan2+0x42>
 8005190:	54442d18 	.word	0x54442d18
 8005194:	c00921fb 	.word	0xc00921fb
 8005198:	54442d18 	.word	0x54442d18
 800519c:	bff921fb 	.word	0xbff921fb
 80051a0:	54442d18 	.word	0x54442d18
 80051a4:	bfe921fb 	.word	0xbfe921fb
 80051a8:	7f3321d2 	.word	0x7f3321d2
 80051ac:	4002d97c 	.word	0x4002d97c
 80051b0:	7f3321d2 	.word	0x7f3321d2
 80051b4:	c002d97c 	.word	0xc002d97c
 80051b8:	54442d18 	.word	0x54442d18
 80051bc:	400921fb 	.word	0x400921fb
 80051c0:	33145c07 	.word	0x33145c07
 80051c4:	3ca1a626 	.word	0x3ca1a626
 80051c8:	54442d18 	.word	0x54442d18
 80051cc:	3ff921fb 	.word	0x3ff921fb
 80051d0:	54442d18 	.word	0x54442d18
 80051d4:	3fe921fb 	.word	0x3fe921fb
 80051d8:	7ff00000 	.word	0x7ff00000
 80051dc:	00000000 	.word	0x00000000

080051e0 <__ieee754_rem_pio2>:
 80051e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e4:	ec57 6b10 	vmov	r6, r7, d0
 80051e8:	4bc3      	ldr	r3, [pc, #780]	; (80054f8 <__ieee754_rem_pio2+0x318>)
 80051ea:	b08d      	sub	sp, #52	; 0x34
 80051ec:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80051f0:	4598      	cmp	r8, r3
 80051f2:	4604      	mov	r4, r0
 80051f4:	9704      	str	r7, [sp, #16]
 80051f6:	dc07      	bgt.n	8005208 <__ieee754_rem_pio2+0x28>
 80051f8:	2200      	movs	r2, #0
 80051fa:	2300      	movs	r3, #0
 80051fc:	ed84 0b00 	vstr	d0, [r4]
 8005200:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005204:	2500      	movs	r5, #0
 8005206:	e027      	b.n	8005258 <__ieee754_rem_pio2+0x78>
 8005208:	4bbc      	ldr	r3, [pc, #752]	; (80054fc <__ieee754_rem_pio2+0x31c>)
 800520a:	4598      	cmp	r8, r3
 800520c:	dc75      	bgt.n	80052fa <__ieee754_rem_pio2+0x11a>
 800520e:	9b04      	ldr	r3, [sp, #16]
 8005210:	4dbb      	ldr	r5, [pc, #748]	; (8005500 <__ieee754_rem_pio2+0x320>)
 8005212:	2b00      	cmp	r3, #0
 8005214:	ee10 0a10 	vmov	r0, s0
 8005218:	a3a9      	add	r3, pc, #676	; (adr r3, 80054c0 <__ieee754_rem_pio2+0x2e0>)
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	4639      	mov	r1, r7
 8005220:	dd36      	ble.n	8005290 <__ieee754_rem_pio2+0xb0>
 8005222:	f7fb f839 	bl	8000298 <__aeabi_dsub>
 8005226:	45a8      	cmp	r8, r5
 8005228:	4606      	mov	r6, r0
 800522a:	460f      	mov	r7, r1
 800522c:	d018      	beq.n	8005260 <__ieee754_rem_pio2+0x80>
 800522e:	a3a6      	add	r3, pc, #664	; (adr r3, 80054c8 <__ieee754_rem_pio2+0x2e8>)
 8005230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005234:	f7fb f830 	bl	8000298 <__aeabi_dsub>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	e9c4 2300 	strd	r2, r3, [r4]
 8005240:	4630      	mov	r0, r6
 8005242:	4639      	mov	r1, r7
 8005244:	f7fb f828 	bl	8000298 <__aeabi_dsub>
 8005248:	a39f      	add	r3, pc, #636	; (adr r3, 80054c8 <__ieee754_rem_pio2+0x2e8>)
 800524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524e:	f7fb f823 	bl	8000298 <__aeabi_dsub>
 8005252:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005256:	2501      	movs	r5, #1
 8005258:	4628      	mov	r0, r5
 800525a:	b00d      	add	sp, #52	; 0x34
 800525c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005260:	a39b      	add	r3, pc, #620	; (adr r3, 80054d0 <__ieee754_rem_pio2+0x2f0>)
 8005262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005266:	f7fb f817 	bl	8000298 <__aeabi_dsub>
 800526a:	a39b      	add	r3, pc, #620	; (adr r3, 80054d8 <__ieee754_rem_pio2+0x2f8>)
 800526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005270:	4606      	mov	r6, r0
 8005272:	460f      	mov	r7, r1
 8005274:	f7fb f810 	bl	8000298 <__aeabi_dsub>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	e9c4 2300 	strd	r2, r3, [r4]
 8005280:	4630      	mov	r0, r6
 8005282:	4639      	mov	r1, r7
 8005284:	f7fb f808 	bl	8000298 <__aeabi_dsub>
 8005288:	a393      	add	r3, pc, #588	; (adr r3, 80054d8 <__ieee754_rem_pio2+0x2f8>)
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	e7de      	b.n	800524e <__ieee754_rem_pio2+0x6e>
 8005290:	f7fb f804 	bl	800029c <__adddf3>
 8005294:	45a8      	cmp	r8, r5
 8005296:	4606      	mov	r6, r0
 8005298:	460f      	mov	r7, r1
 800529a:	d016      	beq.n	80052ca <__ieee754_rem_pio2+0xea>
 800529c:	a38a      	add	r3, pc, #552	; (adr r3, 80054c8 <__ieee754_rem_pio2+0x2e8>)
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	f7fa fffb 	bl	800029c <__adddf3>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	e9c4 2300 	strd	r2, r3, [r4]
 80052ae:	4630      	mov	r0, r6
 80052b0:	4639      	mov	r1, r7
 80052b2:	f7fa fff1 	bl	8000298 <__aeabi_dsub>
 80052b6:	a384      	add	r3, pc, #528	; (adr r3, 80054c8 <__ieee754_rem_pio2+0x2e8>)
 80052b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052bc:	f7fa ffee 	bl	800029c <__adddf3>
 80052c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80052c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80052c8:	e7c6      	b.n	8005258 <__ieee754_rem_pio2+0x78>
 80052ca:	a381      	add	r3, pc, #516	; (adr r3, 80054d0 <__ieee754_rem_pio2+0x2f0>)
 80052cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d0:	f7fa ffe4 	bl	800029c <__adddf3>
 80052d4:	a380      	add	r3, pc, #512	; (adr r3, 80054d8 <__ieee754_rem_pio2+0x2f8>)
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	4606      	mov	r6, r0
 80052dc:	460f      	mov	r7, r1
 80052de:	f7fa ffdd 	bl	800029c <__adddf3>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	e9c4 2300 	strd	r2, r3, [r4]
 80052ea:	4630      	mov	r0, r6
 80052ec:	4639      	mov	r1, r7
 80052ee:	f7fa ffd3 	bl	8000298 <__aeabi_dsub>
 80052f2:	a379      	add	r3, pc, #484	; (adr r3, 80054d8 <__ieee754_rem_pio2+0x2f8>)
 80052f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f8:	e7e0      	b.n	80052bc <__ieee754_rem_pio2+0xdc>
 80052fa:	4b82      	ldr	r3, [pc, #520]	; (8005504 <__ieee754_rem_pio2+0x324>)
 80052fc:	4598      	cmp	r8, r3
 80052fe:	f300 80d0 	bgt.w	80054a2 <__ieee754_rem_pio2+0x2c2>
 8005302:	f7ff fde5 	bl	8004ed0 <fabs>
 8005306:	ec57 6b10 	vmov	r6, r7, d0
 800530a:	ee10 0a10 	vmov	r0, s0
 800530e:	a374      	add	r3, pc, #464	; (adr r3, 80054e0 <__ieee754_rem_pio2+0x300>)
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	4639      	mov	r1, r7
 8005316:	f7fb f973 	bl	8000600 <__aeabi_dmul>
 800531a:	2200      	movs	r2, #0
 800531c:	4b7a      	ldr	r3, [pc, #488]	; (8005508 <__ieee754_rem_pio2+0x328>)
 800531e:	f7fa ffbd 	bl	800029c <__adddf3>
 8005322:	f7fb fc1d 	bl	8000b60 <__aeabi_d2iz>
 8005326:	4605      	mov	r5, r0
 8005328:	f7fb f904 	bl	8000534 <__aeabi_i2d>
 800532c:	a364      	add	r3, pc, #400	; (adr r3, 80054c0 <__ieee754_rem_pio2+0x2e0>)
 800532e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005332:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005336:	f7fb f963 	bl	8000600 <__aeabi_dmul>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	4630      	mov	r0, r6
 8005340:	4639      	mov	r1, r7
 8005342:	f7fa ffa9 	bl	8000298 <__aeabi_dsub>
 8005346:	a360      	add	r3, pc, #384	; (adr r3, 80054c8 <__ieee754_rem_pio2+0x2e8>)
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	4682      	mov	sl, r0
 800534e:	468b      	mov	fp, r1
 8005350:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005354:	f7fb f954 	bl	8000600 <__aeabi_dmul>
 8005358:	2d1f      	cmp	r5, #31
 800535a:	4606      	mov	r6, r0
 800535c:	460f      	mov	r7, r1
 800535e:	dc2a      	bgt.n	80053b6 <__ieee754_rem_pio2+0x1d6>
 8005360:	1e6a      	subs	r2, r5, #1
 8005362:	4b6a      	ldr	r3, [pc, #424]	; (800550c <__ieee754_rem_pio2+0x32c>)
 8005364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005368:	4598      	cmp	r8, r3
 800536a:	d024      	beq.n	80053b6 <__ieee754_rem_pio2+0x1d6>
 800536c:	4632      	mov	r2, r6
 800536e:	463b      	mov	r3, r7
 8005370:	4650      	mov	r0, sl
 8005372:	4659      	mov	r1, fp
 8005374:	f7fa ff90 	bl	8000298 <__aeabi_dsub>
 8005378:	e9c4 0100 	strd	r0, r1, [r4]
 800537c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005380:	4650      	mov	r0, sl
 8005382:	4642      	mov	r2, r8
 8005384:	464b      	mov	r3, r9
 8005386:	4659      	mov	r1, fp
 8005388:	f7fa ff86 	bl	8000298 <__aeabi_dsub>
 800538c:	463b      	mov	r3, r7
 800538e:	4632      	mov	r2, r6
 8005390:	f7fa ff82 	bl	8000298 <__aeabi_dsub>
 8005394:	9b04      	ldr	r3, [sp, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800539c:	f6bf af5c 	bge.w	8005258 <__ieee754_rem_pio2+0x78>
 80053a0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80053a4:	6063      	str	r3, [r4, #4]
 80053a6:	f8c4 8000 	str.w	r8, [r4]
 80053aa:	60a0      	str	r0, [r4, #8]
 80053ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053b0:	60e3      	str	r3, [r4, #12]
 80053b2:	426d      	negs	r5, r5
 80053b4:	e750      	b.n	8005258 <__ieee754_rem_pio2+0x78>
 80053b6:	4632      	mov	r2, r6
 80053b8:	463b      	mov	r3, r7
 80053ba:	4650      	mov	r0, sl
 80053bc:	4659      	mov	r1, fp
 80053be:	f7fa ff6b 	bl	8000298 <__aeabi_dsub>
 80053c2:	ea4f 5228 	mov.w	r2, r8, asr #20
 80053c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	e9c4 0100 	strd	r0, r1, [r4]
 80053d2:	9205      	str	r2, [sp, #20]
 80053d4:	ddd2      	ble.n	800537c <__ieee754_rem_pio2+0x19c>
 80053d6:	a33e      	add	r3, pc, #248	; (adr r3, 80054d0 <__ieee754_rem_pio2+0x2f0>)
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053e0:	f7fb f90e 	bl	8000600 <__aeabi_dmul>
 80053e4:	4606      	mov	r6, r0
 80053e6:	460f      	mov	r7, r1
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4650      	mov	r0, sl
 80053ee:	4659      	mov	r1, fp
 80053f0:	f7fa ff52 	bl	8000298 <__aeabi_dsub>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4680      	mov	r8, r0
 80053fa:	4689      	mov	r9, r1
 80053fc:	4650      	mov	r0, sl
 80053fe:	4659      	mov	r1, fp
 8005400:	f7fa ff4a 	bl	8000298 <__aeabi_dsub>
 8005404:	4632      	mov	r2, r6
 8005406:	463b      	mov	r3, r7
 8005408:	f7fa ff46 	bl	8000298 <__aeabi_dsub>
 800540c:	a332      	add	r3, pc, #200	; (adr r3, 80054d8 <__ieee754_rem_pio2+0x2f8>)
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	4606      	mov	r6, r0
 8005414:	460f      	mov	r7, r1
 8005416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800541a:	f7fb f8f1 	bl	8000600 <__aeabi_dmul>
 800541e:	4632      	mov	r2, r6
 8005420:	463b      	mov	r3, r7
 8005422:	f7fa ff39 	bl	8000298 <__aeabi_dsub>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	4606      	mov	r6, r0
 800542c:	460f      	mov	r7, r1
 800542e:	4640      	mov	r0, r8
 8005430:	4649      	mov	r1, r9
 8005432:	f7fa ff31 	bl	8000298 <__aeabi_dsub>
 8005436:	9a05      	ldr	r2, [sp, #20]
 8005438:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b31      	cmp	r3, #49	; 0x31
 8005440:	e9c4 0100 	strd	r0, r1, [r4]
 8005444:	dd2a      	ble.n	800549c <__ieee754_rem_pio2+0x2bc>
 8005446:	a328      	add	r3, pc, #160	; (adr r3, 80054e8 <__ieee754_rem_pio2+0x308>)
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005450:	f7fb f8d6 	bl	8000600 <__aeabi_dmul>
 8005454:	4606      	mov	r6, r0
 8005456:	460f      	mov	r7, r1
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4640      	mov	r0, r8
 800545e:	4649      	mov	r1, r9
 8005460:	f7fa ff1a 	bl	8000298 <__aeabi_dsub>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4682      	mov	sl, r0
 800546a:	468b      	mov	fp, r1
 800546c:	4640      	mov	r0, r8
 800546e:	4649      	mov	r1, r9
 8005470:	f7fa ff12 	bl	8000298 <__aeabi_dsub>
 8005474:	4632      	mov	r2, r6
 8005476:	463b      	mov	r3, r7
 8005478:	f7fa ff0e 	bl	8000298 <__aeabi_dsub>
 800547c:	a31c      	add	r3, pc, #112	; (adr r3, 80054f0 <__ieee754_rem_pio2+0x310>)
 800547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005482:	4606      	mov	r6, r0
 8005484:	460f      	mov	r7, r1
 8005486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800548a:	f7fb f8b9 	bl	8000600 <__aeabi_dmul>
 800548e:	4632      	mov	r2, r6
 8005490:	463b      	mov	r3, r7
 8005492:	f7fa ff01 	bl	8000298 <__aeabi_dsub>
 8005496:	4606      	mov	r6, r0
 8005498:	460f      	mov	r7, r1
 800549a:	e767      	b.n	800536c <__ieee754_rem_pio2+0x18c>
 800549c:	46c2      	mov	sl, r8
 800549e:	46cb      	mov	fp, r9
 80054a0:	e76c      	b.n	800537c <__ieee754_rem_pio2+0x19c>
 80054a2:	4b1b      	ldr	r3, [pc, #108]	; (8005510 <__ieee754_rem_pio2+0x330>)
 80054a4:	4598      	cmp	r8, r3
 80054a6:	dd35      	ble.n	8005514 <__ieee754_rem_pio2+0x334>
 80054a8:	ee10 2a10 	vmov	r2, s0
 80054ac:	463b      	mov	r3, r7
 80054ae:	4630      	mov	r0, r6
 80054b0:	4639      	mov	r1, r7
 80054b2:	f7fa fef1 	bl	8000298 <__aeabi_dsub>
 80054b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80054ba:	e9c4 0100 	strd	r0, r1, [r4]
 80054be:	e6a1      	b.n	8005204 <__ieee754_rem_pio2+0x24>
 80054c0:	54400000 	.word	0x54400000
 80054c4:	3ff921fb 	.word	0x3ff921fb
 80054c8:	1a626331 	.word	0x1a626331
 80054cc:	3dd0b461 	.word	0x3dd0b461
 80054d0:	1a600000 	.word	0x1a600000
 80054d4:	3dd0b461 	.word	0x3dd0b461
 80054d8:	2e037073 	.word	0x2e037073
 80054dc:	3ba3198a 	.word	0x3ba3198a
 80054e0:	6dc9c883 	.word	0x6dc9c883
 80054e4:	3fe45f30 	.word	0x3fe45f30
 80054e8:	2e000000 	.word	0x2e000000
 80054ec:	3ba3198a 	.word	0x3ba3198a
 80054f0:	252049c1 	.word	0x252049c1
 80054f4:	397b839a 	.word	0x397b839a
 80054f8:	3fe921fb 	.word	0x3fe921fb
 80054fc:	4002d97b 	.word	0x4002d97b
 8005500:	3ff921fb 	.word	0x3ff921fb
 8005504:	413921fb 	.word	0x413921fb
 8005508:	3fe00000 	.word	0x3fe00000
 800550c:	08006898 	.word	0x08006898
 8005510:	7fefffff 	.word	0x7fefffff
 8005514:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005518:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800551c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005520:	4630      	mov	r0, r6
 8005522:	460f      	mov	r7, r1
 8005524:	f7fb fb1c 	bl	8000b60 <__aeabi_d2iz>
 8005528:	f7fb f804 	bl	8000534 <__aeabi_i2d>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4630      	mov	r0, r6
 8005532:	4639      	mov	r1, r7
 8005534:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005538:	f7fa feae 	bl	8000298 <__aeabi_dsub>
 800553c:	2200      	movs	r2, #0
 800553e:	4b1f      	ldr	r3, [pc, #124]	; (80055bc <__ieee754_rem_pio2+0x3dc>)
 8005540:	f7fb f85e 	bl	8000600 <__aeabi_dmul>
 8005544:	460f      	mov	r7, r1
 8005546:	4606      	mov	r6, r0
 8005548:	f7fb fb0a 	bl	8000b60 <__aeabi_d2iz>
 800554c:	f7fa fff2 	bl	8000534 <__aeabi_i2d>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4630      	mov	r0, r6
 8005556:	4639      	mov	r1, r7
 8005558:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800555c:	f7fa fe9c 	bl	8000298 <__aeabi_dsub>
 8005560:	2200      	movs	r2, #0
 8005562:	4b16      	ldr	r3, [pc, #88]	; (80055bc <__ieee754_rem_pio2+0x3dc>)
 8005564:	f7fb f84c 	bl	8000600 <__aeabi_dmul>
 8005568:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800556c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005570:	f04f 0803 	mov.w	r8, #3
 8005574:	2600      	movs	r6, #0
 8005576:	2700      	movs	r7, #0
 8005578:	4632      	mov	r2, r6
 800557a:	463b      	mov	r3, r7
 800557c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005580:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8005584:	f7fb faa4 	bl	8000ad0 <__aeabi_dcmpeq>
 8005588:	b9b0      	cbnz	r0, 80055b8 <__ieee754_rem_pio2+0x3d8>
 800558a:	4b0d      	ldr	r3, [pc, #52]	; (80055c0 <__ieee754_rem_pio2+0x3e0>)
 800558c:	9301      	str	r3, [sp, #4]
 800558e:	2302      	movs	r3, #2
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	462a      	mov	r2, r5
 8005594:	4643      	mov	r3, r8
 8005596:	4621      	mov	r1, r4
 8005598:	a806      	add	r0, sp, #24
 800559a:	f000 f9ad 	bl	80058f8 <__kernel_rem_pio2>
 800559e:	9b04      	ldr	r3, [sp, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	4605      	mov	r5, r0
 80055a4:	f6bf ae58 	bge.w	8005258 <__ieee754_rem_pio2+0x78>
 80055a8:	6863      	ldr	r3, [r4, #4]
 80055aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80055ae:	6063      	str	r3, [r4, #4]
 80055b0:	68e3      	ldr	r3, [r4, #12]
 80055b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80055b6:	e6fb      	b.n	80053b0 <__ieee754_rem_pio2+0x1d0>
 80055b8:	46d0      	mov	r8, sl
 80055ba:	e7dd      	b.n	8005578 <__ieee754_rem_pio2+0x398>
 80055bc:	41700000 	.word	0x41700000
 80055c0:	08006918 	.word	0x08006918

080055c4 <__ieee754_sqrt>:
 80055c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055c8:	ec55 4b10 	vmov	r4, r5, d0
 80055cc:	4e54      	ldr	r6, [pc, #336]	; (8005720 <__ieee754_sqrt+0x15c>)
 80055ce:	43ae      	bics	r6, r5
 80055d0:	ee10 0a10 	vmov	r0, s0
 80055d4:	462b      	mov	r3, r5
 80055d6:	462a      	mov	r2, r5
 80055d8:	4621      	mov	r1, r4
 80055da:	d113      	bne.n	8005604 <__ieee754_sqrt+0x40>
 80055dc:	ee10 2a10 	vmov	r2, s0
 80055e0:	462b      	mov	r3, r5
 80055e2:	ee10 0a10 	vmov	r0, s0
 80055e6:	4629      	mov	r1, r5
 80055e8:	f7fb f80a 	bl	8000600 <__aeabi_dmul>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4620      	mov	r0, r4
 80055f2:	4629      	mov	r1, r5
 80055f4:	f7fa fe52 	bl	800029c <__adddf3>
 80055f8:	4604      	mov	r4, r0
 80055fa:	460d      	mov	r5, r1
 80055fc:	ec45 4b10 	vmov	d0, r4, r5
 8005600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005604:	2d00      	cmp	r5, #0
 8005606:	dc10      	bgt.n	800562a <__ieee754_sqrt+0x66>
 8005608:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800560c:	4330      	orrs	r0, r6
 800560e:	d0f5      	beq.n	80055fc <__ieee754_sqrt+0x38>
 8005610:	b15d      	cbz	r5, 800562a <__ieee754_sqrt+0x66>
 8005612:	ee10 2a10 	vmov	r2, s0
 8005616:	462b      	mov	r3, r5
 8005618:	4620      	mov	r0, r4
 800561a:	4629      	mov	r1, r5
 800561c:	f7fa fe3c 	bl	8000298 <__aeabi_dsub>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	f7fb f916 	bl	8000854 <__aeabi_ddiv>
 8005628:	e7e6      	b.n	80055f8 <__ieee754_sqrt+0x34>
 800562a:	151b      	asrs	r3, r3, #20
 800562c:	d10c      	bne.n	8005648 <__ieee754_sqrt+0x84>
 800562e:	2a00      	cmp	r2, #0
 8005630:	d06d      	beq.n	800570e <__ieee754_sqrt+0x14a>
 8005632:	2000      	movs	r0, #0
 8005634:	02d6      	lsls	r6, r2, #11
 8005636:	d56e      	bpl.n	8005716 <__ieee754_sqrt+0x152>
 8005638:	1e44      	subs	r4, r0, #1
 800563a:	1b1b      	subs	r3, r3, r4
 800563c:	f1c0 0420 	rsb	r4, r0, #32
 8005640:	fa21 f404 	lsr.w	r4, r1, r4
 8005644:	4322      	orrs	r2, r4
 8005646:	4081      	lsls	r1, r0
 8005648:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800564c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005650:	07dd      	lsls	r5, r3, #31
 8005652:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005656:	bf42      	ittt	mi
 8005658:	0052      	lslmi	r2, r2, #1
 800565a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 800565e:	0049      	lslmi	r1, r1, #1
 8005660:	1058      	asrs	r0, r3, #1
 8005662:	2500      	movs	r5, #0
 8005664:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8005668:	441a      	add	r2, r3
 800566a:	0049      	lsls	r1, r1, #1
 800566c:	2316      	movs	r3, #22
 800566e:	462c      	mov	r4, r5
 8005670:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005674:	19a7      	adds	r7, r4, r6
 8005676:	4297      	cmp	r7, r2
 8005678:	bfde      	ittt	le
 800567a:	1bd2      	suble	r2, r2, r7
 800567c:	19bc      	addle	r4, r7, r6
 800567e:	19ad      	addle	r5, r5, r6
 8005680:	0052      	lsls	r2, r2, #1
 8005682:	3b01      	subs	r3, #1
 8005684:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005688:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800568c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005690:	d1f0      	bne.n	8005674 <__ieee754_sqrt+0xb0>
 8005692:	f04f 0e20 	mov.w	lr, #32
 8005696:	469c      	mov	ip, r3
 8005698:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800569c:	42a2      	cmp	r2, r4
 800569e:	eb06 070c 	add.w	r7, r6, ip
 80056a2:	dc02      	bgt.n	80056aa <__ieee754_sqrt+0xe6>
 80056a4:	d112      	bne.n	80056cc <__ieee754_sqrt+0x108>
 80056a6:	428f      	cmp	r7, r1
 80056a8:	d810      	bhi.n	80056cc <__ieee754_sqrt+0x108>
 80056aa:	2f00      	cmp	r7, #0
 80056ac:	eb07 0c06 	add.w	ip, r7, r6
 80056b0:	da34      	bge.n	800571c <__ieee754_sqrt+0x158>
 80056b2:	f1bc 0f00 	cmp.w	ip, #0
 80056b6:	db31      	blt.n	800571c <__ieee754_sqrt+0x158>
 80056b8:	f104 0801 	add.w	r8, r4, #1
 80056bc:	1b12      	subs	r2, r2, r4
 80056be:	428f      	cmp	r7, r1
 80056c0:	bf88      	it	hi
 80056c2:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80056c6:	1bc9      	subs	r1, r1, r7
 80056c8:	4433      	add	r3, r6
 80056ca:	4644      	mov	r4, r8
 80056cc:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 80056d0:	f1be 0e01 	subs.w	lr, lr, #1
 80056d4:	443a      	add	r2, r7
 80056d6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80056da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80056de:	d1dd      	bne.n	800569c <__ieee754_sqrt+0xd8>
 80056e0:	430a      	orrs	r2, r1
 80056e2:	d006      	beq.n	80056f2 <__ieee754_sqrt+0x12e>
 80056e4:	1c5c      	adds	r4, r3, #1
 80056e6:	bf13      	iteet	ne
 80056e8:	3301      	addne	r3, #1
 80056ea:	3501      	addeq	r5, #1
 80056ec:	4673      	moveq	r3, lr
 80056ee:	f023 0301 	bicne.w	r3, r3, #1
 80056f2:	106a      	asrs	r2, r5, #1
 80056f4:	085b      	lsrs	r3, r3, #1
 80056f6:	07e9      	lsls	r1, r5, #31
 80056f8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80056fc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005700:	bf48      	it	mi
 8005702:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005706:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800570a:	461c      	mov	r4, r3
 800570c:	e776      	b.n	80055fc <__ieee754_sqrt+0x38>
 800570e:	0aca      	lsrs	r2, r1, #11
 8005710:	3b15      	subs	r3, #21
 8005712:	0549      	lsls	r1, r1, #21
 8005714:	e78b      	b.n	800562e <__ieee754_sqrt+0x6a>
 8005716:	0052      	lsls	r2, r2, #1
 8005718:	3001      	adds	r0, #1
 800571a:	e78b      	b.n	8005634 <__ieee754_sqrt+0x70>
 800571c:	46a0      	mov	r8, r4
 800571e:	e7cd      	b.n	80056bc <__ieee754_sqrt+0xf8>
 8005720:	7ff00000 	.word	0x7ff00000
 8005724:	00000000 	.word	0x00000000

08005728 <__kernel_cos>:
 8005728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572c:	ec59 8b10 	vmov	r8, r9, d0
 8005730:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8005734:	b085      	sub	sp, #20
 8005736:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800573a:	ed8d 1b00 	vstr	d1, [sp]
 800573e:	da07      	bge.n	8005750 <__kernel_cos+0x28>
 8005740:	ee10 0a10 	vmov	r0, s0
 8005744:	4649      	mov	r1, r9
 8005746:	f7fb fa0b 	bl	8000b60 <__aeabi_d2iz>
 800574a:	2800      	cmp	r0, #0
 800574c:	f000 80aa 	beq.w	80058a4 <__kernel_cos+0x17c>
 8005750:	4642      	mov	r2, r8
 8005752:	464b      	mov	r3, r9
 8005754:	4640      	mov	r0, r8
 8005756:	4649      	mov	r1, r9
 8005758:	f7fa ff52 	bl	8000600 <__aeabi_dmul>
 800575c:	a359      	add	r3, pc, #356	; (adr r3, 80058c4 <__kernel_cos+0x19c>)
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	4604      	mov	r4, r0
 8005764:	460d      	mov	r5, r1
 8005766:	f7fa ff4b 	bl	8000600 <__aeabi_dmul>
 800576a:	a358      	add	r3, pc, #352	; (adr r3, 80058cc <__kernel_cos+0x1a4>)
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	f7fa fd94 	bl	800029c <__adddf3>
 8005774:	4622      	mov	r2, r4
 8005776:	462b      	mov	r3, r5
 8005778:	f7fa ff42 	bl	8000600 <__aeabi_dmul>
 800577c:	a355      	add	r3, pc, #340	; (adr r3, 80058d4 <__kernel_cos+0x1ac>)
 800577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005782:	f7fa fd89 	bl	8000298 <__aeabi_dsub>
 8005786:	4622      	mov	r2, r4
 8005788:	462b      	mov	r3, r5
 800578a:	f7fa ff39 	bl	8000600 <__aeabi_dmul>
 800578e:	a353      	add	r3, pc, #332	; (adr r3, 80058dc <__kernel_cos+0x1b4>)
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	f7fa fd82 	bl	800029c <__adddf3>
 8005798:	4622      	mov	r2, r4
 800579a:	462b      	mov	r3, r5
 800579c:	f7fa ff30 	bl	8000600 <__aeabi_dmul>
 80057a0:	a350      	add	r3, pc, #320	; (adr r3, 80058e4 <__kernel_cos+0x1bc>)
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	f7fa fd77 	bl	8000298 <__aeabi_dsub>
 80057aa:	4622      	mov	r2, r4
 80057ac:	462b      	mov	r3, r5
 80057ae:	f7fa ff27 	bl	8000600 <__aeabi_dmul>
 80057b2:	a34e      	add	r3, pc, #312	; (adr r3, 80058ec <__kernel_cos+0x1c4>)
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f7fa fd70 	bl	800029c <__adddf3>
 80057bc:	462b      	mov	r3, r5
 80057be:	4622      	mov	r2, r4
 80057c0:	f7fa ff1e 	bl	8000600 <__aeabi_dmul>
 80057c4:	4b3a      	ldr	r3, [pc, #232]	; (80058b0 <__kernel_cos+0x188>)
 80057c6:	429f      	cmp	r7, r3
 80057c8:	4682      	mov	sl, r0
 80057ca:	468b      	mov	fp, r1
 80057cc:	dc2c      	bgt.n	8005828 <__kernel_cos+0x100>
 80057ce:	2200      	movs	r2, #0
 80057d0:	4b38      	ldr	r3, [pc, #224]	; (80058b4 <__kernel_cos+0x18c>)
 80057d2:	4620      	mov	r0, r4
 80057d4:	4629      	mov	r1, r5
 80057d6:	f7fa ff13 	bl	8000600 <__aeabi_dmul>
 80057da:	4652      	mov	r2, sl
 80057dc:	4606      	mov	r6, r0
 80057de:	460f      	mov	r7, r1
 80057e0:	465b      	mov	r3, fp
 80057e2:	4620      	mov	r0, r4
 80057e4:	4629      	mov	r1, r5
 80057e6:	f7fa ff0b 	bl	8000600 <__aeabi_dmul>
 80057ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057ee:	4604      	mov	r4, r0
 80057f0:	460d      	mov	r5, r1
 80057f2:	4640      	mov	r0, r8
 80057f4:	4649      	mov	r1, r9
 80057f6:	f7fa ff03 	bl	8000600 <__aeabi_dmul>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4620      	mov	r0, r4
 8005800:	4629      	mov	r1, r5
 8005802:	f7fa fd49 	bl	8000298 <__aeabi_dsub>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4630      	mov	r0, r6
 800580c:	4639      	mov	r1, r7
 800580e:	f7fa fd43 	bl	8000298 <__aeabi_dsub>
 8005812:	460b      	mov	r3, r1
 8005814:	4928      	ldr	r1, [pc, #160]	; (80058b8 <__kernel_cos+0x190>)
 8005816:	4602      	mov	r2, r0
 8005818:	2000      	movs	r0, #0
 800581a:	f7fa fd3d 	bl	8000298 <__aeabi_dsub>
 800581e:	ec41 0b10 	vmov	d0, r0, r1
 8005822:	b005      	add	sp, #20
 8005824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005828:	4b24      	ldr	r3, [pc, #144]	; (80058bc <__kernel_cos+0x194>)
 800582a:	4923      	ldr	r1, [pc, #140]	; (80058b8 <__kernel_cos+0x190>)
 800582c:	429f      	cmp	r7, r3
 800582e:	bfd7      	itett	le
 8005830:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8005834:	4f22      	ldrgt	r7, [pc, #136]	; (80058c0 <__kernel_cos+0x198>)
 8005836:	2200      	movle	r2, #0
 8005838:	4616      	movle	r6, r2
 800583a:	bfd4      	ite	le
 800583c:	461f      	movle	r7, r3
 800583e:	2600      	movgt	r6, #0
 8005840:	4632      	mov	r2, r6
 8005842:	463b      	mov	r3, r7
 8005844:	2000      	movs	r0, #0
 8005846:	f7fa fd27 	bl	8000298 <__aeabi_dsub>
 800584a:	2200      	movs	r2, #0
 800584c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005850:	4b18      	ldr	r3, [pc, #96]	; (80058b4 <__kernel_cos+0x18c>)
 8005852:	4620      	mov	r0, r4
 8005854:	4629      	mov	r1, r5
 8005856:	f7fa fed3 	bl	8000600 <__aeabi_dmul>
 800585a:	4632      	mov	r2, r6
 800585c:	463b      	mov	r3, r7
 800585e:	f7fa fd1b 	bl	8000298 <__aeabi_dsub>
 8005862:	4652      	mov	r2, sl
 8005864:	4606      	mov	r6, r0
 8005866:	460f      	mov	r7, r1
 8005868:	465b      	mov	r3, fp
 800586a:	4620      	mov	r0, r4
 800586c:	4629      	mov	r1, r5
 800586e:	f7fa fec7 	bl	8000600 <__aeabi_dmul>
 8005872:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005876:	4604      	mov	r4, r0
 8005878:	460d      	mov	r5, r1
 800587a:	4640      	mov	r0, r8
 800587c:	4649      	mov	r1, r9
 800587e:	f7fa febf 	bl	8000600 <__aeabi_dmul>
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	4620      	mov	r0, r4
 8005888:	4629      	mov	r1, r5
 800588a:	f7fa fd05 	bl	8000298 <__aeabi_dsub>
 800588e:	4602      	mov	r2, r0
 8005890:	460b      	mov	r3, r1
 8005892:	4630      	mov	r0, r6
 8005894:	4639      	mov	r1, r7
 8005896:	f7fa fcff 	bl	8000298 <__aeabi_dsub>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058a2:	e7ba      	b.n	800581a <__kernel_cos+0xf2>
 80058a4:	2000      	movs	r0, #0
 80058a6:	4904      	ldr	r1, [pc, #16]	; (80058b8 <__kernel_cos+0x190>)
 80058a8:	e7b9      	b.n	800581e <__kernel_cos+0xf6>
 80058aa:	bf00      	nop
 80058ac:	f3af 8000 	nop.w
 80058b0:	3fd33332 	.word	0x3fd33332
 80058b4:	3fe00000 	.word	0x3fe00000
 80058b8:	3ff00000 	.word	0x3ff00000
 80058bc:	3fe90000 	.word	0x3fe90000
 80058c0:	3fd20000 	.word	0x3fd20000
 80058c4:	be8838d4 	.word	0xbe8838d4
 80058c8:	bda8fae9 	.word	0xbda8fae9
 80058cc:	bdb4b1c4 	.word	0xbdb4b1c4
 80058d0:	3e21ee9e 	.word	0x3e21ee9e
 80058d4:	809c52ad 	.word	0x809c52ad
 80058d8:	3e927e4f 	.word	0x3e927e4f
 80058dc:	19cb1590 	.word	0x19cb1590
 80058e0:	3efa01a0 	.word	0x3efa01a0
 80058e4:	16c15177 	.word	0x16c15177
 80058e8:	3f56c16c 	.word	0x3f56c16c
 80058ec:	5555554c 	.word	0x5555554c
 80058f0:	3fa55555 	.word	0x3fa55555
 80058f4:	00000000 	.word	0x00000000

080058f8 <__kernel_rem_pio2>:
 80058f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058fc:	ed2d 8b02 	vpush	{d8}
 8005900:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005904:	1ed4      	subs	r4, r2, #3
 8005906:	9306      	str	r3, [sp, #24]
 8005908:	9102      	str	r1, [sp, #8]
 800590a:	4bc3      	ldr	r3, [pc, #780]	; (8005c18 <__kernel_rem_pio2+0x320>)
 800590c:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800590e:	9009      	str	r0, [sp, #36]	; 0x24
 8005910:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	9b06      	ldr	r3, [sp, #24]
 8005918:	3b01      	subs	r3, #1
 800591a:	9304      	str	r3, [sp, #16]
 800591c:	2318      	movs	r3, #24
 800591e:	fb94 f4f3 	sdiv	r4, r4, r3
 8005922:	f06f 0317 	mvn.w	r3, #23
 8005926:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800592a:	fb04 3303 	mla	r3, r4, r3, r3
 800592e:	eb03 0a02 	add.w	sl, r3, r2
 8005932:	9b00      	ldr	r3, [sp, #0]
 8005934:	9a04      	ldr	r2, [sp, #16]
 8005936:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005c08 <__kernel_rem_pio2+0x310>
 800593a:	eb03 0802 	add.w	r8, r3, r2
 800593e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005940:	1aa7      	subs	r7, r4, r2
 8005942:	ae20      	add	r6, sp, #128	; 0x80
 8005944:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005948:	2500      	movs	r5, #0
 800594a:	4545      	cmp	r5, r8
 800594c:	dd13      	ble.n	8005976 <__kernel_rem_pio2+0x7e>
 800594e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8005c08 <__kernel_rem_pio2+0x310>
 8005952:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005956:	2600      	movs	r6, #0
 8005958:	9b00      	ldr	r3, [sp, #0]
 800595a:	429e      	cmp	r6, r3
 800595c:	dc32      	bgt.n	80059c4 <__kernel_rem_pio2+0xcc>
 800595e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005960:	9303      	str	r3, [sp, #12]
 8005962:	9b06      	ldr	r3, [sp, #24]
 8005964:	199d      	adds	r5, r3, r6
 8005966:	ab20      	add	r3, sp, #128	; 0x80
 8005968:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800596c:	9308      	str	r3, [sp, #32]
 800596e:	ec59 8b18 	vmov	r8, r9, d8
 8005972:	2700      	movs	r7, #0
 8005974:	e01f      	b.n	80059b6 <__kernel_rem_pio2+0xbe>
 8005976:	42ef      	cmn	r7, r5
 8005978:	d407      	bmi.n	800598a <__kernel_rem_pio2+0x92>
 800597a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800597e:	f7fa fdd9 	bl	8000534 <__aeabi_i2d>
 8005982:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005986:	3501      	adds	r5, #1
 8005988:	e7df      	b.n	800594a <__kernel_rem_pio2+0x52>
 800598a:	ec51 0b18 	vmov	r0, r1, d8
 800598e:	e7f8      	b.n	8005982 <__kernel_rem_pio2+0x8a>
 8005990:	9908      	ldr	r1, [sp, #32]
 8005992:	9d03      	ldr	r5, [sp, #12]
 8005994:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005998:	9108      	str	r1, [sp, #32]
 800599a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800599e:	9503      	str	r5, [sp, #12]
 80059a0:	f7fa fe2e 	bl	8000600 <__aeabi_dmul>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	4640      	mov	r0, r8
 80059aa:	4649      	mov	r1, r9
 80059ac:	f7fa fc76 	bl	800029c <__adddf3>
 80059b0:	3701      	adds	r7, #1
 80059b2:	4680      	mov	r8, r0
 80059b4:	4689      	mov	r9, r1
 80059b6:	9b04      	ldr	r3, [sp, #16]
 80059b8:	429f      	cmp	r7, r3
 80059ba:	dde9      	ble.n	8005990 <__kernel_rem_pio2+0x98>
 80059bc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80059c0:	3601      	adds	r6, #1
 80059c2:	e7c9      	b.n	8005958 <__kernel_rem_pio2+0x60>
 80059c4:	9b00      	ldr	r3, [sp, #0]
 80059c6:	9f00      	ldr	r7, [sp, #0]
 80059c8:	aa0c      	add	r2, sp, #48	; 0x30
 80059ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80059ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80059d0:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80059d2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80059d6:	930a      	str	r3, [sp, #40]	; 0x28
 80059d8:	ab98      	add	r3, sp, #608	; 0x260
 80059da:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 80059de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80059e2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80059e6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80059ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059ee:	9308      	str	r3, [sp, #32]
 80059f0:	9a08      	ldr	r2, [sp, #32]
 80059f2:	ab98      	add	r3, sp, #608	; 0x260
 80059f4:	4413      	add	r3, r2
 80059f6:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 80059fa:	2600      	movs	r6, #0
 80059fc:	1bbb      	subs	r3, r7, r6
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	dc77      	bgt.n	8005af2 <__kernel_rem_pio2+0x1fa>
 8005a02:	ec49 8b10 	vmov	d0, r8, r9
 8005a06:	4650      	mov	r0, sl
 8005a08:	f000 fc0a 	bl	8006220 <scalbn>
 8005a0c:	ec55 4b10 	vmov	r4, r5, d0
 8005a10:	2200      	movs	r2, #0
 8005a12:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005a16:	ee10 0a10 	vmov	r0, s0
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	f7fa fdf0 	bl	8000600 <__aeabi_dmul>
 8005a20:	ec41 0b10 	vmov	d0, r0, r1
 8005a24:	f000 fb74 	bl	8006110 <floor>
 8005a28:	2200      	movs	r2, #0
 8005a2a:	ec51 0b10 	vmov	r0, r1, d0
 8005a2e:	4b7b      	ldr	r3, [pc, #492]	; (8005c1c <__kernel_rem_pio2+0x324>)
 8005a30:	f7fa fde6 	bl	8000600 <__aeabi_dmul>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	4620      	mov	r0, r4
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	f7fa fc2c 	bl	8000298 <__aeabi_dsub>
 8005a40:	460d      	mov	r5, r1
 8005a42:	4604      	mov	r4, r0
 8005a44:	f7fb f88c 	bl	8000b60 <__aeabi_d2iz>
 8005a48:	9003      	str	r0, [sp, #12]
 8005a4a:	f7fa fd73 	bl	8000534 <__aeabi_i2d>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	4620      	mov	r0, r4
 8005a54:	4629      	mov	r1, r5
 8005a56:	f7fa fc1f 	bl	8000298 <__aeabi_dsub>
 8005a5a:	f1ba 0f00 	cmp.w	sl, #0
 8005a5e:	4680      	mov	r8, r0
 8005a60:	4689      	mov	r9, r1
 8005a62:	dd6b      	ble.n	8005b3c <__kernel_rem_pio2+0x244>
 8005a64:	1e7a      	subs	r2, r7, #1
 8005a66:	ab0c      	add	r3, sp, #48	; 0x30
 8005a68:	f1ca 0118 	rsb	r1, sl, #24
 8005a6c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005a70:	9c03      	ldr	r4, [sp, #12]
 8005a72:	fa40 f301 	asr.w	r3, r0, r1
 8005a76:	441c      	add	r4, r3
 8005a78:	408b      	lsls	r3, r1
 8005a7a:	1ac0      	subs	r0, r0, r3
 8005a7c:	ab0c      	add	r3, sp, #48	; 0x30
 8005a7e:	9403      	str	r4, [sp, #12]
 8005a80:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005a84:	f1ca 0317 	rsb	r3, sl, #23
 8005a88:	fa40 fb03 	asr.w	fp, r0, r3
 8005a8c:	f1bb 0f00 	cmp.w	fp, #0
 8005a90:	dd62      	ble.n	8005b58 <__kernel_rem_pio2+0x260>
 8005a92:	9b03      	ldr	r3, [sp, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	3301      	adds	r3, #1
 8005a98:	9303      	str	r3, [sp, #12]
 8005a9a:	4614      	mov	r4, r2
 8005a9c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005aa0:	4297      	cmp	r7, r2
 8005aa2:	f300 8089 	bgt.w	8005bb8 <__kernel_rem_pio2+0x2c0>
 8005aa6:	f1ba 0f00 	cmp.w	sl, #0
 8005aaa:	dd07      	ble.n	8005abc <__kernel_rem_pio2+0x1c4>
 8005aac:	f1ba 0f01 	cmp.w	sl, #1
 8005ab0:	f000 8096 	beq.w	8005be0 <__kernel_rem_pio2+0x2e8>
 8005ab4:	f1ba 0f02 	cmp.w	sl, #2
 8005ab8:	f000 809c 	beq.w	8005bf4 <__kernel_rem_pio2+0x2fc>
 8005abc:	f1bb 0f02 	cmp.w	fp, #2
 8005ac0:	d14a      	bne.n	8005b58 <__kernel_rem_pio2+0x260>
 8005ac2:	4642      	mov	r2, r8
 8005ac4:	464b      	mov	r3, r9
 8005ac6:	2000      	movs	r0, #0
 8005ac8:	4955      	ldr	r1, [pc, #340]	; (8005c20 <__kernel_rem_pio2+0x328>)
 8005aca:	f7fa fbe5 	bl	8000298 <__aeabi_dsub>
 8005ace:	4680      	mov	r8, r0
 8005ad0:	4689      	mov	r9, r1
 8005ad2:	2c00      	cmp	r4, #0
 8005ad4:	d040      	beq.n	8005b58 <__kernel_rem_pio2+0x260>
 8005ad6:	4650      	mov	r0, sl
 8005ad8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8005c10 <__kernel_rem_pio2+0x318>
 8005adc:	f000 fba0 	bl	8006220 <scalbn>
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	ec53 2b10 	vmov	r2, r3, d0
 8005ae8:	f7fa fbd6 	bl	8000298 <__aeabi_dsub>
 8005aec:	4680      	mov	r8, r0
 8005aee:	4689      	mov	r9, r1
 8005af0:	e032      	b.n	8005b58 <__kernel_rem_pio2+0x260>
 8005af2:	2200      	movs	r2, #0
 8005af4:	4b4b      	ldr	r3, [pc, #300]	; (8005c24 <__kernel_rem_pio2+0x32c>)
 8005af6:	4640      	mov	r0, r8
 8005af8:	4649      	mov	r1, r9
 8005afa:	f7fa fd81 	bl	8000600 <__aeabi_dmul>
 8005afe:	f7fb f82f 	bl	8000b60 <__aeabi_d2iz>
 8005b02:	f7fa fd17 	bl	8000534 <__aeabi_i2d>
 8005b06:	2200      	movs	r2, #0
 8005b08:	4b47      	ldr	r3, [pc, #284]	; (8005c28 <__kernel_rem_pio2+0x330>)
 8005b0a:	4604      	mov	r4, r0
 8005b0c:	460d      	mov	r5, r1
 8005b0e:	f7fa fd77 	bl	8000600 <__aeabi_dmul>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4640      	mov	r0, r8
 8005b18:	4649      	mov	r1, r9
 8005b1a:	f7fa fbbd 	bl	8000298 <__aeabi_dsub>
 8005b1e:	f7fb f81f 	bl	8000b60 <__aeabi_d2iz>
 8005b22:	ab0c      	add	r3, sp, #48	; 0x30
 8005b24:	4629      	mov	r1, r5
 8005b26:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8005b2a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f7fa fbb4 	bl	800029c <__adddf3>
 8005b34:	3601      	adds	r6, #1
 8005b36:	4680      	mov	r8, r0
 8005b38:	4689      	mov	r9, r1
 8005b3a:	e75f      	b.n	80059fc <__kernel_rem_pio2+0x104>
 8005b3c:	d106      	bne.n	8005b4c <__kernel_rem_pio2+0x254>
 8005b3e:	1e7b      	subs	r3, r7, #1
 8005b40:	aa0c      	add	r2, sp, #48	; 0x30
 8005b42:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005b46:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8005b4a:	e79f      	b.n	8005a8c <__kernel_rem_pio2+0x194>
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	4b37      	ldr	r3, [pc, #220]	; (8005c2c <__kernel_rem_pio2+0x334>)
 8005b50:	f7fa ffdc 	bl	8000b0c <__aeabi_dcmpge>
 8005b54:	bb68      	cbnz	r0, 8005bb2 <__kernel_rem_pio2+0x2ba>
 8005b56:	4683      	mov	fp, r0
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	4640      	mov	r0, r8
 8005b5e:	4649      	mov	r1, r9
 8005b60:	f7fa ffb6 	bl	8000ad0 <__aeabi_dcmpeq>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	f000 80c1 	beq.w	8005cec <__kernel_rem_pio2+0x3f4>
 8005b6a:	1e7c      	subs	r4, r7, #1
 8005b6c:	4623      	mov	r3, r4
 8005b6e:	2200      	movs	r2, #0
 8005b70:	9900      	ldr	r1, [sp, #0]
 8005b72:	428b      	cmp	r3, r1
 8005b74:	da5c      	bge.n	8005c30 <__kernel_rem_pio2+0x338>
 8005b76:	2a00      	cmp	r2, #0
 8005b78:	f040 808b 	bne.w	8005c92 <__kernel_rem_pio2+0x39a>
 8005b7c:	2401      	movs	r4, #1
 8005b7e:	f06f 0203 	mvn.w	r2, #3
 8005b82:	fb02 f304 	mul.w	r3, r2, r4
 8005b86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b88:	58cb      	ldr	r3, [r1, r3]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d056      	beq.n	8005c3c <__kernel_rem_pio2+0x344>
 8005b8e:	9b08      	ldr	r3, [sp, #32]
 8005b90:	aa98      	add	r2, sp, #608	; 0x260
 8005b92:	4413      	add	r3, r2
 8005b94:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8005b98:	9b06      	ldr	r3, [sp, #24]
 8005b9a:	19dd      	adds	r5, r3, r7
 8005b9c:	ab20      	add	r3, sp, #128	; 0x80
 8005b9e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005ba2:	19e3      	adds	r3, r4, r7
 8005ba4:	1c7e      	adds	r6, r7, #1
 8005ba6:	9303      	str	r3, [sp, #12]
 8005ba8:	9b03      	ldr	r3, [sp, #12]
 8005baa:	429e      	cmp	r6, r3
 8005bac:	dd48      	ble.n	8005c40 <__kernel_rem_pio2+0x348>
 8005bae:	461f      	mov	r7, r3
 8005bb0:	e712      	b.n	80059d8 <__kernel_rem_pio2+0xe0>
 8005bb2:	f04f 0b02 	mov.w	fp, #2
 8005bb6:	e76c      	b.n	8005a92 <__kernel_rem_pio2+0x19a>
 8005bb8:	ab0c      	add	r3, sp, #48	; 0x30
 8005bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bbe:	b94c      	cbnz	r4, 8005bd4 <__kernel_rem_pio2+0x2dc>
 8005bc0:	b12b      	cbz	r3, 8005bce <__kernel_rem_pio2+0x2d6>
 8005bc2:	a80c      	add	r0, sp, #48	; 0x30
 8005bc4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005bc8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005bcc:	2301      	movs	r3, #1
 8005bce:	3201      	adds	r2, #1
 8005bd0:	461c      	mov	r4, r3
 8005bd2:	e765      	b.n	8005aa0 <__kernel_rem_pio2+0x1a8>
 8005bd4:	a80c      	add	r0, sp, #48	; 0x30
 8005bd6:	1acb      	subs	r3, r1, r3
 8005bd8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005bdc:	4623      	mov	r3, r4
 8005bde:	e7f6      	b.n	8005bce <__kernel_rem_pio2+0x2d6>
 8005be0:	1e7a      	subs	r2, r7, #1
 8005be2:	ab0c      	add	r3, sp, #48	; 0x30
 8005be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005bec:	a90c      	add	r1, sp, #48	; 0x30
 8005bee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005bf2:	e763      	b.n	8005abc <__kernel_rem_pio2+0x1c4>
 8005bf4:	1e7a      	subs	r2, r7, #1
 8005bf6:	ab0c      	add	r3, sp, #48	; 0x30
 8005bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bfc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005c00:	e7f4      	b.n	8005bec <__kernel_rem_pio2+0x2f4>
 8005c02:	bf00      	nop
 8005c04:	f3af 8000 	nop.w
	...
 8005c14:	3ff00000 	.word	0x3ff00000
 8005c18:	08006a60 	.word	0x08006a60
 8005c1c:	40200000 	.word	0x40200000
 8005c20:	3ff00000 	.word	0x3ff00000
 8005c24:	3e700000 	.word	0x3e700000
 8005c28:	41700000 	.word	0x41700000
 8005c2c:	3fe00000 	.word	0x3fe00000
 8005c30:	a90c      	add	r1, sp, #48	; 0x30
 8005c32:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	e799      	b.n	8005b70 <__kernel_rem_pio2+0x278>
 8005c3c:	3401      	adds	r4, #1
 8005c3e:	e7a0      	b.n	8005b82 <__kernel_rem_pio2+0x28a>
 8005c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c42:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005c46:	f7fa fc75 	bl	8000534 <__aeabi_i2d>
 8005c4a:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c50:	9508      	str	r5, [sp, #32]
 8005c52:	461c      	mov	r4, r3
 8005c54:	2700      	movs	r7, #0
 8005c56:	f04f 0800 	mov.w	r8, #0
 8005c5a:	f04f 0900 	mov.w	r9, #0
 8005c5e:	9b04      	ldr	r3, [sp, #16]
 8005c60:	429f      	cmp	r7, r3
 8005c62:	dd03      	ble.n	8005c6c <__kernel_rem_pio2+0x374>
 8005c64:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005c68:	3601      	adds	r6, #1
 8005c6a:	e79d      	b.n	8005ba8 <__kernel_rem_pio2+0x2b0>
 8005c6c:	9908      	ldr	r1, [sp, #32]
 8005c6e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005c72:	9108      	str	r1, [sp, #32]
 8005c74:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005c78:	f7fa fcc2 	bl	8000600 <__aeabi_dmul>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4640      	mov	r0, r8
 8005c82:	4649      	mov	r1, r9
 8005c84:	f7fa fb0a 	bl	800029c <__adddf3>
 8005c88:	3701      	adds	r7, #1
 8005c8a:	4680      	mov	r8, r0
 8005c8c:	4689      	mov	r9, r1
 8005c8e:	e7e6      	b.n	8005c5e <__kernel_rem_pio2+0x366>
 8005c90:	3c01      	subs	r4, #1
 8005c92:	ab0c      	add	r3, sp, #48	; 0x30
 8005c94:	f1aa 0a18 	sub.w	sl, sl, #24
 8005c98:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0f7      	beq.n	8005c90 <__kernel_rem_pio2+0x398>
 8005ca0:	4650      	mov	r0, sl
 8005ca2:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8005f78 <__kernel_rem_pio2+0x680>
 8005ca6:	f000 fabb 	bl	8006220 <scalbn>
 8005caa:	00e5      	lsls	r5, r4, #3
 8005cac:	ab98      	add	r3, sp, #608	; 0x260
 8005cae:	eb03 0905 	add.w	r9, r3, r5
 8005cb2:	ec57 6b10 	vmov	r6, r7, d0
 8005cb6:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8005cba:	46a0      	mov	r8, r4
 8005cbc:	f1b8 0f00 	cmp.w	r8, #0
 8005cc0:	da4d      	bge.n	8005d5e <__kernel_rem_pio2+0x466>
 8005cc2:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8005f80 <__kernel_rem_pio2+0x688>
 8005cc6:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8005cca:	2300      	movs	r3, #0
 8005ccc:	9304      	str	r3, [sp, #16]
 8005cce:	4657      	mov	r7, sl
 8005cd0:	9b04      	ldr	r3, [sp, #16]
 8005cd2:	ebb4 0903 	subs.w	r9, r4, r3
 8005cd6:	d476      	bmi.n	8005dc6 <__kernel_rem_pio2+0x4ce>
 8005cd8:	4bab      	ldr	r3, [pc, #684]	; (8005f88 <__kernel_rem_pio2+0x690>)
 8005cda:	461e      	mov	r6, r3
 8005cdc:	ab70      	add	r3, sp, #448	; 0x1c0
 8005cde:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005ce2:	ed8d 8b06 	vstr	d8, [sp, #24]
 8005ce6:	f04f 0800 	mov.w	r8, #0
 8005cea:	e05e      	b.n	8005daa <__kernel_rem_pio2+0x4b2>
 8005cec:	f1ca 0000 	rsb	r0, sl, #0
 8005cf0:	ec49 8b10 	vmov	d0, r8, r9
 8005cf4:	f000 fa94 	bl	8006220 <scalbn>
 8005cf8:	ec55 4b10 	vmov	r4, r5, d0
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	4ba3      	ldr	r3, [pc, #652]	; (8005f8c <__kernel_rem_pio2+0x694>)
 8005d00:	ee10 0a10 	vmov	r0, s0
 8005d04:	4629      	mov	r1, r5
 8005d06:	f7fa ff01 	bl	8000b0c <__aeabi_dcmpge>
 8005d0a:	b1f8      	cbz	r0, 8005d4c <__kernel_rem_pio2+0x454>
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	4ba0      	ldr	r3, [pc, #640]	; (8005f90 <__kernel_rem_pio2+0x698>)
 8005d10:	4620      	mov	r0, r4
 8005d12:	4629      	mov	r1, r5
 8005d14:	f7fa fc74 	bl	8000600 <__aeabi_dmul>
 8005d18:	f7fa ff22 	bl	8000b60 <__aeabi_d2iz>
 8005d1c:	4606      	mov	r6, r0
 8005d1e:	f7fa fc09 	bl	8000534 <__aeabi_i2d>
 8005d22:	2200      	movs	r2, #0
 8005d24:	4b99      	ldr	r3, [pc, #612]	; (8005f8c <__kernel_rem_pio2+0x694>)
 8005d26:	f7fa fc6b 	bl	8000600 <__aeabi_dmul>
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	4629      	mov	r1, r5
 8005d30:	4620      	mov	r0, r4
 8005d32:	f7fa fab1 	bl	8000298 <__aeabi_dsub>
 8005d36:	f7fa ff13 	bl	8000b60 <__aeabi_d2iz>
 8005d3a:	1c7c      	adds	r4, r7, #1
 8005d3c:	ab0c      	add	r3, sp, #48	; 0x30
 8005d3e:	f10a 0a18 	add.w	sl, sl, #24
 8005d42:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8005d46:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8005d4a:	e7a9      	b.n	8005ca0 <__kernel_rem_pio2+0x3a8>
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	4629      	mov	r1, r5
 8005d50:	f7fa ff06 	bl	8000b60 <__aeabi_d2iz>
 8005d54:	ab0c      	add	r3, sp, #48	; 0x30
 8005d56:	463c      	mov	r4, r7
 8005d58:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8005d5c:	e7a0      	b.n	8005ca0 <__kernel_rem_pio2+0x3a8>
 8005d5e:	ab0c      	add	r3, sp, #48	; 0x30
 8005d60:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005d64:	f7fa fbe6 	bl	8000534 <__aeabi_i2d>
 8005d68:	4632      	mov	r2, r6
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	f7fa fc48 	bl	8000600 <__aeabi_dmul>
 8005d70:	2200      	movs	r2, #0
 8005d72:	e969 0102 	strd	r0, r1, [r9, #-8]!
 8005d76:	4b86      	ldr	r3, [pc, #536]	; (8005f90 <__kernel_rem_pio2+0x698>)
 8005d78:	4630      	mov	r0, r6
 8005d7a:	4639      	mov	r1, r7
 8005d7c:	f7fa fc40 	bl	8000600 <__aeabi_dmul>
 8005d80:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005d84:	4606      	mov	r6, r0
 8005d86:	460f      	mov	r7, r1
 8005d88:	e798      	b.n	8005cbc <__kernel_rem_pio2+0x3c4>
 8005d8a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005d8e:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8005d92:	f7fa fc35 	bl	8000600 <__aeabi_dmul>
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d9e:	f7fa fa7d 	bl	800029c <__adddf3>
 8005da2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005da6:	f108 0801 	add.w	r8, r8, #1
 8005daa:	9b00      	ldr	r3, [sp, #0]
 8005dac:	4598      	cmp	r8, r3
 8005dae:	dc02      	bgt.n	8005db6 <__kernel_rem_pio2+0x4be>
 8005db0:	9b04      	ldr	r3, [sp, #16]
 8005db2:	4598      	cmp	r8, r3
 8005db4:	dde9      	ble.n	8005d8a <__kernel_rem_pio2+0x492>
 8005db6:	9b04      	ldr	r3, [sp, #16]
 8005db8:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	ecaa 7b02 	vstmia	sl!, {d7}
 8005dc2:	9304      	str	r3, [sp, #16]
 8005dc4:	e784      	b.n	8005cd0 <__kernel_rem_pio2+0x3d8>
 8005dc6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d85d      	bhi.n	8005e88 <__kernel_rem_pio2+0x590>
 8005dcc:	e8df f003 	tbb	[pc, r3]
 8005dd0:	0226264b 	.word	0x0226264b
 8005dd4:	ab98      	add	r3, sp, #608	; 0x260
 8005dd6:	441d      	add	r5, r3
 8005dd8:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8005ddc:	462e      	mov	r6, r5
 8005dde:	46a2      	mov	sl, r4
 8005de0:	f1ba 0f00 	cmp.w	sl, #0
 8005de4:	dc6e      	bgt.n	8005ec4 <__kernel_rem_pio2+0x5cc>
 8005de6:	462e      	mov	r6, r5
 8005de8:	46a2      	mov	sl, r4
 8005dea:	f1ba 0f01 	cmp.w	sl, #1
 8005dee:	f300 808a 	bgt.w	8005f06 <__kernel_rem_pio2+0x60e>
 8005df2:	2000      	movs	r0, #0
 8005df4:	2100      	movs	r1, #0
 8005df6:	2c01      	cmp	r4, #1
 8005df8:	f300 80a6 	bgt.w	8005f48 <__kernel_rem_pio2+0x650>
 8005dfc:	f1bb 0f00 	cmp.w	fp, #0
 8005e00:	f040 80a8 	bne.w	8005f54 <__kernel_rem_pio2+0x65c>
 8005e04:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8005e08:	9c02      	ldr	r4, [sp, #8]
 8005e0a:	e9c4 2300 	strd	r2, r3, [r4]
 8005e0e:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8005e12:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8005e16:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005e1a:	e035      	b.n	8005e88 <__kernel_rem_pio2+0x590>
 8005e1c:	3508      	adds	r5, #8
 8005e1e:	ab48      	add	r3, sp, #288	; 0x120
 8005e20:	441d      	add	r5, r3
 8005e22:	4626      	mov	r6, r4
 8005e24:	2000      	movs	r0, #0
 8005e26:	2100      	movs	r1, #0
 8005e28:	2e00      	cmp	r6, #0
 8005e2a:	da3c      	bge.n	8005ea6 <__kernel_rem_pio2+0x5ae>
 8005e2c:	f1bb 0f00 	cmp.w	fp, #0
 8005e30:	d03f      	beq.n	8005eb2 <__kernel_rem_pio2+0x5ba>
 8005e32:	4602      	mov	r2, r0
 8005e34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e38:	9d02      	ldr	r5, [sp, #8]
 8005e3a:	e9c5 2300 	strd	r2, r3, [r5]
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005e46:	f7fa fa27 	bl	8000298 <__aeabi_dsub>
 8005e4a:	ae4a      	add	r6, sp, #296	; 0x128
 8005e4c:	2501      	movs	r5, #1
 8005e4e:	42ac      	cmp	r4, r5
 8005e50:	da32      	bge.n	8005eb8 <__kernel_rem_pio2+0x5c0>
 8005e52:	f1bb 0f00 	cmp.w	fp, #0
 8005e56:	d002      	beq.n	8005e5e <__kernel_rem_pio2+0x566>
 8005e58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	9b02      	ldr	r3, [sp, #8]
 8005e60:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005e64:	e010      	b.n	8005e88 <__kernel_rem_pio2+0x590>
 8005e66:	ab98      	add	r3, sp, #608	; 0x260
 8005e68:	441d      	add	r5, r3
 8005e6a:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8005e6e:	2000      	movs	r0, #0
 8005e70:	2100      	movs	r1, #0
 8005e72:	2c00      	cmp	r4, #0
 8005e74:	da11      	bge.n	8005e9a <__kernel_rem_pio2+0x5a2>
 8005e76:	f1bb 0f00 	cmp.w	fp, #0
 8005e7a:	d002      	beq.n	8005e82 <__kernel_rem_pio2+0x58a>
 8005e7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e80:	4619      	mov	r1, r3
 8005e82:	9b02      	ldr	r3, [sp, #8]
 8005e84:	e9c3 0100 	strd	r0, r1, [r3]
 8005e88:	9b03      	ldr	r3, [sp, #12]
 8005e8a:	f003 0007 	and.w	r0, r3, #7
 8005e8e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005e92:	ecbd 8b02 	vpop	{d8}
 8005e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e9a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005e9e:	f7fa f9fd 	bl	800029c <__adddf3>
 8005ea2:	3c01      	subs	r4, #1
 8005ea4:	e7e5      	b.n	8005e72 <__kernel_rem_pio2+0x57a>
 8005ea6:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005eaa:	f7fa f9f7 	bl	800029c <__adddf3>
 8005eae:	3e01      	subs	r6, #1
 8005eb0:	e7ba      	b.n	8005e28 <__kernel_rem_pio2+0x530>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	e7bf      	b.n	8005e38 <__kernel_rem_pio2+0x540>
 8005eb8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005ebc:	f7fa f9ee 	bl	800029c <__adddf3>
 8005ec0:	3501      	adds	r5, #1
 8005ec2:	e7c4      	b.n	8005e4e <__kernel_rem_pio2+0x556>
 8005ec4:	ed16 7b02 	vldr	d7, [r6, #-8]
 8005ec8:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8005ecc:	ec53 2b17 	vmov	r2, r3, d7
 8005ed0:	4640      	mov	r0, r8
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	ed8d 7b00 	vstr	d7, [sp]
 8005ed8:	f7fa f9e0 	bl	800029c <__adddf3>
 8005edc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4640      	mov	r0, r8
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	f7fa f9d6 	bl	8000298 <__aeabi_dsub>
 8005eec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ef0:	f7fa f9d4 	bl	800029c <__adddf3>
 8005ef4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005ef8:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8005efc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005f00:	ed06 7b02 	vstr	d7, [r6, #-8]
 8005f04:	e76c      	b.n	8005de0 <__kernel_rem_pio2+0x4e8>
 8005f06:	ed16 7b02 	vldr	d7, [r6, #-8]
 8005f0a:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8005f0e:	ec53 2b17 	vmov	r2, r3, d7
 8005f12:	4640      	mov	r0, r8
 8005f14:	4649      	mov	r1, r9
 8005f16:	ed8d 7b00 	vstr	d7, [sp]
 8005f1a:	f7fa f9bf 	bl	800029c <__adddf3>
 8005f1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	4640      	mov	r0, r8
 8005f28:	4649      	mov	r1, r9
 8005f2a:	f7fa f9b5 	bl	8000298 <__aeabi_dsub>
 8005f2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f32:	f7fa f9b3 	bl	800029c <__adddf3>
 8005f36:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005f3a:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8005f3e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005f42:	ed06 7b02 	vstr	d7, [r6, #-8]
 8005f46:	e750      	b.n	8005dea <__kernel_rem_pio2+0x4f2>
 8005f48:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005f4c:	f7fa f9a6 	bl	800029c <__adddf3>
 8005f50:	3c01      	subs	r4, #1
 8005f52:	e750      	b.n	8005df6 <__kernel_rem_pio2+0x4fe>
 8005f54:	9a02      	ldr	r2, [sp, #8]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6110      	str	r0, [r2, #16]
 8005f5e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005f62:	6053      	str	r3, [r2, #4]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	6093      	str	r3, [r2, #8]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005f6e:	60d3      	str	r3, [r2, #12]
 8005f70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f74:	6153      	str	r3, [r2, #20]
 8005f76:	e787      	b.n	8005e88 <__kernel_rem_pio2+0x590>
 8005f78:	00000000 	.word	0x00000000
 8005f7c:	3ff00000 	.word	0x3ff00000
	...
 8005f88:	08006a20 	.word	0x08006a20
 8005f8c:	41700000 	.word	0x41700000
 8005f90:	3e700000 	.word	0x3e700000
 8005f94:	00000000 	.word	0x00000000

08005f98 <__kernel_sin>:
 8005f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9c:	ec55 4b10 	vmov	r4, r5, d0
 8005fa0:	b085      	sub	sp, #20
 8005fa2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005fa6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005faa:	ed8d 1b00 	vstr	d1, [sp]
 8005fae:	9002      	str	r0, [sp, #8]
 8005fb0:	da06      	bge.n	8005fc0 <__kernel_sin+0x28>
 8005fb2:	ee10 0a10 	vmov	r0, s0
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	f7fa fdd2 	bl	8000b60 <__aeabi_d2iz>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	d051      	beq.n	8006064 <__kernel_sin+0xcc>
 8005fc0:	4622      	mov	r2, r4
 8005fc2:	462b      	mov	r3, r5
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	f7fa fb1a 	bl	8000600 <__aeabi_dmul>
 8005fcc:	4682      	mov	sl, r0
 8005fce:	468b      	mov	fp, r1
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	f7fa fb12 	bl	8000600 <__aeabi_dmul>
 8005fdc:	a341      	add	r3, pc, #260	; (adr r3, 80060e4 <__kernel_sin+0x14c>)
 8005fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe2:	4680      	mov	r8, r0
 8005fe4:	4689      	mov	r9, r1
 8005fe6:	4650      	mov	r0, sl
 8005fe8:	4659      	mov	r1, fp
 8005fea:	f7fa fb09 	bl	8000600 <__aeabi_dmul>
 8005fee:	a33f      	add	r3, pc, #252	; (adr r3, 80060ec <__kernel_sin+0x154>)
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	f7fa f950 	bl	8000298 <__aeabi_dsub>
 8005ff8:	4652      	mov	r2, sl
 8005ffa:	465b      	mov	r3, fp
 8005ffc:	f7fa fb00 	bl	8000600 <__aeabi_dmul>
 8006000:	a33c      	add	r3, pc, #240	; (adr r3, 80060f4 <__kernel_sin+0x15c>)
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	f7fa f949 	bl	800029c <__adddf3>
 800600a:	4652      	mov	r2, sl
 800600c:	465b      	mov	r3, fp
 800600e:	f7fa faf7 	bl	8000600 <__aeabi_dmul>
 8006012:	a33a      	add	r3, pc, #232	; (adr r3, 80060fc <__kernel_sin+0x164>)
 8006014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006018:	f7fa f93e 	bl	8000298 <__aeabi_dsub>
 800601c:	4652      	mov	r2, sl
 800601e:	465b      	mov	r3, fp
 8006020:	f7fa faee 	bl	8000600 <__aeabi_dmul>
 8006024:	a337      	add	r3, pc, #220	; (adr r3, 8006104 <__kernel_sin+0x16c>)
 8006026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602a:	f7fa f937 	bl	800029c <__adddf3>
 800602e:	9b02      	ldr	r3, [sp, #8]
 8006030:	4606      	mov	r6, r0
 8006032:	460f      	mov	r7, r1
 8006034:	b9db      	cbnz	r3, 800606e <__kernel_sin+0xd6>
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	4650      	mov	r0, sl
 800603c:	4659      	mov	r1, fp
 800603e:	f7fa fadf 	bl	8000600 <__aeabi_dmul>
 8006042:	a325      	add	r3, pc, #148	; (adr r3, 80060d8 <__kernel_sin+0x140>)
 8006044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006048:	f7fa f926 	bl	8000298 <__aeabi_dsub>
 800604c:	4642      	mov	r2, r8
 800604e:	464b      	mov	r3, r9
 8006050:	f7fa fad6 	bl	8000600 <__aeabi_dmul>
 8006054:	4602      	mov	r2, r0
 8006056:	460b      	mov	r3, r1
 8006058:	4620      	mov	r0, r4
 800605a:	4629      	mov	r1, r5
 800605c:	f7fa f91e 	bl	800029c <__adddf3>
 8006060:	4604      	mov	r4, r0
 8006062:	460d      	mov	r5, r1
 8006064:	ec45 4b10 	vmov	d0, r4, r5
 8006068:	b005      	add	sp, #20
 800606a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800606e:	2200      	movs	r2, #0
 8006070:	4b1b      	ldr	r3, [pc, #108]	; (80060e0 <__kernel_sin+0x148>)
 8006072:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006076:	f7fa fac3 	bl	8000600 <__aeabi_dmul>
 800607a:	4632      	mov	r2, r6
 800607c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006080:	463b      	mov	r3, r7
 8006082:	4640      	mov	r0, r8
 8006084:	4649      	mov	r1, r9
 8006086:	f7fa fabb 	bl	8000600 <__aeabi_dmul>
 800608a:	4602      	mov	r2, r0
 800608c:	460b      	mov	r3, r1
 800608e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006092:	f7fa f901 	bl	8000298 <__aeabi_dsub>
 8006096:	4652      	mov	r2, sl
 8006098:	465b      	mov	r3, fp
 800609a:	f7fa fab1 	bl	8000600 <__aeabi_dmul>
 800609e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060a2:	f7fa f8f9 	bl	8000298 <__aeabi_dsub>
 80060a6:	a30c      	add	r3, pc, #48	; (adr r3, 80060d8 <__kernel_sin+0x140>)
 80060a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ac:	4606      	mov	r6, r0
 80060ae:	460f      	mov	r7, r1
 80060b0:	4640      	mov	r0, r8
 80060b2:	4649      	mov	r1, r9
 80060b4:	f7fa faa4 	bl	8000600 <__aeabi_dmul>
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4630      	mov	r0, r6
 80060be:	4639      	mov	r1, r7
 80060c0:	f7fa f8ec 	bl	800029c <__adddf3>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4620      	mov	r0, r4
 80060ca:	4629      	mov	r1, r5
 80060cc:	f7fa f8e4 	bl	8000298 <__aeabi_dsub>
 80060d0:	e7c6      	b.n	8006060 <__kernel_sin+0xc8>
 80060d2:	bf00      	nop
 80060d4:	f3af 8000 	nop.w
 80060d8:	55555549 	.word	0x55555549
 80060dc:	3fc55555 	.word	0x3fc55555
 80060e0:	3fe00000 	.word	0x3fe00000
 80060e4:	5acfd57c 	.word	0x5acfd57c
 80060e8:	3de5d93a 	.word	0x3de5d93a
 80060ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80060f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80060f4:	57b1fe7d 	.word	0x57b1fe7d
 80060f8:	3ec71de3 	.word	0x3ec71de3
 80060fc:	19c161d5 	.word	0x19c161d5
 8006100:	3f2a01a0 	.word	0x3f2a01a0
 8006104:	1110f8a6 	.word	0x1110f8a6
 8006108:	3f811111 	.word	0x3f811111
 800610c:	00000000 	.word	0x00000000

08006110 <floor>:
 8006110:	ec51 0b10 	vmov	r0, r1, d0
 8006114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006118:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800611c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006120:	2e13      	cmp	r6, #19
 8006122:	ee10 8a10 	vmov	r8, s0
 8006126:	460c      	mov	r4, r1
 8006128:	ee10 5a10 	vmov	r5, s0
 800612c:	dc35      	bgt.n	800619a <floor+0x8a>
 800612e:	2e00      	cmp	r6, #0
 8006130:	da17      	bge.n	8006162 <floor+0x52>
 8006132:	a335      	add	r3, pc, #212	; (adr r3, 8006208 <floor+0xf8>)
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f7fa f8b0 	bl	800029c <__adddf3>
 800613c:	2200      	movs	r2, #0
 800613e:	2300      	movs	r3, #0
 8006140:	f7fa fcee 	bl	8000b20 <__aeabi_dcmpgt>
 8006144:	b150      	cbz	r0, 800615c <floor+0x4c>
 8006146:	2c00      	cmp	r4, #0
 8006148:	da5a      	bge.n	8006200 <floor+0xf0>
 800614a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800614e:	ea53 0308 	orrs.w	r3, r3, r8
 8006152:	4b2f      	ldr	r3, [pc, #188]	; (8006210 <floor+0x100>)
 8006154:	f04f 0500 	mov.w	r5, #0
 8006158:	bf18      	it	ne
 800615a:	461c      	movne	r4, r3
 800615c:	4621      	mov	r1, r4
 800615e:	4628      	mov	r0, r5
 8006160:	e025      	b.n	80061ae <floor+0x9e>
 8006162:	4f2c      	ldr	r7, [pc, #176]	; (8006214 <floor+0x104>)
 8006164:	4137      	asrs	r7, r6
 8006166:	ea01 0307 	and.w	r3, r1, r7
 800616a:	4303      	orrs	r3, r0
 800616c:	d01f      	beq.n	80061ae <floor+0x9e>
 800616e:	a326      	add	r3, pc, #152	; (adr r3, 8006208 <floor+0xf8>)
 8006170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006174:	f7fa f892 	bl	800029c <__adddf3>
 8006178:	2200      	movs	r2, #0
 800617a:	2300      	movs	r3, #0
 800617c:	f7fa fcd0 	bl	8000b20 <__aeabi_dcmpgt>
 8006180:	2800      	cmp	r0, #0
 8006182:	d0eb      	beq.n	800615c <floor+0x4c>
 8006184:	2c00      	cmp	r4, #0
 8006186:	bfbe      	ittt	lt
 8006188:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800618c:	fa43 f606 	asrlt.w	r6, r3, r6
 8006190:	19a4      	addlt	r4, r4, r6
 8006192:	ea24 0407 	bic.w	r4, r4, r7
 8006196:	2500      	movs	r5, #0
 8006198:	e7e0      	b.n	800615c <floor+0x4c>
 800619a:	2e33      	cmp	r6, #51	; 0x33
 800619c:	dd0b      	ble.n	80061b6 <floor+0xa6>
 800619e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80061a2:	d104      	bne.n	80061ae <floor+0x9e>
 80061a4:	ee10 2a10 	vmov	r2, s0
 80061a8:	460b      	mov	r3, r1
 80061aa:	f7fa f877 	bl	800029c <__adddf3>
 80061ae:	ec41 0b10 	vmov	d0, r0, r1
 80061b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061b6:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80061ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061be:	fa23 f707 	lsr.w	r7, r3, r7
 80061c2:	4238      	tst	r0, r7
 80061c4:	d0f3      	beq.n	80061ae <floor+0x9e>
 80061c6:	a310      	add	r3, pc, #64	; (adr r3, 8006208 <floor+0xf8>)
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f7fa f866 	bl	800029c <__adddf3>
 80061d0:	2200      	movs	r2, #0
 80061d2:	2300      	movs	r3, #0
 80061d4:	f7fa fca4 	bl	8000b20 <__aeabi_dcmpgt>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d0bf      	beq.n	800615c <floor+0x4c>
 80061dc:	2c00      	cmp	r4, #0
 80061de:	da02      	bge.n	80061e6 <floor+0xd6>
 80061e0:	2e14      	cmp	r6, #20
 80061e2:	d103      	bne.n	80061ec <floor+0xdc>
 80061e4:	3401      	adds	r4, #1
 80061e6:	ea25 0507 	bic.w	r5, r5, r7
 80061ea:	e7b7      	b.n	800615c <floor+0x4c>
 80061ec:	2301      	movs	r3, #1
 80061ee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80061f2:	fa03 f606 	lsl.w	r6, r3, r6
 80061f6:	4435      	add	r5, r6
 80061f8:	45a8      	cmp	r8, r5
 80061fa:	bf88      	it	hi
 80061fc:	18e4      	addhi	r4, r4, r3
 80061fe:	e7f2      	b.n	80061e6 <floor+0xd6>
 8006200:	2500      	movs	r5, #0
 8006202:	462c      	mov	r4, r5
 8006204:	e7aa      	b.n	800615c <floor+0x4c>
 8006206:	bf00      	nop
 8006208:	8800759c 	.word	0x8800759c
 800620c:	7e37e43c 	.word	0x7e37e43c
 8006210:	bff00000 	.word	0xbff00000
 8006214:	000fffff 	.word	0x000fffff

08006218 <matherr>:
 8006218:	2000      	movs	r0, #0
 800621a:	4770      	bx	lr
 800621c:	0000      	movs	r0, r0
	...

08006220 <scalbn>:
 8006220:	b570      	push	{r4, r5, r6, lr}
 8006222:	ec55 4b10 	vmov	r4, r5, d0
 8006226:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800622a:	4606      	mov	r6, r0
 800622c:	462b      	mov	r3, r5
 800622e:	b9b2      	cbnz	r2, 800625e <scalbn+0x3e>
 8006230:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006234:	4323      	orrs	r3, r4
 8006236:	d03c      	beq.n	80062b2 <scalbn+0x92>
 8006238:	2200      	movs	r2, #0
 800623a:	4b33      	ldr	r3, [pc, #204]	; (8006308 <scalbn+0xe8>)
 800623c:	4629      	mov	r1, r5
 800623e:	ee10 0a10 	vmov	r0, s0
 8006242:	f7fa f9dd 	bl	8000600 <__aeabi_dmul>
 8006246:	4a31      	ldr	r2, [pc, #196]	; (800630c <scalbn+0xec>)
 8006248:	4296      	cmp	r6, r2
 800624a:	4604      	mov	r4, r0
 800624c:	460d      	mov	r5, r1
 800624e:	460b      	mov	r3, r1
 8006250:	da13      	bge.n	800627a <scalbn+0x5a>
 8006252:	a329      	add	r3, pc, #164	; (adr r3, 80062f8 <scalbn+0xd8>)
 8006254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006258:	f7fa f9d2 	bl	8000600 <__aeabi_dmul>
 800625c:	e00a      	b.n	8006274 <scalbn+0x54>
 800625e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006262:	428a      	cmp	r2, r1
 8006264:	d10c      	bne.n	8006280 <scalbn+0x60>
 8006266:	ee10 2a10 	vmov	r2, s0
 800626a:	462b      	mov	r3, r5
 800626c:	4620      	mov	r0, r4
 800626e:	4629      	mov	r1, r5
 8006270:	f7fa f814 	bl	800029c <__adddf3>
 8006274:	4604      	mov	r4, r0
 8006276:	460d      	mov	r5, r1
 8006278:	e01b      	b.n	80062b2 <scalbn+0x92>
 800627a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800627e:	3a36      	subs	r2, #54	; 0x36
 8006280:	4432      	add	r2, r6
 8006282:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006286:	428a      	cmp	r2, r1
 8006288:	dd0b      	ble.n	80062a2 <scalbn+0x82>
 800628a:	ec45 4b11 	vmov	d1, r4, r5
 800628e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8006300 <scalbn+0xe0>
 8006292:	f000 f83f 	bl	8006314 <copysign>
 8006296:	a31a      	add	r3, pc, #104	; (adr r3, 8006300 <scalbn+0xe0>)
 8006298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629c:	ec51 0b10 	vmov	r0, r1, d0
 80062a0:	e7da      	b.n	8006258 <scalbn+0x38>
 80062a2:	2a00      	cmp	r2, #0
 80062a4:	dd08      	ble.n	80062b8 <scalbn+0x98>
 80062a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80062aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80062ae:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80062b2:	ec45 4b10 	vmov	d0, r4, r5
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
 80062b8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80062bc:	da0d      	bge.n	80062da <scalbn+0xba>
 80062be:	f24c 3350 	movw	r3, #50000	; 0xc350
 80062c2:	429e      	cmp	r6, r3
 80062c4:	ec45 4b11 	vmov	d1, r4, r5
 80062c8:	dce1      	bgt.n	800628e <scalbn+0x6e>
 80062ca:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80062f8 <scalbn+0xd8>
 80062ce:	f000 f821 	bl	8006314 <copysign>
 80062d2:	a309      	add	r3, pc, #36	; (adr r3, 80062f8 <scalbn+0xd8>)
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	e7e0      	b.n	800629c <scalbn+0x7c>
 80062da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80062de:	3236      	adds	r2, #54	; 0x36
 80062e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80062e4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80062e8:	4620      	mov	r0, r4
 80062ea:	4629      	mov	r1, r5
 80062ec:	2200      	movs	r2, #0
 80062ee:	4b08      	ldr	r3, [pc, #32]	; (8006310 <scalbn+0xf0>)
 80062f0:	e7b2      	b.n	8006258 <scalbn+0x38>
 80062f2:	bf00      	nop
 80062f4:	f3af 8000 	nop.w
 80062f8:	c2f8f359 	.word	0xc2f8f359
 80062fc:	01a56e1f 	.word	0x01a56e1f
 8006300:	8800759c 	.word	0x8800759c
 8006304:	7e37e43c 	.word	0x7e37e43c
 8006308:	43500000 	.word	0x43500000
 800630c:	ffff3cb0 	.word	0xffff3cb0
 8006310:	3c900000 	.word	0x3c900000

08006314 <copysign>:
 8006314:	ec53 2b10 	vmov	r2, r3, d0
 8006318:	ee11 0a90 	vmov	r0, s3
 800631c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006320:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006324:	ea41 0300 	orr.w	r3, r1, r0
 8006328:	ec43 2b10 	vmov	d0, r2, r3
 800632c:	4770      	bx	lr
	...

08006330 <_init>:
 8006330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006332:	bf00      	nop
 8006334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006336:	bc08      	pop	{r3}
 8006338:	469e      	mov	lr, r3
 800633a:	4770      	bx	lr

0800633c <_fini>:
 800633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633e:	bf00      	nop
 8006340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006342:	bc08      	pop	{r3}
 8006344:	469e      	mov	lr, r3
 8006346:	4770      	bx	lr
