
rover_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  08004ea0  08004ea0  00014ea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005388  08005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005390  08005390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005394  08005394  00015394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000204  20000000  08005398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000160  20000204  0800559c  00020204  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000364  0800559c  00020364  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000dc4d  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001f43  00000000  00000000  0002de81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006284  00000000  00000000  0002fdc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000980  00000000  00000000  00036048  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bd0  00000000  00000000  000369c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004494  00000000  00000000  00037598  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003cd2  00000000  00000000  0003ba2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003f6fe  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002608  00000000  00000000  0003f77c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004e88 	.word	0x08004e88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	08004e88 	.word	0x08004e88

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f000 b97a 	b.w	8000ebc <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	468c      	mov	ip, r1
 8000be6:	460d      	mov	r5, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	9e08      	ldr	r6, [sp, #32]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d151      	bne.n	8000c94 <__udivmoddi4+0xb4>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	d96d      	bls.n	8000cd2 <__udivmoddi4+0xf2>
 8000bf6:	fab2 fe82 	clz	lr, r2
 8000bfa:	f1be 0f00 	cmp.w	lr, #0
 8000bfe:	d00b      	beq.n	8000c18 <__udivmoddi4+0x38>
 8000c00:	f1ce 0c20 	rsb	ip, lr, #32
 8000c04:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c0c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c10:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c18:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c1c:	0c25      	lsrs	r5, r4, #16
 8000c1e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c22:	fa1f f987 	uxth.w	r9, r7
 8000c26:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c2a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c2e:	fb08 f309 	mul.w	r3, r8, r9
 8000c32:	42ab      	cmp	r3, r5
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x6c>
 8000c36:	19ed      	adds	r5, r5, r7
 8000c38:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c3c:	f080 8123 	bcs.w	8000e86 <__udivmoddi4+0x2a6>
 8000c40:	42ab      	cmp	r3, r5
 8000c42:	f240 8120 	bls.w	8000e86 <__udivmoddi4+0x2a6>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	443d      	add	r5, r7
 8000c4c:	1aed      	subs	r5, r5, r3
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c54:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c5c:	fb00 f909 	mul.w	r9, r0, r9
 8000c60:	45a1      	cmp	r9, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x98>
 8000c64:	19e4      	adds	r4, r4, r7
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 810a 	bcs.w	8000e82 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8107 	bls.w	8000e82 <__udivmoddi4+0x2a2>
 8000c74:	3802      	subs	r0, #2
 8000c76:	443c      	add	r4, r7
 8000c78:	eba4 0409 	sub.w	r4, r4, r9
 8000c7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c80:	2100      	movs	r1, #0
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d061      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000c86:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	6034      	str	r4, [r6, #0]
 8000c8e:	6073      	str	r3, [r6, #4]
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0xc8>
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d054      	beq.n	8000d46 <__udivmoddi4+0x166>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	f040 808e 	bne.w	8000dce <__udivmoddi4+0x1ee>
 8000cb2:	42ab      	cmp	r3, r5
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xdc>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2d0>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb65 0503 	sbc.w	r5, r5, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	46ac      	mov	ip, r5
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d03f      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000cca:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	b912      	cbnz	r2, 8000cda <__udivmoddi4+0xfa>
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cda:	fab7 fe87 	clz	lr, r7
 8000cde:	f1be 0f00 	cmp.w	lr, #0
 8000ce2:	d134      	bne.n	8000d4e <__udivmoddi4+0x16e>
 8000ce4:	1beb      	subs	r3, r5, r7
 8000ce6:	0c3a      	lsrs	r2, r7, #16
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cf2:	0c25      	lsrs	r5, r4, #16
 8000cf4:	fb02 3318 	mls	r3, r2, r8, r3
 8000cf8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cfc:	fb0c f308 	mul.w	r3, ip, r8
 8000d00:	42ab      	cmp	r3, r5
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x134>
 8000d04:	19ed      	adds	r5, r5, r7
 8000d06:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x132>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	f200 80d1 	bhi.w	8000eb4 <__udivmoddi4+0x2d4>
 8000d12:	4680      	mov	r8, r0
 8000d14:	1aed      	subs	r5, r5, r3
 8000d16:	b2a3      	uxth	r3, r4
 8000d18:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d1c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d20:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d24:	fb0c fc00 	mul.w	ip, ip, r0
 8000d28:	45a4      	cmp	ip, r4
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x15c>
 8000d2c:	19e4      	adds	r4, r4, r7
 8000d2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x15a>
 8000d34:	45a4      	cmp	ip, r4
 8000d36:	f200 80b8 	bhi.w	8000eaa <__udivmoddi4+0x2ca>
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	eba4 040c 	sub.w	r4, r4, ip
 8000d40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d44:	e79d      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1ce 0420 	rsb	r4, lr, #32
 8000d52:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d5a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d5e:	0c3a      	lsrs	r2, r7, #16
 8000d60:	fa25 f404 	lsr.w	r4, r5, r4
 8000d64:	ea48 0803 	orr.w	r8, r8, r3
 8000d68:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d6c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d70:	fb02 4411 	mls	r4, r2, r1, r4
 8000d74:	fa1f fc87 	uxth.w	ip, r7
 8000d78:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d7c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d86:	d909      	bls.n	8000d9c <__udivmoddi4+0x1bc>
 8000d88:	19ed      	adds	r5, r5, r7
 8000d8a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d8e:	f080 808a 	bcs.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	f240 8087 	bls.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d98:	3902      	subs	r1, #2
 8000d9a:	443d      	add	r5, r7
 8000d9c:	1aeb      	subs	r3, r5, r3
 8000d9e:	fa1f f588 	uxth.w	r5, r8
 8000da2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000da6:	fb02 3310 	mls	r3, r2, r0, r3
 8000daa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dae:	fb00 f30c 	mul.w	r3, r0, ip
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x1e6>
 8000db6:	19ed      	adds	r5, r5, r7
 8000db8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dbc:	d26f      	bcs.n	8000e9e <__udivmoddi4+0x2be>
 8000dbe:	42ab      	cmp	r3, r5
 8000dc0:	d96d      	bls.n	8000e9e <__udivmoddi4+0x2be>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	443d      	add	r5, r7
 8000dc6:	1aeb      	subs	r3, r5, r3
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	e78f      	b.n	8000cee <__udivmoddi4+0x10e>
 8000dce:	f1c1 0720 	rsb	r7, r1, #32
 8000dd2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dd6:	408b      	lsls	r3, r1
 8000dd8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ddc:	ea48 0303 	orr.w	r3, r8, r3
 8000de0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000de4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dee:	fbb5 f9fc 	udiv	r9, r5, ip
 8000df2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000df6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dfa:	fa1f f883 	uxth.w	r8, r3
 8000dfe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e02:	fb09 f408 	mul.w	r4, r9, r8
 8000e06:	42ac      	cmp	r4, r5
 8000e08:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x244>
 8000e12:	18ed      	adds	r5, r5, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	d243      	bcs.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1a:	42ac      	cmp	r4, r5
 8000e1c:	d941      	bls.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e22:	441d      	add	r5, r3
 8000e24:	1b2d      	subs	r5, r5, r4
 8000e26:	fa1f fe8e 	uxth.w	lr, lr
 8000e2a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e2e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e32:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e36:	fb00 f808 	mul.w	r8, r0, r8
 8000e3a:	45a0      	cmp	r8, r4
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x26e>
 8000e3e:	18e4      	adds	r4, r4, r3
 8000e40:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e44:	d229      	bcs.n	8000e9a <__udivmoddi4+0x2ba>
 8000e46:	45a0      	cmp	r8, r4
 8000e48:	d927      	bls.n	8000e9a <__udivmoddi4+0x2ba>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	441c      	add	r4, r3
 8000e4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e52:	eba4 0408 	sub.w	r4, r4, r8
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	454c      	cmp	r4, r9
 8000e5c:	46c6      	mov	lr, r8
 8000e5e:	464d      	mov	r5, r9
 8000e60:	d315      	bcc.n	8000e8e <__udivmoddi4+0x2ae>
 8000e62:	d012      	beq.n	8000e8a <__udivmoddi4+0x2aa>
 8000e64:	b156      	cbz	r6, 8000e7c <__udivmoddi4+0x29c>
 8000e66:	ebba 030e 	subs.w	r3, sl, lr
 8000e6a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e72:	40cb      	lsrs	r3, r1
 8000e74:	431f      	orrs	r7, r3
 8000e76:	40cc      	lsrs	r4, r1
 8000e78:	6037      	str	r7, [r6, #0]
 8000e7a:	6074      	str	r4, [r6, #4]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	4618      	mov	r0, r3
 8000e84:	e6f8      	b.n	8000c78 <__udivmoddi4+0x98>
 8000e86:	4690      	mov	r8, r2
 8000e88:	e6e0      	b.n	8000c4c <__udivmoddi4+0x6c>
 8000e8a:	45c2      	cmp	sl, r8
 8000e8c:	d2ea      	bcs.n	8000e64 <__udivmoddi4+0x284>
 8000e8e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e92:	eb69 0503 	sbc.w	r5, r9, r3
 8000e96:	3801      	subs	r0, #1
 8000e98:	e7e4      	b.n	8000e64 <__udivmoddi4+0x284>
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	e7d7      	b.n	8000e4e <__udivmoddi4+0x26e>
 8000e9e:	4640      	mov	r0, r8
 8000ea0:	e791      	b.n	8000dc6 <__udivmoddi4+0x1e6>
 8000ea2:	4681      	mov	r9, r0
 8000ea4:	e7be      	b.n	8000e24 <__udivmoddi4+0x244>
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	e778      	b.n	8000d9c <__udivmoddi4+0x1bc>
 8000eaa:	3802      	subs	r0, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	e745      	b.n	8000d3c <__udivmoddi4+0x15c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xe6>
 8000eb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb8:	443d      	add	r5, r7
 8000eba:	e72b      	b.n	8000d14 <__udivmoddi4+0x134>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <HAL_InitTick+0x3c>)
 8000ec4:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_InitTick+0x40>)
{
 8000ec6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	7818      	ldrb	r0, [r3, #0]
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ed2:	6810      	ldr	r0, [r2, #0]
 8000ed4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ed8:	f000 f896 	bl	8001008 <HAL_SYSTICK_Config>
 8000edc:	4604      	mov	r4, r0
 8000ede:	b958      	cbnz	r0, 8000ef8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee0:	2d0f      	cmp	r5, #15
 8000ee2:	d809      	bhi.n	8000ef8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	4629      	mov	r1, r5
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eec:	f000 f84a 	bl	8000f84 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <HAL_InitTick+0x44>)
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	601d      	str	r5, [r3, #0]
 8000ef6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ef8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000efa:	bd38      	pop	{r3, r4, r5, pc}
 8000efc:	2000002c 	.word	0x2000002c
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000004 	.word	0x20000004

08000f08 <HAL_Init>:
{
 8000f08:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_Init+0x30>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f12:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f1a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f22:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f81b 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f7ff ffc8 	bl	8000ec0 <HAL_InitTick>
  HAL_MspInit();
 8000f30:	f001 fdee 	bl	8002b10 <HAL_MspInit>
}
 8000f34:	2000      	movs	r0, #0
 8000f36:	bd08      	pop	{r3, pc}
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f3c:	4a03      	ldr	r2, [pc, #12]	; (8000f4c <HAL_IncTick+0x10>)
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <HAL_IncTick+0x14>)
 8000f40:	6811      	ldr	r1, [r2, #0]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	440b      	add	r3, r1
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	2000025c 	.word	0x2000025c
 8000f50:	20000000 	.word	0x20000000

08000f54 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f54:	4b01      	ldr	r3, [pc, #4]	; (8000f5c <HAL_GetTick+0x8>)
 8000f56:	6818      	ldr	r0, [r3, #0]
}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	2000025c 	.word	0x2000025c

08000f60 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f62:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f68:	041b      	lsls	r3, r3, #16
 8000f6a:	0c1b      	lsrs	r3, r3, #16
 8000f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f70:	0200      	lsls	r0, r0, #8
 8000f72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f76:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000f7a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000f7c:	60d3      	str	r3, [r2, #12]
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f86:	b530      	push	{r4, r5, lr}
 8000f88:	68dc      	ldr	r4, [r3, #12]
 8000f8a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f8e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f92:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	bf28      	it	cs
 8000f98:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 0501 	mov.w	r5, #1
 8000fa0:	fa05 f303 	lsl.w	r3, r5, r3
 8000fa4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa8:	bf8c      	ite	hi
 8000faa:	3c03      	subhi	r4, #3
 8000fac:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fae:	4019      	ands	r1, r3
 8000fb0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb2:	fa05 f404 	lsl.w	r4, r5, r4
 8000fb6:	3c01      	subs	r4, #1
 8000fb8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000fba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	ea42 0201 	orr.w	r2, r2, r1
 8000fc0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc4:	bfad      	iteet	ge
 8000fc6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	f000 000f 	andlt.w	r0, r0, #15
 8000fce:	4b06      	ldrlt	r3, [pc, #24]	; (8000fe8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	bfb5      	itete	lt
 8000fd6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fda:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000fe0:	bd30      	pop	{r4, r5, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00
 8000fe8:	e000ed14 	.word	0xe000ed14

08000fec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000fec:	2800      	cmp	r0, #0
 8000fee:	db08      	blt.n	8001002 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff0:	0942      	lsrs	r2, r0, #5
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	f000 001f 	and.w	r0, r0, #31
 8000ff8:	fa03 f000 	lsl.w	r0, r3, r0
 8000ffc:	4b01      	ldr	r3, [pc, #4]	; (8001004 <HAL_NVIC_EnableIRQ+0x18>)
 8000ffe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100

08001008 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	3801      	subs	r0, #1
 800100a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800100e:	d20a      	bcs.n	8001026 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	4a07      	ldr	r2, [pc, #28]	; (8001030 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001014:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	21f0      	movs	r1, #240	; 0xf0
 8001018:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800101c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001020:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001026:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e010 	.word	0xe000e010
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001038:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103c:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80011dc <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001040:	4a64      	ldr	r2, [pc, #400]	; (80011d4 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001042:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8001044:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001048:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800104c:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001050:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8001054:	42b7      	cmp	r7, r6
 8001056:	f040 80ad 	bne.w	80011b4 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800105a:	684c      	ldr	r4, [r1, #4]
 800105c:	f024 0a10 	bic.w	sl, r4, #16
 8001060:	f1ba 0f02 	cmp.w	sl, #2
 8001064:	d116      	bne.n	8001094 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8001066:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800106a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001072:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001076:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800107a:	f04f 0e0f 	mov.w	lr, #15
 800107e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001082:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001086:	690d      	ldr	r5, [r1, #16]
 8001088:	fa05 f50b 	lsl.w	r5, r5, fp
 800108c:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001090:	f8cc 5020 	str.w	r5, [ip, #32]
 8001094:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001098:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800109a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109e:	fa05 f50c 	lsl.w	r5, r5, ip
 80010a2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a4:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010a8:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ac:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b4:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b8:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010bc:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80010be:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c2:	d815      	bhi.n	80010f0 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80010c4:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c8:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010cc:	68cd      	ldr	r5, [r1, #12]
 80010ce:	fa05 fa0c 	lsl.w	sl, r5, ip
 80010d2:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80010d6:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80010da:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010de:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010e2:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80010e6:	fa0e fe03 	lsl.w	lr, lr, r3
 80010ea:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80010ee:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80010f0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f2:	9d00      	ldr	r5, [sp, #0]
 80010f4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f6:	688f      	ldr	r7, [r1, #8]
 80010f8:	fa07 f70c 	lsl.w	r7, r7, ip
 80010fc:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80010fe:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001100:	00e5      	lsls	r5, r4, #3
 8001102:	d557      	bpl.n	80011b4 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001104:	f04f 0b00 	mov.w	fp, #0
 8001108:	f8cd b00c 	str.w	fp, [sp, #12]
 800110c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001110:	4d31      	ldr	r5, [pc, #196]	; (80011d8 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001116:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800111a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800111e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001122:	9703      	str	r7, [sp, #12]
 8001124:	9f03      	ldr	r7, [sp, #12]
 8001126:	f023 0703 	bic.w	r7, r3, #3
 800112a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800112e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001132:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001136:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800113a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800113e:	f04f 0e0f 	mov.w	lr, #15
 8001142:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001146:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001148:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800114c:	d039      	beq.n	80011c2 <HAL_GPIO_Init+0x18e>
 800114e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001152:	42a8      	cmp	r0, r5
 8001154:	d037      	beq.n	80011c6 <HAL_GPIO_Init+0x192>
 8001156:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800115a:	42a8      	cmp	r0, r5
 800115c:	d035      	beq.n	80011ca <HAL_GPIO_Init+0x196>
 800115e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001162:	42a8      	cmp	r0, r5
 8001164:	d033      	beq.n	80011ce <HAL_GPIO_Init+0x19a>
 8001166:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800116a:	42a8      	cmp	r0, r5
 800116c:	bf14      	ite	ne
 800116e:	2507      	movne	r5, #7
 8001170:	2504      	moveq	r5, #4
 8001172:	fa05 f50c 	lsl.w	r5, r5, ip
 8001176:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800117a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800117c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800117e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001180:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001184:	bf0c      	ite	eq
 8001186:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001188:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800118a:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800118c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800118e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001192:	bf0c      	ite	eq
 8001194:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001196:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001198:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80011a0:	bf0c      	ite	eq
 80011a2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011a4:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80011a6:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80011a8:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011aa:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80011ac:	bf54      	ite	pl
 80011ae:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80011b0:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80011b2:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011b4:	3301      	adds	r3, #1
 80011b6:	2b10      	cmp	r3, #16
 80011b8:	f47f af47 	bne.w	800104a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80011bc:	b005      	add	sp, #20
 80011be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011c2:	465d      	mov	r5, fp
 80011c4:	e7d5      	b.n	8001172 <HAL_GPIO_Init+0x13e>
 80011c6:	2501      	movs	r5, #1
 80011c8:	e7d3      	b.n	8001172 <HAL_GPIO_Init+0x13e>
 80011ca:	2502      	movs	r5, #2
 80011cc:	e7d1      	b.n	8001172 <HAL_GPIO_Init+0x13e>
 80011ce:	2503      	movs	r5, #3
 80011d0:	e7cf      	b.n	8001172 <HAL_GPIO_Init+0x13e>
 80011d2:	bf00      	nop
 80011d4:	40013c00 	.word	0x40013c00
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40023800 	.word	0x40023800

080011e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e0:	b10a      	cbz	r2, 80011e6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011e2:	6181      	str	r1, [r0, #24]
 80011e4:	4770      	bx	lr
 80011e6:	0409      	lsls	r1, r1, #16
 80011e8:	e7fb      	b.n	80011e2 <HAL_GPIO_WritePin+0x2>

080011ea <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80011ea:	6943      	ldr	r3, [r0, #20]
 80011ec:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011f0:	bf08      	it	eq
 80011f2:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80011f4:	6181      	str	r1, [r0, #24]
 80011f6:	4770      	bx	lr

080011f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011fc:	4604      	mov	r4, r0
 80011fe:	b918      	cbnz	r0, 8001208 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001200:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001202:	b002      	add	sp, #8
 8001204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001208:	6803      	ldr	r3, [r0, #0]
 800120a:	07dd      	lsls	r5, r3, #31
 800120c:	d410      	bmi.n	8001230 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120e:	6823      	ldr	r3, [r4, #0]
 8001210:	0798      	lsls	r0, r3, #30
 8001212:	d458      	bmi.n	80012c6 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001214:	6823      	ldr	r3, [r4, #0]
 8001216:	071a      	lsls	r2, r3, #28
 8001218:	f100 809a 	bmi.w	8001350 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800121c:	6823      	ldr	r3, [r4, #0]
 800121e:	075b      	lsls	r3, r3, #29
 8001220:	f100 80b8 	bmi.w	8001394 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001224:	69a2      	ldr	r2, [r4, #24]
 8001226:	2a00      	cmp	r2, #0
 8001228:	f040 8119 	bne.w	800145e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800122c:	2000      	movs	r0, #0
 800122e:	e7e8      	b.n	8001202 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001230:	4ba6      	ldr	r3, [pc, #664]	; (80014cc <HAL_RCC_OscConfig+0x2d4>)
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	f002 020c 	and.w	r2, r2, #12
 8001238:	2a04      	cmp	r2, #4
 800123a:	d007      	beq.n	800124c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001242:	2a08      	cmp	r2, #8
 8001244:	d10a      	bne.n	800125c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	0259      	lsls	r1, r3, #9
 800124a:	d507      	bpl.n	800125c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	4b9f      	ldr	r3, [pc, #636]	; (80014cc <HAL_RCC_OscConfig+0x2d4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	039a      	lsls	r2, r3, #14
 8001252:	d5dc      	bpl.n	800120e <HAL_RCC_OscConfig+0x16>
 8001254:	6863      	ldr	r3, [r4, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1d9      	bne.n	800120e <HAL_RCC_OscConfig+0x16>
 800125a:	e7d1      	b.n	8001200 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125c:	6863      	ldr	r3, [r4, #4]
 800125e:	4d9b      	ldr	r5, [pc, #620]	; (80014cc <HAL_RCC_OscConfig+0x2d4>)
 8001260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001264:	d111      	bne.n	800128a <HAL_RCC_OscConfig+0x92>
 8001266:	682b      	ldr	r3, [r5, #0]
 8001268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800126e:	f7ff fe71 	bl	8000f54 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	4d96      	ldr	r5, [pc, #600]	; (80014cc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001274:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001276:	682b      	ldr	r3, [r5, #0]
 8001278:	039b      	lsls	r3, r3, #14
 800127a:	d4c8      	bmi.n	800120e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127c:	f7ff fe6a 	bl	8000f54 <HAL_GetTick>
 8001280:	1b80      	subs	r0, r0, r6
 8001282:	2864      	cmp	r0, #100	; 0x64
 8001284:	d9f7      	bls.n	8001276 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001286:	2003      	movs	r0, #3
 8001288:	e7bb      	b.n	8001202 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800128a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800128e:	d104      	bne.n	800129a <HAL_RCC_OscConfig+0xa2>
 8001290:	682b      	ldr	r3, [r5, #0]
 8001292:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001296:	602b      	str	r3, [r5, #0]
 8001298:	e7e5      	b.n	8001266 <HAL_RCC_OscConfig+0x6e>
 800129a:	682a      	ldr	r2, [r5, #0]
 800129c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012a0:	602a      	str	r2, [r5, #0]
 80012a2:	682a      	ldr	r2, [r5, #0]
 80012a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012a8:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1df      	bne.n	800126e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80012ae:	f7ff fe51 	bl	8000f54 <HAL_GetTick>
 80012b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b4:	682b      	ldr	r3, [r5, #0]
 80012b6:	039f      	lsls	r7, r3, #14
 80012b8:	d5a9      	bpl.n	800120e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ba:	f7ff fe4b 	bl	8000f54 <HAL_GetTick>
 80012be:	1b80      	subs	r0, r0, r6
 80012c0:	2864      	cmp	r0, #100	; 0x64
 80012c2:	d9f7      	bls.n	80012b4 <HAL_RCC_OscConfig+0xbc>
 80012c4:	e7df      	b.n	8001286 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012c6:	4b81      	ldr	r3, [pc, #516]	; (80014cc <HAL_RCC_OscConfig+0x2d4>)
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	f012 0f0c 	tst.w	r2, #12
 80012ce:	d007      	beq.n	80012e0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012d6:	2a08      	cmp	r2, #8
 80012d8:	d111      	bne.n	80012fe <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	025e      	lsls	r6, r3, #9
 80012de:	d40e      	bmi.n	80012fe <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e0:	4b7a      	ldr	r3, [pc, #488]	; (80014cc <HAL_RCC_OscConfig+0x2d4>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	0795      	lsls	r5, r2, #30
 80012e6:	d502      	bpl.n	80012ee <HAL_RCC_OscConfig+0xf6>
 80012e8:	68e2      	ldr	r2, [r4, #12]
 80012ea:	2a01      	cmp	r2, #1
 80012ec:	d188      	bne.n	8001200 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	6921      	ldr	r1, [r4, #16]
 80012f2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80012f6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80012fa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fc:	e78a      	b.n	8001214 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012fe:	68e2      	ldr	r2, [r4, #12]
 8001300:	4b73      	ldr	r3, [pc, #460]	; (80014d0 <HAL_RCC_OscConfig+0x2d8>)
 8001302:	b1b2      	cbz	r2, 8001332 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001308:	f7ff fe24 	bl	8000f54 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130c:	4d6f      	ldr	r5, [pc, #444]	; (80014cc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800130e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001310:	682b      	ldr	r3, [r5, #0]
 8001312:	0798      	lsls	r0, r3, #30
 8001314:	d507      	bpl.n	8001326 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001316:	682b      	ldr	r3, [r5, #0]
 8001318:	6922      	ldr	r2, [r4, #16]
 800131a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800131e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001322:	602b      	str	r3, [r5, #0]
 8001324:	e776      	b.n	8001214 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001326:	f7ff fe15 	bl	8000f54 <HAL_GetTick>
 800132a:	1b80      	subs	r0, r0, r6
 800132c:	2802      	cmp	r0, #2
 800132e:	d9ef      	bls.n	8001310 <HAL_RCC_OscConfig+0x118>
 8001330:	e7a9      	b.n	8001286 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001332:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001334:	f7ff fe0e 	bl	8000f54 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001338:	4d64      	ldr	r5, [pc, #400]	; (80014cc <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800133a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133c:	682b      	ldr	r3, [r5, #0]
 800133e:	0799      	lsls	r1, r3, #30
 8001340:	f57f af68 	bpl.w	8001214 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001344:	f7ff fe06 	bl	8000f54 <HAL_GetTick>
 8001348:	1b80      	subs	r0, r0, r6
 800134a:	2802      	cmp	r0, #2
 800134c:	d9f6      	bls.n	800133c <HAL_RCC_OscConfig+0x144>
 800134e:	e79a      	b.n	8001286 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001350:	6962      	ldr	r2, [r4, #20]
 8001352:	4b60      	ldr	r3, [pc, #384]	; (80014d4 <HAL_RCC_OscConfig+0x2dc>)
 8001354:	b17a      	cbz	r2, 8001376 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800135a:	f7ff fdfb 	bl	8000f54 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135e:	4d5b      	ldr	r5, [pc, #364]	; (80014cc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001360:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001362:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001364:	079f      	lsls	r7, r3, #30
 8001366:	f53f af59 	bmi.w	800121c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800136a:	f7ff fdf3 	bl	8000f54 <HAL_GetTick>
 800136e:	1b80      	subs	r0, r0, r6
 8001370:	2802      	cmp	r0, #2
 8001372:	d9f6      	bls.n	8001362 <HAL_RCC_OscConfig+0x16a>
 8001374:	e787      	b.n	8001286 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001376:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001378:	f7ff fdec 	bl	8000f54 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800137c:	4d53      	ldr	r5, [pc, #332]	; (80014cc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800137e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001380:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001382:	0798      	lsls	r0, r3, #30
 8001384:	f57f af4a 	bpl.w	800121c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001388:	f7ff fde4 	bl	8000f54 <HAL_GetTick>
 800138c:	1b80      	subs	r0, r0, r6
 800138e:	2802      	cmp	r0, #2
 8001390:	d9f6      	bls.n	8001380 <HAL_RCC_OscConfig+0x188>
 8001392:	e778      	b.n	8001286 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001394:	4b4d      	ldr	r3, [pc, #308]	; (80014cc <HAL_RCC_OscConfig+0x2d4>)
 8001396:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001398:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800139c:	d128      	bne.n	80013f0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	9201      	str	r2, [sp, #4]
 80013a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013a6:	641a      	str	r2, [r3, #64]	; 0x40
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80013b2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	4d48      	ldr	r5, [pc, #288]	; (80014d8 <HAL_RCC_OscConfig+0x2e0>)
 80013b6:	682b      	ldr	r3, [r5, #0]
 80013b8:	05d9      	lsls	r1, r3, #23
 80013ba:	d51b      	bpl.n	80013f4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013bc:	68a3      	ldr	r3, [r4, #8]
 80013be:	4d43      	ldr	r5, [pc, #268]	; (80014cc <HAL_RCC_OscConfig+0x2d4>)
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d127      	bne.n	8001414 <HAL_RCC_OscConfig+0x21c>
 80013c4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80013cc:	f7ff fdc2 	bl	8000f54 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d0:	4d3e      	ldr	r5, [pc, #248]	; (80014cc <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80013d2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013da:	079b      	lsls	r3, r3, #30
 80013dc:	d539      	bpl.n	8001452 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80013de:	2e00      	cmp	r6, #0
 80013e0:	f43f af20 	beq.w	8001224 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e4:	4a39      	ldr	r2, [pc, #228]	; (80014cc <HAL_RCC_OscConfig+0x2d4>)
 80013e6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ec:	6413      	str	r3, [r2, #64]	; 0x40
 80013ee:	e719      	b.n	8001224 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80013f0:	2600      	movs	r6, #0
 80013f2:	e7df      	b.n	80013b4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f4:	682b      	ldr	r3, [r5, #0]
 80013f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80013fc:	f7ff fdaa 	bl	8000f54 <HAL_GetTick>
 8001400:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001402:	682b      	ldr	r3, [r5, #0]
 8001404:	05da      	lsls	r2, r3, #23
 8001406:	d4d9      	bmi.n	80013bc <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001408:	f7ff fda4 	bl	8000f54 <HAL_GetTick>
 800140c:	1bc0      	subs	r0, r0, r7
 800140e:	2802      	cmp	r0, #2
 8001410:	d9f7      	bls.n	8001402 <HAL_RCC_OscConfig+0x20a>
 8001412:	e738      	b.n	8001286 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001414:	2b05      	cmp	r3, #5
 8001416:	d104      	bne.n	8001422 <HAL_RCC_OscConfig+0x22a>
 8001418:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	672b      	str	r3, [r5, #112]	; 0x70
 8001420:	e7d0      	b.n	80013c4 <HAL_RCC_OscConfig+0x1cc>
 8001422:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001424:	f022 0201 	bic.w	r2, r2, #1
 8001428:	672a      	str	r2, [r5, #112]	; 0x70
 800142a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800142c:	f022 0204 	bic.w	r2, r2, #4
 8001430:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1ca      	bne.n	80013cc <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001436:	f7ff fd8d 	bl	8000f54 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800143a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800143e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001440:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001442:	0798      	lsls	r0, r3, #30
 8001444:	d5cb      	bpl.n	80013de <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001446:	f7ff fd85 	bl	8000f54 <HAL_GetTick>
 800144a:	1bc0      	subs	r0, r0, r7
 800144c:	4540      	cmp	r0, r8
 800144e:	d9f7      	bls.n	8001440 <HAL_RCC_OscConfig+0x248>
 8001450:	e719      	b.n	8001286 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001452:	f7ff fd7f 	bl	8000f54 <HAL_GetTick>
 8001456:	1bc0      	subs	r0, r0, r7
 8001458:	4540      	cmp	r0, r8
 800145a:	d9bd      	bls.n	80013d8 <HAL_RCC_OscConfig+0x1e0>
 800145c:	e713      	b.n	8001286 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800145e:	4d1b      	ldr	r5, [pc, #108]	; (80014cc <HAL_RCC_OscConfig+0x2d4>)
 8001460:	68ab      	ldr	r3, [r5, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b08      	cmp	r3, #8
 8001468:	f43f aeca 	beq.w	8001200 <HAL_RCC_OscConfig+0x8>
 800146c:	4e1b      	ldr	r6, [pc, #108]	; (80014dc <HAL_RCC_OscConfig+0x2e4>)
 800146e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001470:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001472:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001474:	d134      	bne.n	80014e0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001476:	f7ff fd6d 	bl	8000f54 <HAL_GetTick>
 800147a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147c:	682b      	ldr	r3, [r5, #0]
 800147e:	0199      	lsls	r1, r3, #6
 8001480:	d41e      	bmi.n	80014c0 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001482:	6a22      	ldr	r2, [r4, #32]
 8001484:	69e3      	ldr	r3, [r4, #28]
 8001486:	4313      	orrs	r3, r2
 8001488:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800148a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800148e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001490:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001494:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001496:	4c0d      	ldr	r4, [pc, #52]	; (80014cc <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001498:	0852      	lsrs	r2, r2, #1
 800149a:	3a01      	subs	r2, #1
 800149c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80014a0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80014a2:	2301      	movs	r3, #1
 80014a4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80014a6:	f7ff fd55 	bl	8000f54 <HAL_GetTick>
 80014aa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ac:	6823      	ldr	r3, [r4, #0]
 80014ae:	019a      	lsls	r2, r3, #6
 80014b0:	f53f aebc 	bmi.w	800122c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff fd4e 	bl	8000f54 <HAL_GetTick>
 80014b8:	1b40      	subs	r0, r0, r5
 80014ba:	2802      	cmp	r0, #2
 80014bc:	d9f6      	bls.n	80014ac <HAL_RCC_OscConfig+0x2b4>
 80014be:	e6e2      	b.n	8001286 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c0:	f7ff fd48 	bl	8000f54 <HAL_GetTick>
 80014c4:	1bc0      	subs	r0, r0, r7
 80014c6:	2802      	cmp	r0, #2
 80014c8:	d9d8      	bls.n	800147c <HAL_RCC_OscConfig+0x284>
 80014ca:	e6dc      	b.n	8001286 <HAL_RCC_OscConfig+0x8e>
 80014cc:	40023800 	.word	0x40023800
 80014d0:	42470000 	.word	0x42470000
 80014d4:	42470e80 	.word	0x42470e80
 80014d8:	40007000 	.word	0x40007000
 80014dc:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80014e0:	f7ff fd38 	bl	8000f54 <HAL_GetTick>
 80014e4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e6:	682b      	ldr	r3, [r5, #0]
 80014e8:	019b      	lsls	r3, r3, #6
 80014ea:	f57f ae9f 	bpl.w	800122c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ee:	f7ff fd31 	bl	8000f54 <HAL_GetTick>
 80014f2:	1b00      	subs	r0, r0, r4
 80014f4:	2802      	cmp	r0, #2
 80014f6:	d9f6      	bls.n	80014e6 <HAL_RCC_OscConfig+0x2ee>
 80014f8:	e6c5      	b.n	8001286 <HAL_RCC_OscConfig+0x8e>
 80014fa:	bf00      	nop

080014fc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014fc:	4913      	ldr	r1, [pc, #76]	; (800154c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80014fe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001500:	688b      	ldr	r3, [r1, #8]
 8001502:	f003 030c 	and.w	r3, r3, #12
 8001506:	2b04      	cmp	r3, #4
 8001508:	d003      	beq.n	8001512 <HAL_RCC_GetSysClockFreq+0x16>
 800150a:	2b08      	cmp	r3, #8
 800150c:	d003      	beq.n	8001516 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800150e:	4810      	ldr	r0, [pc, #64]	; (8001550 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001510:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001512:	4810      	ldr	r0, [pc, #64]	; (8001554 <HAL_RCC_GetSysClockFreq+0x58>)
 8001514:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001516:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001518:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800151a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800151c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001520:	bf14      	ite	ne
 8001522:	480c      	ldrne	r0, [pc, #48]	; (8001554 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001524:	480a      	ldreq	r0, [pc, #40]	; (8001550 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001526:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800152a:	bf18      	it	ne
 800152c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800152e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001532:	fba1 0100 	umull	r0, r1, r1, r0
 8001536:	f7ff fb3b 	bl	8000bb0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <HAL_RCC_GetSysClockFreq+0x50>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001542:	3301      	adds	r3, #1
 8001544:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001546:	fbb0 f0f3 	udiv	r0, r0, r3
 800154a:	bd08      	pop	{r3, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	00f42400 	.word	0x00f42400
 8001554:	007a1200 	.word	0x007a1200

08001558 <HAL_RCC_ClockConfig>:
{
 8001558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800155c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800155e:	4604      	mov	r4, r0
 8001560:	b910      	cbnz	r0, 8001568 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001562:	2001      	movs	r0, #1
 8001564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001568:	4b44      	ldr	r3, [pc, #272]	; (800167c <HAL_RCC_ClockConfig+0x124>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	f002 020f 	and.w	r2, r2, #15
 8001570:	428a      	cmp	r2, r1
 8001572:	d328      	bcc.n	80015c6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001574:	6821      	ldr	r1, [r4, #0]
 8001576:	078f      	lsls	r7, r1, #30
 8001578:	d42d      	bmi.n	80015d6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800157a:	07c8      	lsls	r0, r1, #31
 800157c:	d440      	bmi.n	8001600 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800157e:	4b3f      	ldr	r3, [pc, #252]	; (800167c <HAL_RCC_ClockConfig+0x124>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	f002 020f 	and.w	r2, r2, #15
 8001586:	4295      	cmp	r5, r2
 8001588:	d366      	bcc.n	8001658 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800158a:	6822      	ldr	r2, [r4, #0]
 800158c:	0751      	lsls	r1, r2, #29
 800158e:	d46c      	bmi.n	800166a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001590:	0713      	lsls	r3, r2, #28
 8001592:	d507      	bpl.n	80015a4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001594:	4a3a      	ldr	r2, [pc, #232]	; (8001680 <HAL_RCC_ClockConfig+0x128>)
 8001596:	6921      	ldr	r1, [r4, #16]
 8001598:	6893      	ldr	r3, [r2, #8]
 800159a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800159e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80015a2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015a4:	f7ff ffaa 	bl	80014fc <HAL_RCC_GetSysClockFreq>
 80015a8:	4b35      	ldr	r3, [pc, #212]	; (8001680 <HAL_RCC_ClockConfig+0x128>)
 80015aa:	4a36      	ldr	r2, [pc, #216]	; (8001684 <HAL_RCC_ClockConfig+0x12c>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015b2:	5cd3      	ldrb	r3, [r2, r3]
 80015b4:	40d8      	lsrs	r0, r3
 80015b6:	4b34      	ldr	r3, [pc, #208]	; (8001688 <HAL_RCC_ClockConfig+0x130>)
 80015b8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80015ba:	2000      	movs	r0, #0
 80015bc:	f7ff fc80 	bl	8000ec0 <HAL_InitTick>
  return HAL_OK;
 80015c0:	2000      	movs	r0, #0
 80015c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	b2ca      	uxtb	r2, r1
 80015c8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 030f 	and.w	r3, r3, #15
 80015d0:	4299      	cmp	r1, r3
 80015d2:	d1c6      	bne.n	8001562 <HAL_RCC_ClockConfig+0xa>
 80015d4:	e7ce      	b.n	8001574 <HAL_RCC_ClockConfig+0x1c>
 80015d6:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015dc:	bf1e      	ittt	ne
 80015de:	689a      	ldrne	r2, [r3, #8]
 80015e0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80015e4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e8:	bf42      	ittt	mi
 80015ea:	689a      	ldrmi	r2, [r3, #8]
 80015ec:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80015f0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	68a0      	ldr	r0, [r4, #8]
 80015f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80015fa:	4302      	orrs	r2, r0
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	e7bc      	b.n	800157a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001600:	6862      	ldr	r2, [r4, #4]
 8001602:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <HAL_RCC_ClockConfig+0x128>)
 8001604:	2a01      	cmp	r2, #1
 8001606:	d11d      	bne.n	8001644 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160e:	d0a8      	beq.n	8001562 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001610:	4e1b      	ldr	r6, [pc, #108]	; (8001680 <HAL_RCC_ClockConfig+0x128>)
 8001612:	68b3      	ldr	r3, [r6, #8]
 8001614:	f023 0303 	bic.w	r3, r3, #3
 8001618:	4313      	orrs	r3, r2
 800161a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800161c:	f7ff fc9a 	bl	8000f54 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001620:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001624:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001626:	68b3      	ldr	r3, [r6, #8]
 8001628:	6862      	ldr	r2, [r4, #4]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001632:	d0a4      	beq.n	800157e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001634:	f7ff fc8e 	bl	8000f54 <HAL_GetTick>
 8001638:	1bc0      	subs	r0, r0, r7
 800163a:	4540      	cmp	r0, r8
 800163c:	d9f3      	bls.n	8001626 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800163e:	2003      	movs	r0, #3
}
 8001640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001644:	1e91      	subs	r1, r2, #2
 8001646:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001648:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164a:	d802      	bhi.n	8001652 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001650:	e7dd      	b.n	800160e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001652:	f013 0f02 	tst.w	r3, #2
 8001656:	e7da      	b.n	800160e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001658:	b2ea      	uxtb	r2, r5
 800165a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	429d      	cmp	r5, r3
 8001664:	f47f af7d 	bne.w	8001562 <HAL_RCC_ClockConfig+0xa>
 8001668:	e78f      	b.n	800158a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800166a:	4905      	ldr	r1, [pc, #20]	; (8001680 <HAL_RCC_ClockConfig+0x128>)
 800166c:	68e0      	ldr	r0, [r4, #12]
 800166e:	688b      	ldr	r3, [r1, #8]
 8001670:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001674:	4303      	orrs	r3, r0
 8001676:	608b      	str	r3, [r1, #8]
 8001678:	e78a      	b.n	8001590 <HAL_RCC_ClockConfig+0x38>
 800167a:	bf00      	nop
 800167c:	40023c00 	.word	0x40023c00
 8001680:	40023800 	.word	0x40023800
 8001684:	0800500e 	.word	0x0800500e
 8001688:	2000002c 	.word	0x2000002c

0800168c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001696:	5cd3      	ldrb	r3, [r2, r3]
 8001698:	4a03      	ldr	r2, [pc, #12]	; (80016a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800169a:	6810      	ldr	r0, [r2, #0]
}
 800169c:	40d8      	lsrs	r0, r3
 800169e:	4770      	bx	lr
 80016a0:	40023800 	.word	0x40023800
 80016a4:	0800501e 	.word	0x0800501e
 80016a8:	2000002c 	.word	0x2000002c

080016ac <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80016b6:	5cd3      	ldrb	r3, [r2, r3]
 80016b8:	4a03      	ldr	r2, [pc, #12]	; (80016c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80016ba:	6810      	ldr	r0, [r2, #0]
}
 80016bc:	40d8      	lsrs	r0, r3
 80016be:	4770      	bx	lr
 80016c0:	40023800 	.word	0x40023800
 80016c4:	0800501e 	.word	0x0800501e
 80016c8:	2000002c 	.word	0x2000002c

080016cc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016cc:	6a03      	ldr	r3, [r0, #32]
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016d4:	6a03      	ldr	r3, [r0, #32]
{
 80016d6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016d8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80016da:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80016dc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80016de:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80016e2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80016e4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80016e6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80016ea:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80016ec:	4d0a      	ldr	r5, [pc, #40]	; (8001718 <TIM_OC1_SetConfig+0x4c>)
 80016ee:	42a8      	cmp	r0, r5
 80016f0:	d10b      	bne.n	800170a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80016f2:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80016f4:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 80016f6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80016fa:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80016fc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80016fe:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001702:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001704:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001708:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800170a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800170c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800170e:	684a      	ldr	r2, [r1, #4]
 8001710:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001712:	6203      	str	r3, [r0, #32]
 8001714:	bd70      	pop	{r4, r5, r6, pc}
 8001716:	bf00      	nop
 8001718:	40010000 	.word	0x40010000

0800171c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800171c:	6a03      	ldr	r3, [r0, #32]
 800171e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001722:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001724:	6a03      	ldr	r3, [r0, #32]
{
 8001726:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001728:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800172a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800172c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800172e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001732:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001734:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001736:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800173a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800173e:	4d0b      	ldr	r5, [pc, #44]	; (800176c <TIM_OC3_SetConfig+0x50>)
 8001740:	42a8      	cmp	r0, r5
 8001742:	d10d      	bne.n	8001760 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001744:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001746:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800174c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001750:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001752:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001756:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800175c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001760:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001762:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001764:	684a      	ldr	r2, [r1, #4]
 8001766:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001768:	6203      	str	r3, [r0, #32]
 800176a:	bd70      	pop	{r4, r5, r6, pc}
 800176c:	40010000 	.word	0x40010000

08001770 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001770:	6a03      	ldr	r3, [r0, #32]
 8001772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001776:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001778:	6a03      	ldr	r3, [r0, #32]
{
 800177a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800177c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800177e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001780:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001782:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001786:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800178a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800178c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001790:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001794:	4d06      	ldr	r5, [pc, #24]	; (80017b0 <TIM_OC4_SetConfig+0x40>)
 8001796:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001798:	bf02      	ittt	eq
 800179a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800179c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80017a0:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017a4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80017a6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80017a8:	684a      	ldr	r2, [r1, #4]
 80017aa:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017ac:	6203      	str	r3, [r0, #32]
 80017ae:	bd30      	pop	{r4, r5, pc}
 80017b0:	40010000 	.word	0x40010000

080017b4 <HAL_TIM_PeriodElapsedCallback>:
 80017b4:	4770      	bx	lr

080017b6 <HAL_TIM_PWM_PulseFinishedCallback>:
 80017b6:	4770      	bx	lr

080017b8 <HAL_TIM_TriggerCallback>:
 80017b8:	4770      	bx	lr

080017ba <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017ba:	6803      	ldr	r3, [r0, #0]
 80017bc:	691a      	ldr	r2, [r3, #16]
 80017be:	0791      	lsls	r1, r2, #30
{
 80017c0:	b510      	push	{r4, lr}
 80017c2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017c4:	d50e      	bpl.n	80017e4 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	0792      	lsls	r2, r2, #30
 80017ca:	d50b      	bpl.n	80017e4 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017cc:	f06f 0202 	mvn.w	r2, #2
 80017d0:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017d2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017d4:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017d6:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017d8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017da:	d077      	beq.n	80018cc <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80017dc:	f000 fdc4 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e0:	2300      	movs	r3, #0
 80017e2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	0750      	lsls	r0, r2, #29
 80017ea:	d510      	bpl.n	800180e <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	0751      	lsls	r1, r2, #29
 80017f0:	d50d      	bpl.n	800180e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017f2:	f06f 0204 	mvn.w	r2, #4
 80017f6:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017f8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017fa:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017fc:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001800:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001802:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001804:	d068      	beq.n	80018d8 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001806:	f000 fdaf 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800180a:	2300      	movs	r3, #0
 800180c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	691a      	ldr	r2, [r3, #16]
 8001812:	0712      	lsls	r2, r2, #28
 8001814:	d50f      	bpl.n	8001836 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	0710      	lsls	r0, r2, #28
 800181a:	d50c      	bpl.n	8001836 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800181c:	f06f 0208 	mvn.w	r2, #8
 8001820:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001822:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001824:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001826:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001828:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800182a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800182c:	d05a      	beq.n	80018e4 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800182e:	f000 fd9b 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001832:	2300      	movs	r3, #0
 8001834:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001836:	6823      	ldr	r3, [r4, #0]
 8001838:	691a      	ldr	r2, [r3, #16]
 800183a:	06d2      	lsls	r2, r2, #27
 800183c:	d510      	bpl.n	8001860 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	06d0      	lsls	r0, r2, #27
 8001842:	d50d      	bpl.n	8001860 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001844:	f06f 0210 	mvn.w	r2, #16
 8001848:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800184a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800184c:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800184e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001852:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001854:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001856:	d04b      	beq.n	80018f0 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001858:	f000 fd86 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800185c:	2300      	movs	r3, #0
 800185e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	07d1      	lsls	r1, r2, #31
 8001866:	d508      	bpl.n	800187a <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	07d2      	lsls	r2, r2, #31
 800186c:	d505      	bpl.n	800187a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800186e:	f06f 0201 	mvn.w	r2, #1
 8001872:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001874:	4620      	mov	r0, r4
 8001876:	f7ff ff9d 	bl	80017b4 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	691a      	ldr	r2, [r3, #16]
 800187e:	0610      	lsls	r0, r2, #24
 8001880:	d508      	bpl.n	8001894 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	0611      	lsls	r1, r2, #24
 8001886:	d505      	bpl.n	8001894 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001888:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800188c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800188e:	4620      	mov	r0, r4
 8001890:	f000 fafe 	bl	8001e90 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	0652      	lsls	r2, r2, #25
 800189a:	d508      	bpl.n	80018ae <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	0650      	lsls	r0, r2, #25
 80018a0:	d505      	bpl.n	80018ae <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018a6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80018a8:	4620      	mov	r0, r4
 80018aa:	f7ff ff85 	bl	80017b8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	691a      	ldr	r2, [r3, #16]
 80018b2:	0691      	lsls	r1, r2, #26
 80018b4:	d522      	bpl.n	80018fc <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	0692      	lsls	r2, r2, #26
 80018ba:	d51f      	bpl.n	80018fc <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018bc:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80018c0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018c2:	611a      	str	r2, [r3, #16]
}
 80018c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80018c8:	f000 bae1 	b.w	8001e8e <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018cc:	f001 f8ca 	bl	8002a64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018d0:	4620      	mov	r0, r4
 80018d2:	f7ff ff70 	bl	80017b6 <HAL_TIM_PWM_PulseFinishedCallback>
 80018d6:	e783      	b.n	80017e0 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018d8:	f001 f8c4 	bl	8002a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018dc:	4620      	mov	r0, r4
 80018de:	f7ff ff6a 	bl	80017b6 <HAL_TIM_PWM_PulseFinishedCallback>
 80018e2:	e792      	b.n	800180a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018e4:	f001 f8be 	bl	8002a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018e8:	4620      	mov	r0, r4
 80018ea:	f7ff ff64 	bl	80017b6 <HAL_TIM_PWM_PulseFinishedCallback>
 80018ee:	e7a0      	b.n	8001832 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018f0:	f001 f8b8 	bl	8002a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018f4:	4620      	mov	r0, r4
 80018f6:	f7ff ff5e 	bl	80017b6 <HAL_TIM_PWM_PulseFinishedCallback>
 80018fa:	e7af      	b.n	800185c <HAL_TIM_IRQHandler+0xa2>
 80018fc:	bd10      	pop	{r4, pc}
	...

08001900 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001900:	4a24      	ldr	r2, [pc, #144]	; (8001994 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001902:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001904:	4290      	cmp	r0, r2
 8001906:	d00e      	beq.n	8001926 <TIM_Base_SetConfig+0x26>
 8001908:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800190c:	d00b      	beq.n	8001926 <TIM_Base_SetConfig+0x26>
 800190e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001912:	4290      	cmp	r0, r2
 8001914:	d007      	beq.n	8001926 <TIM_Base_SetConfig+0x26>
 8001916:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800191a:	4290      	cmp	r0, r2
 800191c:	d003      	beq.n	8001926 <TIM_Base_SetConfig+0x26>
 800191e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001922:	4290      	cmp	r0, r2
 8001924:	d115      	bne.n	8001952 <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 8001926:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800192c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800192e:	4a19      	ldr	r2, [pc, #100]	; (8001994 <TIM_Base_SetConfig+0x94>)
 8001930:	4290      	cmp	r0, r2
 8001932:	d019      	beq.n	8001968 <TIM_Base_SetConfig+0x68>
 8001934:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001938:	d016      	beq.n	8001968 <TIM_Base_SetConfig+0x68>
 800193a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800193e:	4290      	cmp	r0, r2
 8001940:	d012      	beq.n	8001968 <TIM_Base_SetConfig+0x68>
 8001942:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001946:	4290      	cmp	r0, r2
 8001948:	d00e      	beq.n	8001968 <TIM_Base_SetConfig+0x68>
 800194a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800194e:	4290      	cmp	r0, r2
 8001950:	d00a      	beq.n	8001968 <TIM_Base_SetConfig+0x68>
 8001952:	4a11      	ldr	r2, [pc, #68]	; (8001998 <TIM_Base_SetConfig+0x98>)
 8001954:	4290      	cmp	r0, r2
 8001956:	d007      	beq.n	8001968 <TIM_Base_SetConfig+0x68>
 8001958:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800195c:	4290      	cmp	r0, r2
 800195e:	d003      	beq.n	8001968 <TIM_Base_SetConfig+0x68>
 8001960:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001964:	4290      	cmp	r0, r2
 8001966:	d103      	bne.n	8001970 <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001968:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800196a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800196e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001970:	694a      	ldr	r2, [r1, #20]
 8001972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001976:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001978:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800197a:	688b      	ldr	r3, [r1, #8]
 800197c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800197e:	680b      	ldr	r3, [r1, #0]
 8001980:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001982:	4b04      	ldr	r3, [pc, #16]	; (8001994 <TIM_Base_SetConfig+0x94>)
 8001984:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001986:	bf04      	itt	eq
 8001988:	690b      	ldreq	r3, [r1, #16]
 800198a:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800198c:	2301      	movs	r3, #1
 800198e:	6143      	str	r3, [r0, #20]
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40010000 	.word	0x40010000
 8001998:	40014000 	.word	0x40014000

0800199c <HAL_TIM_OC_Init>:
{
 800199c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800199e:	4604      	mov	r4, r0
 80019a0:	b1a0      	cbz	r0, 80019cc <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80019a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019aa:	b91b      	cbnz	r3, 80019b4 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80019b0:	f001 f920 	bl	8002bf4 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80019b4:	2302      	movs	r3, #2
 80019b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80019ba:	6820      	ldr	r0, [r4, #0]
 80019bc:	1d21      	adds	r1, r4, #4
 80019be:	f7ff ff9f 	bl	8001900 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80019c2:	2301      	movs	r3, #1
 80019c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80019c8:	2000      	movs	r0, #0
 80019ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019cc:	2001      	movs	r0, #1
}
 80019ce:	bd10      	pop	{r4, pc}

080019d0 <HAL_TIM_PWM_Init>:
{
 80019d0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80019d2:	4604      	mov	r4, r0
 80019d4:	b1a0      	cbz	r0, 8001a00 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80019d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019de:	b91b      	cbnz	r3, 80019e8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80019e4:	f001 f8ee 	bl	8002bc4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80019e8:	2302      	movs	r3, #2
 80019ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019ee:	6820      	ldr	r0, [r4, #0]
 80019f0:	1d21      	adds	r1, r4, #4
 80019f2:	f7ff ff85 	bl	8001900 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80019fc:	2000      	movs	r0, #0
 80019fe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a00:	2001      	movs	r0, #1
}
 8001a02:	bd10      	pop	{r4, pc}

08001a04 <HAL_TIM_IC_Init>:
{
 8001a04:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001a06:	4604      	mov	r4, r0
 8001a08:	b1a0      	cbz	r0, 8001a34 <HAL_TIM_IC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001a0a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a12:	b91b      	cbnz	r3, 8001a1c <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001a14:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8001a18:	f001 f89a 	bl	8002b50 <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a22:	6820      	ldr	r0, [r4, #0]
 8001a24:	1d21      	adds	r1, r4, #4
 8001a26:	f7ff ff6b 	bl	8001900 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001a30:	2000      	movs	r0, #0
 8001a32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a34:	2001      	movs	r0, #1
}
 8001a36:	bd10      	pop	{r4, pc}

08001a38 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a38:	6a03      	ldr	r3, [r0, #32]
 8001a3a:	f023 0310 	bic.w	r3, r3, #16
 8001a3e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001a40:	6a03      	ldr	r3, [r0, #32]
{
 8001a42:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001a44:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001a46:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a48:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001a4a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a4e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001a52:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001a54:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001a58:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001a5c:	4d0b      	ldr	r5, [pc, #44]	; (8001a8c <TIM_OC2_SetConfig+0x54>)
 8001a5e:	42a8      	cmp	r0, r5
 8001a60:	d10d      	bne.n	8001a7e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a62:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a64:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a6a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001a6e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001a70:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a74:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a7a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001a7e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001a80:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001a82:	684a      	ldr	r2, [r1, #4]
 8001a84:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001a86:	6203      	str	r3, [r0, #32]
 8001a88:	bd70      	pop	{r4, r5, r6, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40010000 	.word	0x40010000

08001a90 <HAL_TIM_OC_ConfigChannel>:
{
 8001a90:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001a92:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001a96:	2b01      	cmp	r3, #1
{
 8001a98:	4604      	mov	r4, r0
 8001a9a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001a9e:	d018      	beq.n	8001ad2 <HAL_TIM_OC_ConfigChannel+0x42>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 8001aaa:	461d      	mov	r5, r3
  switch (Channel)
 8001aac:	2a0c      	cmp	r2, #12
 8001aae:	d80b      	bhi.n	8001ac8 <HAL_TIM_OC_ConfigChannel+0x38>
 8001ab0:	e8df f002 	tbb	[pc, r2]
 8001ab4:	0a0a0a07 	.word	0x0a0a0a07
 8001ab8:	0a0a0a10 	.word	0x0a0a0a10
 8001abc:	0a0a0a14 	.word	0x0a0a0a14
 8001ac0:	18          	.byte	0x18
 8001ac1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ac2:	6820      	ldr	r0, [r4, #0]
 8001ac4:	f7ff fe02 	bl	80016cc <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8001ac8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001aca:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001ace:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001ad2:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ad4:	6820      	ldr	r0, [r4, #0]
 8001ad6:	f7ff ffaf 	bl	8001a38 <TIM_OC2_SetConfig>
      break;
 8001ada:	e7f5      	b.n	8001ac8 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001adc:	6820      	ldr	r0, [r4, #0]
 8001ade:	f7ff fe1d 	bl	800171c <TIM_OC3_SetConfig>
      break;
 8001ae2:	e7f1      	b.n	8001ac8 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ae4:	6820      	ldr	r0, [r4, #0]
 8001ae6:	f7ff fe43 	bl	8001770 <TIM_OC4_SetConfig>
      break;
 8001aea:	e7ed      	b.n	8001ac8 <HAL_TIM_OC_ConfigChannel+0x38>

08001aec <HAL_TIM_PWM_ConfigChannel>:
{
 8001aec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001aee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001af2:	2b01      	cmp	r3, #1
{
 8001af4:	4604      	mov	r4, r0
 8001af6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001afa:	d025      	beq.n	8001b48 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001afc:	2301      	movs	r3, #1
 8001afe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001b02:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8001b06:	2a0c      	cmp	r2, #12
 8001b08:	d818      	bhi.n	8001b3c <HAL_TIM_PWM_ConfigChannel+0x50>
 8001b0a:	e8df f002 	tbb	[pc, r2]
 8001b0e:	1707      	.short	0x1707
 8001b10:	171e1717 	.word	0x171e1717
 8001b14:	172f1717 	.word	0x172f1717
 8001b18:	1717      	.short	0x1717
 8001b1a:	40          	.byte	0x40
 8001b1b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b1c:	6820      	ldr	r0, [r4, #0]
 8001b1e:	f7ff fdd5 	bl	80016cc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b22:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b24:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b26:	699a      	ldr	r2, [r3, #24]
 8001b28:	f042 0208 	orr.w	r2, r2, #8
 8001b2c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b2e:	699a      	ldr	r2, [r3, #24]
 8001b30:	f022 0204 	bic.w	r2, r2, #4
 8001b34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b36:	699a      	ldr	r2, [r3, #24]
 8001b38:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b3a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001b3c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001b3e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001b40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001b44:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001b48:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b4a:	6820      	ldr	r0, [r4, #0]
 8001b4c:	f7ff ff74 	bl	8001a38 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b50:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b52:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b54:	699a      	ldr	r2, [r3, #24]
 8001b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b64:	699a      	ldr	r2, [r3, #24]
 8001b66:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b6a:	e7e6      	b.n	8001b3a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b6c:	6820      	ldr	r0, [r4, #0]
 8001b6e:	f7ff fdd5 	bl	800171c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b72:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b74:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b76:	69da      	ldr	r2, [r3, #28]
 8001b78:	f042 0208 	orr.w	r2, r2, #8
 8001b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b7e:	69da      	ldr	r2, [r3, #28]
 8001b80:	f022 0204 	bic.w	r2, r2, #4
 8001b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b86:	69da      	ldr	r2, [r3, #28]
 8001b88:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b8a:	61da      	str	r2, [r3, #28]
      break;
 8001b8c:	e7d6      	b.n	8001b3c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b8e:	6820      	ldr	r0, [r4, #0]
 8001b90:	f7ff fdee 	bl	8001770 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b94:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b96:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b98:	69da      	ldr	r2, [r3, #28]
 8001b9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001ba0:	69da      	ldr	r2, [r3, #28]
 8001ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ba6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ba8:	69da      	ldr	r2, [r3, #28]
 8001baa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001bae:	e7ec      	b.n	8001b8a <HAL_TIM_PWM_ConfigChannel+0x9e>

08001bb0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001bb0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bb2:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001bb4:	4e16      	ldr	r6, [pc, #88]	; (8001c10 <TIM_TI1_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bb6:	f024 0401 	bic.w	r4, r4, #1
 8001bba:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001bbc:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8001bbe:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001bc0:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001bc2:	d012      	beq.n	8001bea <TIM_TI1_SetConfig+0x3a>
 8001bc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001bc8:	d00f      	beq.n	8001bea <TIM_TI1_SetConfig+0x3a>
 8001bca:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8001bce:	42b0      	cmp	r0, r6
 8001bd0:	d00b      	beq.n	8001bea <TIM_TI1_SetConfig+0x3a>
 8001bd2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001bd6:	42b0      	cmp	r0, r6
 8001bd8:	d007      	beq.n	8001bea <TIM_TI1_SetConfig+0x3a>
 8001bda:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001bde:	42b0      	cmp	r0, r6
 8001be0:	d003      	beq.n	8001bea <TIM_TI1_SetConfig+0x3a>
 8001be2:	f506 369a 	add.w	r6, r6, #78848	; 0x13400
 8001be6:	42b0      	cmp	r0, r6
 8001be8:	d10f      	bne.n	8001c0a <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001bea:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8001bee:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001bf0:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bf2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001bf6:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bf8:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001bfc:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001c00:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001c02:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c04:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001c06:	6201      	str	r1, [r0, #32]
}
 8001c08:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001c0a:	f044 0201 	orr.w	r2, r4, #1
 8001c0e:	e7ef      	b.n	8001bf0 <TIM_TI1_SetConfig+0x40>
 8001c10:	40010000 	.word	0x40010000

08001c14 <HAL_TIM_IC_ConfigChannel>:
{
 8001c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001c16:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001c1a:	2b01      	cmp	r3, #1
{
 8001c1c:	4604      	mov	r4, r0
 8001c1e:	460d      	mov	r5, r1
 8001c20:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001c24:	d019      	beq.n	8001c5a <HAL_TIM_IC_ConfigChannel+0x46>
 8001c26:	2301      	movs	r3, #1
 8001c28:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001c2c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 8001c30:	b9a2      	cbnz	r2, 8001c5c <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8001c32:	68cb      	ldr	r3, [r1, #12]
 8001c34:	6820      	ldr	r0, [r4, #0]
 8001c36:	c906      	ldmia	r1, {r1, r2}
 8001c38:	f7ff ffba 	bl	8001bb0 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001c3c:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001c3e:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001c40:	699a      	ldr	r2, [r3, #24]
 8001c42:	f022 020c 	bic.w	r2, r2, #12
 8001c46:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001c48:	699a      	ldr	r2, [r3, #24]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001c4e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001c50:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001c52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001c56:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8001c5c:	2a04      	cmp	r2, #4
 8001c5e:	688e      	ldr	r6, [r1, #8]
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	68e8      	ldr	r0, [r5, #12]
 8001c64:	c982      	ldmia	r1, {r1, r7}
 8001c66:	d11f      	bne.n	8001ca8 <HAL_TIM_IC_ConfigChannel+0x94>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c68:	6a1a      	ldr	r2, [r3, #32]
 8001c6a:	f022 0210 	bic.w	r2, r2, #16
 8001c6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c70:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001c72:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001c74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001c78:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001c7c:	0300      	lsls	r0, r0, #12
 8001c7e:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c80:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001c84:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001c86:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001c88:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c8c:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001c90:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c94:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001c96:	699a      	ldr	r2, [r3, #24]
 8001c98:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001c9c:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001c9e:	699a      	ldr	r2, [r3, #24]
 8001ca0:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001ca4:	619e      	str	r6, [r3, #24]
 8001ca6:	e7d2      	b.n	8001c4e <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8001ca8:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001caa:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8001cac:	d11c      	bne.n	8001ce8 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001cae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cb2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001cb4:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001cb6:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001cb8:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8001cbc:	433a      	orrs	r2, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001cbe:	0100      	lsls	r0, r0, #4
 8001cc0:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001cc2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001cc6:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001cc8:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001cca:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001cce:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001cd2:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001cd4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001cd6:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001cd8:	69da      	ldr	r2, [r3, #28]
 8001cda:	f022 020c 	bic.w	r2, r2, #12
 8001cde:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001ce0:	69da      	ldr	r2, [r3, #28]
 8001ce2:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001ce4:	61de      	str	r6, [r3, #28]
 8001ce6:	e7b2      	b.n	8001c4e <HAL_TIM_IC_ConfigChannel+0x3a>
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ce8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001cee:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001cf0:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001cf2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001cf6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001cfa:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001cfc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001d00:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001d02:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001d04:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001d06:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001d0a:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001d0e:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001d10:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001d12:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001d14:	69da      	ldr	r2, [r3, #28]
 8001d16:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001d1a:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001d1c:	69da      	ldr	r2, [r3, #28]
 8001d1e:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001d22:	e7df      	b.n	8001ce4 <HAL_TIM_IC_ConfigChannel+0xd0>

08001d24 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001d24:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001d26:	f001 011f 	and.w	r1, r1, #31
{
 8001d2a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001d2c:	2401      	movs	r4, #1
 8001d2e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001d30:	ea23 0304 	bic.w	r3, r3, r4
 8001d34:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001d36:	6a03      	ldr	r3, [r0, #32]
 8001d38:	408a      	lsls	r2, r1
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	6202      	str	r2, [r0, #32]
 8001d3e:	bd10      	pop	{r4, pc}

08001d40 <HAL_TIM_PWM_Start>:
{
 8001d40:	b510      	push	{r4, lr}
 8001d42:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d44:	2201      	movs	r2, #1
 8001d46:	6800      	ldr	r0, [r0, #0]
 8001d48:	f7ff ffec 	bl	8001d24 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	4a09      	ldr	r2, [pc, #36]	; (8001d74 <HAL_TIM_PWM_Start+0x34>)
 8001d50:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001d52:	bf02      	ittt	eq
 8001d54:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001d56:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001d5a:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d62:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001d64:	bf1e      	ittt	ne
 8001d66:	681a      	ldrne	r2, [r3, #0]
 8001d68:	f042 0201 	orrne.w	r2, r2, #1
 8001d6c:	601a      	strne	r2, [r3, #0]
}
 8001d6e:	2000      	movs	r0, #0
 8001d70:	bd10      	pop	{r4, pc}
 8001d72:	bf00      	nop
 8001d74:	40010000 	.word	0x40010000

08001d78 <HAL_TIM_PWM_Start_IT>:
{
 8001d78:	b510      	push	{r4, lr}
 8001d7a:	4604      	mov	r4, r0
  switch (Channel)
 8001d7c:	290c      	cmp	r1, #12
 8001d7e:	d80d      	bhi.n	8001d9c <HAL_TIM_PWM_Start_IT+0x24>
 8001d80:	e8df f001 	tbb	[pc, r1]
 8001d84:	0c0c0c07 	.word	0x0c0c0c07
 8001d88:	0c0c0c23 	.word	0x0c0c0c23
 8001d8c:	0c0c0c28 	.word	0x0c0c0c28
 8001d90:	2d          	.byte	0x2d
 8001d91:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001d92:	6802      	ldr	r2, [r0, #0]
 8001d94:	68d3      	ldr	r3, [r2, #12]
 8001d96:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001d9a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d9c:	6820      	ldr	r0, [r4, #0]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f7ff ffc0 	bl	8001d24 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <HAL_TIM_PWM_Start_IT+0x70>)
 8001da8:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001daa:	bf02      	ittt	eq
 8001dac:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001dae:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001db2:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dba:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001dbc:	bf1e      	ittt	ne
 8001dbe:	681a      	ldrne	r2, [r3, #0]
 8001dc0:	f042 0201 	orrne.w	r2, r2, #1
 8001dc4:	601a      	strne	r2, [r3, #0]
}
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001dca:	6802      	ldr	r2, [r0, #0]
 8001dcc:	68d3      	ldr	r3, [r2, #12]
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	e7e2      	b.n	8001d9a <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001dd4:	6802      	ldr	r2, [r0, #0]
 8001dd6:	68d3      	ldr	r3, [r2, #12]
 8001dd8:	f043 0308 	orr.w	r3, r3, #8
 8001ddc:	e7dd      	b.n	8001d9a <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001dde:	6802      	ldr	r2, [r0, #0]
 8001de0:	68d3      	ldr	r3, [r2, #12]
 8001de2:	f043 0310 	orr.w	r3, r3, #16
 8001de6:	e7d8      	b.n	8001d9a <HAL_TIM_PWM_Start_IT+0x22>
 8001de8:	40010000 	.word	0x40010000

08001dec <HAL_TIM_OC_Start_IT>:
 8001dec:	f7ff bfc4 	b.w	8001d78 <HAL_TIM_PWM_Start_IT>

08001df0 <HAL_TIM_IC_Start_IT>:
{
 8001df0:	b510      	push	{r4, lr}
 8001df2:	4604      	mov	r4, r0
  switch (Channel)
 8001df4:	290c      	cmp	r1, #12
 8001df6:	d80d      	bhi.n	8001e14 <HAL_TIM_IC_Start_IT+0x24>
 8001df8:	e8df f001 	tbb	[pc, r1]
 8001dfc:	0c0c0c07 	.word	0x0c0c0c07
 8001e00:	0c0c0c1c 	.word	0x0c0c0c1c
 8001e04:	0c0c0c21 	.word	0x0c0c0c21
 8001e08:	26          	.byte	0x26
 8001e09:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001e0a:	6802      	ldr	r2, [r0, #0]
 8001e0c:	68d3      	ldr	r3, [r2, #12]
 8001e0e:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001e12:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e14:	6820      	ldr	r0, [r4, #0]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f7ff ff84 	bl	8001d24 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e24:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001e26:	bf1e      	ittt	ne
 8001e28:	681a      	ldrne	r2, [r3, #0]
 8001e2a:	f042 0201 	orrne.w	r2, r2, #1
 8001e2e:	601a      	strne	r2, [r3, #0]
}
 8001e30:	2000      	movs	r0, #0
 8001e32:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001e34:	6802      	ldr	r2, [r0, #0]
 8001e36:	68d3      	ldr	r3, [r2, #12]
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	e7e9      	b.n	8001e12 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001e3e:	6802      	ldr	r2, [r0, #0]
 8001e40:	68d3      	ldr	r3, [r2, #12]
 8001e42:	f043 0308 	orr.w	r3, r3, #8
 8001e46:	e7e4      	b.n	8001e12 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001e48:	6802      	ldr	r2, [r0, #0]
 8001e4a:	68d3      	ldr	r3, [r2, #12]
 8001e4c:	f043 0310 	orr.w	r3, r3, #16
 8001e50:	e7df      	b.n	8001e12 <HAL_TIM_IC_Start_IT+0x22>

08001e52 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e52:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e56:	2b01      	cmp	r3, #1
{
 8001e58:	b530      	push	{r4, r5, lr}
 8001e5a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001e5e:	d014      	beq.n	8001e8a <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e60:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001e62:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001e66:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e68:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e6a:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e6c:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e76:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e78:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e7a:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001e7c:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e84:	2300      	movs	r3, #0
 8001e86:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001e8a:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001e8c:	bd30      	pop	{r4, r5, pc}

08001e8e <HAL_TIMEx_CommutCallback>:
 8001e8e:	4770      	bx	lr

08001e90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	4770      	bx	lr
	...

08001e94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e98:	6806      	ldr	r6, [r0, #0]
 8001e9a:	68c2      	ldr	r2, [r0, #12]
 8001e9c:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e9e:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ea0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	6133      	str	r3, [r6, #16]
{
 8001ea8:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001eaa:	6883      	ldr	r3, [r0, #8]
 8001eac:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001eae:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001eb0:	4303      	orrs	r3, r0
 8001eb2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001eb4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001eb8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001eba:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ebe:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ec4:	6973      	ldr	r3, [r6, #20]
 8001ec6:	69a2      	ldr	r2, [r4, #24]
 8001ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ecc:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ece:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ed2:	6173      	str	r3, [r6, #20]
 8001ed4:	4b7a      	ldr	r3, [pc, #488]	; (80020c0 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ed6:	d17c      	bne.n	8001fd2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ed8:	429e      	cmp	r6, r3
 8001eda:	d003      	beq.n	8001ee4 <UART_SetConfig+0x50>
 8001edc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ee0:	429e      	cmp	r6, r3
 8001ee2:	d144      	bne.n	8001f6e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001ee4:	f7ff fbe2 	bl	80016ac <HAL_RCC_GetPCLK2Freq>
 8001ee8:	2519      	movs	r5, #25
 8001eea:	fb05 f300 	mul.w	r3, r5, r0
 8001eee:	6860      	ldr	r0, [r4, #4]
 8001ef0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001ef4:	0040      	lsls	r0, r0, #1
 8001ef6:	fbb3 f3f0 	udiv	r3, r3, r0
 8001efa:	fbb3 f3f9 	udiv	r3, r3, r9
 8001efe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f02:	f7ff fbd3 	bl	80016ac <HAL_RCC_GetPCLK2Freq>
 8001f06:	6863      	ldr	r3, [r4, #4]
 8001f08:	4368      	muls	r0, r5
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001f10:	f7ff fbcc 	bl	80016ac <HAL_RCC_GetPCLK2Freq>
 8001f14:	6863      	ldr	r3, [r4, #4]
 8001f16:	4368      	muls	r0, r5
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f1e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f22:	fb09 7313 	mls	r3, r9, r3, r7
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	3332      	adds	r3, #50	; 0x32
 8001f2a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001f34:	f7ff fbba 	bl	80016ac <HAL_RCC_GetPCLK2Freq>
 8001f38:	6862      	ldr	r2, [r4, #4]
 8001f3a:	4368      	muls	r0, r5
 8001f3c:	0052      	lsls	r2, r2, #1
 8001f3e:	fbb0 faf2 	udiv	sl, r0, r2
 8001f42:	f7ff fbb3 	bl	80016ac <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f46:	6863      	ldr	r3, [r4, #4]
 8001f48:	4368      	muls	r0, r5
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f50:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f54:	fb09 a313 	mls	r3, r9, r3, sl
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	3332      	adds	r3, #50	; 0x32
 8001f5c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f66:	443b      	add	r3, r7
 8001f68:	60b3      	str	r3, [r6, #8]
 8001f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f6e:	f7ff fb8d 	bl	800168c <HAL_RCC_GetPCLK1Freq>
 8001f72:	2519      	movs	r5, #25
 8001f74:	fb05 f300 	mul.w	r3, r5, r0
 8001f78:	6860      	ldr	r0, [r4, #4]
 8001f7a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001f7e:	0040      	lsls	r0, r0, #1
 8001f80:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f84:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f8c:	f7ff fb7e 	bl	800168c <HAL_RCC_GetPCLK1Freq>
 8001f90:	6863      	ldr	r3, [r4, #4]
 8001f92:	4368      	muls	r0, r5
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fbb0 f7f3 	udiv	r7, r0, r3
 8001f9a:	f7ff fb77 	bl	800168c <HAL_RCC_GetPCLK1Freq>
 8001f9e:	6863      	ldr	r3, [r4, #4]
 8001fa0:	4368      	muls	r0, r5
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fac:	fb09 7313 	mls	r3, r9, r3, r7
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	3332      	adds	r3, #50	; 0x32
 8001fb4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001fbe:	f7ff fb65 	bl	800168c <HAL_RCC_GetPCLK1Freq>
 8001fc2:	6862      	ldr	r2, [r4, #4]
 8001fc4:	4368      	muls	r0, r5
 8001fc6:	0052      	lsls	r2, r2, #1
 8001fc8:	fbb0 faf2 	udiv	sl, r0, r2
 8001fcc:	f7ff fb5e 	bl	800168c <HAL_RCC_GetPCLK1Freq>
 8001fd0:	e7b9      	b.n	8001f46 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fd2:	429e      	cmp	r6, r3
 8001fd4:	d002      	beq.n	8001fdc <UART_SetConfig+0x148>
 8001fd6:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <UART_SetConfig+0x230>)
 8001fd8:	429e      	cmp	r6, r3
 8001fda:	d140      	bne.n	800205e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001fdc:	f7ff fb66 	bl	80016ac <HAL_RCC_GetPCLK2Freq>
 8001fe0:	6867      	ldr	r7, [r4, #4]
 8001fe2:	2519      	movs	r5, #25
 8001fe4:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001fe8:	fb05 f300 	mul.w	r3, r5, r0
 8001fec:	00bf      	lsls	r7, r7, #2
 8001fee:	fbb3 f3f7 	udiv	r3, r3, r7
 8001ff2:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ff6:	011f      	lsls	r7, r3, #4
 8001ff8:	f7ff fb58 	bl	80016ac <HAL_RCC_GetPCLK2Freq>
 8001ffc:	6863      	ldr	r3, [r4, #4]
 8001ffe:	4368      	muls	r0, r5
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	fbb0 f8f3 	udiv	r8, r0, r3
 8002006:	f7ff fb51 	bl	80016ac <HAL_RCC_GetPCLK2Freq>
 800200a:	6863      	ldr	r3, [r4, #4]
 800200c:	4368      	muls	r0, r5
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	fbb0 f3f3 	udiv	r3, r0, r3
 8002014:	fbb3 f3f9 	udiv	r3, r3, r9
 8002018:	fb09 8313 	mls	r3, r9, r3, r8
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	3332      	adds	r3, #50	; 0x32
 8002020:	fbb3 f3f9 	udiv	r3, r3, r9
 8002024:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002028:	f7ff fb40 	bl	80016ac <HAL_RCC_GetPCLK2Freq>
 800202c:	6862      	ldr	r2, [r4, #4]
 800202e:	4368      	muls	r0, r5
 8002030:	0092      	lsls	r2, r2, #2
 8002032:	fbb0 faf2 	udiv	sl, r0, r2
 8002036:	f7ff fb39 	bl	80016ac <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800203a:	6863      	ldr	r3, [r4, #4]
 800203c:	4368      	muls	r0, r5
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	fbb0 f3f3 	udiv	r3, r0, r3
 8002044:	fbb3 f3f9 	udiv	r3, r3, r9
 8002048:	fb09 a313 	mls	r3, r9, r3, sl
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	3332      	adds	r3, #50	; 0x32
 8002050:	fbb3 f3f9 	udiv	r3, r3, r9
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	ea43 0308 	orr.w	r3, r3, r8
 800205c:	e783      	b.n	8001f66 <UART_SetConfig+0xd2>
 800205e:	f7ff fb15 	bl	800168c <HAL_RCC_GetPCLK1Freq>
 8002062:	6867      	ldr	r7, [r4, #4]
 8002064:	2519      	movs	r5, #25
 8002066:	f04f 0964 	mov.w	r9, #100	; 0x64
 800206a:	fb05 f300 	mul.w	r3, r5, r0
 800206e:	00bf      	lsls	r7, r7, #2
 8002070:	fbb3 f3f7 	udiv	r3, r3, r7
 8002074:	fbb3 f3f9 	udiv	r3, r3, r9
 8002078:	011f      	lsls	r7, r3, #4
 800207a:	f7ff fb07 	bl	800168c <HAL_RCC_GetPCLK1Freq>
 800207e:	6863      	ldr	r3, [r4, #4]
 8002080:	4368      	muls	r0, r5
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	fbb0 f8f3 	udiv	r8, r0, r3
 8002088:	f7ff fb00 	bl	800168c <HAL_RCC_GetPCLK1Freq>
 800208c:	6863      	ldr	r3, [r4, #4]
 800208e:	4368      	muls	r0, r5
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	fbb0 f3f3 	udiv	r3, r0, r3
 8002096:	fbb3 f3f9 	udiv	r3, r3, r9
 800209a:	fb09 8313 	mls	r3, r9, r3, r8
 800209e:	011b      	lsls	r3, r3, #4
 80020a0:	3332      	adds	r3, #50	; 0x32
 80020a2:	fbb3 f3f9 	udiv	r3, r3, r9
 80020a6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80020aa:	f7ff faef 	bl	800168c <HAL_RCC_GetPCLK1Freq>
 80020ae:	6862      	ldr	r2, [r4, #4]
 80020b0:	4368      	muls	r0, r5
 80020b2:	0092      	lsls	r2, r2, #2
 80020b4:	fbb0 faf2 	udiv	sl, r0, r2
 80020b8:	f7ff fae8 	bl	800168c <HAL_RCC_GetPCLK1Freq>
 80020bc:	e7bd      	b.n	800203a <UART_SetConfig+0x1a6>
 80020be:	bf00      	nop
 80020c0:	40011000 	.word	0x40011000
 80020c4:	40011400 	.word	0x40011400

080020c8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80020c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ca:	4604      	mov	r4, r0
 80020cc:	460e      	mov	r6, r1
 80020ce:	4617      	mov	r7, r2
 80020d0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020d2:	6821      	ldr	r1, [r4, #0]
 80020d4:	680b      	ldr	r3, [r1, #0]
 80020d6:	ea36 0303 	bics.w	r3, r6, r3
 80020da:	d101      	bne.n	80020e0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80020dc:	2000      	movs	r0, #0
}
 80020de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80020e0:	1c6b      	adds	r3, r5, #1
 80020e2:	d0f7      	beq.n	80020d4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020e4:	b995      	cbnz	r5, 800210c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020ee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80020f8:	2320      	movs	r3, #32
 80020fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80020fe:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002102:	2300      	movs	r3, #0
 8002104:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002108:	2003      	movs	r0, #3
 800210a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800210c:	f7fe ff22 	bl	8000f54 <HAL_GetTick>
 8002110:	1bc0      	subs	r0, r0, r7
 8002112:	4285      	cmp	r5, r0
 8002114:	d2dd      	bcs.n	80020d2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002116:	e7e6      	b.n	80020e6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002118 <HAL_UART_Init>:
{
 8002118:	b510      	push	{r4, lr}
  if (huart == NULL)
 800211a:	4604      	mov	r4, r0
 800211c:	b340      	cbz	r0, 8002170 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800211e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002122:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002126:	b91b      	cbnz	r3, 8002130 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002128:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800212c:	f000 fdaa 	bl	8002c84 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002130:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002132:	2324      	movs	r3, #36	; 0x24
 8002134:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002138:	68d3      	ldr	r3, [r2, #12]
 800213a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800213e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002140:	4620      	mov	r0, r4
 8002142:	f7ff fea7 	bl	8001e94 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002146:	6823      	ldr	r3, [r4, #0]
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800214e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002156:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800215e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002160:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002162:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002164:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002166:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800216a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800216e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002170:	2001      	movs	r0, #1
}
 8002172:	bd10      	pop	{r4, pc}

08002174 <HAL_UART_Transmit>:
{
 8002174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002178:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800217a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800217e:	2b20      	cmp	r3, #32
{
 8002180:	4604      	mov	r4, r0
 8002182:	460d      	mov	r5, r1
 8002184:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002186:	d14f      	bne.n	8002228 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8002188:	2900      	cmp	r1, #0
 800218a:	d04a      	beq.n	8002222 <HAL_UART_Transmit+0xae>
 800218c:	2a00      	cmp	r2, #0
 800218e:	d048      	beq.n	8002222 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8002190:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002194:	2b01      	cmp	r3, #1
 8002196:	d047      	beq.n	8002228 <HAL_UART_Transmit+0xb4>
 8002198:	2301      	movs	r3, #1
 800219a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800219e:	2300      	movs	r3, #0
 80021a0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021a2:	2321      	movs	r3, #33	; 0x21
 80021a4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80021a8:	f7fe fed4 	bl	8000f54 <HAL_GetTick>
    huart->TxXferSize = Size;
 80021ac:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80021b0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80021b2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021b6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	b96b      	cbnz	r3, 80021d8 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021bc:	463b      	mov	r3, r7
 80021be:	4632      	mov	r2, r6
 80021c0:	2140      	movs	r1, #64	; 0x40
 80021c2:	4620      	mov	r0, r4
 80021c4:	f7ff ff80 	bl	80020c8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80021c8:	b9b0      	cbnz	r0, 80021f8 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80021ca:	2320      	movs	r3, #32
 80021cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80021d0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80021d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80021d8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29b      	uxth	r3, r3
 80021de:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021e0:	68a3      	ldr	r3, [r4, #8]
 80021e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021e6:	4632      	mov	r2, r6
 80021e8:	463b      	mov	r3, r7
 80021ea:	f04f 0180 	mov.w	r1, #128	; 0x80
 80021ee:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021f0:	d10e      	bne.n	8002210 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021f2:	f7ff ff69 	bl	80020c8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80021f6:	b110      	cbz	r0, 80021fe <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80021f8:	2003      	movs	r0, #3
 80021fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80021fe:	882b      	ldrh	r3, [r5, #0]
 8002200:	6822      	ldr	r2, [r4, #0]
 8002202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002206:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002208:	6923      	ldr	r3, [r4, #16]
 800220a:	b943      	cbnz	r3, 800221e <HAL_UART_Transmit+0xaa>
          pData += 2U;
 800220c:	3502      	adds	r5, #2
 800220e:	e7d2      	b.n	80021b6 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002210:	f7ff ff5a 	bl	80020c8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002214:	2800      	cmp	r0, #0
 8002216:	d1ef      	bne.n	80021f8 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	782a      	ldrb	r2, [r5, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	3501      	adds	r5, #1
 8002220:	e7c9      	b.n	80021b6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002222:	2001      	movs	r0, #1
 8002224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002228:	2002      	movs	r0, #2
}
 800222a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800222e <HAL_UART_Receive>:
{
 800222e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002232:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002234:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002238:	2b20      	cmp	r3, #32
{
 800223a:	4604      	mov	r4, r0
 800223c:	460d      	mov	r5, r1
 800223e:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002240:	d152      	bne.n	80022e8 <HAL_UART_Receive+0xba>
    if ((pData == NULL) || (Size == 0U))
 8002242:	2900      	cmp	r1, #0
 8002244:	d04d      	beq.n	80022e2 <HAL_UART_Receive+0xb4>
 8002246:	2a00      	cmp	r2, #0
 8002248:	d04b      	beq.n	80022e2 <HAL_UART_Receive+0xb4>
    __HAL_LOCK(huart);
 800224a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800224e:	2b01      	cmp	r3, #1
 8002250:	d04a      	beq.n	80022e8 <HAL_UART_Receive+0xba>
 8002252:	2301      	movs	r3, #1
 8002254:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002258:	2300      	movs	r3, #0
 800225a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800225c:	2322      	movs	r3, #34	; 0x22
 800225e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8002262:	f7fe fe77 	bl	8000f54 <HAL_GetTick>
    huart->RxXferSize = Size;
 8002266:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 800226a:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 800226c:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002270:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8002272:	b280      	uxth	r0, r0
 8002274:	b930      	cbnz	r0, 8002284 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8002276:	2320      	movs	r3, #32
 8002278:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 800227c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 8002284:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002286:	3b01      	subs	r3, #1
 8002288:	b29b      	uxth	r3, r3
 800228a:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800228c:	68a3      	ldr	r3, [r4, #8]
 800228e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002292:	4632      	mov	r2, r6
 8002294:	463b      	mov	r3, r7
 8002296:	f04f 0120 	mov.w	r1, #32
 800229a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800229c:	d112      	bne.n	80022c4 <HAL_UART_Receive+0x96>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800229e:	f7ff ff13 	bl	80020c8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80022a2:	b110      	cbz	r0, 80022aa <HAL_UART_Receive+0x7c>
          return HAL_TIMEOUT;
 80022a4:	2003      	movs	r0, #3
 80022a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022aa:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022ac:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80022ae:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022b0:	b922      	cbnz	r2, 80022bc <HAL_UART_Receive+0x8e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80022b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022b6:	f825 3b02 	strh.w	r3, [r5], #2
 80022ba:	e7d9      	b.n	8002270 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	f825 3b01 	strh.w	r3, [r5], #1
 80022c2:	e7d5      	b.n	8002270 <HAL_UART_Receive+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80022c4:	f7ff ff00 	bl	80020c8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80022c8:	2800      	cmp	r0, #0
 80022ca:	d1eb      	bne.n	80022a4 <HAL_UART_Receive+0x76>
 80022cc:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022ce:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	1c6a      	adds	r2, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022d4:	b911      	cbnz	r1, 80022dc <HAL_UART_Receive+0xae>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022d6:	702b      	strb	r3, [r5, #0]
 80022d8:	4615      	mov	r5, r2
 80022da:	e7c9      	b.n	8002270 <HAL_UART_Receive+0x42>
 80022dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022e0:	e7f9      	b.n	80022d6 <HAL_UART_Receive+0xa8>
      return  HAL_ERROR;
 80022e2:	2001      	movs	r0, #1
 80022e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80022e8:	2002      	movs	r0, #2
}
 80022ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080022f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022f0:	b530      	push	{r4, r5, lr}
 80022f2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022f4:	2230      	movs	r2, #48	; 0x30
 80022f6:	2100      	movs	r1, #0
 80022f8:	a808      	add	r0, sp, #32
 80022fa:	f000 fda9 	bl	8002e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022fe:	2100      	movs	r1, #0
 8002300:	2214      	movs	r2, #20
 8002302:	a803      	add	r0, sp, #12
 8002304:	f000 fda4 	bl	8002e50 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002308:	2400      	movs	r4, #0
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <SystemClock_Config+0x70>)
 800230c:	9401      	str	r4, [sp, #4]
 800230e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002310:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002314:	641a      	str	r2, [r3, #64]	; 0x40
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002320:	4b10      	ldr	r3, [pc, #64]	; (8002364 <SystemClock_Config+0x74>)
 8002322:	9402      	str	r4, [sp, #8]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800232e:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002330:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002334:	9302      	str	r3, [sp, #8]
 8002336:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002338:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800233a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800233e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002340:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002342:	9508      	str	r5, [sp, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002344:	f7fe ff58 	bl	80011f8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002348:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800234a:	4621      	mov	r1, r4
 800234c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800234e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002350:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002352:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002354:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002356:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002358:	f7ff f8fe 	bl	8001558 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800235c:	b015      	add	sp, #84	; 0x54
 800235e:	bd30      	pop	{r4, r5, pc}
 8002360:	40023800 	.word	0x40023800
 8002364:	40007000 	.word	0x40007000

08002368 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
//	uint8_t pw_array_length = PW_ARRAY_LENGTH;
	if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) // measure the speed of wheel 1
 8002368:	6803      	ldr	r3, [r0, #0]
 800236a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236e:	d106      	bne.n	800237e <HAL_TIM_IC_CaptureCallback+0x16>
 8002370:	7f03      	ldrb	r3, [r0, #28]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d104      	bne.n	8002380 <HAL_TIM_IC_CaptureCallback+0x18>
	{
		input_capture1++;
 8002376:	4a04      	ldr	r2, [pc, #16]	; (8002388 <HAL_TIM_IC_CaptureCallback+0x20>)
	}

	else if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) // measure the speed of wheel 2
	{
		input_capture2++;
 8002378:	6813      	ldr	r3, [r2, #0]
 800237a:	3301      	adds	r3, #1
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4770      	bx	lr
	else if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) // measure the speed of wheel 2
 8002380:	2b02      	cmp	r3, #2
 8002382:	d1fc      	bne.n	800237e <HAL_TIM_IC_CaptureCallback+0x16>
		input_capture2++;
 8002384:	4a01      	ldr	r2, [pc, #4]	; (800238c <HAL_TIM_IC_CaptureCallback+0x24>)
 8002386:	e7f7      	b.n	8002378 <HAL_TIM_IC_CaptureCallback+0x10>
 8002388:	2000022c 	.word	0x2000022c
 800238c:	20000230 	.word	0x20000230

08002390 <printWelcomeMessage>:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, returned_pwm1);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, returned_pwm2);
	}
}

void printWelcomeMessage(void) {
 8002390:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[0;0H", strlen("\033[0;0H"), HAL_MAX_DELAY);
 8002392:	4c0f      	ldr	r4, [pc, #60]	; (80023d0 <printWelcomeMessage+0x40>)
 8002394:	490f      	ldr	r1, [pc, #60]	; (80023d4 <printWelcomeMessage+0x44>)
 8002396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800239a:	2206      	movs	r2, #6
 800239c:	4620      	mov	r0, r4
 800239e:	f7ff fee9 	bl	8002174 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[2J", strlen("\033[2J"), HAL_MAX_DELAY);
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023a6:	2204      	movs	r2, #4
 80023a8:	490b      	ldr	r1, [pc, #44]	; (80023d8 <printWelcomeMessage+0x48>)
 80023aa:	4620      	mov	r0, r4
 80023ac:	f7ff fee2 	bl	8002174 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)WELCOME_MSG, strlen(WELCOME_MSG), HAL_MAX_DELAY);
 80023b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023b4:	222a      	movs	r2, #42	; 0x2a
 80023b6:	4909      	ldr	r1, [pc, #36]	; (80023dc <printWelcomeMessage+0x4c>)
 80023b8:	4620      	mov	r0, r4
 80023ba:	f7ff fedb 	bl	8002174 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 80023be:	4620      	mov	r0, r4
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023c4:	2276      	movs	r2, #118	; 0x76
 80023c6:	4906      	ldr	r1, [pc, #24]	; (80023e0 <printWelcomeMessage+0x50>)
}
 80023c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 80023cc:	f7ff bed2 	b.w	8002174 <HAL_UART_Transmit>
 80023d0:	20000320 	.word	0x20000320
 80023d4:	08004f04 	.word	0x08004f04
 80023d8:	08004f0b 	.word	0x08004f0b
 80023dc:	08004f10 	.word	0x08004f10
 80023e0:	08004f3b 	.word	0x08004f3b

080023e4 <readUserInput>:

uint8_t readUserInput(void) {
 80023e4:	b513      	push	{r0, r1, r4, lr}
	char readBuf[1];

	HAL_UART_Transmit(&huart2, (uint8_t*)PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
 80023e6:	4c0a      	ldr	r4, [pc, #40]	; (8002410 <readUserInput+0x2c>)
 80023e8:	490a      	ldr	r1, [pc, #40]	; (8002414 <readUserInput+0x30>)
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ee:	2204      	movs	r2, #4
 80023f0:	4620      	mov	r0, r4
 80023f2:	f7ff febf 	bl	8002174 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, (uint8_t*)readBuf, 1, HAL_MAX_DELAY);
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023fa:	2201      	movs	r2, #1
 80023fc:	a901      	add	r1, sp, #4
 80023fe:	4620      	mov	r0, r4
 8002400:	f7ff ff15 	bl	800222e <HAL_UART_Receive>
	return atoi(readBuf);
 8002404:	a801      	add	r0, sp, #4
 8002406:	f000 fcf4 	bl	8002df2 <atoi>
}
 800240a:	b2c0      	uxtb	r0, r0
 800240c:	b002      	add	sp, #8
 800240e:	bd10      	pop	{r4, pc}
 8002410:	20000320 	.word	0x20000320
 8002414:	08005009 	.word	0x08005009

08002418 <processUserInput>:


uint8_t processUserInput(uint8_t opt) {
 8002418:	b570      	push	{r4, r5, r6, lr}
	char msg0[100] = "\r\nYour desired speed is: ";
 800241a:	4b5d      	ldr	r3, [pc, #372]	; (8002590 <processUserInput+0x178>)
uint8_t processUserInput(uint8_t opt) {
 800241c:	f5ad 7d30 	sub.w	sp, sp, #704	; 0x2c0
 8002420:	4604      	mov	r4, r0
	char msg0[100] = "\r\nYour desired speed is: ";
 8002422:	aa01      	add	r2, sp, #4
 8002424:	f103 0618 	add.w	r6, r3, #24
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	6859      	ldr	r1, [r3, #4]
 800242c:	4615      	mov	r5, r2
 800242e:	c503      	stmia	r5!, {r0, r1}
 8002430:	3308      	adds	r3, #8
 8002432:	42b3      	cmp	r3, r6
 8002434:	462a      	mov	r2, r5
 8002436:	d1f7      	bne.n	8002428 <processUserInput+0x10>
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	802b      	strh	r3, [r5, #0]
 800243c:	224a      	movs	r2, #74	; 0x4a
 800243e:	2100      	movs	r1, #0
 8002440:	f10d 001e 	add.w	r0, sp, #30
 8002444:	f000 fd04 	bl	8002e50 <memset>
	char msg6[100];
	char readN_PULSE[3];
	uint16_t n_pulse_received1 = 0;


	if(!opt || opt > 3)
 8002448:	1e63      	subs	r3, r4, #1
 800244a:	2b02      	cmp	r3, #2
 800244c:	f200 809c 	bhi.w	8002588 <processUserInput+0x170>
		return 0;

	sprintf(msg1, "%d", opt);
 8002450:	4622      	mov	r2, r4
 8002452:	4950      	ldr	r1, [pc, #320]	; (8002594 <processUserInput+0x17c>)
 8002454:	a81a      	add	r0, sp, #104	; 0x68
 8002456:	f000 fd03 	bl	8002e60 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 800245a:	a81a      	add	r0, sp, #104	; 0x68
 800245c:	f7fd fec0 	bl	80001e0 <strlen>
 8002460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002464:	b282      	uxth	r2, r0
 8002466:	a91a      	add	r1, sp, #104	; 0x68
 8002468:	484b      	ldr	r0, [pc, #300]	; (8002598 <processUserInput+0x180>)
 800246a:	f7ff fe83 	bl	8002174 <HAL_UART_Transmit>

	switch(opt) {
 800246e:	2c02      	cmp	r4, #2
 8002470:	d02a      	beq.n	80024c8 <processUserInput+0xb0>
 8002472:	2c03      	cmp	r4, #3
 8002474:	f000 808a 	beq.w	800258c <processUserInput+0x174>
	case 1: // Set n_pulse

		HAL_UART_Transmit(&huart2, (uint8_t*)msg0, strlen(msg0), HAL_MAX_DELAY);
 8002478:	a801      	add	r0, sp, #4
 800247a:	f7fd feb1 	bl	80001e0 <strlen>
 800247e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002482:	b282      	uxth	r2, r0
 8002484:	a901      	add	r1, sp, #4
 8002486:	4844      	ldr	r0, [pc, #272]	; (8002598 <processUserInput+0x180>)
 8002488:	f7ff fe74 	bl	8002174 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, (uint8_t*)readN_PULSE, 3, HAL_MAX_DELAY);
 800248c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002490:	2203      	movs	r2, #3
 8002492:	a997      	add	r1, sp, #604	; 0x25c
 8002494:	4840      	ldr	r0, [pc, #256]	; (8002598 <processUserInput+0x180>)
 8002496:	f7ff feca 	bl	800222e <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, (uint8_t*)readN_PULSE, 3, HAL_MAX_DELAY);
 800249a:	2203      	movs	r2, #3
 800249c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024a0:	a997      	add	r1, sp, #604	; 0x25c
 80024a2:	483d      	ldr	r0, [pc, #244]	; (8002598 <processUserInput+0x180>)
 80024a4:	f7ff fe66 	bl	8002174 <HAL_UART_Transmit>
		n_pulse_received1 = atoi(readN_PULSE);
 80024a8:	a897      	add	r0, sp, #604	; 0x25c
 80024aa:	f000 fca2 	bl	8002df2 <atoi>
 80024ae:	b280      	uxth	r0, r0
		if (n_pulse_received1 > 30)
 80024b0:	281e      	cmp	r0, #30
 80024b2:	4b3a      	ldr	r3, [pc, #232]	; (800259c <processUserInput+0x184>)
		{
			n_pulse_set1 = 30;
 80024b4:	bf8a      	itet	hi
 80024b6:	221e      	movhi	r2, #30
		}
		else
		{
			n_pulse_set1 = n_pulse_received1;
 80024b8:	8018      	strhls	r0, [r3, #0]
			n_pulse_set1 = 30;
 80024ba:	801a      	strhhi	r2, [r3, #0]
		}
		give_command = 1;
 80024bc:	4b38      	ldr	r3, [pc, #224]	; (80025a0 <processUserInput+0x188>)
 80024be:	2001      	movs	r0, #1
 80024c0:	7018      	strb	r0, [r3, #0]
	case 3:
		return 2;
	};

	return 1;
}
 80024c2:	f50d 7d30 	add.w	sp, sp, #704	; 0x2c0
 80024c6:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(msg1, "\r\n x: %ld", my_rover.x);
 80024c8:	4c36      	ldr	r4, [pc, #216]	; (80025a4 <processUserInput+0x18c>)
 80024ca:	4937      	ldr	r1, [pc, #220]	; (80025a8 <processUserInput+0x190>)
 80024cc:	6822      	ldr	r2, [r4, #0]
 80024ce:	a81a      	add	r0, sp, #104	; 0x68
 80024d0:	f000 fcc6 	bl	8002e60 <siprintf>
		sprintf(msg2, "\r\n y: %ld", my_rover.y);
 80024d4:	6862      	ldr	r2, [r4, #4]
 80024d6:	4935      	ldr	r1, [pc, #212]	; (80025ac <processUserInput+0x194>)
 80024d8:	a833      	add	r0, sp, #204	; 0xcc
 80024da:	f000 fcc1 	bl	8002e60 <siprintf>
		sprintf(msg3, "\r\n phi: %ld", my_rover.phi);
 80024de:	68a2      	ldr	r2, [r4, #8]
 80024e0:	4933      	ldr	r1, [pc, #204]	; (80025b0 <processUserInput+0x198>)
 80024e2:	a84c      	add	r0, sp, #304	; 0x130
 80024e4:	f000 fcbc 	bl	8002e60 <siprintf>
		sprintf(msg4, "\r\n PWM: %u", returned_pwm1);
 80024e8:	4b32      	ldr	r3, [pc, #200]	; (80025b4 <processUserInput+0x19c>)
 80024ea:	4933      	ldr	r1, [pc, #204]	; (80025b8 <processUserInput+0x1a0>)
 80024ec:	881a      	ldrh	r2, [r3, #0]
 80024ee:	a865      	add	r0, sp, #404	; 0x194
 80024f0:	f000 fcb6 	bl	8002e60 <siprintf>
		sprintf(msg5, "\r\n error1: %ld", error1);
 80024f4:	4b31      	ldr	r3, [pc, #196]	; (80025bc <processUserInput+0x1a4>)
 80024f6:	4932      	ldr	r1, [pc, #200]	; (80025c0 <processUserInput+0x1a8>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	a87e      	add	r0, sp, #504	; 0x1f8
 80024fc:	f000 fcb0 	bl	8002e60 <siprintf>
		sprintf(msg6, "\r\n integrated_error1: %ld", integrated_error1);
 8002500:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <processUserInput+0x1ac>)
 8002502:	4931      	ldr	r1, [pc, #196]	; (80025c8 <processUserInput+0x1b0>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	a897      	add	r0, sp, #604	; 0x25c
 8002508:	f000 fcaa 	bl	8002e60 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 800250c:	a81a      	add	r0, sp, #104	; 0x68
 800250e:	f7fd fe67 	bl	80001e0 <strlen>
 8002512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002516:	b282      	uxth	r2, r0
 8002518:	a91a      	add	r1, sp, #104	; 0x68
 800251a:	481f      	ldr	r0, [pc, #124]	; (8002598 <processUserInput+0x180>)
 800251c:	f7ff fe2a 	bl	8002174 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg2, strlen(msg2), HAL_MAX_DELAY);
 8002520:	a833      	add	r0, sp, #204	; 0xcc
 8002522:	f7fd fe5d 	bl	80001e0 <strlen>
 8002526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800252a:	b282      	uxth	r2, r0
 800252c:	a933      	add	r1, sp, #204	; 0xcc
 800252e:	481a      	ldr	r0, [pc, #104]	; (8002598 <processUserInput+0x180>)
 8002530:	f7ff fe20 	bl	8002174 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg3, strlen(msg3), HAL_MAX_DELAY);
 8002534:	a84c      	add	r0, sp, #304	; 0x130
 8002536:	f7fd fe53 	bl	80001e0 <strlen>
 800253a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800253e:	b282      	uxth	r2, r0
 8002540:	a94c      	add	r1, sp, #304	; 0x130
 8002542:	4815      	ldr	r0, [pc, #84]	; (8002598 <processUserInput+0x180>)
 8002544:	f7ff fe16 	bl	8002174 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg4, strlen(msg3), HAL_MAX_DELAY);
 8002548:	a84c      	add	r0, sp, #304	; 0x130
 800254a:	f7fd fe49 	bl	80001e0 <strlen>
 800254e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002552:	b282      	uxth	r2, r0
 8002554:	a965      	add	r1, sp, #404	; 0x194
 8002556:	4810      	ldr	r0, [pc, #64]	; (8002598 <processUserInput+0x180>)
 8002558:	f7ff fe0c 	bl	8002174 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg5, strlen(msg5), HAL_MAX_DELAY);
 800255c:	a87e      	add	r0, sp, #504	; 0x1f8
 800255e:	f7fd fe3f 	bl	80001e0 <strlen>
 8002562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002566:	b282      	uxth	r2, r0
 8002568:	a97e      	add	r1, sp, #504	; 0x1f8
 800256a:	480b      	ldr	r0, [pc, #44]	; (8002598 <processUserInput+0x180>)
 800256c:	f7ff fe02 	bl	8002174 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg6, strlen(msg6), HAL_MAX_DELAY);
 8002570:	a897      	add	r0, sp, #604	; 0x25c
 8002572:	f7fd fe35 	bl	80001e0 <strlen>
 8002576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800257a:	b282      	uxth	r2, r0
 800257c:	a997      	add	r1, sp, #604	; 0x25c
 800257e:	4806      	ldr	r0, [pc, #24]	; (8002598 <processUserInput+0x180>)
 8002580:	f7ff fdf8 	bl	8002174 <HAL_UART_Transmit>
	return 1;
 8002584:	2001      	movs	r0, #1
		break;
 8002586:	e79c      	b.n	80024c2 <processUserInput+0xaa>
		return 0;
 8002588:	2000      	movs	r0, #0
 800258a:	e79a      	b.n	80024c2 <processUserInput+0xaa>
		return 2;
 800258c:	2002      	movs	r0, #2
 800258e:	e798      	b.n	80024c2 <processUserInput+0xaa>
 8002590:	08004ea0 	.word	0x08004ea0
 8002594:	08004fb2 	.word	0x08004fb2
 8002598:	20000320 	.word	0x20000320
 800259c:	20000248 	.word	0x20000248
 80025a0:	20000228 	.word	0x20000228
 80025a4:	2000000c 	.word	0x2000000c
 80025a8:	08004fb5 	.word	0x08004fb5
 80025ac:	08004fbf 	.word	0x08004fbf
 80025b0:	08004fc9 	.word	0x08004fc9
 80025b4:	2000024c 	.word	0x2000024c
 80025b8:	08004fd5 	.word	0x08004fd5
 80025bc:	20000220 	.word	0x20000220
 80025c0:	08004fe0 	.word	0x08004fe0
 80025c4:	2000023c 	.word	0x2000023c
 80025c8:	08004fef 	.word	0x08004fef

080025cc <main>:
{
 80025cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025d0:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 80025d2:	f7fe fc99 	bl	8000f08 <HAL_Init>
  SystemClock_Config();
 80025d6:	f7ff fe8b 	bl	80022f0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025da:	2214      	movs	r2, #20
 80025dc:	2100      	movs	r1, #0
 80025de:	a807      	add	r0, sp, #28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e0:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e2:	f000 fc35 	bl	8002e50 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e6:	4b82      	ldr	r3, [pc, #520]	; (80027f0 <main+0x224>)
 80025e8:	9401      	str	r4, [sp, #4]
 80025ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80025ec:	4881      	ldr	r0, [pc, #516]	; (80027f4 <main+0x228>)
  htim3.Instance = TIM3;
 80025ee:	4d82      	ldr	r5, [pc, #520]	; (80027f8 <main+0x22c>)
  htim4.Instance = TIM4;
 80025f0:	4f82      	ldr	r7, [pc, #520]	; (80027fc <main+0x230>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f2:	f042 0204 	orr.w	r2, r2, #4
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
 80025f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025fa:	f002 0204 	and.w	r2, r2, #4
 80025fe:	9201      	str	r2, [sp, #4]
 8002600:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002602:	9402      	str	r4, [sp, #8]
 8002604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002606:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800260a:	631a      	str	r2, [r3, #48]	; 0x30
 800260c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800260e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002612:	9202      	str	r2, [sp, #8]
 8002614:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002616:	9403      	str	r4, [sp, #12]
 8002618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
 8002620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002622:	f002 0201 	and.w	r2, r2, #1
 8002626:	9203      	str	r2, [sp, #12]
 8002628:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800262a:	9404      	str	r4, [sp, #16]
 800262c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800262e:	f042 0202 	orr.w	r2, r2, #2
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800263c:	4622      	mov	r2, r4
 800263e:	f44f 7108 	mov.w	r1, #544	; 0x220
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002642:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8002644:	f7fe fdcc 	bl	80011e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002648:	4622      	mov	r2, r4
 800264a:	2180      	movs	r1, #128	; 0x80
 800264c:	486c      	ldr	r0, [pc, #432]	; (8002800 <main+0x234>)
 800264e:	f7fe fdc7 	bl	80011e0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8002652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002656:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002658:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800265a:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <main+0x238>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800265c:	4868      	ldr	r0, [pc, #416]	; (8002800 <main+0x234>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800265e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002660:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002666:	f7fe fce5 	bl	8001034 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 800266a:	f44f 7308 	mov.w	r3, #544	; 0x220
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266e:	a907      	add	r1, sp, #28
 8002670:	4860      	ldr	r0, [pc, #384]	; (80027f4 <main+0x228>)
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8002672:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002674:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267c:	f7fe fcda 	bl	8001034 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002680:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002682:	a907      	add	r1, sp, #28
 8002684:	485e      	ldr	r0, [pc, #376]	; (8002800 <main+0x234>)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002686:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002688:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002690:	f7fe fcd0 	bl	8001034 <HAL_GPIO_Init>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002694:	221c      	movs	r2, #28
 8002696:	eb0d 0002 	add.w	r0, sp, r2
 800269a:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800269c:	9405      	str	r4, [sp, #20]
 800269e:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026a0:	f000 fbd6 	bl	8002e50 <memset>
  htim3.Instance = TIM3;
 80026a4:	4b58      	ldr	r3, [pc, #352]	; (8002808 <main+0x23c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a6:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 400-1;
 80026a8:	f240 168f 	movw	r6, #399	; 0x18f
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80026ac:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 1-1;
 80026ae:	e885 0018 	stmia.w	r5, {r3, r4}
  htim3.Init.Period = 400-1;
 80026b2:	60ee      	str	r6, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b4:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026b6:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80026b8:	f7ff f98a 	bl	80019d0 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026bc:	a905      	add	r1, sp, #20
 80026be:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c0:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c2:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026c4:	f7ff fbc5 	bl	8001e52 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026c8:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026ca:	4622      	mov	r2, r4
 80026cc:	a907      	add	r1, sp, #28
 80026ce:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026d0:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 399;
 80026d2:	9608      	str	r6, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026d4:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026d6:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026d8:	f7ff fa08 	bl	8001aec <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026dc:	2204      	movs	r2, #4
 80026de:	a907      	add	r1, sp, #28
 80026e0:	4628      	mov	r0, r5
 80026e2:	f7ff fa03 	bl	8001aec <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 80026e6:	4628      	mov	r0, r5
 80026e8:	f000 faa2 	bl	8002c30 <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ec:	221c      	movs	r2, #28
 80026ee:	4621      	mov	r1, r4
 80026f0:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f4:	9405      	str	r4, [sp, #20]
 80026f6:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026f8:	f000 fbaa 	bl	8002e50 <memset>
  htim4.Init.Prescaler = 8000-1;
 80026fc:	4a43      	ldr	r2, [pc, #268]	; (800280c <main+0x240>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fe:	60bc      	str	r4, [r7, #8]
  htim4.Init.Prescaler = 8000-1;
 8002700:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8002704:	e887 000c 	stmia.w	r7, {r2, r3}
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002708:	4638      	mov	r0, r7
  htim4.Init.Period = 50-1;
 800270a:	2331      	movs	r3, #49	; 0x31
 800270c:	60fb      	str	r3, [r7, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800270e:	613c      	str	r4, [r7, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002710:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002712:	f7ff f943 	bl	800199c <HAL_TIM_OC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002716:	a905      	add	r1, sp, #20
 8002718:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271a:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271c:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800271e:	f7ff fb98 	bl	8001e52 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002722:	4622      	mov	r2, r4
 8002724:	a907      	add	r1, sp, #28
 8002726:	4638      	mov	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002728:	9407      	str	r4, [sp, #28]
  sConfigOC.Pulse = 0;
 800272a:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800272c:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800272e:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002730:	f7ff f9ae 	bl	8001a90 <HAL_TIM_OC_ConfigChannel>
  huart2.Instance = USART2;
 8002734:	4836      	ldr	r0, [pc, #216]	; (8002810 <main+0x244>)
  huart2.Init.BaudRate = 115200;
 8002736:	4937      	ldr	r1, [pc, #220]	; (8002814 <main+0x248>)
  htim2.Instance = TIM2;
 8002738:	4e37      	ldr	r6, [pc, #220]	; (8002818 <main+0x24c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800273a:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 800273c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002740:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002744:	230c      	movs	r3, #12
 8002746:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002748:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800274a:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274c:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800274e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002750:	f7ff fce2 	bl	8002118 <HAL_UART_Init>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002754:	2210      	movs	r2, #16
 8002756:	4621      	mov	r1, r4
 8002758:	a807      	add	r0, sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800275a:	9405      	str	r4, [sp, #20]
 800275c:	9406      	str	r4, [sp, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800275e:	f000 fb77 	bl	8002e50 <memset>
  htim2.Init.Prescaler = 80-1;
 8002762:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002766:	234f      	movs	r3, #79	; 0x4f
 8002768:	e886 0009 	stmia.w	r6, {r0, r3}
  htim2.Init.Period = 4294967295;
 800276c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002770:	4630      	mov	r0, r6
  htim2.Init.Period = 4294967295;
 8002772:	60f3      	str	r3, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002774:	60b4      	str	r4, [r6, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002776:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002778:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800277a:	f7ff f943 	bl	8001a04 <HAL_TIM_IC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800277e:	a905      	add	r1, sp, #20
 8002780:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002782:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002784:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002786:	f7ff fb64 	bl	8001e52 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800278a:	4622      	mov	r2, r4
 800278c:	a907      	add	r1, sp, #28
 800278e:	4630      	mov	r0, r6
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002790:	9407      	str	r4, [sp, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002792:	f8cd 8020 	str.w	r8, [sp, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002796:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 8002798:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800279a:	f7ff fa3b 	bl	8001c14 <HAL_TIM_IC_ConfigChannel>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800279e:	2204      	movs	r2, #4
 80027a0:	a907      	add	r1, sp, #28
 80027a2:	4630      	mov	r0, r6
 80027a4:	f7ff fa36 	bl	8001c14 <HAL_TIM_IC_ConfigChannel>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80027a8:	4621      	mov	r1, r4
 80027aa:	4630      	mov	r0, r6
 80027ac:	f7ff fb20 	bl	8001df0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80027b0:	2104      	movs	r1, #4
 80027b2:	4630      	mov	r0, r6
 80027b4:	f7ff fb1c 	bl	8001df0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80027b8:	4621      	mov	r1, r4
 80027ba:	4628      	mov	r0, r5
 80027bc:	f7ff fac0 	bl	8001d40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80027c0:	2104      	movs	r1, #4
 80027c2:	4628      	mov	r0, r5
 80027c4:	f7ff fabc 	bl	8001d40 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start_IT(&htim4,TIM_CHANNEL_1);
 80027c8:	4621      	mov	r1, r4
 80027ca:	4638      	mov	r0, r7
 80027cc:	f7ff fb0e 	bl	8001dec <HAL_TIM_OC_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 80027d0:	682b      	ldr	r3, [r5, #0]
 80027d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80027d6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38
    	printWelcomeMessage();
 80027da:	f7ff fdd9 	bl	8002390 <printWelcomeMessage>
    		opt = readUserInput();
 80027de:	f7ff fe01 	bl	80023e4 <readUserInput>
 80027e2:	4604      	mov	r4, r0
    		processUserInput(opt);
 80027e4:	f7ff fe18 	bl	8002418 <processUserInput>
    		if(opt == 3)
 80027e8:	2c03      	cmp	r4, #3
 80027ea:	d1f8      	bne.n	80027de <main+0x212>
 80027ec:	e7f5      	b.n	80027da <main+0x20e>
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40020000 	.word	0x40020000
 80027f8:	200002a0 	.word	0x200002a0
 80027fc:	20000260 	.word	0x20000260
 8002800:	40020800 	.word	0x40020800
 8002804:	10210000 	.word	0x10210000
 8002808:	40000400 	.word	0x40000400
 800280c:	40000800 	.word	0x40000800
 8002810:	20000320 	.word	0x20000320
 8002814:	40004400 	.word	0x40004400
 8002818:	200002e0 	.word	0x200002e0

0800281c <pid_controller_wheels>:

	int32_t output_pwm = 0;
	uint16_t return_pwm = 0;


	if (wheel_id == 1)
 800281c:	2a01      	cmp	r2, #1
{
 800281e:	b510      	push	{r4, lr}
	if (wheel_id == 1)
 8002820:	d11a      	bne.n	8002858 <pid_controller_wheels+0x3c>
	{
		error1 = desired_point - current_point;
 8002822:	4b19      	ldr	r3, [pc, #100]	; (8002888 <pid_controller_wheels+0x6c>)
		output_pwm = (Kp*error1) + (Ki*integrated_error1);
 8002824:	4a19      	ldr	r2, [pc, #100]	; (800288c <pid_controller_wheels+0x70>)
		error1 = desired_point - current_point;
 8002826:	1a09      	subs	r1, r1, r0
 8002828:	6019      	str	r1, [r3, #0]
		output_pwm = (Kp*error1) + (Ki*integrated_error1);
 800282a:	6813      	ldr	r3, [r2, #0]
 800282c:	eba1 1401 	sub.w	r4, r1, r1, lsl #4
 8002830:	eba3 1003 	sub.w	r0, r3, r3, lsl #4
 8002834:	4420      	add	r0, r4

		if ((abs(integrated_error1)<25) || ((error1*integrated_error1)<=0)) // anti winding
 8002836:	f103 0418 	add.w	r4, r3, #24
 800283a:	2c30      	cmp	r4, #48	; 0x30
	else if (wheel_id == 2)
	{
		error2 = desired_point - current_point;
		output_pwm = (Kp*error2) + (Ki*integrated_error2);

		if ((abs(integrated_error2)<20) || ((error2*integrated_error2)<=0)) // anti winding
 800283c:	d903      	bls.n	8002846 <pid_controller_wheels+0x2a>
 800283e:	fb03 f401 	mul.w	r4, r3, r1
 8002842:	2c00      	cmp	r4, #0
 8002844:	dc01      	bgt.n	800284a <pid_controller_wheels+0x2e>
		{
			integrated_error2 += error2;
 8002846:	4419      	add	r1, r3
 8002848:	6011      	str	r1, [r2, #0]
		}
	}

	if (output_pwm < 0)
 800284a:	2800      	cmp	r0, #0
 800284c:	db16      	blt.n	800287c <pid_controller_wheels+0x60>
	{
		return_pwm = 0;
	}
	else if (output_pwm > 400)
 800284e:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8002852:	dc15      	bgt.n	8002880 <pid_controller_wheels+0x64>
	{
		return_pwm = 400;
	}
	else
	{
		return_pwm = (uint16_t) output_pwm;
 8002854:	b280      	uxth	r0, r0
 8002856:	bd10      	pop	{r4, pc}
	else if (wheel_id == 2)
 8002858:	2a02      	cmp	r2, #2
 800285a:	d10d      	bne.n	8002878 <pid_controller_wheels+0x5c>
		error2 = desired_point - current_point;
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <pid_controller_wheels+0x74>)
		output_pwm = (Kp*error2) + (Ki*integrated_error2);
 800285e:	4a0d      	ldr	r2, [pc, #52]	; (8002894 <pid_controller_wheels+0x78>)
		error2 = desired_point - current_point;
 8002860:	1a09      	subs	r1, r1, r0
 8002862:	6019      	str	r1, [r3, #0]
		output_pwm = (Kp*error2) + (Ki*integrated_error2);
 8002864:	6813      	ldr	r3, [r2, #0]
 8002866:	eba1 1401 	sub.w	r4, r1, r1, lsl #4
 800286a:	eba3 1003 	sub.w	r0, r3, r3, lsl #4
 800286e:	4420      	add	r0, r4
		if ((abs(integrated_error2)<20) || ((error2*integrated_error2)<=0)) // anti winding
 8002870:	f103 0413 	add.w	r4, r3, #19
 8002874:	2c26      	cmp	r4, #38	; 0x26
 8002876:	e7e1      	b.n	800283c <pid_controller_wheels+0x20>
	int32_t output_pwm = 0;
 8002878:	2000      	movs	r0, #0
 800287a:	e7eb      	b.n	8002854 <pid_controller_wheels+0x38>
		return_pwm = 0;
 800287c:	2000      	movs	r0, #0
 800287e:	bd10      	pop	{r4, pc}
		return_pwm = 400;
 8002880:	f44f 70c8 	mov.w	r0, #400	; 0x190
	}

	return return_pwm;
}
 8002884:	bd10      	pop	{r4, pc}
 8002886:	bf00      	nop
 8002888:	20000220 	.word	0x20000220
 800288c:	2000023c 	.word	0x2000023c
 8002890:	20000224 	.word	0x20000224
 8002894:	20000240 	.word	0x20000240

08002898 <update_my_position>:

void update_my_position(void)
{
 8002898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int32_t s1 = 0;
	int32_t s2 = 0;
	int32_t s_mean = 0;

	s1 = 280*n_pulse1; // in 10*mm
 800289c:	4b47      	ldr	r3, [pc, #284]	; (80029bc <update_my_position+0x124>)
	s2 = 280*n_pulse2; // in 10*mm
	s_mean = (s1+s2)/2;

	my_rover.x += s_mean*cos(((float)my_rover.phi)/100.0); // in 10*mm
 800289e:	4d48      	ldr	r5, [pc, #288]	; (80029c0 <update_my_position+0x128>)
	s1 = 280*n_pulse1; // in 10*mm
 80028a0:	f8b3 a000 	ldrh.w	sl, [r3]
	s2 = 280*n_pulse2; // in 10*mm
 80028a4:	4b47      	ldr	r3, [pc, #284]	; (80029c4 <update_my_position+0x12c>)
 80028a6:	8818      	ldrh	r0, [r3, #0]
{
 80028a8:	ed2d 8b02 	vpush	{d8}
	s1 = 280*n_pulse1; // in 10*mm
 80028ac:	f44f 748c 	mov.w	r4, #280	; 0x118
 80028b0:	fb04 fa0a 	mul.w	sl, r4, sl
	s2 = 280*n_pulse2; // in 10*mm
 80028b4:	4344      	muls	r4, r0
	s_mean = (s1+s2)/2;
 80028b6:	eb0a 0004 	add.w	r0, sl, r4
{
 80028ba:	b083      	sub	sp, #12
	my_rover.x += s_mean*cos(((float)my_rover.phi)/100.0); // in 10*mm
 80028bc:	1040      	asrs	r0, r0, #1
 80028be:	f7fd fe39 	bl	8000534 <__aeabi_i2d>
 80028c2:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80028c6:	ee07 ba90 	vmov	s15, fp
 80028ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ce:	4606      	mov	r6, r0
 80028d0:	ee17 0a90 	vmov	r0, s15
 80028d4:	460f      	mov	r7, r1
 80028d6:	f7fd fe3f 	bl	8000558 <__aeabi_f2d>
 80028da:	2200      	movs	r2, #0
 80028dc:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <update_my_position+0x130>)
 80028de:	f7fd ffb9 	bl	8000854 <__aeabi_ddiv>
 80028e2:	ec41 0b10 	vmov	d0, r0, r1
 80028e6:	ec41 0b18 	vmov	d8, r0, r1
 80028ea:	f001 f935 	bl	8003b58 <cos>
 80028ee:	ec53 2b10 	vmov	r2, r3, d0
 80028f2:	6828      	ldr	r0, [r5, #0]
 80028f4:	e9cd 2300 	strd	r2, r3, [sp]
 80028f8:	f7fd fe1c 	bl	8000534 <__aeabi_i2d>
 80028fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002900:	4680      	mov	r8, r0
 8002902:	4689      	mov	r9, r1
 8002904:	4630      	mov	r0, r6
 8002906:	4639      	mov	r1, r7
 8002908:	f7fd fe7a 	bl	8000600 <__aeabi_dmul>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4640      	mov	r0, r8
 8002912:	4649      	mov	r1, r9
 8002914:	f7fd fcc2 	bl	800029c <__adddf3>
 8002918:	f7fe f922 	bl	8000b60 <__aeabi_d2iz>
	my_rover.y += s_mean*sin(((float)my_rover.phi)/100.0); // in 10*mm
 800291c:	eeb0 0a48 	vmov.f32	s0, s16
 8002920:	eef0 0a68 	vmov.f32	s1, s17
	my_rover.x += s_mean*cos(((float)my_rover.phi)/100.0); // in 10*mm
 8002924:	6028      	str	r0, [r5, #0]
	my_rover.y += s_mean*sin(((float)my_rover.phi)/100.0); // in 10*mm
 8002926:	f001 f963 	bl	8003bf0 <sin>
 800292a:	ec53 2b10 	vmov	r2, r3, d0
 800292e:	6868      	ldr	r0, [r5, #4]
 8002930:	e9cd 2300 	strd	r2, r3, [sp]
 8002934:	f7fd fdfe 	bl	8000534 <__aeabi_i2d>
 8002938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800293c:	4680      	mov	r8, r0
 800293e:	4689      	mov	r9, r1
 8002940:	4630      	mov	r0, r6
 8002942:	4639      	mov	r1, r7
 8002944:	f7fd fe5c 	bl	8000600 <__aeabi_dmul>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4640      	mov	r0, r8
 800294e:	4649      	mov	r1, r9
 8002950:	f7fd fca4 	bl	800029c <__adddf3>
 8002954:	f7fe f904 	bl	8000b60 <__aeabi_d2iz>
	my_rover.phi += 10*(s2-s1)/(2*b); // in 100*rad
 8002958:	4b1c      	ldr	r3, [pc, #112]	; (80029cc <update_my_position+0x134>)
	my_rover.y += s_mean*sin(((float)my_rover.phi)/100.0); // in 10*mm
 800295a:	6068      	str	r0, [r5, #4]
	my_rover.phi += 10*(s2-s1)/(2*b); // in 100*rad
 800295c:	eba4 040a 	sub.w	r4, r4, sl
 8002960:	200a      	movs	r0, #10
 8002962:	4360      	muls	r0, r4
 8002964:	881c      	ldrh	r4, [r3, #0]
 8002966:	0064      	lsls	r4, r4, #1
 8002968:	fb90 f0f4 	sdiv	r0, r0, r4

	my_rover.phi = atan(sin((double) my_rover.phi)/cos((double) my_rover.phi)); // map phi between [-pi,pi]
 800296c:	4458      	add	r0, fp
 800296e:	f7fd fde1 	bl	8000534 <__aeabi_i2d>
 8002972:	ec41 0b10 	vmov	d0, r0, r1
 8002976:	ec41 0b18 	vmov	d8, r0, r1
 800297a:	f001 f939 	bl	8003bf0 <sin>
 800297e:	ec51 0b10 	vmov	r0, r1, d0
 8002982:	eeb0 0a48 	vmov.f32	s0, s16
 8002986:	eef0 0a68 	vmov.f32	s1, s17
 800298a:	e9cd 0100 	strd	r0, r1, [sp]
 800298e:	f001 f8e3 	bl	8003b58 <cos>
 8002992:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002996:	ec53 2b10 	vmov	r2, r3, d0
 800299a:	f7fd ff5b 	bl	8000854 <__aeabi_ddiv>
 800299e:	ec41 0b10 	vmov	d0, r0, r1
 80029a2:	f000 ff31 	bl	8003808 <atan>
 80029a6:	ec51 0b10 	vmov	r0, r1, d0
 80029aa:	f7fe f8d9 	bl	8000b60 <__aeabi_d2iz>
 80029ae:	60a8      	str	r0, [r5, #8]
}
 80029b0:	b003      	add	sp, #12
 80029b2:	ecbd 8b02 	vpop	{d8}
 80029b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ba:	bf00      	nop
 80029bc:	20000244 	.word	0x20000244
 80029c0:	2000000c 	.word	0x2000000c
 80029c4:	20000246 	.word	0x20000246
 80029c8:	40590000 	.word	0x40590000
 80029cc:	20000008 	.word	0x20000008

080029d0 <calculate_new_speed>:

void calculate_new_speed(void)
{
 80029d0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int32_t u1,u2;
	int32_t v_s, w;
	int32_t k;

	// Calculate error vector
	dx = my_rover.trg_x - my_rover.x;
 80029d4:	4d20      	ldr	r5, [pc, #128]	; (8002a58 <calculate_new_speed+0x88>)
 80029d6:	6828      	ldr	r0, [r5, #0]
 80029d8:	68ec      	ldr	r4, [r5, #12]
	dy = my_rover.trg_y - my_rover.y;
 80029da:	692b      	ldr	r3, [r5, #16]
	dx = my_rover.trg_x - my_rover.x;
 80029dc:	1a24      	subs	r4, r4, r0
	dy = my_rover.trg_y - my_rover.y;
 80029de:	6868      	ldr	r0, [r5, #4]
 80029e0:	1a1e      	subs	r6, r3, r0

	// Calculate control vector u
	k = v_max*atan(sqrt((double)(dx*dx + dy*dy))/10.0);
 80029e2:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <calculate_new_speed+0x8c>)
 80029e4:	8818      	ldrh	r0, [r3, #0]
 80029e6:	f7fd fda5 	bl	8000534 <__aeabi_i2d>
 80029ea:	4680      	mov	r8, r0
 80029ec:	fb06 f006 	mul.w	r0, r6, r6
 80029f0:	fb04 0004 	mla	r0, r4, r4, r0
 80029f4:	4689      	mov	r9, r1
 80029f6:	f7fd fd9d 	bl	8000534 <__aeabi_i2d>
 80029fa:	ec41 0b10 	vmov	d0, r0, r1
 80029fe:	f001 f93f 	bl	8003c80 <sqrt>
 8002a02:	2200      	movs	r2, #0
 8002a04:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <calculate_new_speed+0x90>)
 8002a06:	ec51 0b10 	vmov	r0, r1, d0
 8002a0a:	f7fd ff23 	bl	8000854 <__aeabi_ddiv>
 8002a0e:	ec41 0b10 	vmov	d0, r0, r1
 8002a12:	f000 fef9 	bl	8003808 <atan>
 8002a16:	4640      	mov	r0, r8
 8002a18:	ec53 2b10 	vmov	r2, r3, d0
 8002a1c:	4649      	mov	r1, r9
 8002a1e:	f7fd fdef 	bl	8000600 <__aeabi_dmul>
 8002a22:	f7fe f89d 	bl	8000b60 <__aeabi_d2iz>
	u1 = k*dx;
	u2 = k*dy;
 8002a26:	fb00 f306 	mul.w	r3, r0, r6
	phi_d = atan(((double)u2)/u1)*100; // in 100*rad
	dphi = phi_d - my_rover.phi;
	dphi = atan(sin((double)dphi)/cos((double)dphi));

	// Calculate rotation and linear velocity
	v_s = sqrt((double)(u1*u1 + u2*u2));
 8002a2a:	435b      	muls	r3, r3
	u1 = k*dx;
 8002a2c:	4344      	muls	r4, r0
	v_s = sqrt((double)(u1*u1 + u2*u2));
 8002a2e:	fb04 3004 	mla	r0, r4, r4, r3
 8002a32:	f7fd fd7f 	bl	8000534 <__aeabi_i2d>
 8002a36:	ec41 0b10 	vmov	d0, r0, r1
 8002a3a:	f001 f921 	bl	8003c80 <sqrt>
 8002a3e:	ec51 0b10 	vmov	r0, r1, d0
 8002a42:	f7fe f88d 	bl	8000b60 <__aeabi_d2iz>
		// calculate rotation velocity using PID controller

	// Calculate the wheel speed
	my_rover.trg_wheel_spd1 = (2*v_s+w*b)/2;
 8002a46:	2302      	movs	r3, #2
 8002a48:	0040      	lsls	r0, r0, #1
 8002a4a:	fb90 f2f3 	sdiv	r2, r0, r3
 8002a4e:	616a      	str	r2, [r5, #20]
	my_rover.trg_wheel_spd2 = (2*v_s-w*b)/2;
 8002a50:	61aa      	str	r2, [r5, #24]
 8002a52:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8002a56:	bf00      	nop
 8002a58:	2000000c 	.word	0x2000000c
 8002a5c:	20000028 	.word	0x20000028
 8002a60:	40240000 	.word	0x40240000

08002a64 <HAL_TIM_OC_DelayElapsedCallback>:
	if ((htim->Instance == TIM4) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) && give_command == 1)
 8002a64:	6802      	ldr	r2, [r0, #0]
 8002a66:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8002a68:	429a      	cmp	r2, r3
{
 8002a6a:	b570      	push	{r4, r5, r6, lr}
	if ((htim->Instance == TIM4) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) && give_command == 1)
 8002a6c:	d133      	bne.n	8002ad6 <HAL_TIM_OC_DelayElapsedCallback+0x72>
 8002a6e:	7f03      	ldrb	r3, [r0, #28]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d130      	bne.n	8002ad6 <HAL_TIM_OC_DelayElapsedCallback+0x72>
 8002a74:	4b19      	ldr	r3, [pc, #100]	; (8002adc <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8002a76:	781e      	ldrb	r6, [r3, #0]
 8002a78:	2e01      	cmp	r6, #1
 8002a7a:	d12c      	bne.n	8002ad6 <HAL_TIM_OC_DelayElapsedCallback+0x72>
		HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8002a7c:	4818      	ldr	r0, [pc, #96]	; (8002ae0 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
		n_pulse1 = input_capture1 - input_capture_prev1;
 8002a7e:	4c19      	ldr	r4, [pc, #100]	; (8002ae4 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
		n_pulse2 = input_capture2 - input_capture_prev2;
 8002a80:	4d19      	ldr	r5, [pc, #100]	; (8002ae8 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
		HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8002a82:	2120      	movs	r1, #32
 8002a84:	f7fe fbb1 	bl	80011ea <HAL_GPIO_TogglePin>
		n_pulse1 = input_capture1 - input_capture_prev1;
 8002a88:	4a18      	ldr	r2, [pc, #96]	; (8002aec <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8002a8a:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8002a8c:	6819      	ldr	r1, [r3, #0]
 8002a8e:	6813      	ldr	r3, [r2, #0]
		input_capture_prev1 = input_capture1;
 8002a90:	6011      	str	r1, [r2, #0]
		n_pulse1 = input_capture1 - input_capture_prev1;
 8002a92:	1acb      	subs	r3, r1, r3
		n_pulse2 = input_capture2 - input_capture_prev2;
 8002a94:	4a17      	ldr	r2, [pc, #92]	; (8002af4 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
		n_pulse1 = input_capture1 - input_capture_prev1;
 8002a96:	8023      	strh	r3, [r4, #0]
		n_pulse2 = input_capture2 - input_capture_prev2;
 8002a98:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002a9a:	6819      	ldr	r1, [r3, #0]
 8002a9c:	6813      	ldr	r3, [r2, #0]
		input_capture_prev2 = input_capture2;
 8002a9e:	6011      	str	r1, [r2, #0]
		n_pulse2 = input_capture2 - input_capture_prev2;
 8002aa0:	1acb      	subs	r3, r1, r3
 8002aa2:	802b      	strh	r3, [r5, #0]
		update_my_position();
 8002aa4:	f7ff fef8 	bl	8002898 <update_my_position>
		calculate_new_speed();
 8002aa8:	f7ff ff92 	bl	80029d0 <calculate_new_speed>
		returned_pwm1 = pid_controller_wheels(n_pulse1, n_pulse_set1, 1);
 8002aac:	4b13      	ldr	r3, [pc, #76]	; (8002afc <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002aae:	8820      	ldrh	r0, [r4, #0]
 8002ab0:	8819      	ldrh	r1, [r3, #0]
 8002ab2:	4c13      	ldr	r4, [pc, #76]	; (8002b00 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002ab4:	4632      	mov	r2, r6
 8002ab6:	f7ff feb1 	bl	800281c <pid_controller_wheels>
		returned_pwm2 = pid_controller_wheels(n_pulse2, n_pulse_set2, 2);
 8002aba:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
		returned_pwm1 = pid_controller_wheels(n_pulse1, n_pulse_set1, 1);
 8002abc:	8020      	strh	r0, [r4, #0]
		returned_pwm2 = pid_controller_wheels(n_pulse2, n_pulse_set2, 2);
 8002abe:	2202      	movs	r2, #2
 8002ac0:	8819      	ldrh	r1, [r3, #0]
 8002ac2:	8828      	ldrh	r0, [r5, #0]
 8002ac4:	f7ff feaa 	bl	800281c <pid_controller_wheels>
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, returned_pwm1);
 8002aca:	8822      	ldrh	r2, [r4, #0]
		returned_pwm2 = pid_controller_wheels(n_pulse2, n_pulse_set2, 2);
 8002acc:	8018      	strh	r0, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, returned_pwm1);
 8002ace:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, returned_pwm2);
 8002ad4:	6398      	str	r0, [r3, #56]	; 0x38
 8002ad6:	bd70      	pop	{r4, r5, r6, pc}
 8002ad8:	40000800 	.word	0x40000800
 8002adc:	20000228 	.word	0x20000228
 8002ae0:	40020000 	.word	0x40020000
 8002ae4:	20000244 	.word	0x20000244
 8002ae8:	20000246 	.word	0x20000246
 8002aec:	20000234 	.word	0x20000234
 8002af0:	2000022c 	.word	0x2000022c
 8002af4:	20000238 	.word	0x20000238
 8002af8:	20000230 	.word	0x20000230
 8002afc:	20000248 	.word	0x20000248
 8002b00:	2000024c 	.word	0x2000024c
 8002b04:	2000024a 	.word	0x2000024a
 8002b08:	2000024e 	.word	0x2000024e
 8002b0c:	200002a0 	.word	0x200002a0

08002b10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b10:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b12:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <HAL_MspInit+0x3c>)
 8002b14:	2100      	movs	r1, #0
 8002b16:	9100      	str	r1, [sp, #0]
 8002b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b1e:	645a      	str	r2, [r3, #68]	; 0x44
 8002b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b22:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002b26:	9200      	str	r2, [sp, #0]
 8002b28:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b2a:	9101      	str	r1, [sp, #4]
 8002b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b32:	641a      	str	r2, [r3, #64]	; 0x40
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b3c:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b40:	f7fe fa0e 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b44:	b003      	add	sp, #12
 8002b46:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800

08002b50 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002b50:	b510      	push	{r4, lr}
 8002b52:	4604      	mov	r4, r0
 8002b54:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b56:	2214      	movs	r2, #20
 8002b58:	2100      	movs	r1, #0
 8002b5a:	a803      	add	r0, sp, #12
 8002b5c:	f000 f978 	bl	8002e50 <memset>
  if(htim_ic->Instance==TIM2)
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b66:	d128      	bne.n	8002bba <HAL_TIM_IC_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b68:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002b6c:	2400      	movs	r4, #0
 8002b6e:	9401      	str	r4, [sp, #4]
 8002b70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b72:	4813      	ldr	r0, [pc, #76]	; (8002bc0 <HAL_TIM_IC_MspInit+0x70>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b74:	f042 0201 	orr.w	r2, r2, #1
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
 8002b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b7c:	f002 0201 	and.w	r2, r2, #1
 8002b80:	9201      	str	r2, [sp, #4]
 8002b82:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b84:	9402      	str	r4, [sp, #8]
 8002b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b88:	f042 0201 	orr.w	r2, r2, #1
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	9302      	str	r3, [sp, #8]
 8002b96:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba6:	f7fe fa45 	bl	8001034 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002baa:	201c      	movs	r0, #28
 8002bac:	4622      	mov	r2, r4
 8002bae:	4621      	mov	r1, r4
 8002bb0:	f7fe f9e8 	bl	8000f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bb4:	201c      	movs	r0, #28
 8002bb6:	f7fe fa19 	bl	8000fec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002bba:	b008      	add	sp, #32
 8002bbc:	bd10      	pop	{r4, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40020000 	.word	0x40020000

08002bc4 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8002bc4:	6802      	ldr	r2, [r0, #0]
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <HAL_TIM_PWM_MspInit+0x28>)
 8002bc8:	429a      	cmp	r2, r3
{
 8002bca:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 8002bcc:	d10b      	bne.n	8002be6 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	9301      	str	r3, [sp, #4]
 8002bd2:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <HAL_TIM_PWM_MspInit+0x2c>)
 8002bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd6:	f042 0202 	orr.w	r2, r2, #2
 8002bda:	641a      	str	r2, [r3, #64]	; 0x40
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	9301      	str	r3, [sp, #4]
 8002be4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002be6:	b002      	add	sp, #8
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	40023800 	.word	0x40023800

08002bf4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002bf4:	b507      	push	{r0, r1, r2, lr}
  if(htim_oc->Instance==TIM4)
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_TIM_OC_MspInit+0x38>)
 8002bf8:	6802      	ldr	r2, [r0, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d113      	bne.n	8002c26 <HAL_TIM_OC_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8002c04:	9201      	str	r2, [sp, #4]
 8002c06:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002c08:	f041 0104 	orr.w	r1, r1, #4
 8002c0c:	6419      	str	r1, [r3, #64]	; 0x40
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	9301      	str	r3, [sp, #4]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002c16:	201e      	movs	r0, #30
 8002c18:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c1a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002c1c:	f7fe f9b2 	bl	8000f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c20:	201e      	movs	r0, #30
 8002c22:	f7fe f9e3 	bl	8000fec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c26:	b003      	add	sp, #12
 8002c28:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c2c:	40000800 	.word	0x40000800

08002c30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c30:	b510      	push	{r4, lr}
 8002c32:	4604      	mov	r4, r0
 8002c34:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c36:	2214      	movs	r2, #20
 8002c38:	2100      	movs	r1, #0
 8002c3a:	a801      	add	r0, sp, #4
 8002c3c:	f000 f908 	bl	8002e50 <memset>
  if(htim->Instance==TIM3)
 8002c40:	6822      	ldr	r2, [r4, #0]
 8002c42:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <HAL_TIM_MspPostInit+0x48>)
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d114      	bne.n	8002c72 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c48:	2300      	movs	r3, #0
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4e:	480c      	ldr	r0, [pc, #48]	; (8002c80 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c62:	23c0      	movs	r3, #192	; 0xc0
 8002c64:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c66:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c6c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6e:	f7fe f9e1 	bl	8001034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c72:	b006      	add	sp, #24
 8002c74:	bd10      	pop	{r4, pc}
 8002c76:	bf00      	nop
 8002c78:	40000400 	.word	0x40000400
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40020000 	.word	0x40020000

08002c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c84:	b510      	push	{r4, lr}
 8002c86:	4604      	mov	r4, r0
 8002c88:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8a:	2214      	movs	r2, #20
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	a803      	add	r0, sp, #12
 8002c90:	f000 f8de 	bl	8002e50 <memset>
  if(huart->Instance==USART2)
 8002c94:	6822      	ldr	r2, [r4, #0]
 8002c96:	4b15      	ldr	r3, [pc, #84]	; (8002cec <HAL_UART_MspInit+0x68>)
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d124      	bne.n	8002ce6 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c9c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	9101      	str	r1, [sp, #4]
 8002ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca6:	4812      	ldr	r0, [pc, #72]	; (8002cf0 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ca8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40
 8002cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002cb4:	9201      	str	r2, [sp, #4]
 8002cb6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb8:	9102      	str	r1, [sp, #8]
 8002cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	631a      	str	r2, [r3, #48]	; 0x30
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	9302      	str	r3, [sp, #8]
 8002cca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ccc:	230c      	movs	r3, #12
 8002cce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cdc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cde:	2307      	movs	r3, #7
 8002ce0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce2:	f7fe f9a7 	bl	8001034 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ce6:	b008      	add	sp, #32
 8002ce8:	bd10      	pop	{r4, pc}
 8002cea:	bf00      	nop
 8002cec:	40004400 	.word	0x40004400
 8002cf0:	40020000 	.word	0x40020000

08002cf4 <NMI_Handler>:
 8002cf4:	4770      	bx	lr

08002cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cf6:	e7fe      	b.n	8002cf6 <HardFault_Handler>

08002cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cf8:	e7fe      	b.n	8002cf8 <MemManage_Handler>

08002cfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cfa:	e7fe      	b.n	8002cfa <BusFault_Handler>

08002cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cfc:	e7fe      	b.n	8002cfc <UsageFault_Handler>

08002cfe <SVC_Handler>:
 8002cfe:	4770      	bx	lr

08002d00 <DebugMon_Handler>:
 8002d00:	4770      	bx	lr

08002d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d02:	4770      	bx	lr

08002d04 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d04:	f7fe b91a 	b.w	8000f3c <HAL_IncTick>

08002d08 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d08:	4801      	ldr	r0, [pc, #4]	; (8002d10 <TIM2_IRQHandler+0x8>)
 8002d0a:	f7fe bd56 	b.w	80017ba <HAL_TIM_IRQHandler>
 8002d0e:	bf00      	nop
 8002d10:	200002e0 	.word	0x200002e0

08002d14 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d14:	4801      	ldr	r0, [pc, #4]	; (8002d1c <TIM4_IRQHandler+0x8>)
 8002d16:	f7fe bd50 	b.w	80017ba <HAL_TIM_IRQHandler>
 8002d1a:	bf00      	nop
 8002d1c:	20000260 	.word	0x20000260

08002d20 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002d20:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d22:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <_sbrk+0x2c>)
 8002d24:	6819      	ldr	r1, [r3, #0]
{
 8002d26:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002d28:	b909      	cbnz	r1, 8002d2e <_sbrk+0xe>
		heap_end = &end;
 8002d2a:	4909      	ldr	r1, [pc, #36]	; (8002d50 <_sbrk+0x30>)
 8002d2c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8002d2e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002d30:	4669      	mov	r1, sp
 8002d32:	4402      	add	r2, r0
 8002d34:	428a      	cmp	r2, r1
 8002d36:	d906      	bls.n	8002d46 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002d38:	f000 f860 	bl	8002dfc <__errno>
 8002d3c:	230c      	movs	r3, #12
 8002d3e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d44:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002d46:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002d48:	bd08      	pop	{r3, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000250 	.word	0x20000250
 8002d50:	20000364 	.word	0x20000364

08002d54 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d54:	490f      	ldr	r1, [pc, #60]	; (8002d94 <SystemInit+0x40>)
 8002d56:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002d5a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002d62:	4b0d      	ldr	r3, [pc, #52]	; (8002d98 <SystemInit+0x44>)
 8002d64:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d66:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002d68:	f042 0201 	orr.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002d6e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002d76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d7a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002d7c:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <SystemInit+0x48>)
 8002d7e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d86:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002d88:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d8e:	608b      	str	r3, [r1, #8]
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	e000ed00 	.word	0xe000ed00
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	24003010 	.word	0x24003010

08002da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002da4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002da6:	e003      	b.n	8002db0 <LoopCopyDataInit>

08002da8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002daa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002dac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002dae:	3104      	adds	r1, #4

08002db0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002db0:	480b      	ldr	r0, [pc, #44]	; (8002de0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002db4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002db6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002db8:	d3f6      	bcc.n	8002da8 <CopyDataInit>
  ldr  r2, =_sbss
 8002dba:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002dbc:	e002      	b.n	8002dc4 <LoopFillZerobss>

08002dbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002dbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002dc0:	f842 3b04 	str.w	r3, [r2], #4

08002dc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002dc4:	4b09      	ldr	r3, [pc, #36]	; (8002dec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002dc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002dc8:	d3f9      	bcc.n	8002dbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dca:	f7ff ffc3 	bl	8002d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dce:	f000 f81b 	bl	8002e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dd2:	f7ff fbfb 	bl	80025cc <main>
  bx  lr    
 8002dd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002dd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ddc:	08005398 	.word	0x08005398
  ldr  r0, =_sdata
 8002de0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002de4:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 8002de8:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 8002dec:	20000364 	.word	0x20000364

08002df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002df0:	e7fe      	b.n	8002df0 <ADC_IRQHandler>

08002df2 <atoi>:
 8002df2:	220a      	movs	r2, #10
 8002df4:	2100      	movs	r1, #0
 8002df6:	f000 b8d7 	b.w	8002fa8 <strtol>
	...

08002dfc <__errno>:
 8002dfc:	4b01      	ldr	r3, [pc, #4]	; (8002e04 <__errno+0x8>)
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000030 	.word	0x20000030

08002e08 <__libc_init_array>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	4e0d      	ldr	r6, [pc, #52]	; (8002e40 <__libc_init_array+0x38>)
 8002e0c:	4c0d      	ldr	r4, [pc, #52]	; (8002e44 <__libc_init_array+0x3c>)
 8002e0e:	1ba4      	subs	r4, r4, r6
 8002e10:	10a4      	asrs	r4, r4, #2
 8002e12:	2500      	movs	r5, #0
 8002e14:	42a5      	cmp	r5, r4
 8002e16:	d109      	bne.n	8002e2c <__libc_init_array+0x24>
 8002e18:	4e0b      	ldr	r6, [pc, #44]	; (8002e48 <__libc_init_array+0x40>)
 8002e1a:	4c0c      	ldr	r4, [pc, #48]	; (8002e4c <__libc_init_array+0x44>)
 8002e1c:	f002 f834 	bl	8004e88 <_init>
 8002e20:	1ba4      	subs	r4, r4, r6
 8002e22:	10a4      	asrs	r4, r4, #2
 8002e24:	2500      	movs	r5, #0
 8002e26:	42a5      	cmp	r5, r4
 8002e28:	d105      	bne.n	8002e36 <__libc_init_array+0x2e>
 8002e2a:	bd70      	pop	{r4, r5, r6, pc}
 8002e2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e30:	4798      	blx	r3
 8002e32:	3501      	adds	r5, #1
 8002e34:	e7ee      	b.n	8002e14 <__libc_init_array+0xc>
 8002e36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e3a:	4798      	blx	r3
 8002e3c:	3501      	adds	r5, #1
 8002e3e:	e7f2      	b.n	8002e26 <__libc_init_array+0x1e>
 8002e40:	08005390 	.word	0x08005390
 8002e44:	08005390 	.word	0x08005390
 8002e48:	08005390 	.word	0x08005390
 8002e4c:	08005394 	.word	0x08005394

08002e50 <memset>:
 8002e50:	4402      	add	r2, r0
 8002e52:	4603      	mov	r3, r0
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d100      	bne.n	8002e5a <memset+0xa>
 8002e58:	4770      	bx	lr
 8002e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e5e:	e7f9      	b.n	8002e54 <memset+0x4>

08002e60 <siprintf>:
 8002e60:	b40e      	push	{r1, r2, r3}
 8002e62:	b500      	push	{lr}
 8002e64:	b09c      	sub	sp, #112	; 0x70
 8002e66:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002e6a:	ab1d      	add	r3, sp, #116	; 0x74
 8002e6c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002e70:	9002      	str	r0, [sp, #8]
 8002e72:	9006      	str	r0, [sp, #24]
 8002e74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e78:	480a      	ldr	r0, [pc, #40]	; (8002ea4 <siprintf+0x44>)
 8002e7a:	9104      	str	r1, [sp, #16]
 8002e7c:	9107      	str	r1, [sp, #28]
 8002e7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e86:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002e8a:	6800      	ldr	r0, [r0, #0]
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	a902      	add	r1, sp, #8
 8002e90:	f000 f910 	bl	80030b4 <_svfiprintf_r>
 8002e94:	9b02      	ldr	r3, [sp, #8]
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	b01c      	add	sp, #112	; 0x70
 8002e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ea0:	b003      	add	sp, #12
 8002ea2:	4770      	bx	lr
 8002ea4:	20000030 	.word	0x20000030

08002ea8 <_strtol_l.isra.0>:
 8002ea8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eac:	4680      	mov	r8, r0
 8002eae:	4689      	mov	r9, r1
 8002eb0:	4692      	mov	sl, r2
 8002eb2:	461f      	mov	r7, r3
 8002eb4:	468b      	mov	fp, r1
 8002eb6:	465d      	mov	r5, fp
 8002eb8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002eba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002ebe:	f000 f889 	bl	8002fd4 <__locale_ctype_ptr_l>
 8002ec2:	4420      	add	r0, r4
 8002ec4:	7846      	ldrb	r6, [r0, #1]
 8002ec6:	f016 0608 	ands.w	r6, r6, #8
 8002eca:	d10b      	bne.n	8002ee4 <_strtol_l.isra.0+0x3c>
 8002ecc:	2c2d      	cmp	r4, #45	; 0x2d
 8002ece:	d10b      	bne.n	8002ee8 <_strtol_l.isra.0+0x40>
 8002ed0:	782c      	ldrb	r4, [r5, #0]
 8002ed2:	2601      	movs	r6, #1
 8002ed4:	f10b 0502 	add.w	r5, fp, #2
 8002ed8:	b167      	cbz	r7, 8002ef4 <_strtol_l.isra.0+0x4c>
 8002eda:	2f10      	cmp	r7, #16
 8002edc:	d114      	bne.n	8002f08 <_strtol_l.isra.0+0x60>
 8002ede:	2c30      	cmp	r4, #48	; 0x30
 8002ee0:	d00a      	beq.n	8002ef8 <_strtol_l.isra.0+0x50>
 8002ee2:	e011      	b.n	8002f08 <_strtol_l.isra.0+0x60>
 8002ee4:	46ab      	mov	fp, r5
 8002ee6:	e7e6      	b.n	8002eb6 <_strtol_l.isra.0+0xe>
 8002ee8:	2c2b      	cmp	r4, #43	; 0x2b
 8002eea:	bf04      	itt	eq
 8002eec:	782c      	ldrbeq	r4, [r5, #0]
 8002eee:	f10b 0502 	addeq.w	r5, fp, #2
 8002ef2:	e7f1      	b.n	8002ed8 <_strtol_l.isra.0+0x30>
 8002ef4:	2c30      	cmp	r4, #48	; 0x30
 8002ef6:	d127      	bne.n	8002f48 <_strtol_l.isra.0+0xa0>
 8002ef8:	782b      	ldrb	r3, [r5, #0]
 8002efa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002efe:	2b58      	cmp	r3, #88	; 0x58
 8002f00:	d14b      	bne.n	8002f9a <_strtol_l.isra.0+0xf2>
 8002f02:	786c      	ldrb	r4, [r5, #1]
 8002f04:	2710      	movs	r7, #16
 8002f06:	3502      	adds	r5, #2
 8002f08:	2e00      	cmp	r6, #0
 8002f0a:	bf0c      	ite	eq
 8002f0c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002f10:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002f14:	2200      	movs	r2, #0
 8002f16:	fbb1 fef7 	udiv	lr, r1, r7
 8002f1a:	4610      	mov	r0, r2
 8002f1c:	fb07 1c1e 	mls	ip, r7, lr, r1
 8002f20:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002f24:	2b09      	cmp	r3, #9
 8002f26:	d811      	bhi.n	8002f4c <_strtol_l.isra.0+0xa4>
 8002f28:	461c      	mov	r4, r3
 8002f2a:	42a7      	cmp	r7, r4
 8002f2c:	dd1d      	ble.n	8002f6a <_strtol_l.isra.0+0xc2>
 8002f2e:	1c53      	adds	r3, r2, #1
 8002f30:	d007      	beq.n	8002f42 <_strtol_l.isra.0+0x9a>
 8002f32:	4586      	cmp	lr, r0
 8002f34:	d316      	bcc.n	8002f64 <_strtol_l.isra.0+0xbc>
 8002f36:	d101      	bne.n	8002f3c <_strtol_l.isra.0+0x94>
 8002f38:	45a4      	cmp	ip, r4
 8002f3a:	db13      	blt.n	8002f64 <_strtol_l.isra.0+0xbc>
 8002f3c:	fb00 4007 	mla	r0, r0, r7, r4
 8002f40:	2201      	movs	r2, #1
 8002f42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002f46:	e7eb      	b.n	8002f20 <_strtol_l.isra.0+0x78>
 8002f48:	270a      	movs	r7, #10
 8002f4a:	e7dd      	b.n	8002f08 <_strtol_l.isra.0+0x60>
 8002f4c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002f50:	2b19      	cmp	r3, #25
 8002f52:	d801      	bhi.n	8002f58 <_strtol_l.isra.0+0xb0>
 8002f54:	3c37      	subs	r4, #55	; 0x37
 8002f56:	e7e8      	b.n	8002f2a <_strtol_l.isra.0+0x82>
 8002f58:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002f5c:	2b19      	cmp	r3, #25
 8002f5e:	d804      	bhi.n	8002f6a <_strtol_l.isra.0+0xc2>
 8002f60:	3c57      	subs	r4, #87	; 0x57
 8002f62:	e7e2      	b.n	8002f2a <_strtol_l.isra.0+0x82>
 8002f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f68:	e7eb      	b.n	8002f42 <_strtol_l.isra.0+0x9a>
 8002f6a:	1c53      	adds	r3, r2, #1
 8002f6c:	d108      	bne.n	8002f80 <_strtol_l.isra.0+0xd8>
 8002f6e:	2322      	movs	r3, #34	; 0x22
 8002f70:	f8c8 3000 	str.w	r3, [r8]
 8002f74:	4608      	mov	r0, r1
 8002f76:	f1ba 0f00 	cmp.w	sl, #0
 8002f7a:	d107      	bne.n	8002f8c <_strtol_l.isra.0+0xe4>
 8002f7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f80:	b106      	cbz	r6, 8002f84 <_strtol_l.isra.0+0xdc>
 8002f82:	4240      	negs	r0, r0
 8002f84:	f1ba 0f00 	cmp.w	sl, #0
 8002f88:	d00c      	beq.n	8002fa4 <_strtol_l.isra.0+0xfc>
 8002f8a:	b122      	cbz	r2, 8002f96 <_strtol_l.isra.0+0xee>
 8002f8c:	3d01      	subs	r5, #1
 8002f8e:	f8ca 5000 	str.w	r5, [sl]
 8002f92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f96:	464d      	mov	r5, r9
 8002f98:	e7f9      	b.n	8002f8e <_strtol_l.isra.0+0xe6>
 8002f9a:	2430      	movs	r4, #48	; 0x30
 8002f9c:	2f00      	cmp	r7, #0
 8002f9e:	d1b3      	bne.n	8002f08 <_strtol_l.isra.0+0x60>
 8002fa0:	2708      	movs	r7, #8
 8002fa2:	e7b1      	b.n	8002f08 <_strtol_l.isra.0+0x60>
 8002fa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002fa8 <strtol>:
 8002fa8:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <strtol+0x24>)
 8002faa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fac:	681c      	ldr	r4, [r3, #0]
 8002fae:	4d08      	ldr	r5, [pc, #32]	; (8002fd0 <strtol+0x28>)
 8002fb0:	6a23      	ldr	r3, [r4, #32]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	bf08      	it	eq
 8002fb6:	462b      	moveq	r3, r5
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	460a      	mov	r2, r1
 8002fbe:	4601      	mov	r1, r0
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	f7ff ff71 	bl	8002ea8 <_strtol_l.isra.0>
 8002fc6:	b003      	add	sp, #12
 8002fc8:	bd30      	pop	{r4, r5, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000030 	.word	0x20000030
 8002fd0:	20000094 	.word	0x20000094

08002fd4 <__locale_ctype_ptr_l>:
 8002fd4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8002fd8:	4770      	bx	lr

08002fda <__ascii_mbtowc>:
 8002fda:	b082      	sub	sp, #8
 8002fdc:	b901      	cbnz	r1, 8002fe0 <__ascii_mbtowc+0x6>
 8002fde:	a901      	add	r1, sp, #4
 8002fe0:	b142      	cbz	r2, 8002ff4 <__ascii_mbtowc+0x1a>
 8002fe2:	b14b      	cbz	r3, 8002ff8 <__ascii_mbtowc+0x1e>
 8002fe4:	7813      	ldrb	r3, [r2, #0]
 8002fe6:	600b      	str	r3, [r1, #0]
 8002fe8:	7812      	ldrb	r2, [r2, #0]
 8002fea:	1c10      	adds	r0, r2, #0
 8002fec:	bf18      	it	ne
 8002fee:	2001      	movne	r0, #1
 8002ff0:	b002      	add	sp, #8
 8002ff2:	4770      	bx	lr
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	e7fb      	b.n	8002ff0 <__ascii_mbtowc+0x16>
 8002ff8:	f06f 0001 	mvn.w	r0, #1
 8002ffc:	e7f8      	b.n	8002ff0 <__ascii_mbtowc+0x16>

08002ffe <__ssputs_r>:
 8002ffe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003002:	688e      	ldr	r6, [r1, #8]
 8003004:	429e      	cmp	r6, r3
 8003006:	4682      	mov	sl, r0
 8003008:	460c      	mov	r4, r1
 800300a:	4691      	mov	r9, r2
 800300c:	4698      	mov	r8, r3
 800300e:	d835      	bhi.n	800307c <__ssputs_r+0x7e>
 8003010:	898a      	ldrh	r2, [r1, #12]
 8003012:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003016:	d031      	beq.n	800307c <__ssputs_r+0x7e>
 8003018:	6825      	ldr	r5, [r4, #0]
 800301a:	6909      	ldr	r1, [r1, #16]
 800301c:	1a6f      	subs	r7, r5, r1
 800301e:	6965      	ldr	r5, [r4, #20]
 8003020:	2302      	movs	r3, #2
 8003022:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003026:	fb95 f5f3 	sdiv	r5, r5, r3
 800302a:	f108 0301 	add.w	r3, r8, #1
 800302e:	443b      	add	r3, r7
 8003030:	429d      	cmp	r5, r3
 8003032:	bf38      	it	cc
 8003034:	461d      	movcc	r5, r3
 8003036:	0553      	lsls	r3, r2, #21
 8003038:	d531      	bpl.n	800309e <__ssputs_r+0xa0>
 800303a:	4629      	mov	r1, r5
 800303c:	f000 fb44 	bl	80036c8 <_malloc_r>
 8003040:	4606      	mov	r6, r0
 8003042:	b950      	cbnz	r0, 800305a <__ssputs_r+0x5c>
 8003044:	230c      	movs	r3, #12
 8003046:	f8ca 3000 	str.w	r3, [sl]
 800304a:	89a3      	ldrh	r3, [r4, #12]
 800304c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003050:	81a3      	strh	r3, [r4, #12]
 8003052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800305a:	463a      	mov	r2, r7
 800305c:	6921      	ldr	r1, [r4, #16]
 800305e:	f000 fac0 	bl	80035e2 <memcpy>
 8003062:	89a3      	ldrh	r3, [r4, #12]
 8003064:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306c:	81a3      	strh	r3, [r4, #12]
 800306e:	6126      	str	r6, [r4, #16]
 8003070:	6165      	str	r5, [r4, #20]
 8003072:	443e      	add	r6, r7
 8003074:	1bed      	subs	r5, r5, r7
 8003076:	6026      	str	r6, [r4, #0]
 8003078:	60a5      	str	r5, [r4, #8]
 800307a:	4646      	mov	r6, r8
 800307c:	4546      	cmp	r6, r8
 800307e:	bf28      	it	cs
 8003080:	4646      	movcs	r6, r8
 8003082:	4632      	mov	r2, r6
 8003084:	4649      	mov	r1, r9
 8003086:	6820      	ldr	r0, [r4, #0]
 8003088:	f000 fab6 	bl	80035f8 <memmove>
 800308c:	68a3      	ldr	r3, [r4, #8]
 800308e:	1b9b      	subs	r3, r3, r6
 8003090:	60a3      	str	r3, [r4, #8]
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	441e      	add	r6, r3
 8003096:	6026      	str	r6, [r4, #0]
 8003098:	2000      	movs	r0, #0
 800309a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800309e:	462a      	mov	r2, r5
 80030a0:	f000 fb70 	bl	8003784 <_realloc_r>
 80030a4:	4606      	mov	r6, r0
 80030a6:	2800      	cmp	r0, #0
 80030a8:	d1e1      	bne.n	800306e <__ssputs_r+0x70>
 80030aa:	6921      	ldr	r1, [r4, #16]
 80030ac:	4650      	mov	r0, sl
 80030ae:	f000 fabd 	bl	800362c <_free_r>
 80030b2:	e7c7      	b.n	8003044 <__ssputs_r+0x46>

080030b4 <_svfiprintf_r>:
 80030b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b8:	b09d      	sub	sp, #116	; 0x74
 80030ba:	4680      	mov	r8, r0
 80030bc:	9303      	str	r3, [sp, #12]
 80030be:	898b      	ldrh	r3, [r1, #12]
 80030c0:	061c      	lsls	r4, r3, #24
 80030c2:	460d      	mov	r5, r1
 80030c4:	4616      	mov	r6, r2
 80030c6:	d50f      	bpl.n	80030e8 <_svfiprintf_r+0x34>
 80030c8:	690b      	ldr	r3, [r1, #16]
 80030ca:	b96b      	cbnz	r3, 80030e8 <_svfiprintf_r+0x34>
 80030cc:	2140      	movs	r1, #64	; 0x40
 80030ce:	f000 fafb 	bl	80036c8 <_malloc_r>
 80030d2:	6028      	str	r0, [r5, #0]
 80030d4:	6128      	str	r0, [r5, #16]
 80030d6:	b928      	cbnz	r0, 80030e4 <_svfiprintf_r+0x30>
 80030d8:	230c      	movs	r3, #12
 80030da:	f8c8 3000 	str.w	r3, [r8]
 80030de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030e2:	e0c5      	b.n	8003270 <_svfiprintf_r+0x1bc>
 80030e4:	2340      	movs	r3, #64	; 0x40
 80030e6:	616b      	str	r3, [r5, #20]
 80030e8:	2300      	movs	r3, #0
 80030ea:	9309      	str	r3, [sp, #36]	; 0x24
 80030ec:	2320      	movs	r3, #32
 80030ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030f2:	2330      	movs	r3, #48	; 0x30
 80030f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030f8:	f04f 0b01 	mov.w	fp, #1
 80030fc:	4637      	mov	r7, r6
 80030fe:	463c      	mov	r4, r7
 8003100:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d13c      	bne.n	8003182 <_svfiprintf_r+0xce>
 8003108:	ebb7 0a06 	subs.w	sl, r7, r6
 800310c:	d00b      	beq.n	8003126 <_svfiprintf_r+0x72>
 800310e:	4653      	mov	r3, sl
 8003110:	4632      	mov	r2, r6
 8003112:	4629      	mov	r1, r5
 8003114:	4640      	mov	r0, r8
 8003116:	f7ff ff72 	bl	8002ffe <__ssputs_r>
 800311a:	3001      	adds	r0, #1
 800311c:	f000 80a3 	beq.w	8003266 <_svfiprintf_r+0x1b2>
 8003120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003122:	4453      	add	r3, sl
 8003124:	9309      	str	r3, [sp, #36]	; 0x24
 8003126:	783b      	ldrb	r3, [r7, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 809c 	beq.w	8003266 <_svfiprintf_r+0x1b2>
 800312e:	2300      	movs	r3, #0
 8003130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003134:	9304      	str	r3, [sp, #16]
 8003136:	9307      	str	r3, [sp, #28]
 8003138:	9205      	str	r2, [sp, #20]
 800313a:	9306      	str	r3, [sp, #24]
 800313c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003140:	931a      	str	r3, [sp, #104]	; 0x68
 8003142:	2205      	movs	r2, #5
 8003144:	7821      	ldrb	r1, [r4, #0]
 8003146:	4850      	ldr	r0, [pc, #320]	; (8003288 <_svfiprintf_r+0x1d4>)
 8003148:	f7fd f852 	bl	80001f0 <memchr>
 800314c:	1c67      	adds	r7, r4, #1
 800314e:	9b04      	ldr	r3, [sp, #16]
 8003150:	b9d8      	cbnz	r0, 800318a <_svfiprintf_r+0xd6>
 8003152:	06d9      	lsls	r1, r3, #27
 8003154:	bf44      	itt	mi
 8003156:	2220      	movmi	r2, #32
 8003158:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800315c:	071a      	lsls	r2, r3, #28
 800315e:	bf44      	itt	mi
 8003160:	222b      	movmi	r2, #43	; 0x2b
 8003162:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003166:	7822      	ldrb	r2, [r4, #0]
 8003168:	2a2a      	cmp	r2, #42	; 0x2a
 800316a:	d016      	beq.n	800319a <_svfiprintf_r+0xe6>
 800316c:	9a07      	ldr	r2, [sp, #28]
 800316e:	2100      	movs	r1, #0
 8003170:	200a      	movs	r0, #10
 8003172:	4627      	mov	r7, r4
 8003174:	3401      	adds	r4, #1
 8003176:	783b      	ldrb	r3, [r7, #0]
 8003178:	3b30      	subs	r3, #48	; 0x30
 800317a:	2b09      	cmp	r3, #9
 800317c:	d951      	bls.n	8003222 <_svfiprintf_r+0x16e>
 800317e:	b1c9      	cbz	r1, 80031b4 <_svfiprintf_r+0x100>
 8003180:	e011      	b.n	80031a6 <_svfiprintf_r+0xf2>
 8003182:	2b25      	cmp	r3, #37	; 0x25
 8003184:	d0c0      	beq.n	8003108 <_svfiprintf_r+0x54>
 8003186:	4627      	mov	r7, r4
 8003188:	e7b9      	b.n	80030fe <_svfiprintf_r+0x4a>
 800318a:	4a3f      	ldr	r2, [pc, #252]	; (8003288 <_svfiprintf_r+0x1d4>)
 800318c:	1a80      	subs	r0, r0, r2
 800318e:	fa0b f000 	lsl.w	r0, fp, r0
 8003192:	4318      	orrs	r0, r3
 8003194:	9004      	str	r0, [sp, #16]
 8003196:	463c      	mov	r4, r7
 8003198:	e7d3      	b.n	8003142 <_svfiprintf_r+0x8e>
 800319a:	9a03      	ldr	r2, [sp, #12]
 800319c:	1d11      	adds	r1, r2, #4
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	9103      	str	r1, [sp, #12]
 80031a2:	2a00      	cmp	r2, #0
 80031a4:	db01      	blt.n	80031aa <_svfiprintf_r+0xf6>
 80031a6:	9207      	str	r2, [sp, #28]
 80031a8:	e004      	b.n	80031b4 <_svfiprintf_r+0x100>
 80031aa:	4252      	negs	r2, r2
 80031ac:	f043 0302 	orr.w	r3, r3, #2
 80031b0:	9207      	str	r2, [sp, #28]
 80031b2:	9304      	str	r3, [sp, #16]
 80031b4:	783b      	ldrb	r3, [r7, #0]
 80031b6:	2b2e      	cmp	r3, #46	; 0x2e
 80031b8:	d10e      	bne.n	80031d8 <_svfiprintf_r+0x124>
 80031ba:	787b      	ldrb	r3, [r7, #1]
 80031bc:	2b2a      	cmp	r3, #42	; 0x2a
 80031be:	f107 0101 	add.w	r1, r7, #1
 80031c2:	d132      	bne.n	800322a <_svfiprintf_r+0x176>
 80031c4:	9b03      	ldr	r3, [sp, #12]
 80031c6:	1d1a      	adds	r2, r3, #4
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	9203      	str	r2, [sp, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bfb8      	it	lt
 80031d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80031d4:	3702      	adds	r7, #2
 80031d6:	9305      	str	r3, [sp, #20]
 80031d8:	4c2c      	ldr	r4, [pc, #176]	; (800328c <_svfiprintf_r+0x1d8>)
 80031da:	7839      	ldrb	r1, [r7, #0]
 80031dc:	2203      	movs	r2, #3
 80031de:	4620      	mov	r0, r4
 80031e0:	f7fd f806 	bl	80001f0 <memchr>
 80031e4:	b138      	cbz	r0, 80031f6 <_svfiprintf_r+0x142>
 80031e6:	2340      	movs	r3, #64	; 0x40
 80031e8:	1b00      	subs	r0, r0, r4
 80031ea:	fa03 f000 	lsl.w	r0, r3, r0
 80031ee:	9b04      	ldr	r3, [sp, #16]
 80031f0:	4303      	orrs	r3, r0
 80031f2:	9304      	str	r3, [sp, #16]
 80031f4:	3701      	adds	r7, #1
 80031f6:	7839      	ldrb	r1, [r7, #0]
 80031f8:	4825      	ldr	r0, [pc, #148]	; (8003290 <_svfiprintf_r+0x1dc>)
 80031fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031fe:	2206      	movs	r2, #6
 8003200:	1c7e      	adds	r6, r7, #1
 8003202:	f7fc fff5 	bl	80001f0 <memchr>
 8003206:	2800      	cmp	r0, #0
 8003208:	d035      	beq.n	8003276 <_svfiprintf_r+0x1c2>
 800320a:	4b22      	ldr	r3, [pc, #136]	; (8003294 <_svfiprintf_r+0x1e0>)
 800320c:	b9fb      	cbnz	r3, 800324e <_svfiprintf_r+0x19a>
 800320e:	9b03      	ldr	r3, [sp, #12]
 8003210:	3307      	adds	r3, #7
 8003212:	f023 0307 	bic.w	r3, r3, #7
 8003216:	3308      	adds	r3, #8
 8003218:	9303      	str	r3, [sp, #12]
 800321a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800321c:	444b      	add	r3, r9
 800321e:	9309      	str	r3, [sp, #36]	; 0x24
 8003220:	e76c      	b.n	80030fc <_svfiprintf_r+0x48>
 8003222:	fb00 3202 	mla	r2, r0, r2, r3
 8003226:	2101      	movs	r1, #1
 8003228:	e7a3      	b.n	8003172 <_svfiprintf_r+0xbe>
 800322a:	2300      	movs	r3, #0
 800322c:	9305      	str	r3, [sp, #20]
 800322e:	4618      	mov	r0, r3
 8003230:	240a      	movs	r4, #10
 8003232:	460f      	mov	r7, r1
 8003234:	3101      	adds	r1, #1
 8003236:	783a      	ldrb	r2, [r7, #0]
 8003238:	3a30      	subs	r2, #48	; 0x30
 800323a:	2a09      	cmp	r2, #9
 800323c:	d903      	bls.n	8003246 <_svfiprintf_r+0x192>
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0ca      	beq.n	80031d8 <_svfiprintf_r+0x124>
 8003242:	9005      	str	r0, [sp, #20]
 8003244:	e7c8      	b.n	80031d8 <_svfiprintf_r+0x124>
 8003246:	fb04 2000 	mla	r0, r4, r0, r2
 800324a:	2301      	movs	r3, #1
 800324c:	e7f1      	b.n	8003232 <_svfiprintf_r+0x17e>
 800324e:	ab03      	add	r3, sp, #12
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	462a      	mov	r2, r5
 8003254:	4b10      	ldr	r3, [pc, #64]	; (8003298 <_svfiprintf_r+0x1e4>)
 8003256:	a904      	add	r1, sp, #16
 8003258:	4640      	mov	r0, r8
 800325a:	f3af 8000 	nop.w
 800325e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003262:	4681      	mov	r9, r0
 8003264:	d1d9      	bne.n	800321a <_svfiprintf_r+0x166>
 8003266:	89ab      	ldrh	r3, [r5, #12]
 8003268:	065b      	lsls	r3, r3, #25
 800326a:	f53f af38 	bmi.w	80030de <_svfiprintf_r+0x2a>
 800326e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003270:	b01d      	add	sp, #116	; 0x74
 8003272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003276:	ab03      	add	r3, sp, #12
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	462a      	mov	r2, r5
 800327c:	4b06      	ldr	r3, [pc, #24]	; (8003298 <_svfiprintf_r+0x1e4>)
 800327e:	a904      	add	r1, sp, #16
 8003280:	4640      	mov	r0, r8
 8003282:	f000 f881 	bl	8003388 <_printf_i>
 8003286:	e7ea      	b.n	800325e <_svfiprintf_r+0x1aa>
 8003288:	08005030 	.word	0x08005030
 800328c:	08005036 	.word	0x08005036
 8003290:	0800503a 	.word	0x0800503a
 8003294:	00000000 	.word	0x00000000
 8003298:	08002fff 	.word	0x08002fff

0800329c <_printf_common>:
 800329c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a0:	4691      	mov	r9, r2
 80032a2:	461f      	mov	r7, r3
 80032a4:	688a      	ldr	r2, [r1, #8]
 80032a6:	690b      	ldr	r3, [r1, #16]
 80032a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032ac:	4293      	cmp	r3, r2
 80032ae:	bfb8      	it	lt
 80032b0:	4613      	movlt	r3, r2
 80032b2:	f8c9 3000 	str.w	r3, [r9]
 80032b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032ba:	4606      	mov	r6, r0
 80032bc:	460c      	mov	r4, r1
 80032be:	b112      	cbz	r2, 80032c6 <_printf_common+0x2a>
 80032c0:	3301      	adds	r3, #1
 80032c2:	f8c9 3000 	str.w	r3, [r9]
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	0699      	lsls	r1, r3, #26
 80032ca:	bf42      	ittt	mi
 80032cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80032d0:	3302      	addmi	r3, #2
 80032d2:	f8c9 3000 	strmi.w	r3, [r9]
 80032d6:	6825      	ldr	r5, [r4, #0]
 80032d8:	f015 0506 	ands.w	r5, r5, #6
 80032dc:	d107      	bne.n	80032ee <_printf_common+0x52>
 80032de:	f104 0a19 	add.w	sl, r4, #25
 80032e2:	68e3      	ldr	r3, [r4, #12]
 80032e4:	f8d9 2000 	ldr.w	r2, [r9]
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	429d      	cmp	r5, r3
 80032ec:	db29      	blt.n	8003342 <_printf_common+0xa6>
 80032ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80032f2:	6822      	ldr	r2, [r4, #0]
 80032f4:	3300      	adds	r3, #0
 80032f6:	bf18      	it	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	0692      	lsls	r2, r2, #26
 80032fc:	d42e      	bmi.n	800335c <_printf_common+0xc0>
 80032fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003302:	4639      	mov	r1, r7
 8003304:	4630      	mov	r0, r6
 8003306:	47c0      	blx	r8
 8003308:	3001      	adds	r0, #1
 800330a:	d021      	beq.n	8003350 <_printf_common+0xb4>
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	68e5      	ldr	r5, [r4, #12]
 8003310:	f8d9 2000 	ldr.w	r2, [r9]
 8003314:	f003 0306 	and.w	r3, r3, #6
 8003318:	2b04      	cmp	r3, #4
 800331a:	bf08      	it	eq
 800331c:	1aad      	subeq	r5, r5, r2
 800331e:	68a3      	ldr	r3, [r4, #8]
 8003320:	6922      	ldr	r2, [r4, #16]
 8003322:	bf0c      	ite	eq
 8003324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003328:	2500      	movne	r5, #0
 800332a:	4293      	cmp	r3, r2
 800332c:	bfc4      	itt	gt
 800332e:	1a9b      	subgt	r3, r3, r2
 8003330:	18ed      	addgt	r5, r5, r3
 8003332:	f04f 0900 	mov.w	r9, #0
 8003336:	341a      	adds	r4, #26
 8003338:	454d      	cmp	r5, r9
 800333a:	d11b      	bne.n	8003374 <_printf_common+0xd8>
 800333c:	2000      	movs	r0, #0
 800333e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003342:	2301      	movs	r3, #1
 8003344:	4652      	mov	r2, sl
 8003346:	4639      	mov	r1, r7
 8003348:	4630      	mov	r0, r6
 800334a:	47c0      	blx	r8
 800334c:	3001      	adds	r0, #1
 800334e:	d103      	bne.n	8003358 <_printf_common+0xbc>
 8003350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003358:	3501      	adds	r5, #1
 800335a:	e7c2      	b.n	80032e2 <_printf_common+0x46>
 800335c:	18e1      	adds	r1, r4, r3
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	2030      	movs	r0, #48	; 0x30
 8003362:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003366:	4422      	add	r2, r4
 8003368:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800336c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003370:	3302      	adds	r3, #2
 8003372:	e7c4      	b.n	80032fe <_printf_common+0x62>
 8003374:	2301      	movs	r3, #1
 8003376:	4622      	mov	r2, r4
 8003378:	4639      	mov	r1, r7
 800337a:	4630      	mov	r0, r6
 800337c:	47c0      	blx	r8
 800337e:	3001      	adds	r0, #1
 8003380:	d0e6      	beq.n	8003350 <_printf_common+0xb4>
 8003382:	f109 0901 	add.w	r9, r9, #1
 8003386:	e7d7      	b.n	8003338 <_printf_common+0x9c>

08003388 <_printf_i>:
 8003388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800338c:	4617      	mov	r7, r2
 800338e:	7e0a      	ldrb	r2, [r1, #24]
 8003390:	b085      	sub	sp, #20
 8003392:	2a6e      	cmp	r2, #110	; 0x6e
 8003394:	4698      	mov	r8, r3
 8003396:	4606      	mov	r6, r0
 8003398:	460c      	mov	r4, r1
 800339a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800339c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80033a0:	f000 80bc 	beq.w	800351c <_printf_i+0x194>
 80033a4:	d81a      	bhi.n	80033dc <_printf_i+0x54>
 80033a6:	2a63      	cmp	r2, #99	; 0x63
 80033a8:	d02e      	beq.n	8003408 <_printf_i+0x80>
 80033aa:	d80a      	bhi.n	80033c2 <_printf_i+0x3a>
 80033ac:	2a00      	cmp	r2, #0
 80033ae:	f000 80c8 	beq.w	8003542 <_printf_i+0x1ba>
 80033b2:	2a58      	cmp	r2, #88	; 0x58
 80033b4:	f000 808a 	beq.w	80034cc <_printf_i+0x144>
 80033b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033bc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80033c0:	e02a      	b.n	8003418 <_printf_i+0x90>
 80033c2:	2a64      	cmp	r2, #100	; 0x64
 80033c4:	d001      	beq.n	80033ca <_printf_i+0x42>
 80033c6:	2a69      	cmp	r2, #105	; 0x69
 80033c8:	d1f6      	bne.n	80033b8 <_printf_i+0x30>
 80033ca:	6821      	ldr	r1, [r4, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	f011 0f80 	tst.w	r1, #128	; 0x80
 80033d2:	d023      	beq.n	800341c <_printf_i+0x94>
 80033d4:	1d11      	adds	r1, r2, #4
 80033d6:	6019      	str	r1, [r3, #0]
 80033d8:	6813      	ldr	r3, [r2, #0]
 80033da:	e027      	b.n	800342c <_printf_i+0xa4>
 80033dc:	2a73      	cmp	r2, #115	; 0x73
 80033de:	f000 80b4 	beq.w	800354a <_printf_i+0x1c2>
 80033e2:	d808      	bhi.n	80033f6 <_printf_i+0x6e>
 80033e4:	2a6f      	cmp	r2, #111	; 0x6f
 80033e6:	d02a      	beq.n	800343e <_printf_i+0xb6>
 80033e8:	2a70      	cmp	r2, #112	; 0x70
 80033ea:	d1e5      	bne.n	80033b8 <_printf_i+0x30>
 80033ec:	680a      	ldr	r2, [r1, #0]
 80033ee:	f042 0220 	orr.w	r2, r2, #32
 80033f2:	600a      	str	r2, [r1, #0]
 80033f4:	e003      	b.n	80033fe <_printf_i+0x76>
 80033f6:	2a75      	cmp	r2, #117	; 0x75
 80033f8:	d021      	beq.n	800343e <_printf_i+0xb6>
 80033fa:	2a78      	cmp	r2, #120	; 0x78
 80033fc:	d1dc      	bne.n	80033b8 <_printf_i+0x30>
 80033fe:	2278      	movs	r2, #120	; 0x78
 8003400:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003404:	496e      	ldr	r1, [pc, #440]	; (80035c0 <_printf_i+0x238>)
 8003406:	e064      	b.n	80034d2 <_printf_i+0x14a>
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800340e:	1d11      	adds	r1, r2, #4
 8003410:	6019      	str	r1, [r3, #0]
 8003412:	6813      	ldr	r3, [r2, #0]
 8003414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003418:	2301      	movs	r3, #1
 800341a:	e0a3      	b.n	8003564 <_printf_i+0x1dc>
 800341c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003420:	f102 0104 	add.w	r1, r2, #4
 8003424:	6019      	str	r1, [r3, #0]
 8003426:	d0d7      	beq.n	80033d8 <_printf_i+0x50>
 8003428:	f9b2 3000 	ldrsh.w	r3, [r2]
 800342c:	2b00      	cmp	r3, #0
 800342e:	da03      	bge.n	8003438 <_printf_i+0xb0>
 8003430:	222d      	movs	r2, #45	; 0x2d
 8003432:	425b      	negs	r3, r3
 8003434:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003438:	4962      	ldr	r1, [pc, #392]	; (80035c4 <_printf_i+0x23c>)
 800343a:	220a      	movs	r2, #10
 800343c:	e017      	b.n	800346e <_printf_i+0xe6>
 800343e:	6820      	ldr	r0, [r4, #0]
 8003440:	6819      	ldr	r1, [r3, #0]
 8003442:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003446:	d003      	beq.n	8003450 <_printf_i+0xc8>
 8003448:	1d08      	adds	r0, r1, #4
 800344a:	6018      	str	r0, [r3, #0]
 800344c:	680b      	ldr	r3, [r1, #0]
 800344e:	e006      	b.n	800345e <_printf_i+0xd6>
 8003450:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003454:	f101 0004 	add.w	r0, r1, #4
 8003458:	6018      	str	r0, [r3, #0]
 800345a:	d0f7      	beq.n	800344c <_printf_i+0xc4>
 800345c:	880b      	ldrh	r3, [r1, #0]
 800345e:	4959      	ldr	r1, [pc, #356]	; (80035c4 <_printf_i+0x23c>)
 8003460:	2a6f      	cmp	r2, #111	; 0x6f
 8003462:	bf14      	ite	ne
 8003464:	220a      	movne	r2, #10
 8003466:	2208      	moveq	r2, #8
 8003468:	2000      	movs	r0, #0
 800346a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800346e:	6865      	ldr	r5, [r4, #4]
 8003470:	60a5      	str	r5, [r4, #8]
 8003472:	2d00      	cmp	r5, #0
 8003474:	f2c0 809c 	blt.w	80035b0 <_printf_i+0x228>
 8003478:	6820      	ldr	r0, [r4, #0]
 800347a:	f020 0004 	bic.w	r0, r0, #4
 800347e:	6020      	str	r0, [r4, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d13f      	bne.n	8003504 <_printf_i+0x17c>
 8003484:	2d00      	cmp	r5, #0
 8003486:	f040 8095 	bne.w	80035b4 <_printf_i+0x22c>
 800348a:	4675      	mov	r5, lr
 800348c:	2a08      	cmp	r2, #8
 800348e:	d10b      	bne.n	80034a8 <_printf_i+0x120>
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	07da      	lsls	r2, r3, #31
 8003494:	d508      	bpl.n	80034a8 <_printf_i+0x120>
 8003496:	6923      	ldr	r3, [r4, #16]
 8003498:	6862      	ldr	r2, [r4, #4]
 800349a:	429a      	cmp	r2, r3
 800349c:	bfde      	ittt	le
 800349e:	2330      	movle	r3, #48	; 0x30
 80034a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80034a8:	ebae 0305 	sub.w	r3, lr, r5
 80034ac:	6123      	str	r3, [r4, #16]
 80034ae:	f8cd 8000 	str.w	r8, [sp]
 80034b2:	463b      	mov	r3, r7
 80034b4:	aa03      	add	r2, sp, #12
 80034b6:	4621      	mov	r1, r4
 80034b8:	4630      	mov	r0, r6
 80034ba:	f7ff feef 	bl	800329c <_printf_common>
 80034be:	3001      	adds	r0, #1
 80034c0:	d155      	bne.n	800356e <_printf_i+0x1e6>
 80034c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034c6:	b005      	add	sp, #20
 80034c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034cc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80034d0:	493c      	ldr	r1, [pc, #240]	; (80035c4 <_printf_i+0x23c>)
 80034d2:	6822      	ldr	r2, [r4, #0]
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80034da:	f100 0504 	add.w	r5, r0, #4
 80034de:	601d      	str	r5, [r3, #0]
 80034e0:	d001      	beq.n	80034e6 <_printf_i+0x15e>
 80034e2:	6803      	ldr	r3, [r0, #0]
 80034e4:	e002      	b.n	80034ec <_printf_i+0x164>
 80034e6:	0655      	lsls	r5, r2, #25
 80034e8:	d5fb      	bpl.n	80034e2 <_printf_i+0x15a>
 80034ea:	8803      	ldrh	r3, [r0, #0]
 80034ec:	07d0      	lsls	r0, r2, #31
 80034ee:	bf44      	itt	mi
 80034f0:	f042 0220 	orrmi.w	r2, r2, #32
 80034f4:	6022      	strmi	r2, [r4, #0]
 80034f6:	b91b      	cbnz	r3, 8003500 <_printf_i+0x178>
 80034f8:	6822      	ldr	r2, [r4, #0]
 80034fa:	f022 0220 	bic.w	r2, r2, #32
 80034fe:	6022      	str	r2, [r4, #0]
 8003500:	2210      	movs	r2, #16
 8003502:	e7b1      	b.n	8003468 <_printf_i+0xe0>
 8003504:	4675      	mov	r5, lr
 8003506:	fbb3 f0f2 	udiv	r0, r3, r2
 800350a:	fb02 3310 	mls	r3, r2, r0, r3
 800350e:	5ccb      	ldrb	r3, [r1, r3]
 8003510:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003514:	4603      	mov	r3, r0
 8003516:	2800      	cmp	r0, #0
 8003518:	d1f5      	bne.n	8003506 <_printf_i+0x17e>
 800351a:	e7b7      	b.n	800348c <_printf_i+0x104>
 800351c:	6808      	ldr	r0, [r1, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	6949      	ldr	r1, [r1, #20]
 8003522:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003526:	d004      	beq.n	8003532 <_printf_i+0x1aa>
 8003528:	1d10      	adds	r0, r2, #4
 800352a:	6018      	str	r0, [r3, #0]
 800352c:	6813      	ldr	r3, [r2, #0]
 800352e:	6019      	str	r1, [r3, #0]
 8003530:	e007      	b.n	8003542 <_printf_i+0x1ba>
 8003532:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003536:	f102 0004 	add.w	r0, r2, #4
 800353a:	6018      	str	r0, [r3, #0]
 800353c:	6813      	ldr	r3, [r2, #0]
 800353e:	d0f6      	beq.n	800352e <_printf_i+0x1a6>
 8003540:	8019      	strh	r1, [r3, #0]
 8003542:	2300      	movs	r3, #0
 8003544:	6123      	str	r3, [r4, #16]
 8003546:	4675      	mov	r5, lr
 8003548:	e7b1      	b.n	80034ae <_printf_i+0x126>
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	1d11      	adds	r1, r2, #4
 800354e:	6019      	str	r1, [r3, #0]
 8003550:	6815      	ldr	r5, [r2, #0]
 8003552:	6862      	ldr	r2, [r4, #4]
 8003554:	2100      	movs	r1, #0
 8003556:	4628      	mov	r0, r5
 8003558:	f7fc fe4a 	bl	80001f0 <memchr>
 800355c:	b108      	cbz	r0, 8003562 <_printf_i+0x1da>
 800355e:	1b40      	subs	r0, r0, r5
 8003560:	6060      	str	r0, [r4, #4]
 8003562:	6863      	ldr	r3, [r4, #4]
 8003564:	6123      	str	r3, [r4, #16]
 8003566:	2300      	movs	r3, #0
 8003568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800356c:	e79f      	b.n	80034ae <_printf_i+0x126>
 800356e:	6923      	ldr	r3, [r4, #16]
 8003570:	462a      	mov	r2, r5
 8003572:	4639      	mov	r1, r7
 8003574:	4630      	mov	r0, r6
 8003576:	47c0      	blx	r8
 8003578:	3001      	adds	r0, #1
 800357a:	d0a2      	beq.n	80034c2 <_printf_i+0x13a>
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	079b      	lsls	r3, r3, #30
 8003580:	d507      	bpl.n	8003592 <_printf_i+0x20a>
 8003582:	2500      	movs	r5, #0
 8003584:	f104 0919 	add.w	r9, r4, #25
 8003588:	68e3      	ldr	r3, [r4, #12]
 800358a:	9a03      	ldr	r2, [sp, #12]
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	429d      	cmp	r5, r3
 8003590:	db05      	blt.n	800359e <_printf_i+0x216>
 8003592:	68e0      	ldr	r0, [r4, #12]
 8003594:	9b03      	ldr	r3, [sp, #12]
 8003596:	4298      	cmp	r0, r3
 8003598:	bfb8      	it	lt
 800359a:	4618      	movlt	r0, r3
 800359c:	e793      	b.n	80034c6 <_printf_i+0x13e>
 800359e:	2301      	movs	r3, #1
 80035a0:	464a      	mov	r2, r9
 80035a2:	4639      	mov	r1, r7
 80035a4:	4630      	mov	r0, r6
 80035a6:	47c0      	blx	r8
 80035a8:	3001      	adds	r0, #1
 80035aa:	d08a      	beq.n	80034c2 <_printf_i+0x13a>
 80035ac:	3501      	adds	r5, #1
 80035ae:	e7eb      	b.n	8003588 <_printf_i+0x200>
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1a7      	bne.n	8003504 <_printf_i+0x17c>
 80035b4:	780b      	ldrb	r3, [r1, #0]
 80035b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035be:	e765      	b.n	800348c <_printf_i+0x104>
 80035c0:	08005052 	.word	0x08005052
 80035c4:	08005041 	.word	0x08005041

080035c8 <__ascii_wctomb>:
 80035c8:	b149      	cbz	r1, 80035de <__ascii_wctomb+0x16>
 80035ca:	2aff      	cmp	r2, #255	; 0xff
 80035cc:	bf85      	ittet	hi
 80035ce:	238a      	movhi	r3, #138	; 0x8a
 80035d0:	6003      	strhi	r3, [r0, #0]
 80035d2:	700a      	strbls	r2, [r1, #0]
 80035d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80035d8:	bf98      	it	ls
 80035da:	2001      	movls	r0, #1
 80035dc:	4770      	bx	lr
 80035de:	4608      	mov	r0, r1
 80035e0:	4770      	bx	lr

080035e2 <memcpy>:
 80035e2:	b510      	push	{r4, lr}
 80035e4:	1e43      	subs	r3, r0, #1
 80035e6:	440a      	add	r2, r1
 80035e8:	4291      	cmp	r1, r2
 80035ea:	d100      	bne.n	80035ee <memcpy+0xc>
 80035ec:	bd10      	pop	{r4, pc}
 80035ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035f6:	e7f7      	b.n	80035e8 <memcpy+0x6>

080035f8 <memmove>:
 80035f8:	4288      	cmp	r0, r1
 80035fa:	b510      	push	{r4, lr}
 80035fc:	eb01 0302 	add.w	r3, r1, r2
 8003600:	d803      	bhi.n	800360a <memmove+0x12>
 8003602:	1e42      	subs	r2, r0, #1
 8003604:	4299      	cmp	r1, r3
 8003606:	d10c      	bne.n	8003622 <memmove+0x2a>
 8003608:	bd10      	pop	{r4, pc}
 800360a:	4298      	cmp	r0, r3
 800360c:	d2f9      	bcs.n	8003602 <memmove+0xa>
 800360e:	1881      	adds	r1, r0, r2
 8003610:	1ad2      	subs	r2, r2, r3
 8003612:	42d3      	cmn	r3, r2
 8003614:	d100      	bne.n	8003618 <memmove+0x20>
 8003616:	bd10      	pop	{r4, pc}
 8003618:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800361c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003620:	e7f7      	b.n	8003612 <memmove+0x1a>
 8003622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003626:	f802 4f01 	strb.w	r4, [r2, #1]!
 800362a:	e7eb      	b.n	8003604 <memmove+0xc>

0800362c <_free_r>:
 800362c:	b538      	push	{r3, r4, r5, lr}
 800362e:	4605      	mov	r5, r0
 8003630:	2900      	cmp	r1, #0
 8003632:	d045      	beq.n	80036c0 <_free_r+0x94>
 8003634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003638:	1f0c      	subs	r4, r1, #4
 800363a:	2b00      	cmp	r3, #0
 800363c:	bfb8      	it	lt
 800363e:	18e4      	addlt	r4, r4, r3
 8003640:	f000 f8d6 	bl	80037f0 <__malloc_lock>
 8003644:	4a1f      	ldr	r2, [pc, #124]	; (80036c4 <_free_r+0x98>)
 8003646:	6813      	ldr	r3, [r2, #0]
 8003648:	4610      	mov	r0, r2
 800364a:	b933      	cbnz	r3, 800365a <_free_r+0x2e>
 800364c:	6063      	str	r3, [r4, #4]
 800364e:	6014      	str	r4, [r2, #0]
 8003650:	4628      	mov	r0, r5
 8003652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003656:	f000 b8cc 	b.w	80037f2 <__malloc_unlock>
 800365a:	42a3      	cmp	r3, r4
 800365c:	d90c      	bls.n	8003678 <_free_r+0x4c>
 800365e:	6821      	ldr	r1, [r4, #0]
 8003660:	1862      	adds	r2, r4, r1
 8003662:	4293      	cmp	r3, r2
 8003664:	bf04      	itt	eq
 8003666:	681a      	ldreq	r2, [r3, #0]
 8003668:	685b      	ldreq	r3, [r3, #4]
 800366a:	6063      	str	r3, [r4, #4]
 800366c:	bf04      	itt	eq
 800366e:	1852      	addeq	r2, r2, r1
 8003670:	6022      	streq	r2, [r4, #0]
 8003672:	6004      	str	r4, [r0, #0]
 8003674:	e7ec      	b.n	8003650 <_free_r+0x24>
 8003676:	4613      	mov	r3, r2
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	b10a      	cbz	r2, 8003680 <_free_r+0x54>
 800367c:	42a2      	cmp	r2, r4
 800367e:	d9fa      	bls.n	8003676 <_free_r+0x4a>
 8003680:	6819      	ldr	r1, [r3, #0]
 8003682:	1858      	adds	r0, r3, r1
 8003684:	42a0      	cmp	r0, r4
 8003686:	d10b      	bne.n	80036a0 <_free_r+0x74>
 8003688:	6820      	ldr	r0, [r4, #0]
 800368a:	4401      	add	r1, r0
 800368c:	1858      	adds	r0, r3, r1
 800368e:	4282      	cmp	r2, r0
 8003690:	6019      	str	r1, [r3, #0]
 8003692:	d1dd      	bne.n	8003650 <_free_r+0x24>
 8003694:	6810      	ldr	r0, [r2, #0]
 8003696:	6852      	ldr	r2, [r2, #4]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	4401      	add	r1, r0
 800369c:	6019      	str	r1, [r3, #0]
 800369e:	e7d7      	b.n	8003650 <_free_r+0x24>
 80036a0:	d902      	bls.n	80036a8 <_free_r+0x7c>
 80036a2:	230c      	movs	r3, #12
 80036a4:	602b      	str	r3, [r5, #0]
 80036a6:	e7d3      	b.n	8003650 <_free_r+0x24>
 80036a8:	6820      	ldr	r0, [r4, #0]
 80036aa:	1821      	adds	r1, r4, r0
 80036ac:	428a      	cmp	r2, r1
 80036ae:	bf04      	itt	eq
 80036b0:	6811      	ldreq	r1, [r2, #0]
 80036b2:	6852      	ldreq	r2, [r2, #4]
 80036b4:	6062      	str	r2, [r4, #4]
 80036b6:	bf04      	itt	eq
 80036b8:	1809      	addeq	r1, r1, r0
 80036ba:	6021      	streq	r1, [r4, #0]
 80036bc:	605c      	str	r4, [r3, #4]
 80036be:	e7c7      	b.n	8003650 <_free_r+0x24>
 80036c0:	bd38      	pop	{r3, r4, r5, pc}
 80036c2:	bf00      	nop
 80036c4:	20000254 	.word	0x20000254

080036c8 <_malloc_r>:
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	1ccd      	adds	r5, r1, #3
 80036cc:	f025 0503 	bic.w	r5, r5, #3
 80036d0:	3508      	adds	r5, #8
 80036d2:	2d0c      	cmp	r5, #12
 80036d4:	bf38      	it	cc
 80036d6:	250c      	movcc	r5, #12
 80036d8:	2d00      	cmp	r5, #0
 80036da:	4606      	mov	r6, r0
 80036dc:	db01      	blt.n	80036e2 <_malloc_r+0x1a>
 80036de:	42a9      	cmp	r1, r5
 80036e0:	d903      	bls.n	80036ea <_malloc_r+0x22>
 80036e2:	230c      	movs	r3, #12
 80036e4:	6033      	str	r3, [r6, #0]
 80036e6:	2000      	movs	r0, #0
 80036e8:	bd70      	pop	{r4, r5, r6, pc}
 80036ea:	f000 f881 	bl	80037f0 <__malloc_lock>
 80036ee:	4a23      	ldr	r2, [pc, #140]	; (800377c <_malloc_r+0xb4>)
 80036f0:	6814      	ldr	r4, [r2, #0]
 80036f2:	4621      	mov	r1, r4
 80036f4:	b991      	cbnz	r1, 800371c <_malloc_r+0x54>
 80036f6:	4c22      	ldr	r4, [pc, #136]	; (8003780 <_malloc_r+0xb8>)
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	b91b      	cbnz	r3, 8003704 <_malloc_r+0x3c>
 80036fc:	4630      	mov	r0, r6
 80036fe:	f000 f867 	bl	80037d0 <_sbrk_r>
 8003702:	6020      	str	r0, [r4, #0]
 8003704:	4629      	mov	r1, r5
 8003706:	4630      	mov	r0, r6
 8003708:	f000 f862 	bl	80037d0 <_sbrk_r>
 800370c:	1c43      	adds	r3, r0, #1
 800370e:	d126      	bne.n	800375e <_malloc_r+0x96>
 8003710:	230c      	movs	r3, #12
 8003712:	6033      	str	r3, [r6, #0]
 8003714:	4630      	mov	r0, r6
 8003716:	f000 f86c 	bl	80037f2 <__malloc_unlock>
 800371a:	e7e4      	b.n	80036e6 <_malloc_r+0x1e>
 800371c:	680b      	ldr	r3, [r1, #0]
 800371e:	1b5b      	subs	r3, r3, r5
 8003720:	d41a      	bmi.n	8003758 <_malloc_r+0x90>
 8003722:	2b0b      	cmp	r3, #11
 8003724:	d90f      	bls.n	8003746 <_malloc_r+0x7e>
 8003726:	600b      	str	r3, [r1, #0]
 8003728:	50cd      	str	r5, [r1, r3]
 800372a:	18cc      	adds	r4, r1, r3
 800372c:	4630      	mov	r0, r6
 800372e:	f000 f860 	bl	80037f2 <__malloc_unlock>
 8003732:	f104 000b 	add.w	r0, r4, #11
 8003736:	1d23      	adds	r3, r4, #4
 8003738:	f020 0007 	bic.w	r0, r0, #7
 800373c:	1ac3      	subs	r3, r0, r3
 800373e:	d01b      	beq.n	8003778 <_malloc_r+0xb0>
 8003740:	425a      	negs	r2, r3
 8003742:	50e2      	str	r2, [r4, r3]
 8003744:	bd70      	pop	{r4, r5, r6, pc}
 8003746:	428c      	cmp	r4, r1
 8003748:	bf0d      	iteet	eq
 800374a:	6863      	ldreq	r3, [r4, #4]
 800374c:	684b      	ldrne	r3, [r1, #4]
 800374e:	6063      	strne	r3, [r4, #4]
 8003750:	6013      	streq	r3, [r2, #0]
 8003752:	bf18      	it	ne
 8003754:	460c      	movne	r4, r1
 8003756:	e7e9      	b.n	800372c <_malloc_r+0x64>
 8003758:	460c      	mov	r4, r1
 800375a:	6849      	ldr	r1, [r1, #4]
 800375c:	e7ca      	b.n	80036f4 <_malloc_r+0x2c>
 800375e:	1cc4      	adds	r4, r0, #3
 8003760:	f024 0403 	bic.w	r4, r4, #3
 8003764:	42a0      	cmp	r0, r4
 8003766:	d005      	beq.n	8003774 <_malloc_r+0xac>
 8003768:	1a21      	subs	r1, r4, r0
 800376a:	4630      	mov	r0, r6
 800376c:	f000 f830 	bl	80037d0 <_sbrk_r>
 8003770:	3001      	adds	r0, #1
 8003772:	d0cd      	beq.n	8003710 <_malloc_r+0x48>
 8003774:	6025      	str	r5, [r4, #0]
 8003776:	e7d9      	b.n	800372c <_malloc_r+0x64>
 8003778:	bd70      	pop	{r4, r5, r6, pc}
 800377a:	bf00      	nop
 800377c:	20000254 	.word	0x20000254
 8003780:	20000258 	.word	0x20000258

08003784 <_realloc_r>:
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003786:	4607      	mov	r7, r0
 8003788:	4614      	mov	r4, r2
 800378a:	460e      	mov	r6, r1
 800378c:	b921      	cbnz	r1, 8003798 <_realloc_r+0x14>
 800378e:	4611      	mov	r1, r2
 8003790:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003794:	f7ff bf98 	b.w	80036c8 <_malloc_r>
 8003798:	b922      	cbnz	r2, 80037a4 <_realloc_r+0x20>
 800379a:	f7ff ff47 	bl	800362c <_free_r>
 800379e:	4625      	mov	r5, r4
 80037a0:	4628      	mov	r0, r5
 80037a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037a4:	f000 f826 	bl	80037f4 <_malloc_usable_size_r>
 80037a8:	4284      	cmp	r4, r0
 80037aa:	d90f      	bls.n	80037cc <_realloc_r+0x48>
 80037ac:	4621      	mov	r1, r4
 80037ae:	4638      	mov	r0, r7
 80037b0:	f7ff ff8a 	bl	80036c8 <_malloc_r>
 80037b4:	4605      	mov	r5, r0
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d0f2      	beq.n	80037a0 <_realloc_r+0x1c>
 80037ba:	4631      	mov	r1, r6
 80037bc:	4622      	mov	r2, r4
 80037be:	f7ff ff10 	bl	80035e2 <memcpy>
 80037c2:	4631      	mov	r1, r6
 80037c4:	4638      	mov	r0, r7
 80037c6:	f7ff ff31 	bl	800362c <_free_r>
 80037ca:	e7e9      	b.n	80037a0 <_realloc_r+0x1c>
 80037cc:	4635      	mov	r5, r6
 80037ce:	e7e7      	b.n	80037a0 <_realloc_r+0x1c>

080037d0 <_sbrk_r>:
 80037d0:	b538      	push	{r3, r4, r5, lr}
 80037d2:	4c06      	ldr	r4, [pc, #24]	; (80037ec <_sbrk_r+0x1c>)
 80037d4:	2300      	movs	r3, #0
 80037d6:	4605      	mov	r5, r0
 80037d8:	4608      	mov	r0, r1
 80037da:	6023      	str	r3, [r4, #0]
 80037dc:	f7ff faa0 	bl	8002d20 <_sbrk>
 80037e0:	1c43      	adds	r3, r0, #1
 80037e2:	d102      	bne.n	80037ea <_sbrk_r+0x1a>
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	b103      	cbz	r3, 80037ea <_sbrk_r+0x1a>
 80037e8:	602b      	str	r3, [r5, #0]
 80037ea:	bd38      	pop	{r3, r4, r5, pc}
 80037ec:	20000360 	.word	0x20000360

080037f0 <__malloc_lock>:
 80037f0:	4770      	bx	lr

080037f2 <__malloc_unlock>:
 80037f2:	4770      	bx	lr

080037f4 <_malloc_usable_size_r>:
 80037f4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80037f8:	2800      	cmp	r0, #0
 80037fa:	f1a0 0004 	sub.w	r0, r0, #4
 80037fe:	bfbc      	itt	lt
 8003800:	580b      	ldrlt	r3, [r1, r0]
 8003802:	18c0      	addlt	r0, r0, r3
 8003804:	4770      	bx	lr
	...

08003808 <atan>:
 8003808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800380c:	ec55 4b10 	vmov	r4, r5, d0
 8003810:	4bc7      	ldr	r3, [pc, #796]	; (8003b30 <atan+0x328>)
 8003812:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003816:	429e      	cmp	r6, r3
 8003818:	46ab      	mov	fp, r5
 800381a:	dd18      	ble.n	800384e <atan+0x46>
 800381c:	4ac5      	ldr	r2, [pc, #788]	; (8003b34 <atan+0x32c>)
 800381e:	4296      	cmp	r6, r2
 8003820:	dc01      	bgt.n	8003826 <atan+0x1e>
 8003822:	d109      	bne.n	8003838 <atan+0x30>
 8003824:	b144      	cbz	r4, 8003838 <atan+0x30>
 8003826:	4622      	mov	r2, r4
 8003828:	462b      	mov	r3, r5
 800382a:	4620      	mov	r0, r4
 800382c:	4629      	mov	r1, r5
 800382e:	f7fc fd35 	bl	800029c <__adddf3>
 8003832:	4604      	mov	r4, r0
 8003834:	460d      	mov	r5, r1
 8003836:	e006      	b.n	8003846 <atan+0x3e>
 8003838:	f1bb 0f00 	cmp.w	fp, #0
 800383c:	f300 813a 	bgt.w	8003ab4 <atan+0x2ac>
 8003840:	a59f      	add	r5, pc, #636	; (adr r5, 8003ac0 <atan+0x2b8>)
 8003842:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003846:	ec45 4b10 	vmov	d0, r4, r5
 800384a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800384e:	4bba      	ldr	r3, [pc, #744]	; (8003b38 <atan+0x330>)
 8003850:	429e      	cmp	r6, r3
 8003852:	dc14      	bgt.n	800387e <atan+0x76>
 8003854:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8003858:	429e      	cmp	r6, r3
 800385a:	dc0d      	bgt.n	8003878 <atan+0x70>
 800385c:	a39a      	add	r3, pc, #616	; (adr r3, 8003ac8 <atan+0x2c0>)
 800385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003862:	ee10 0a10 	vmov	r0, s0
 8003866:	4629      	mov	r1, r5
 8003868:	f7fc fd18 	bl	800029c <__adddf3>
 800386c:	2200      	movs	r2, #0
 800386e:	4bb3      	ldr	r3, [pc, #716]	; (8003b3c <atan+0x334>)
 8003870:	f7fd f956 	bl	8000b20 <__aeabi_dcmpgt>
 8003874:	2800      	cmp	r0, #0
 8003876:	d1e6      	bne.n	8003846 <atan+0x3e>
 8003878:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800387c:	e02b      	b.n	80038d6 <atan+0xce>
 800387e:	f000 f9af 	bl	8003be0 <fabs>
 8003882:	4baf      	ldr	r3, [pc, #700]	; (8003b40 <atan+0x338>)
 8003884:	429e      	cmp	r6, r3
 8003886:	ec55 4b10 	vmov	r4, r5, d0
 800388a:	f300 80bf 	bgt.w	8003a0c <atan+0x204>
 800388e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8003892:	429e      	cmp	r6, r3
 8003894:	f300 80a0 	bgt.w	80039d8 <atan+0x1d0>
 8003898:	ee10 2a10 	vmov	r2, s0
 800389c:	ee10 0a10 	vmov	r0, s0
 80038a0:	462b      	mov	r3, r5
 80038a2:	4629      	mov	r1, r5
 80038a4:	f7fc fcfa 	bl	800029c <__adddf3>
 80038a8:	2200      	movs	r2, #0
 80038aa:	4ba4      	ldr	r3, [pc, #656]	; (8003b3c <atan+0x334>)
 80038ac:	f7fc fcf4 	bl	8000298 <__aeabi_dsub>
 80038b0:	2200      	movs	r2, #0
 80038b2:	4606      	mov	r6, r0
 80038b4:	460f      	mov	r7, r1
 80038b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80038ba:	4620      	mov	r0, r4
 80038bc:	4629      	mov	r1, r5
 80038be:	f7fc fced 	bl	800029c <__adddf3>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4630      	mov	r0, r6
 80038c8:	4639      	mov	r1, r7
 80038ca:	f7fc ffc3 	bl	8000854 <__aeabi_ddiv>
 80038ce:	f04f 0a00 	mov.w	sl, #0
 80038d2:	4604      	mov	r4, r0
 80038d4:	460d      	mov	r5, r1
 80038d6:	4622      	mov	r2, r4
 80038d8:	462b      	mov	r3, r5
 80038da:	4620      	mov	r0, r4
 80038dc:	4629      	mov	r1, r5
 80038de:	f7fc fe8f 	bl	8000600 <__aeabi_dmul>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4680      	mov	r8, r0
 80038e8:	4689      	mov	r9, r1
 80038ea:	f7fc fe89 	bl	8000600 <__aeabi_dmul>
 80038ee:	a378      	add	r3, pc, #480	; (adr r3, 8003ad0 <atan+0x2c8>)
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	4606      	mov	r6, r0
 80038f6:	460f      	mov	r7, r1
 80038f8:	f7fc fe82 	bl	8000600 <__aeabi_dmul>
 80038fc:	a376      	add	r3, pc, #472	; (adr r3, 8003ad8 <atan+0x2d0>)
 80038fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003902:	f7fc fccb 	bl	800029c <__adddf3>
 8003906:	4632      	mov	r2, r6
 8003908:	463b      	mov	r3, r7
 800390a:	f7fc fe79 	bl	8000600 <__aeabi_dmul>
 800390e:	a374      	add	r3, pc, #464	; (adr r3, 8003ae0 <atan+0x2d8>)
 8003910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003914:	f7fc fcc2 	bl	800029c <__adddf3>
 8003918:	4632      	mov	r2, r6
 800391a:	463b      	mov	r3, r7
 800391c:	f7fc fe70 	bl	8000600 <__aeabi_dmul>
 8003920:	a371      	add	r3, pc, #452	; (adr r3, 8003ae8 <atan+0x2e0>)
 8003922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003926:	f7fc fcb9 	bl	800029c <__adddf3>
 800392a:	4632      	mov	r2, r6
 800392c:	463b      	mov	r3, r7
 800392e:	f7fc fe67 	bl	8000600 <__aeabi_dmul>
 8003932:	a36f      	add	r3, pc, #444	; (adr r3, 8003af0 <atan+0x2e8>)
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	f7fc fcb0 	bl	800029c <__adddf3>
 800393c:	4632      	mov	r2, r6
 800393e:	463b      	mov	r3, r7
 8003940:	f7fc fe5e 	bl	8000600 <__aeabi_dmul>
 8003944:	a36c      	add	r3, pc, #432	; (adr r3, 8003af8 <atan+0x2f0>)
 8003946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394a:	f7fc fca7 	bl	800029c <__adddf3>
 800394e:	4642      	mov	r2, r8
 8003950:	464b      	mov	r3, r9
 8003952:	f7fc fe55 	bl	8000600 <__aeabi_dmul>
 8003956:	a36a      	add	r3, pc, #424	; (adr r3, 8003b00 <atan+0x2f8>)
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	4680      	mov	r8, r0
 800395e:	4689      	mov	r9, r1
 8003960:	4630      	mov	r0, r6
 8003962:	4639      	mov	r1, r7
 8003964:	f7fc fe4c 	bl	8000600 <__aeabi_dmul>
 8003968:	a367      	add	r3, pc, #412	; (adr r3, 8003b08 <atan+0x300>)
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	f7fc fc93 	bl	8000298 <__aeabi_dsub>
 8003972:	4632      	mov	r2, r6
 8003974:	463b      	mov	r3, r7
 8003976:	f7fc fe43 	bl	8000600 <__aeabi_dmul>
 800397a:	a365      	add	r3, pc, #404	; (adr r3, 8003b10 <atan+0x308>)
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	f7fc fc8a 	bl	8000298 <__aeabi_dsub>
 8003984:	4632      	mov	r2, r6
 8003986:	463b      	mov	r3, r7
 8003988:	f7fc fe3a 	bl	8000600 <__aeabi_dmul>
 800398c:	a362      	add	r3, pc, #392	; (adr r3, 8003b18 <atan+0x310>)
 800398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003992:	f7fc fc81 	bl	8000298 <__aeabi_dsub>
 8003996:	4632      	mov	r2, r6
 8003998:	463b      	mov	r3, r7
 800399a:	f7fc fe31 	bl	8000600 <__aeabi_dmul>
 800399e:	a360      	add	r3, pc, #384	; (adr r3, 8003b20 <atan+0x318>)
 80039a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a4:	f7fc fc78 	bl	8000298 <__aeabi_dsub>
 80039a8:	4632      	mov	r2, r6
 80039aa:	463b      	mov	r3, r7
 80039ac:	f7fc fe28 	bl	8000600 <__aeabi_dmul>
 80039b0:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	d155      	bne.n	8003a66 <atan+0x25e>
 80039ba:	4640      	mov	r0, r8
 80039bc:	4649      	mov	r1, r9
 80039be:	f7fc fc6d 	bl	800029c <__adddf3>
 80039c2:	4622      	mov	r2, r4
 80039c4:	462b      	mov	r3, r5
 80039c6:	f7fc fe1b 	bl	8000600 <__aeabi_dmul>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4620      	mov	r0, r4
 80039d0:	4629      	mov	r1, r5
 80039d2:	f7fc fc61 	bl	8000298 <__aeabi_dsub>
 80039d6:	e72c      	b.n	8003832 <atan+0x2a>
 80039d8:	ee10 0a10 	vmov	r0, s0
 80039dc:	2200      	movs	r2, #0
 80039de:	4b57      	ldr	r3, [pc, #348]	; (8003b3c <atan+0x334>)
 80039e0:	4629      	mov	r1, r5
 80039e2:	f7fc fc59 	bl	8000298 <__aeabi_dsub>
 80039e6:	2200      	movs	r2, #0
 80039e8:	4606      	mov	r6, r0
 80039ea:	460f      	mov	r7, r1
 80039ec:	4b53      	ldr	r3, [pc, #332]	; (8003b3c <atan+0x334>)
 80039ee:	4620      	mov	r0, r4
 80039f0:	4629      	mov	r1, r5
 80039f2:	f7fc fc53 	bl	800029c <__adddf3>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	4630      	mov	r0, r6
 80039fc:	4639      	mov	r1, r7
 80039fe:	f7fc ff29 	bl	8000854 <__aeabi_ddiv>
 8003a02:	f04f 0a01 	mov.w	sl, #1
 8003a06:	4604      	mov	r4, r0
 8003a08:	460d      	mov	r5, r1
 8003a0a:	e764      	b.n	80038d6 <atan+0xce>
 8003a0c:	4b4d      	ldr	r3, [pc, #308]	; (8003b44 <atan+0x33c>)
 8003a0e:	429e      	cmp	r6, r3
 8003a10:	dc1d      	bgt.n	8003a4e <atan+0x246>
 8003a12:	ee10 0a10 	vmov	r0, s0
 8003a16:	2200      	movs	r2, #0
 8003a18:	4b4b      	ldr	r3, [pc, #300]	; (8003b48 <atan+0x340>)
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	f7fc fc3c 	bl	8000298 <__aeabi_dsub>
 8003a20:	2200      	movs	r2, #0
 8003a22:	4606      	mov	r6, r0
 8003a24:	460f      	mov	r7, r1
 8003a26:	4b48      	ldr	r3, [pc, #288]	; (8003b48 <atan+0x340>)
 8003a28:	4620      	mov	r0, r4
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	f7fc fde8 	bl	8000600 <__aeabi_dmul>
 8003a30:	2200      	movs	r2, #0
 8003a32:	4b42      	ldr	r3, [pc, #264]	; (8003b3c <atan+0x334>)
 8003a34:	f7fc fc32 	bl	800029c <__adddf3>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4630      	mov	r0, r6
 8003a3e:	4639      	mov	r1, r7
 8003a40:	f7fc ff08 	bl	8000854 <__aeabi_ddiv>
 8003a44:	f04f 0a02 	mov.w	sl, #2
 8003a48:	4604      	mov	r4, r0
 8003a4a:	460d      	mov	r5, r1
 8003a4c:	e743      	b.n	80038d6 <atan+0xce>
 8003a4e:	462b      	mov	r3, r5
 8003a50:	ee10 2a10 	vmov	r2, s0
 8003a54:	2000      	movs	r0, #0
 8003a56:	493d      	ldr	r1, [pc, #244]	; (8003b4c <atan+0x344>)
 8003a58:	f7fc fefc 	bl	8000854 <__aeabi_ddiv>
 8003a5c:	f04f 0a03 	mov.w	sl, #3
 8003a60:	4604      	mov	r4, r0
 8003a62:	460d      	mov	r5, r1
 8003a64:	e737      	b.n	80038d6 <atan+0xce>
 8003a66:	4640      	mov	r0, r8
 8003a68:	4649      	mov	r1, r9
 8003a6a:	f7fc fc17 	bl	800029c <__adddf3>
 8003a6e:	4622      	mov	r2, r4
 8003a70:	462b      	mov	r3, r5
 8003a72:	f7fc fdc5 	bl	8000600 <__aeabi_dmul>
 8003a76:	4e36      	ldr	r6, [pc, #216]	; (8003b50 <atan+0x348>)
 8003a78:	4b36      	ldr	r3, [pc, #216]	; (8003b54 <atan+0x34c>)
 8003a7a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8003a7e:	4456      	add	r6, sl
 8003a80:	449a      	add	sl, r3
 8003a82:	e9da 2300 	ldrd	r2, r3, [sl]
 8003a86:	f7fc fc07 	bl	8000298 <__aeabi_dsub>
 8003a8a:	4622      	mov	r2, r4
 8003a8c:	462b      	mov	r3, r5
 8003a8e:	f7fc fc03 	bl	8000298 <__aeabi_dsub>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003a9a:	f7fc fbfd 	bl	8000298 <__aeabi_dsub>
 8003a9e:	f1bb 0f00 	cmp.w	fp, #0
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	460d      	mov	r5, r1
 8003aa6:	f6bf aece 	bge.w	8003846 <atan+0x3e>
 8003aaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003aae:	4604      	mov	r4, r0
 8003ab0:	461d      	mov	r5, r3
 8003ab2:	e6c8      	b.n	8003846 <atan+0x3e>
 8003ab4:	a51c      	add	r5, pc, #112	; (adr r5, 8003b28 <atan+0x320>)
 8003ab6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003aba:	e6c4      	b.n	8003846 <atan+0x3e>
 8003abc:	f3af 8000 	nop.w
 8003ac0:	54442d18 	.word	0x54442d18
 8003ac4:	bff921fb 	.word	0xbff921fb
 8003ac8:	8800759c 	.word	0x8800759c
 8003acc:	7e37e43c 	.word	0x7e37e43c
 8003ad0:	e322da11 	.word	0xe322da11
 8003ad4:	3f90ad3a 	.word	0x3f90ad3a
 8003ad8:	24760deb 	.word	0x24760deb
 8003adc:	3fa97b4b 	.word	0x3fa97b4b
 8003ae0:	a0d03d51 	.word	0xa0d03d51
 8003ae4:	3fb10d66 	.word	0x3fb10d66
 8003ae8:	c54c206e 	.word	0xc54c206e
 8003aec:	3fb745cd 	.word	0x3fb745cd
 8003af0:	920083ff 	.word	0x920083ff
 8003af4:	3fc24924 	.word	0x3fc24924
 8003af8:	5555550d 	.word	0x5555550d
 8003afc:	3fd55555 	.word	0x3fd55555
 8003b00:	2c6a6c2f 	.word	0x2c6a6c2f
 8003b04:	bfa2b444 	.word	0xbfa2b444
 8003b08:	52defd9a 	.word	0x52defd9a
 8003b0c:	3fadde2d 	.word	0x3fadde2d
 8003b10:	af749a6d 	.word	0xaf749a6d
 8003b14:	3fb3b0f2 	.word	0x3fb3b0f2
 8003b18:	fe231671 	.word	0xfe231671
 8003b1c:	3fbc71c6 	.word	0x3fbc71c6
 8003b20:	9998ebc4 	.word	0x9998ebc4
 8003b24:	3fc99999 	.word	0x3fc99999
 8003b28:	54442d18 	.word	0x54442d18
 8003b2c:	3ff921fb 	.word	0x3ff921fb
 8003b30:	440fffff 	.word	0x440fffff
 8003b34:	7ff00000 	.word	0x7ff00000
 8003b38:	3fdbffff 	.word	0x3fdbffff
 8003b3c:	3ff00000 	.word	0x3ff00000
 8003b40:	3ff2ffff 	.word	0x3ff2ffff
 8003b44:	40037fff 	.word	0x40037fff
 8003b48:	3ff80000 	.word	0x3ff80000
 8003b4c:	bff00000 	.word	0xbff00000
 8003b50:	08005168 	.word	0x08005168
 8003b54:	08005188 	.word	0x08005188

08003b58 <cos>:
 8003b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003b5a:	ec51 0b10 	vmov	r0, r1, d0
 8003b5e:	4a1e      	ldr	r2, [pc, #120]	; (8003bd8 <cos+0x80>)
 8003b60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003b64:	4293      	cmp	r3, r2
 8003b66:	dc06      	bgt.n	8003b76 <cos+0x1e>
 8003b68:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8003bd0 <cos+0x78>
 8003b6c:	f000 fb88 	bl	8004280 <__kernel_cos>
 8003b70:	ec51 0b10 	vmov	r0, r1, d0
 8003b74:	e007      	b.n	8003b86 <cos+0x2e>
 8003b76:	4a19      	ldr	r2, [pc, #100]	; (8003bdc <cos+0x84>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	dd09      	ble.n	8003b90 <cos+0x38>
 8003b7c:	ee10 2a10 	vmov	r2, s0
 8003b80:	460b      	mov	r3, r1
 8003b82:	f7fc fb89 	bl	8000298 <__aeabi_dsub>
 8003b86:	ec41 0b10 	vmov	d0, r0, r1
 8003b8a:	b005      	add	sp, #20
 8003b8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b90:	4668      	mov	r0, sp
 8003b92:	f000 f8d1 	bl	8003d38 <__ieee754_rem_pio2>
 8003b96:	f000 0003 	and.w	r0, r0, #3
 8003b9a:	2801      	cmp	r0, #1
 8003b9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003ba0:	ed9d 0b00 	vldr	d0, [sp]
 8003ba4:	d007      	beq.n	8003bb6 <cos+0x5e>
 8003ba6:	2802      	cmp	r0, #2
 8003ba8:	d00e      	beq.n	8003bc8 <cos+0x70>
 8003baa:	2800      	cmp	r0, #0
 8003bac:	d0de      	beq.n	8003b6c <cos+0x14>
 8003bae:	2001      	movs	r0, #1
 8003bb0:	f000 ff9e 	bl	8004af0 <__kernel_sin>
 8003bb4:	e7dc      	b.n	8003b70 <cos+0x18>
 8003bb6:	f000 ff9b 	bl	8004af0 <__kernel_sin>
 8003bba:	ec53 2b10 	vmov	r2, r3, d0
 8003bbe:	ee10 0a10 	vmov	r0, s0
 8003bc2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003bc6:	e7de      	b.n	8003b86 <cos+0x2e>
 8003bc8:	f000 fb5a 	bl	8004280 <__kernel_cos>
 8003bcc:	e7f5      	b.n	8003bba <cos+0x62>
 8003bce:	bf00      	nop
	...
 8003bd8:	3fe921fb 	.word	0x3fe921fb
 8003bdc:	7fefffff 	.word	0x7fefffff

08003be0 <fabs>:
 8003be0:	ec53 2b10 	vmov	r2, r3, d0
 8003be4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003be8:	ec43 2b10 	vmov	d0, r2, r3
 8003bec:	4770      	bx	lr
	...

08003bf0 <sin>:
 8003bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003bf2:	ec51 0b10 	vmov	r0, r1, d0
 8003bf6:	4a20      	ldr	r2, [pc, #128]	; (8003c78 <sin+0x88>)
 8003bf8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	dc07      	bgt.n	8003c10 <sin+0x20>
 8003c00:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8003c70 <sin+0x80>
 8003c04:	2000      	movs	r0, #0
 8003c06:	f000 ff73 	bl	8004af0 <__kernel_sin>
 8003c0a:	ec51 0b10 	vmov	r0, r1, d0
 8003c0e:	e007      	b.n	8003c20 <sin+0x30>
 8003c10:	4a1a      	ldr	r2, [pc, #104]	; (8003c7c <sin+0x8c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	dd09      	ble.n	8003c2a <sin+0x3a>
 8003c16:	ee10 2a10 	vmov	r2, s0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	f7fc fb3c 	bl	8000298 <__aeabi_dsub>
 8003c20:	ec41 0b10 	vmov	d0, r0, r1
 8003c24:	b005      	add	sp, #20
 8003c26:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c2a:	4668      	mov	r0, sp
 8003c2c:	f000 f884 	bl	8003d38 <__ieee754_rem_pio2>
 8003c30:	f000 0003 	and.w	r0, r0, #3
 8003c34:	2801      	cmp	r0, #1
 8003c36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003c3a:	ed9d 0b00 	vldr	d0, [sp]
 8003c3e:	d004      	beq.n	8003c4a <sin+0x5a>
 8003c40:	2802      	cmp	r0, #2
 8003c42:	d005      	beq.n	8003c50 <sin+0x60>
 8003c44:	b970      	cbnz	r0, 8003c64 <sin+0x74>
 8003c46:	2001      	movs	r0, #1
 8003c48:	e7dd      	b.n	8003c06 <sin+0x16>
 8003c4a:	f000 fb19 	bl	8004280 <__kernel_cos>
 8003c4e:	e7dc      	b.n	8003c0a <sin+0x1a>
 8003c50:	2001      	movs	r0, #1
 8003c52:	f000 ff4d 	bl	8004af0 <__kernel_sin>
 8003c56:	ec53 2b10 	vmov	r2, r3, d0
 8003c5a:	ee10 0a10 	vmov	r0, s0
 8003c5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003c62:	e7dd      	b.n	8003c20 <sin+0x30>
 8003c64:	f000 fb0c 	bl	8004280 <__kernel_cos>
 8003c68:	e7f5      	b.n	8003c56 <sin+0x66>
 8003c6a:	bf00      	nop
 8003c6c:	f3af 8000 	nop.w
	...
 8003c78:	3fe921fb 	.word	0x3fe921fb
 8003c7c:	7fefffff 	.word	0x7fefffff

08003c80 <sqrt>:
 8003c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c84:	ed2d 8b02 	vpush	{d8}
 8003c88:	b08b      	sub	sp, #44	; 0x2c
 8003c8a:	ec55 4b10 	vmov	r4, r5, d0
 8003c8e:	f000 fa45 	bl	800411c <__ieee754_sqrt>
 8003c92:	4b26      	ldr	r3, [pc, #152]	; (8003d2c <sqrt+0xac>)
 8003c94:	eeb0 8a40 	vmov.f32	s16, s0
 8003c98:	eef0 8a60 	vmov.f32	s17, s1
 8003c9c:	f993 6000 	ldrsb.w	r6, [r3]
 8003ca0:	1c73      	adds	r3, r6, #1
 8003ca2:	d02a      	beq.n	8003cfa <sqrt+0x7a>
 8003ca4:	4622      	mov	r2, r4
 8003ca6:	462b      	mov	r3, r5
 8003ca8:	4620      	mov	r0, r4
 8003caa:	4629      	mov	r1, r5
 8003cac:	f7fc ff42 	bl	8000b34 <__aeabi_dcmpun>
 8003cb0:	4607      	mov	r7, r0
 8003cb2:	bb10      	cbnz	r0, 8003cfa <sqrt+0x7a>
 8003cb4:	f04f 0800 	mov.w	r8, #0
 8003cb8:	f04f 0900 	mov.w	r9, #0
 8003cbc:	4642      	mov	r2, r8
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	f7fc ff0e 	bl	8000ae4 <__aeabi_dcmplt>
 8003cc8:	b1b8      	cbz	r0, 8003cfa <sqrt+0x7a>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	4b18      	ldr	r3, [pc, #96]	; (8003d30 <sqrt+0xb0>)
 8003cd0:	9301      	str	r3, [sp, #4]
 8003cd2:	9708      	str	r7, [sp, #32]
 8003cd4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003cd8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003cdc:	b9b6      	cbnz	r6, 8003d0c <sqrt+0x8c>
 8003cde:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8003ce2:	4668      	mov	r0, sp
 8003ce4:	f001 f844 	bl	8004d70 <matherr>
 8003ce8:	b1d0      	cbz	r0, 8003d20 <sqrt+0xa0>
 8003cea:	9b08      	ldr	r3, [sp, #32]
 8003cec:	b11b      	cbz	r3, 8003cf6 <sqrt+0x76>
 8003cee:	f7ff f885 	bl	8002dfc <__errno>
 8003cf2:	9b08      	ldr	r3, [sp, #32]
 8003cf4:	6003      	str	r3, [r0, #0]
 8003cf6:	ed9d 8b06 	vldr	d8, [sp, #24]
 8003cfa:	eeb0 0a48 	vmov.f32	s0, s16
 8003cfe:	eef0 0a68 	vmov.f32	s1, s17
 8003d02:	b00b      	add	sp, #44	; 0x2c
 8003d04:	ecbd 8b02 	vpop	{d8}
 8003d08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d0c:	4642      	mov	r2, r8
 8003d0e:	464b      	mov	r3, r9
 8003d10:	4640      	mov	r0, r8
 8003d12:	4649      	mov	r1, r9
 8003d14:	f7fc fd9e 	bl	8000854 <__aeabi_ddiv>
 8003d18:	2e02      	cmp	r6, #2
 8003d1a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003d1e:	d1e0      	bne.n	8003ce2 <sqrt+0x62>
 8003d20:	f7ff f86c 	bl	8002dfc <__errno>
 8003d24:	2321      	movs	r3, #33	; 0x21
 8003d26:	6003      	str	r3, [r0, #0]
 8003d28:	e7df      	b.n	8003cea <sqrt+0x6a>
 8003d2a:	bf00      	nop
 8003d2c:	20000200 	.word	0x20000200
 8003d30:	080051a8 	.word	0x080051a8
 8003d34:	00000000 	.word	0x00000000

08003d38 <__ieee754_rem_pio2>:
 8003d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d3c:	ec57 6b10 	vmov	r6, r7, d0
 8003d40:	4bc3      	ldr	r3, [pc, #780]	; (8004050 <__ieee754_rem_pio2+0x318>)
 8003d42:	b08d      	sub	sp, #52	; 0x34
 8003d44:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003d48:	4598      	cmp	r8, r3
 8003d4a:	4604      	mov	r4, r0
 8003d4c:	9704      	str	r7, [sp, #16]
 8003d4e:	dc07      	bgt.n	8003d60 <__ieee754_rem_pio2+0x28>
 8003d50:	2200      	movs	r2, #0
 8003d52:	2300      	movs	r3, #0
 8003d54:	ed84 0b00 	vstr	d0, [r4]
 8003d58:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003d5c:	2500      	movs	r5, #0
 8003d5e:	e027      	b.n	8003db0 <__ieee754_rem_pio2+0x78>
 8003d60:	4bbc      	ldr	r3, [pc, #752]	; (8004054 <__ieee754_rem_pio2+0x31c>)
 8003d62:	4598      	cmp	r8, r3
 8003d64:	dc75      	bgt.n	8003e52 <__ieee754_rem_pio2+0x11a>
 8003d66:	9b04      	ldr	r3, [sp, #16]
 8003d68:	4dbb      	ldr	r5, [pc, #748]	; (8004058 <__ieee754_rem_pio2+0x320>)
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	ee10 0a10 	vmov	r0, s0
 8003d70:	a3a9      	add	r3, pc, #676	; (adr r3, 8004018 <__ieee754_rem_pio2+0x2e0>)
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	4639      	mov	r1, r7
 8003d78:	dd36      	ble.n	8003de8 <__ieee754_rem_pio2+0xb0>
 8003d7a:	f7fc fa8d 	bl	8000298 <__aeabi_dsub>
 8003d7e:	45a8      	cmp	r8, r5
 8003d80:	4606      	mov	r6, r0
 8003d82:	460f      	mov	r7, r1
 8003d84:	d018      	beq.n	8003db8 <__ieee754_rem_pio2+0x80>
 8003d86:	a3a6      	add	r3, pc, #664	; (adr r3, 8004020 <__ieee754_rem_pio2+0x2e8>)
 8003d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8c:	f7fc fa84 	bl	8000298 <__aeabi_dsub>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	e9c4 2300 	strd	r2, r3, [r4]
 8003d98:	4630      	mov	r0, r6
 8003d9a:	4639      	mov	r1, r7
 8003d9c:	f7fc fa7c 	bl	8000298 <__aeabi_dsub>
 8003da0:	a39f      	add	r3, pc, #636	; (adr r3, 8004020 <__ieee754_rem_pio2+0x2e8>)
 8003da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da6:	f7fc fa77 	bl	8000298 <__aeabi_dsub>
 8003daa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003dae:	2501      	movs	r5, #1
 8003db0:	4628      	mov	r0, r5
 8003db2:	b00d      	add	sp, #52	; 0x34
 8003db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003db8:	a39b      	add	r3, pc, #620	; (adr r3, 8004028 <__ieee754_rem_pio2+0x2f0>)
 8003dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbe:	f7fc fa6b 	bl	8000298 <__aeabi_dsub>
 8003dc2:	a39b      	add	r3, pc, #620	; (adr r3, 8004030 <__ieee754_rem_pio2+0x2f8>)
 8003dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc8:	4606      	mov	r6, r0
 8003dca:	460f      	mov	r7, r1
 8003dcc:	f7fc fa64 	bl	8000298 <__aeabi_dsub>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	e9c4 2300 	strd	r2, r3, [r4]
 8003dd8:	4630      	mov	r0, r6
 8003dda:	4639      	mov	r1, r7
 8003ddc:	f7fc fa5c 	bl	8000298 <__aeabi_dsub>
 8003de0:	a393      	add	r3, pc, #588	; (adr r3, 8004030 <__ieee754_rem_pio2+0x2f8>)
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	e7de      	b.n	8003da6 <__ieee754_rem_pio2+0x6e>
 8003de8:	f7fc fa58 	bl	800029c <__adddf3>
 8003dec:	45a8      	cmp	r8, r5
 8003dee:	4606      	mov	r6, r0
 8003df0:	460f      	mov	r7, r1
 8003df2:	d016      	beq.n	8003e22 <__ieee754_rem_pio2+0xea>
 8003df4:	a38a      	add	r3, pc, #552	; (adr r3, 8004020 <__ieee754_rem_pio2+0x2e8>)
 8003df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfa:	f7fc fa4f 	bl	800029c <__adddf3>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	e9c4 2300 	strd	r2, r3, [r4]
 8003e06:	4630      	mov	r0, r6
 8003e08:	4639      	mov	r1, r7
 8003e0a:	f7fc fa45 	bl	8000298 <__aeabi_dsub>
 8003e0e:	a384      	add	r3, pc, #528	; (adr r3, 8004020 <__ieee754_rem_pio2+0x2e8>)
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f7fc fa42 	bl	800029c <__adddf3>
 8003e18:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003e1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003e20:	e7c6      	b.n	8003db0 <__ieee754_rem_pio2+0x78>
 8003e22:	a381      	add	r3, pc, #516	; (adr r3, 8004028 <__ieee754_rem_pio2+0x2f0>)
 8003e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e28:	f7fc fa38 	bl	800029c <__adddf3>
 8003e2c:	a380      	add	r3, pc, #512	; (adr r3, 8004030 <__ieee754_rem_pio2+0x2f8>)
 8003e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e32:	4606      	mov	r6, r0
 8003e34:	460f      	mov	r7, r1
 8003e36:	f7fc fa31 	bl	800029c <__adddf3>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	e9c4 2300 	strd	r2, r3, [r4]
 8003e42:	4630      	mov	r0, r6
 8003e44:	4639      	mov	r1, r7
 8003e46:	f7fc fa27 	bl	8000298 <__aeabi_dsub>
 8003e4a:	a379      	add	r3, pc, #484	; (adr r3, 8004030 <__ieee754_rem_pio2+0x2f8>)
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	e7e0      	b.n	8003e14 <__ieee754_rem_pio2+0xdc>
 8003e52:	4b82      	ldr	r3, [pc, #520]	; (800405c <__ieee754_rem_pio2+0x324>)
 8003e54:	4598      	cmp	r8, r3
 8003e56:	f300 80d0 	bgt.w	8003ffa <__ieee754_rem_pio2+0x2c2>
 8003e5a:	f7ff fec1 	bl	8003be0 <fabs>
 8003e5e:	ec57 6b10 	vmov	r6, r7, d0
 8003e62:	ee10 0a10 	vmov	r0, s0
 8003e66:	a374      	add	r3, pc, #464	; (adr r3, 8004038 <__ieee754_rem_pio2+0x300>)
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	4639      	mov	r1, r7
 8003e6e:	f7fc fbc7 	bl	8000600 <__aeabi_dmul>
 8003e72:	2200      	movs	r2, #0
 8003e74:	4b7a      	ldr	r3, [pc, #488]	; (8004060 <__ieee754_rem_pio2+0x328>)
 8003e76:	f7fc fa11 	bl	800029c <__adddf3>
 8003e7a:	f7fc fe71 	bl	8000b60 <__aeabi_d2iz>
 8003e7e:	4605      	mov	r5, r0
 8003e80:	f7fc fb58 	bl	8000534 <__aeabi_i2d>
 8003e84:	a364      	add	r3, pc, #400	; (adr r3, 8004018 <__ieee754_rem_pio2+0x2e0>)
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e8e:	f7fc fbb7 	bl	8000600 <__aeabi_dmul>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4630      	mov	r0, r6
 8003e98:	4639      	mov	r1, r7
 8003e9a:	f7fc f9fd 	bl	8000298 <__aeabi_dsub>
 8003e9e:	a360      	add	r3, pc, #384	; (adr r3, 8004020 <__ieee754_rem_pio2+0x2e8>)
 8003ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea4:	4682      	mov	sl, r0
 8003ea6:	468b      	mov	fp, r1
 8003ea8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003eac:	f7fc fba8 	bl	8000600 <__aeabi_dmul>
 8003eb0:	2d1f      	cmp	r5, #31
 8003eb2:	4606      	mov	r6, r0
 8003eb4:	460f      	mov	r7, r1
 8003eb6:	dc2a      	bgt.n	8003f0e <__ieee754_rem_pio2+0x1d6>
 8003eb8:	1e6a      	subs	r2, r5, #1
 8003eba:	4b6a      	ldr	r3, [pc, #424]	; (8004064 <__ieee754_rem_pio2+0x32c>)
 8003ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ec0:	4598      	cmp	r8, r3
 8003ec2:	d024      	beq.n	8003f0e <__ieee754_rem_pio2+0x1d6>
 8003ec4:	4632      	mov	r2, r6
 8003ec6:	463b      	mov	r3, r7
 8003ec8:	4650      	mov	r0, sl
 8003eca:	4659      	mov	r1, fp
 8003ecc:	f7fc f9e4 	bl	8000298 <__aeabi_dsub>
 8003ed0:	e9c4 0100 	strd	r0, r1, [r4]
 8003ed4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003ed8:	4650      	mov	r0, sl
 8003eda:	4642      	mov	r2, r8
 8003edc:	464b      	mov	r3, r9
 8003ede:	4659      	mov	r1, fp
 8003ee0:	f7fc f9da 	bl	8000298 <__aeabi_dsub>
 8003ee4:	463b      	mov	r3, r7
 8003ee6:	4632      	mov	r2, r6
 8003ee8:	f7fc f9d6 	bl	8000298 <__aeabi_dsub>
 8003eec:	9b04      	ldr	r3, [sp, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003ef4:	f6bf af5c 	bge.w	8003db0 <__ieee754_rem_pio2+0x78>
 8003ef8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003efc:	6063      	str	r3, [r4, #4]
 8003efe:	f8c4 8000 	str.w	r8, [r4]
 8003f02:	60a0      	str	r0, [r4, #8]
 8003f04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f08:	60e3      	str	r3, [r4, #12]
 8003f0a:	426d      	negs	r5, r5
 8003f0c:	e750      	b.n	8003db0 <__ieee754_rem_pio2+0x78>
 8003f0e:	4632      	mov	r2, r6
 8003f10:	463b      	mov	r3, r7
 8003f12:	4650      	mov	r0, sl
 8003f14:	4659      	mov	r1, fp
 8003f16:	f7fc f9bf 	bl	8000298 <__aeabi_dsub>
 8003f1a:	ea4f 5228 	mov.w	r2, r8, asr #20
 8003f1e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b10      	cmp	r3, #16
 8003f26:	e9c4 0100 	strd	r0, r1, [r4]
 8003f2a:	9205      	str	r2, [sp, #20]
 8003f2c:	ddd2      	ble.n	8003ed4 <__ieee754_rem_pio2+0x19c>
 8003f2e:	a33e      	add	r3, pc, #248	; (adr r3, 8004028 <__ieee754_rem_pio2+0x2f0>)
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f38:	f7fc fb62 	bl	8000600 <__aeabi_dmul>
 8003f3c:	4606      	mov	r6, r0
 8003f3e:	460f      	mov	r7, r1
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4650      	mov	r0, sl
 8003f46:	4659      	mov	r1, fp
 8003f48:	f7fc f9a6 	bl	8000298 <__aeabi_dsub>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4680      	mov	r8, r0
 8003f52:	4689      	mov	r9, r1
 8003f54:	4650      	mov	r0, sl
 8003f56:	4659      	mov	r1, fp
 8003f58:	f7fc f99e 	bl	8000298 <__aeabi_dsub>
 8003f5c:	4632      	mov	r2, r6
 8003f5e:	463b      	mov	r3, r7
 8003f60:	f7fc f99a 	bl	8000298 <__aeabi_dsub>
 8003f64:	a332      	add	r3, pc, #200	; (adr r3, 8004030 <__ieee754_rem_pio2+0x2f8>)
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	4606      	mov	r6, r0
 8003f6c:	460f      	mov	r7, r1
 8003f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f72:	f7fc fb45 	bl	8000600 <__aeabi_dmul>
 8003f76:	4632      	mov	r2, r6
 8003f78:	463b      	mov	r3, r7
 8003f7a:	f7fc f98d 	bl	8000298 <__aeabi_dsub>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4606      	mov	r6, r0
 8003f84:	460f      	mov	r7, r1
 8003f86:	4640      	mov	r0, r8
 8003f88:	4649      	mov	r1, r9
 8003f8a:	f7fc f985 	bl	8000298 <__aeabi_dsub>
 8003f8e:	9a05      	ldr	r2, [sp, #20]
 8003f90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b31      	cmp	r3, #49	; 0x31
 8003f98:	e9c4 0100 	strd	r0, r1, [r4]
 8003f9c:	dd2a      	ble.n	8003ff4 <__ieee754_rem_pio2+0x2bc>
 8003f9e:	a328      	add	r3, pc, #160	; (adr r3, 8004040 <__ieee754_rem_pio2+0x308>)
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fa8:	f7fc fb2a 	bl	8000600 <__aeabi_dmul>
 8003fac:	4606      	mov	r6, r0
 8003fae:	460f      	mov	r7, r1
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4640      	mov	r0, r8
 8003fb6:	4649      	mov	r1, r9
 8003fb8:	f7fc f96e 	bl	8000298 <__aeabi_dsub>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4682      	mov	sl, r0
 8003fc2:	468b      	mov	fp, r1
 8003fc4:	4640      	mov	r0, r8
 8003fc6:	4649      	mov	r1, r9
 8003fc8:	f7fc f966 	bl	8000298 <__aeabi_dsub>
 8003fcc:	4632      	mov	r2, r6
 8003fce:	463b      	mov	r3, r7
 8003fd0:	f7fc f962 	bl	8000298 <__aeabi_dsub>
 8003fd4:	a31c      	add	r3, pc, #112	; (adr r3, 8004048 <__ieee754_rem_pio2+0x310>)
 8003fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fda:	4606      	mov	r6, r0
 8003fdc:	460f      	mov	r7, r1
 8003fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fe2:	f7fc fb0d 	bl	8000600 <__aeabi_dmul>
 8003fe6:	4632      	mov	r2, r6
 8003fe8:	463b      	mov	r3, r7
 8003fea:	f7fc f955 	bl	8000298 <__aeabi_dsub>
 8003fee:	4606      	mov	r6, r0
 8003ff0:	460f      	mov	r7, r1
 8003ff2:	e767      	b.n	8003ec4 <__ieee754_rem_pio2+0x18c>
 8003ff4:	46c2      	mov	sl, r8
 8003ff6:	46cb      	mov	fp, r9
 8003ff8:	e76c      	b.n	8003ed4 <__ieee754_rem_pio2+0x19c>
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <__ieee754_rem_pio2+0x330>)
 8003ffc:	4598      	cmp	r8, r3
 8003ffe:	dd35      	ble.n	800406c <__ieee754_rem_pio2+0x334>
 8004000:	ee10 2a10 	vmov	r2, s0
 8004004:	463b      	mov	r3, r7
 8004006:	4630      	mov	r0, r6
 8004008:	4639      	mov	r1, r7
 800400a:	f7fc f945 	bl	8000298 <__aeabi_dsub>
 800400e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004012:	e9c4 0100 	strd	r0, r1, [r4]
 8004016:	e6a1      	b.n	8003d5c <__ieee754_rem_pio2+0x24>
 8004018:	54400000 	.word	0x54400000
 800401c:	3ff921fb 	.word	0x3ff921fb
 8004020:	1a626331 	.word	0x1a626331
 8004024:	3dd0b461 	.word	0x3dd0b461
 8004028:	1a600000 	.word	0x1a600000
 800402c:	3dd0b461 	.word	0x3dd0b461
 8004030:	2e037073 	.word	0x2e037073
 8004034:	3ba3198a 	.word	0x3ba3198a
 8004038:	6dc9c883 	.word	0x6dc9c883
 800403c:	3fe45f30 	.word	0x3fe45f30
 8004040:	2e000000 	.word	0x2e000000
 8004044:	3ba3198a 	.word	0x3ba3198a
 8004048:	252049c1 	.word	0x252049c1
 800404c:	397b839a 	.word	0x397b839a
 8004050:	3fe921fb 	.word	0x3fe921fb
 8004054:	4002d97b 	.word	0x4002d97b
 8004058:	3ff921fb 	.word	0x3ff921fb
 800405c:	413921fb 	.word	0x413921fb
 8004060:	3fe00000 	.word	0x3fe00000
 8004064:	080051b0 	.word	0x080051b0
 8004068:	7fefffff 	.word	0x7fefffff
 800406c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004070:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004074:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004078:	4630      	mov	r0, r6
 800407a:	460f      	mov	r7, r1
 800407c:	f7fc fd70 	bl	8000b60 <__aeabi_d2iz>
 8004080:	f7fc fa58 	bl	8000534 <__aeabi_i2d>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4630      	mov	r0, r6
 800408a:	4639      	mov	r1, r7
 800408c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004090:	f7fc f902 	bl	8000298 <__aeabi_dsub>
 8004094:	2200      	movs	r2, #0
 8004096:	4b1f      	ldr	r3, [pc, #124]	; (8004114 <__ieee754_rem_pio2+0x3dc>)
 8004098:	f7fc fab2 	bl	8000600 <__aeabi_dmul>
 800409c:	460f      	mov	r7, r1
 800409e:	4606      	mov	r6, r0
 80040a0:	f7fc fd5e 	bl	8000b60 <__aeabi_d2iz>
 80040a4:	f7fc fa46 	bl	8000534 <__aeabi_i2d>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4630      	mov	r0, r6
 80040ae:	4639      	mov	r1, r7
 80040b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80040b4:	f7fc f8f0 	bl	8000298 <__aeabi_dsub>
 80040b8:	2200      	movs	r2, #0
 80040ba:	4b16      	ldr	r3, [pc, #88]	; (8004114 <__ieee754_rem_pio2+0x3dc>)
 80040bc:	f7fc faa0 	bl	8000600 <__aeabi_dmul>
 80040c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80040c4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80040c8:	f04f 0803 	mov.w	r8, #3
 80040cc:	2600      	movs	r6, #0
 80040ce:	2700      	movs	r7, #0
 80040d0:	4632      	mov	r2, r6
 80040d2:	463b      	mov	r3, r7
 80040d4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80040d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80040dc:	f7fc fcf8 	bl	8000ad0 <__aeabi_dcmpeq>
 80040e0:	b9b0      	cbnz	r0, 8004110 <__ieee754_rem_pio2+0x3d8>
 80040e2:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <__ieee754_rem_pio2+0x3e0>)
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	2302      	movs	r3, #2
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	462a      	mov	r2, r5
 80040ec:	4643      	mov	r3, r8
 80040ee:	4621      	mov	r1, r4
 80040f0:	a806      	add	r0, sp, #24
 80040f2:	f000 f9ad 	bl	8004450 <__kernel_rem_pio2>
 80040f6:	9b04      	ldr	r3, [sp, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	4605      	mov	r5, r0
 80040fc:	f6bf ae58 	bge.w	8003db0 <__ieee754_rem_pio2+0x78>
 8004100:	6863      	ldr	r3, [r4, #4]
 8004102:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004106:	6063      	str	r3, [r4, #4]
 8004108:	68e3      	ldr	r3, [r4, #12]
 800410a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800410e:	e6fb      	b.n	8003f08 <__ieee754_rem_pio2+0x1d0>
 8004110:	46d0      	mov	r8, sl
 8004112:	e7dd      	b.n	80040d0 <__ieee754_rem_pio2+0x398>
 8004114:	41700000 	.word	0x41700000
 8004118:	08005230 	.word	0x08005230

0800411c <__ieee754_sqrt>:
 800411c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004120:	ec55 4b10 	vmov	r4, r5, d0
 8004124:	4e54      	ldr	r6, [pc, #336]	; (8004278 <__ieee754_sqrt+0x15c>)
 8004126:	43ae      	bics	r6, r5
 8004128:	ee10 0a10 	vmov	r0, s0
 800412c:	462b      	mov	r3, r5
 800412e:	462a      	mov	r2, r5
 8004130:	4621      	mov	r1, r4
 8004132:	d113      	bne.n	800415c <__ieee754_sqrt+0x40>
 8004134:	ee10 2a10 	vmov	r2, s0
 8004138:	462b      	mov	r3, r5
 800413a:	ee10 0a10 	vmov	r0, s0
 800413e:	4629      	mov	r1, r5
 8004140:	f7fc fa5e 	bl	8000600 <__aeabi_dmul>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4620      	mov	r0, r4
 800414a:	4629      	mov	r1, r5
 800414c:	f7fc f8a6 	bl	800029c <__adddf3>
 8004150:	4604      	mov	r4, r0
 8004152:	460d      	mov	r5, r1
 8004154:	ec45 4b10 	vmov	d0, r4, r5
 8004158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800415c:	2d00      	cmp	r5, #0
 800415e:	dc10      	bgt.n	8004182 <__ieee754_sqrt+0x66>
 8004160:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004164:	4330      	orrs	r0, r6
 8004166:	d0f5      	beq.n	8004154 <__ieee754_sqrt+0x38>
 8004168:	b15d      	cbz	r5, 8004182 <__ieee754_sqrt+0x66>
 800416a:	ee10 2a10 	vmov	r2, s0
 800416e:	462b      	mov	r3, r5
 8004170:	4620      	mov	r0, r4
 8004172:	4629      	mov	r1, r5
 8004174:	f7fc f890 	bl	8000298 <__aeabi_dsub>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	f7fc fb6a 	bl	8000854 <__aeabi_ddiv>
 8004180:	e7e6      	b.n	8004150 <__ieee754_sqrt+0x34>
 8004182:	151b      	asrs	r3, r3, #20
 8004184:	d10c      	bne.n	80041a0 <__ieee754_sqrt+0x84>
 8004186:	2a00      	cmp	r2, #0
 8004188:	d06d      	beq.n	8004266 <__ieee754_sqrt+0x14a>
 800418a:	2000      	movs	r0, #0
 800418c:	02d6      	lsls	r6, r2, #11
 800418e:	d56e      	bpl.n	800426e <__ieee754_sqrt+0x152>
 8004190:	1e44      	subs	r4, r0, #1
 8004192:	1b1b      	subs	r3, r3, r4
 8004194:	f1c0 0420 	rsb	r4, r0, #32
 8004198:	fa21 f404 	lsr.w	r4, r1, r4
 800419c:	4322      	orrs	r2, r4
 800419e:	4081      	lsls	r1, r0
 80041a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80041a4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80041a8:	07dd      	lsls	r5, r3, #31
 80041aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80041ae:	bf42      	ittt	mi
 80041b0:	0052      	lslmi	r2, r2, #1
 80041b2:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80041b6:	0049      	lslmi	r1, r1, #1
 80041b8:	1058      	asrs	r0, r3, #1
 80041ba:	2500      	movs	r5, #0
 80041bc:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 80041c0:	441a      	add	r2, r3
 80041c2:	0049      	lsls	r1, r1, #1
 80041c4:	2316      	movs	r3, #22
 80041c6:	462c      	mov	r4, r5
 80041c8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80041cc:	19a7      	adds	r7, r4, r6
 80041ce:	4297      	cmp	r7, r2
 80041d0:	bfde      	ittt	le
 80041d2:	1bd2      	suble	r2, r2, r7
 80041d4:	19bc      	addle	r4, r7, r6
 80041d6:	19ad      	addle	r5, r5, r6
 80041d8:	0052      	lsls	r2, r2, #1
 80041da:	3b01      	subs	r3, #1
 80041dc:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80041e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80041e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80041e8:	d1f0      	bne.n	80041cc <__ieee754_sqrt+0xb0>
 80041ea:	f04f 0e20 	mov.w	lr, #32
 80041ee:	469c      	mov	ip, r3
 80041f0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80041f4:	42a2      	cmp	r2, r4
 80041f6:	eb06 070c 	add.w	r7, r6, ip
 80041fa:	dc02      	bgt.n	8004202 <__ieee754_sqrt+0xe6>
 80041fc:	d112      	bne.n	8004224 <__ieee754_sqrt+0x108>
 80041fe:	428f      	cmp	r7, r1
 8004200:	d810      	bhi.n	8004224 <__ieee754_sqrt+0x108>
 8004202:	2f00      	cmp	r7, #0
 8004204:	eb07 0c06 	add.w	ip, r7, r6
 8004208:	da34      	bge.n	8004274 <__ieee754_sqrt+0x158>
 800420a:	f1bc 0f00 	cmp.w	ip, #0
 800420e:	db31      	blt.n	8004274 <__ieee754_sqrt+0x158>
 8004210:	f104 0801 	add.w	r8, r4, #1
 8004214:	1b12      	subs	r2, r2, r4
 8004216:	428f      	cmp	r7, r1
 8004218:	bf88      	it	hi
 800421a:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800421e:	1bc9      	subs	r1, r1, r7
 8004220:	4433      	add	r3, r6
 8004222:	4644      	mov	r4, r8
 8004224:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8004228:	f1be 0e01 	subs.w	lr, lr, #1
 800422c:	443a      	add	r2, r7
 800422e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004232:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004236:	d1dd      	bne.n	80041f4 <__ieee754_sqrt+0xd8>
 8004238:	430a      	orrs	r2, r1
 800423a:	d006      	beq.n	800424a <__ieee754_sqrt+0x12e>
 800423c:	1c5c      	adds	r4, r3, #1
 800423e:	bf13      	iteet	ne
 8004240:	3301      	addne	r3, #1
 8004242:	3501      	addeq	r5, #1
 8004244:	4673      	moveq	r3, lr
 8004246:	f023 0301 	bicne.w	r3, r3, #1
 800424a:	106a      	asrs	r2, r5, #1
 800424c:	085b      	lsrs	r3, r3, #1
 800424e:	07e9      	lsls	r1, r5, #31
 8004250:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004254:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004258:	bf48      	it	mi
 800425a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800425e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8004262:	461c      	mov	r4, r3
 8004264:	e776      	b.n	8004154 <__ieee754_sqrt+0x38>
 8004266:	0aca      	lsrs	r2, r1, #11
 8004268:	3b15      	subs	r3, #21
 800426a:	0549      	lsls	r1, r1, #21
 800426c:	e78b      	b.n	8004186 <__ieee754_sqrt+0x6a>
 800426e:	0052      	lsls	r2, r2, #1
 8004270:	3001      	adds	r0, #1
 8004272:	e78b      	b.n	800418c <__ieee754_sqrt+0x70>
 8004274:	46a0      	mov	r8, r4
 8004276:	e7cd      	b.n	8004214 <__ieee754_sqrt+0xf8>
 8004278:	7ff00000 	.word	0x7ff00000
 800427c:	00000000 	.word	0x00000000

08004280 <__kernel_cos>:
 8004280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004284:	ec59 8b10 	vmov	r8, r9, d0
 8004288:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 800428c:	b085      	sub	sp, #20
 800428e:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8004292:	ed8d 1b00 	vstr	d1, [sp]
 8004296:	da07      	bge.n	80042a8 <__kernel_cos+0x28>
 8004298:	ee10 0a10 	vmov	r0, s0
 800429c:	4649      	mov	r1, r9
 800429e:	f7fc fc5f 	bl	8000b60 <__aeabi_d2iz>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	f000 80aa 	beq.w	80043fc <__kernel_cos+0x17c>
 80042a8:	4642      	mov	r2, r8
 80042aa:	464b      	mov	r3, r9
 80042ac:	4640      	mov	r0, r8
 80042ae:	4649      	mov	r1, r9
 80042b0:	f7fc f9a6 	bl	8000600 <__aeabi_dmul>
 80042b4:	a359      	add	r3, pc, #356	; (adr r3, 800441c <__kernel_cos+0x19c>)
 80042b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ba:	4604      	mov	r4, r0
 80042bc:	460d      	mov	r5, r1
 80042be:	f7fc f99f 	bl	8000600 <__aeabi_dmul>
 80042c2:	a358      	add	r3, pc, #352	; (adr r3, 8004424 <__kernel_cos+0x1a4>)
 80042c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c8:	f7fb ffe8 	bl	800029c <__adddf3>
 80042cc:	4622      	mov	r2, r4
 80042ce:	462b      	mov	r3, r5
 80042d0:	f7fc f996 	bl	8000600 <__aeabi_dmul>
 80042d4:	a355      	add	r3, pc, #340	; (adr r3, 800442c <__kernel_cos+0x1ac>)
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f7fb ffdd 	bl	8000298 <__aeabi_dsub>
 80042de:	4622      	mov	r2, r4
 80042e0:	462b      	mov	r3, r5
 80042e2:	f7fc f98d 	bl	8000600 <__aeabi_dmul>
 80042e6:	a353      	add	r3, pc, #332	; (adr r3, 8004434 <__kernel_cos+0x1b4>)
 80042e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ec:	f7fb ffd6 	bl	800029c <__adddf3>
 80042f0:	4622      	mov	r2, r4
 80042f2:	462b      	mov	r3, r5
 80042f4:	f7fc f984 	bl	8000600 <__aeabi_dmul>
 80042f8:	a350      	add	r3, pc, #320	; (adr r3, 800443c <__kernel_cos+0x1bc>)
 80042fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fe:	f7fb ffcb 	bl	8000298 <__aeabi_dsub>
 8004302:	4622      	mov	r2, r4
 8004304:	462b      	mov	r3, r5
 8004306:	f7fc f97b 	bl	8000600 <__aeabi_dmul>
 800430a:	a34e      	add	r3, pc, #312	; (adr r3, 8004444 <__kernel_cos+0x1c4>)
 800430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004310:	f7fb ffc4 	bl	800029c <__adddf3>
 8004314:	462b      	mov	r3, r5
 8004316:	4622      	mov	r2, r4
 8004318:	f7fc f972 	bl	8000600 <__aeabi_dmul>
 800431c:	4b3a      	ldr	r3, [pc, #232]	; (8004408 <__kernel_cos+0x188>)
 800431e:	429f      	cmp	r7, r3
 8004320:	4682      	mov	sl, r0
 8004322:	468b      	mov	fp, r1
 8004324:	dc2c      	bgt.n	8004380 <__kernel_cos+0x100>
 8004326:	2200      	movs	r2, #0
 8004328:	4b38      	ldr	r3, [pc, #224]	; (800440c <__kernel_cos+0x18c>)
 800432a:	4620      	mov	r0, r4
 800432c:	4629      	mov	r1, r5
 800432e:	f7fc f967 	bl	8000600 <__aeabi_dmul>
 8004332:	4652      	mov	r2, sl
 8004334:	4606      	mov	r6, r0
 8004336:	460f      	mov	r7, r1
 8004338:	465b      	mov	r3, fp
 800433a:	4620      	mov	r0, r4
 800433c:	4629      	mov	r1, r5
 800433e:	f7fc f95f 	bl	8000600 <__aeabi_dmul>
 8004342:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004346:	4604      	mov	r4, r0
 8004348:	460d      	mov	r5, r1
 800434a:	4640      	mov	r0, r8
 800434c:	4649      	mov	r1, r9
 800434e:	f7fc f957 	bl	8000600 <__aeabi_dmul>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4620      	mov	r0, r4
 8004358:	4629      	mov	r1, r5
 800435a:	f7fb ff9d 	bl	8000298 <__aeabi_dsub>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4630      	mov	r0, r6
 8004364:	4639      	mov	r1, r7
 8004366:	f7fb ff97 	bl	8000298 <__aeabi_dsub>
 800436a:	460b      	mov	r3, r1
 800436c:	4928      	ldr	r1, [pc, #160]	; (8004410 <__kernel_cos+0x190>)
 800436e:	4602      	mov	r2, r0
 8004370:	2000      	movs	r0, #0
 8004372:	f7fb ff91 	bl	8000298 <__aeabi_dsub>
 8004376:	ec41 0b10 	vmov	d0, r0, r1
 800437a:	b005      	add	sp, #20
 800437c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004380:	4b24      	ldr	r3, [pc, #144]	; (8004414 <__kernel_cos+0x194>)
 8004382:	4923      	ldr	r1, [pc, #140]	; (8004410 <__kernel_cos+0x190>)
 8004384:	429f      	cmp	r7, r3
 8004386:	bfd7      	itett	le
 8004388:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 800438c:	4f22      	ldrgt	r7, [pc, #136]	; (8004418 <__kernel_cos+0x198>)
 800438e:	2200      	movle	r2, #0
 8004390:	4616      	movle	r6, r2
 8004392:	bfd4      	ite	le
 8004394:	461f      	movle	r7, r3
 8004396:	2600      	movgt	r6, #0
 8004398:	4632      	mov	r2, r6
 800439a:	463b      	mov	r3, r7
 800439c:	2000      	movs	r0, #0
 800439e:	f7fb ff7b 	bl	8000298 <__aeabi_dsub>
 80043a2:	2200      	movs	r2, #0
 80043a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043a8:	4b18      	ldr	r3, [pc, #96]	; (800440c <__kernel_cos+0x18c>)
 80043aa:	4620      	mov	r0, r4
 80043ac:	4629      	mov	r1, r5
 80043ae:	f7fc f927 	bl	8000600 <__aeabi_dmul>
 80043b2:	4632      	mov	r2, r6
 80043b4:	463b      	mov	r3, r7
 80043b6:	f7fb ff6f 	bl	8000298 <__aeabi_dsub>
 80043ba:	4652      	mov	r2, sl
 80043bc:	4606      	mov	r6, r0
 80043be:	460f      	mov	r7, r1
 80043c0:	465b      	mov	r3, fp
 80043c2:	4620      	mov	r0, r4
 80043c4:	4629      	mov	r1, r5
 80043c6:	f7fc f91b 	bl	8000600 <__aeabi_dmul>
 80043ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043ce:	4604      	mov	r4, r0
 80043d0:	460d      	mov	r5, r1
 80043d2:	4640      	mov	r0, r8
 80043d4:	4649      	mov	r1, r9
 80043d6:	f7fc f913 	bl	8000600 <__aeabi_dmul>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4620      	mov	r0, r4
 80043e0:	4629      	mov	r1, r5
 80043e2:	f7fb ff59 	bl	8000298 <__aeabi_dsub>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4630      	mov	r0, r6
 80043ec:	4639      	mov	r1, r7
 80043ee:	f7fb ff53 	bl	8000298 <__aeabi_dsub>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043fa:	e7ba      	b.n	8004372 <__kernel_cos+0xf2>
 80043fc:	2000      	movs	r0, #0
 80043fe:	4904      	ldr	r1, [pc, #16]	; (8004410 <__kernel_cos+0x190>)
 8004400:	e7b9      	b.n	8004376 <__kernel_cos+0xf6>
 8004402:	bf00      	nop
 8004404:	f3af 8000 	nop.w
 8004408:	3fd33332 	.word	0x3fd33332
 800440c:	3fe00000 	.word	0x3fe00000
 8004410:	3ff00000 	.word	0x3ff00000
 8004414:	3fe90000 	.word	0x3fe90000
 8004418:	3fd20000 	.word	0x3fd20000
 800441c:	be8838d4 	.word	0xbe8838d4
 8004420:	bda8fae9 	.word	0xbda8fae9
 8004424:	bdb4b1c4 	.word	0xbdb4b1c4
 8004428:	3e21ee9e 	.word	0x3e21ee9e
 800442c:	809c52ad 	.word	0x809c52ad
 8004430:	3e927e4f 	.word	0x3e927e4f
 8004434:	19cb1590 	.word	0x19cb1590
 8004438:	3efa01a0 	.word	0x3efa01a0
 800443c:	16c15177 	.word	0x16c15177
 8004440:	3f56c16c 	.word	0x3f56c16c
 8004444:	5555554c 	.word	0x5555554c
 8004448:	3fa55555 	.word	0x3fa55555
 800444c:	00000000 	.word	0x00000000

08004450 <__kernel_rem_pio2>:
 8004450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004454:	ed2d 8b02 	vpush	{d8}
 8004458:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800445c:	1ed4      	subs	r4, r2, #3
 800445e:	9306      	str	r3, [sp, #24]
 8004460:	9102      	str	r1, [sp, #8]
 8004462:	4bc3      	ldr	r3, [pc, #780]	; (8004770 <__kernel_rem_pio2+0x320>)
 8004464:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8004466:	9009      	str	r0, [sp, #36]	; 0x24
 8004468:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	9b06      	ldr	r3, [sp, #24]
 8004470:	3b01      	subs	r3, #1
 8004472:	9304      	str	r3, [sp, #16]
 8004474:	2318      	movs	r3, #24
 8004476:	fb94 f4f3 	sdiv	r4, r4, r3
 800447a:	f06f 0317 	mvn.w	r3, #23
 800447e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8004482:	fb04 3303 	mla	r3, r4, r3, r3
 8004486:	eb03 0a02 	add.w	sl, r3, r2
 800448a:	9b00      	ldr	r3, [sp, #0]
 800448c:	9a04      	ldr	r2, [sp, #16]
 800448e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8004760 <__kernel_rem_pio2+0x310>
 8004492:	eb03 0802 	add.w	r8, r3, r2
 8004496:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004498:	1aa7      	subs	r7, r4, r2
 800449a:	ae20      	add	r6, sp, #128	; 0x80
 800449c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80044a0:	2500      	movs	r5, #0
 80044a2:	4545      	cmp	r5, r8
 80044a4:	dd13      	ble.n	80044ce <__kernel_rem_pio2+0x7e>
 80044a6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8004760 <__kernel_rem_pio2+0x310>
 80044aa:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80044ae:	2600      	movs	r6, #0
 80044b0:	9b00      	ldr	r3, [sp, #0]
 80044b2:	429e      	cmp	r6, r3
 80044b4:	dc32      	bgt.n	800451c <__kernel_rem_pio2+0xcc>
 80044b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044b8:	9303      	str	r3, [sp, #12]
 80044ba:	9b06      	ldr	r3, [sp, #24]
 80044bc:	199d      	adds	r5, r3, r6
 80044be:	ab20      	add	r3, sp, #128	; 0x80
 80044c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80044c4:	9308      	str	r3, [sp, #32]
 80044c6:	ec59 8b18 	vmov	r8, r9, d8
 80044ca:	2700      	movs	r7, #0
 80044cc:	e01f      	b.n	800450e <__kernel_rem_pio2+0xbe>
 80044ce:	42ef      	cmn	r7, r5
 80044d0:	d407      	bmi.n	80044e2 <__kernel_rem_pio2+0x92>
 80044d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80044d6:	f7fc f82d 	bl	8000534 <__aeabi_i2d>
 80044da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80044de:	3501      	adds	r5, #1
 80044e0:	e7df      	b.n	80044a2 <__kernel_rem_pio2+0x52>
 80044e2:	ec51 0b18 	vmov	r0, r1, d8
 80044e6:	e7f8      	b.n	80044da <__kernel_rem_pio2+0x8a>
 80044e8:	9908      	ldr	r1, [sp, #32]
 80044ea:	9d03      	ldr	r5, [sp, #12]
 80044ec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80044f0:	9108      	str	r1, [sp, #32]
 80044f2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80044f6:	9503      	str	r5, [sp, #12]
 80044f8:	f7fc f882 	bl	8000600 <__aeabi_dmul>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4640      	mov	r0, r8
 8004502:	4649      	mov	r1, r9
 8004504:	f7fb feca 	bl	800029c <__adddf3>
 8004508:	3701      	adds	r7, #1
 800450a:	4680      	mov	r8, r0
 800450c:	4689      	mov	r9, r1
 800450e:	9b04      	ldr	r3, [sp, #16]
 8004510:	429f      	cmp	r7, r3
 8004512:	dde9      	ble.n	80044e8 <__kernel_rem_pio2+0x98>
 8004514:	e8eb 8902 	strd	r8, r9, [fp], #8
 8004518:	3601      	adds	r6, #1
 800451a:	e7c9      	b.n	80044b0 <__kernel_rem_pio2+0x60>
 800451c:	9b00      	ldr	r3, [sp, #0]
 800451e:	9f00      	ldr	r7, [sp, #0]
 8004520:	aa0c      	add	r2, sp, #48	; 0x30
 8004522:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004526:	930b      	str	r3, [sp, #44]	; 0x2c
 8004528:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800452a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800452e:	930a      	str	r3, [sp, #40]	; 0x28
 8004530:	ab98      	add	r3, sp, #608	; 0x260
 8004532:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8004536:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800453a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800453e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8004542:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004546:	9308      	str	r3, [sp, #32]
 8004548:	9a08      	ldr	r2, [sp, #32]
 800454a:	ab98      	add	r3, sp, #608	; 0x260
 800454c:	4413      	add	r3, r2
 800454e:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8004552:	2600      	movs	r6, #0
 8004554:	1bbb      	subs	r3, r7, r6
 8004556:	2b00      	cmp	r3, #0
 8004558:	dc77      	bgt.n	800464a <__kernel_rem_pio2+0x1fa>
 800455a:	ec49 8b10 	vmov	d0, r8, r9
 800455e:	4650      	mov	r0, sl
 8004560:	f000 fc0a 	bl	8004d78 <scalbn>
 8004564:	ec55 4b10 	vmov	r4, r5, d0
 8004568:	2200      	movs	r2, #0
 800456a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800456e:	ee10 0a10 	vmov	r0, s0
 8004572:	4629      	mov	r1, r5
 8004574:	f7fc f844 	bl	8000600 <__aeabi_dmul>
 8004578:	ec41 0b10 	vmov	d0, r0, r1
 800457c:	f000 fb74 	bl	8004c68 <floor>
 8004580:	2200      	movs	r2, #0
 8004582:	ec51 0b10 	vmov	r0, r1, d0
 8004586:	4b7b      	ldr	r3, [pc, #492]	; (8004774 <__kernel_rem_pio2+0x324>)
 8004588:	f7fc f83a 	bl	8000600 <__aeabi_dmul>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4620      	mov	r0, r4
 8004592:	4629      	mov	r1, r5
 8004594:	f7fb fe80 	bl	8000298 <__aeabi_dsub>
 8004598:	460d      	mov	r5, r1
 800459a:	4604      	mov	r4, r0
 800459c:	f7fc fae0 	bl	8000b60 <__aeabi_d2iz>
 80045a0:	9003      	str	r0, [sp, #12]
 80045a2:	f7fb ffc7 	bl	8000534 <__aeabi_i2d>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4620      	mov	r0, r4
 80045ac:	4629      	mov	r1, r5
 80045ae:	f7fb fe73 	bl	8000298 <__aeabi_dsub>
 80045b2:	f1ba 0f00 	cmp.w	sl, #0
 80045b6:	4680      	mov	r8, r0
 80045b8:	4689      	mov	r9, r1
 80045ba:	dd6b      	ble.n	8004694 <__kernel_rem_pio2+0x244>
 80045bc:	1e7a      	subs	r2, r7, #1
 80045be:	ab0c      	add	r3, sp, #48	; 0x30
 80045c0:	f1ca 0118 	rsb	r1, sl, #24
 80045c4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80045c8:	9c03      	ldr	r4, [sp, #12]
 80045ca:	fa40 f301 	asr.w	r3, r0, r1
 80045ce:	441c      	add	r4, r3
 80045d0:	408b      	lsls	r3, r1
 80045d2:	1ac0      	subs	r0, r0, r3
 80045d4:	ab0c      	add	r3, sp, #48	; 0x30
 80045d6:	9403      	str	r4, [sp, #12]
 80045d8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80045dc:	f1ca 0317 	rsb	r3, sl, #23
 80045e0:	fa40 fb03 	asr.w	fp, r0, r3
 80045e4:	f1bb 0f00 	cmp.w	fp, #0
 80045e8:	dd62      	ble.n	80046b0 <__kernel_rem_pio2+0x260>
 80045ea:	9b03      	ldr	r3, [sp, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	3301      	adds	r3, #1
 80045f0:	9303      	str	r3, [sp, #12]
 80045f2:	4614      	mov	r4, r2
 80045f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80045f8:	4297      	cmp	r7, r2
 80045fa:	f300 8089 	bgt.w	8004710 <__kernel_rem_pio2+0x2c0>
 80045fe:	f1ba 0f00 	cmp.w	sl, #0
 8004602:	dd07      	ble.n	8004614 <__kernel_rem_pio2+0x1c4>
 8004604:	f1ba 0f01 	cmp.w	sl, #1
 8004608:	f000 8096 	beq.w	8004738 <__kernel_rem_pio2+0x2e8>
 800460c:	f1ba 0f02 	cmp.w	sl, #2
 8004610:	f000 809c 	beq.w	800474c <__kernel_rem_pio2+0x2fc>
 8004614:	f1bb 0f02 	cmp.w	fp, #2
 8004618:	d14a      	bne.n	80046b0 <__kernel_rem_pio2+0x260>
 800461a:	4642      	mov	r2, r8
 800461c:	464b      	mov	r3, r9
 800461e:	2000      	movs	r0, #0
 8004620:	4955      	ldr	r1, [pc, #340]	; (8004778 <__kernel_rem_pio2+0x328>)
 8004622:	f7fb fe39 	bl	8000298 <__aeabi_dsub>
 8004626:	4680      	mov	r8, r0
 8004628:	4689      	mov	r9, r1
 800462a:	2c00      	cmp	r4, #0
 800462c:	d040      	beq.n	80046b0 <__kernel_rem_pio2+0x260>
 800462e:	4650      	mov	r0, sl
 8004630:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8004768 <__kernel_rem_pio2+0x318>
 8004634:	f000 fba0 	bl	8004d78 <scalbn>
 8004638:	4640      	mov	r0, r8
 800463a:	4649      	mov	r1, r9
 800463c:	ec53 2b10 	vmov	r2, r3, d0
 8004640:	f7fb fe2a 	bl	8000298 <__aeabi_dsub>
 8004644:	4680      	mov	r8, r0
 8004646:	4689      	mov	r9, r1
 8004648:	e032      	b.n	80046b0 <__kernel_rem_pio2+0x260>
 800464a:	2200      	movs	r2, #0
 800464c:	4b4b      	ldr	r3, [pc, #300]	; (800477c <__kernel_rem_pio2+0x32c>)
 800464e:	4640      	mov	r0, r8
 8004650:	4649      	mov	r1, r9
 8004652:	f7fb ffd5 	bl	8000600 <__aeabi_dmul>
 8004656:	f7fc fa83 	bl	8000b60 <__aeabi_d2iz>
 800465a:	f7fb ff6b 	bl	8000534 <__aeabi_i2d>
 800465e:	2200      	movs	r2, #0
 8004660:	4b47      	ldr	r3, [pc, #284]	; (8004780 <__kernel_rem_pio2+0x330>)
 8004662:	4604      	mov	r4, r0
 8004664:	460d      	mov	r5, r1
 8004666:	f7fb ffcb 	bl	8000600 <__aeabi_dmul>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4640      	mov	r0, r8
 8004670:	4649      	mov	r1, r9
 8004672:	f7fb fe11 	bl	8000298 <__aeabi_dsub>
 8004676:	f7fc fa73 	bl	8000b60 <__aeabi_d2iz>
 800467a:	ab0c      	add	r3, sp, #48	; 0x30
 800467c:	4629      	mov	r1, r5
 800467e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8004682:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004686:	4620      	mov	r0, r4
 8004688:	f7fb fe08 	bl	800029c <__adddf3>
 800468c:	3601      	adds	r6, #1
 800468e:	4680      	mov	r8, r0
 8004690:	4689      	mov	r9, r1
 8004692:	e75f      	b.n	8004554 <__kernel_rem_pio2+0x104>
 8004694:	d106      	bne.n	80046a4 <__kernel_rem_pio2+0x254>
 8004696:	1e7b      	subs	r3, r7, #1
 8004698:	aa0c      	add	r2, sp, #48	; 0x30
 800469a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800469e:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80046a2:	e79f      	b.n	80045e4 <__kernel_rem_pio2+0x194>
 80046a4:	2200      	movs	r2, #0
 80046a6:	4b37      	ldr	r3, [pc, #220]	; (8004784 <__kernel_rem_pio2+0x334>)
 80046a8:	f7fc fa30 	bl	8000b0c <__aeabi_dcmpge>
 80046ac:	bb68      	cbnz	r0, 800470a <__kernel_rem_pio2+0x2ba>
 80046ae:	4683      	mov	fp, r0
 80046b0:	2200      	movs	r2, #0
 80046b2:	2300      	movs	r3, #0
 80046b4:	4640      	mov	r0, r8
 80046b6:	4649      	mov	r1, r9
 80046b8:	f7fc fa0a 	bl	8000ad0 <__aeabi_dcmpeq>
 80046bc:	2800      	cmp	r0, #0
 80046be:	f000 80c1 	beq.w	8004844 <__kernel_rem_pio2+0x3f4>
 80046c2:	1e7c      	subs	r4, r7, #1
 80046c4:	4623      	mov	r3, r4
 80046c6:	2200      	movs	r2, #0
 80046c8:	9900      	ldr	r1, [sp, #0]
 80046ca:	428b      	cmp	r3, r1
 80046cc:	da5c      	bge.n	8004788 <__kernel_rem_pio2+0x338>
 80046ce:	2a00      	cmp	r2, #0
 80046d0:	f040 808b 	bne.w	80047ea <__kernel_rem_pio2+0x39a>
 80046d4:	2401      	movs	r4, #1
 80046d6:	f06f 0203 	mvn.w	r2, #3
 80046da:	fb02 f304 	mul.w	r3, r2, r4
 80046de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046e0:	58cb      	ldr	r3, [r1, r3]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d056      	beq.n	8004794 <__kernel_rem_pio2+0x344>
 80046e6:	9b08      	ldr	r3, [sp, #32]
 80046e8:	aa98      	add	r2, sp, #608	; 0x260
 80046ea:	4413      	add	r3, r2
 80046ec:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 80046f0:	9b06      	ldr	r3, [sp, #24]
 80046f2:	19dd      	adds	r5, r3, r7
 80046f4:	ab20      	add	r3, sp, #128	; 0x80
 80046f6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80046fa:	19e3      	adds	r3, r4, r7
 80046fc:	1c7e      	adds	r6, r7, #1
 80046fe:	9303      	str	r3, [sp, #12]
 8004700:	9b03      	ldr	r3, [sp, #12]
 8004702:	429e      	cmp	r6, r3
 8004704:	dd48      	ble.n	8004798 <__kernel_rem_pio2+0x348>
 8004706:	461f      	mov	r7, r3
 8004708:	e712      	b.n	8004530 <__kernel_rem_pio2+0xe0>
 800470a:	f04f 0b02 	mov.w	fp, #2
 800470e:	e76c      	b.n	80045ea <__kernel_rem_pio2+0x19a>
 8004710:	ab0c      	add	r3, sp, #48	; 0x30
 8004712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004716:	b94c      	cbnz	r4, 800472c <__kernel_rem_pio2+0x2dc>
 8004718:	b12b      	cbz	r3, 8004726 <__kernel_rem_pio2+0x2d6>
 800471a:	a80c      	add	r0, sp, #48	; 0x30
 800471c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004720:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8004724:	2301      	movs	r3, #1
 8004726:	3201      	adds	r2, #1
 8004728:	461c      	mov	r4, r3
 800472a:	e765      	b.n	80045f8 <__kernel_rem_pio2+0x1a8>
 800472c:	a80c      	add	r0, sp, #48	; 0x30
 800472e:	1acb      	subs	r3, r1, r3
 8004730:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8004734:	4623      	mov	r3, r4
 8004736:	e7f6      	b.n	8004726 <__kernel_rem_pio2+0x2d6>
 8004738:	1e7a      	subs	r2, r7, #1
 800473a:	ab0c      	add	r3, sp, #48	; 0x30
 800473c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004740:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004744:	a90c      	add	r1, sp, #48	; 0x30
 8004746:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800474a:	e763      	b.n	8004614 <__kernel_rem_pio2+0x1c4>
 800474c:	1e7a      	subs	r2, r7, #1
 800474e:	ab0c      	add	r3, sp, #48	; 0x30
 8004750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004754:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004758:	e7f4      	b.n	8004744 <__kernel_rem_pio2+0x2f4>
 800475a:	bf00      	nop
 800475c:	f3af 8000 	nop.w
	...
 800476c:	3ff00000 	.word	0x3ff00000
 8004770:	08005378 	.word	0x08005378
 8004774:	40200000 	.word	0x40200000
 8004778:	3ff00000 	.word	0x3ff00000
 800477c:	3e700000 	.word	0x3e700000
 8004780:	41700000 	.word	0x41700000
 8004784:	3fe00000 	.word	0x3fe00000
 8004788:	a90c      	add	r1, sp, #48	; 0x30
 800478a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800478e:	3b01      	subs	r3, #1
 8004790:	430a      	orrs	r2, r1
 8004792:	e799      	b.n	80046c8 <__kernel_rem_pio2+0x278>
 8004794:	3401      	adds	r4, #1
 8004796:	e7a0      	b.n	80046da <__kernel_rem_pio2+0x28a>
 8004798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800479a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800479e:	f7fb fec9 	bl	8000534 <__aeabi_i2d>
 80047a2:	e8e5 0102 	strd	r0, r1, [r5], #8
 80047a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047a8:	9508      	str	r5, [sp, #32]
 80047aa:	461c      	mov	r4, r3
 80047ac:	2700      	movs	r7, #0
 80047ae:	f04f 0800 	mov.w	r8, #0
 80047b2:	f04f 0900 	mov.w	r9, #0
 80047b6:	9b04      	ldr	r3, [sp, #16]
 80047b8:	429f      	cmp	r7, r3
 80047ba:	dd03      	ble.n	80047c4 <__kernel_rem_pio2+0x374>
 80047bc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80047c0:	3601      	adds	r6, #1
 80047c2:	e79d      	b.n	8004700 <__kernel_rem_pio2+0x2b0>
 80047c4:	9908      	ldr	r1, [sp, #32]
 80047c6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80047ca:	9108      	str	r1, [sp, #32]
 80047cc:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80047d0:	f7fb ff16 	bl	8000600 <__aeabi_dmul>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4640      	mov	r0, r8
 80047da:	4649      	mov	r1, r9
 80047dc:	f7fb fd5e 	bl	800029c <__adddf3>
 80047e0:	3701      	adds	r7, #1
 80047e2:	4680      	mov	r8, r0
 80047e4:	4689      	mov	r9, r1
 80047e6:	e7e6      	b.n	80047b6 <__kernel_rem_pio2+0x366>
 80047e8:	3c01      	subs	r4, #1
 80047ea:	ab0c      	add	r3, sp, #48	; 0x30
 80047ec:	f1aa 0a18 	sub.w	sl, sl, #24
 80047f0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0f7      	beq.n	80047e8 <__kernel_rem_pio2+0x398>
 80047f8:	4650      	mov	r0, sl
 80047fa:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8004ad0 <__kernel_rem_pio2+0x680>
 80047fe:	f000 fabb 	bl	8004d78 <scalbn>
 8004802:	00e5      	lsls	r5, r4, #3
 8004804:	ab98      	add	r3, sp, #608	; 0x260
 8004806:	eb03 0905 	add.w	r9, r3, r5
 800480a:	ec57 6b10 	vmov	r6, r7, d0
 800480e:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8004812:	46a0      	mov	r8, r4
 8004814:	f1b8 0f00 	cmp.w	r8, #0
 8004818:	da4d      	bge.n	80048b6 <__kernel_rem_pio2+0x466>
 800481a:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8004ad8 <__kernel_rem_pio2+0x688>
 800481e:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8004822:	2300      	movs	r3, #0
 8004824:	9304      	str	r3, [sp, #16]
 8004826:	4657      	mov	r7, sl
 8004828:	9b04      	ldr	r3, [sp, #16]
 800482a:	ebb4 0903 	subs.w	r9, r4, r3
 800482e:	d476      	bmi.n	800491e <__kernel_rem_pio2+0x4ce>
 8004830:	4bab      	ldr	r3, [pc, #684]	; (8004ae0 <__kernel_rem_pio2+0x690>)
 8004832:	461e      	mov	r6, r3
 8004834:	ab70      	add	r3, sp, #448	; 0x1c0
 8004836:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800483a:	ed8d 8b06 	vstr	d8, [sp, #24]
 800483e:	f04f 0800 	mov.w	r8, #0
 8004842:	e05e      	b.n	8004902 <__kernel_rem_pio2+0x4b2>
 8004844:	f1ca 0000 	rsb	r0, sl, #0
 8004848:	ec49 8b10 	vmov	d0, r8, r9
 800484c:	f000 fa94 	bl	8004d78 <scalbn>
 8004850:	ec55 4b10 	vmov	r4, r5, d0
 8004854:	2200      	movs	r2, #0
 8004856:	4ba3      	ldr	r3, [pc, #652]	; (8004ae4 <__kernel_rem_pio2+0x694>)
 8004858:	ee10 0a10 	vmov	r0, s0
 800485c:	4629      	mov	r1, r5
 800485e:	f7fc f955 	bl	8000b0c <__aeabi_dcmpge>
 8004862:	b1f8      	cbz	r0, 80048a4 <__kernel_rem_pio2+0x454>
 8004864:	2200      	movs	r2, #0
 8004866:	4ba0      	ldr	r3, [pc, #640]	; (8004ae8 <__kernel_rem_pio2+0x698>)
 8004868:	4620      	mov	r0, r4
 800486a:	4629      	mov	r1, r5
 800486c:	f7fb fec8 	bl	8000600 <__aeabi_dmul>
 8004870:	f7fc f976 	bl	8000b60 <__aeabi_d2iz>
 8004874:	4606      	mov	r6, r0
 8004876:	f7fb fe5d 	bl	8000534 <__aeabi_i2d>
 800487a:	2200      	movs	r2, #0
 800487c:	4b99      	ldr	r3, [pc, #612]	; (8004ae4 <__kernel_rem_pio2+0x694>)
 800487e:	f7fb febf 	bl	8000600 <__aeabi_dmul>
 8004882:	460b      	mov	r3, r1
 8004884:	4602      	mov	r2, r0
 8004886:	4629      	mov	r1, r5
 8004888:	4620      	mov	r0, r4
 800488a:	f7fb fd05 	bl	8000298 <__aeabi_dsub>
 800488e:	f7fc f967 	bl	8000b60 <__aeabi_d2iz>
 8004892:	1c7c      	adds	r4, r7, #1
 8004894:	ab0c      	add	r3, sp, #48	; 0x30
 8004896:	f10a 0a18 	add.w	sl, sl, #24
 800489a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800489e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80048a2:	e7a9      	b.n	80047f8 <__kernel_rem_pio2+0x3a8>
 80048a4:	4620      	mov	r0, r4
 80048a6:	4629      	mov	r1, r5
 80048a8:	f7fc f95a 	bl	8000b60 <__aeabi_d2iz>
 80048ac:	ab0c      	add	r3, sp, #48	; 0x30
 80048ae:	463c      	mov	r4, r7
 80048b0:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80048b4:	e7a0      	b.n	80047f8 <__kernel_rem_pio2+0x3a8>
 80048b6:	ab0c      	add	r3, sp, #48	; 0x30
 80048b8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80048bc:	f7fb fe3a 	bl	8000534 <__aeabi_i2d>
 80048c0:	4632      	mov	r2, r6
 80048c2:	463b      	mov	r3, r7
 80048c4:	f7fb fe9c 	bl	8000600 <__aeabi_dmul>
 80048c8:	2200      	movs	r2, #0
 80048ca:	e969 0102 	strd	r0, r1, [r9, #-8]!
 80048ce:	4b86      	ldr	r3, [pc, #536]	; (8004ae8 <__kernel_rem_pio2+0x698>)
 80048d0:	4630      	mov	r0, r6
 80048d2:	4639      	mov	r1, r7
 80048d4:	f7fb fe94 	bl	8000600 <__aeabi_dmul>
 80048d8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80048dc:	4606      	mov	r6, r0
 80048de:	460f      	mov	r7, r1
 80048e0:	e798      	b.n	8004814 <__kernel_rem_pio2+0x3c4>
 80048e2:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80048e6:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80048ea:	f7fb fe89 	bl	8000600 <__aeabi_dmul>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048f6:	f7fb fcd1 	bl	800029c <__adddf3>
 80048fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80048fe:	f108 0801 	add.w	r8, r8, #1
 8004902:	9b00      	ldr	r3, [sp, #0]
 8004904:	4598      	cmp	r8, r3
 8004906:	dc02      	bgt.n	800490e <__kernel_rem_pio2+0x4be>
 8004908:	9b04      	ldr	r3, [sp, #16]
 800490a:	4598      	cmp	r8, r3
 800490c:	dde9      	ble.n	80048e2 <__kernel_rem_pio2+0x492>
 800490e:	9b04      	ldr	r3, [sp, #16]
 8004910:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004914:	3301      	adds	r3, #1
 8004916:	ecaa 7b02 	vstmia	sl!, {d7}
 800491a:	9304      	str	r3, [sp, #16]
 800491c:	e784      	b.n	8004828 <__kernel_rem_pio2+0x3d8>
 800491e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004920:	2b03      	cmp	r3, #3
 8004922:	d85d      	bhi.n	80049e0 <__kernel_rem_pio2+0x590>
 8004924:	e8df f003 	tbb	[pc, r3]
 8004928:	0226264b 	.word	0x0226264b
 800492c:	ab98      	add	r3, sp, #608	; 0x260
 800492e:	441d      	add	r5, r3
 8004930:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8004934:	462e      	mov	r6, r5
 8004936:	46a2      	mov	sl, r4
 8004938:	f1ba 0f00 	cmp.w	sl, #0
 800493c:	dc6e      	bgt.n	8004a1c <__kernel_rem_pio2+0x5cc>
 800493e:	462e      	mov	r6, r5
 8004940:	46a2      	mov	sl, r4
 8004942:	f1ba 0f01 	cmp.w	sl, #1
 8004946:	f300 808a 	bgt.w	8004a5e <__kernel_rem_pio2+0x60e>
 800494a:	2000      	movs	r0, #0
 800494c:	2100      	movs	r1, #0
 800494e:	2c01      	cmp	r4, #1
 8004950:	f300 80a6 	bgt.w	8004aa0 <__kernel_rem_pio2+0x650>
 8004954:	f1bb 0f00 	cmp.w	fp, #0
 8004958:	f040 80a8 	bne.w	8004aac <__kernel_rem_pio2+0x65c>
 800495c:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8004960:	9c02      	ldr	r4, [sp, #8]
 8004962:	e9c4 2300 	strd	r2, r3, [r4]
 8004966:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 800496a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800496e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004972:	e035      	b.n	80049e0 <__kernel_rem_pio2+0x590>
 8004974:	3508      	adds	r5, #8
 8004976:	ab48      	add	r3, sp, #288	; 0x120
 8004978:	441d      	add	r5, r3
 800497a:	4626      	mov	r6, r4
 800497c:	2000      	movs	r0, #0
 800497e:	2100      	movs	r1, #0
 8004980:	2e00      	cmp	r6, #0
 8004982:	da3c      	bge.n	80049fe <__kernel_rem_pio2+0x5ae>
 8004984:	f1bb 0f00 	cmp.w	fp, #0
 8004988:	d03f      	beq.n	8004a0a <__kernel_rem_pio2+0x5ba>
 800498a:	4602      	mov	r2, r0
 800498c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004990:	9d02      	ldr	r5, [sp, #8]
 8004992:	e9c5 2300 	strd	r2, r3, [r5]
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800499e:	f7fb fc7b 	bl	8000298 <__aeabi_dsub>
 80049a2:	ae4a      	add	r6, sp, #296	; 0x128
 80049a4:	2501      	movs	r5, #1
 80049a6:	42ac      	cmp	r4, r5
 80049a8:	da32      	bge.n	8004a10 <__kernel_rem_pio2+0x5c0>
 80049aa:	f1bb 0f00 	cmp.w	fp, #0
 80049ae:	d002      	beq.n	80049b6 <__kernel_rem_pio2+0x566>
 80049b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049b4:	4619      	mov	r1, r3
 80049b6:	9b02      	ldr	r3, [sp, #8]
 80049b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80049bc:	e010      	b.n	80049e0 <__kernel_rem_pio2+0x590>
 80049be:	ab98      	add	r3, sp, #608	; 0x260
 80049c0:	441d      	add	r5, r3
 80049c2:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 80049c6:	2000      	movs	r0, #0
 80049c8:	2100      	movs	r1, #0
 80049ca:	2c00      	cmp	r4, #0
 80049cc:	da11      	bge.n	80049f2 <__kernel_rem_pio2+0x5a2>
 80049ce:	f1bb 0f00 	cmp.w	fp, #0
 80049d2:	d002      	beq.n	80049da <__kernel_rem_pio2+0x58a>
 80049d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049d8:	4619      	mov	r1, r3
 80049da:	9b02      	ldr	r3, [sp, #8]
 80049dc:	e9c3 0100 	strd	r0, r1, [r3]
 80049e0:	9b03      	ldr	r3, [sp, #12]
 80049e2:	f003 0007 	and.w	r0, r3, #7
 80049e6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80049ea:	ecbd 8b02 	vpop	{d8}
 80049ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80049f6:	f7fb fc51 	bl	800029c <__adddf3>
 80049fa:	3c01      	subs	r4, #1
 80049fc:	e7e5      	b.n	80049ca <__kernel_rem_pio2+0x57a>
 80049fe:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004a02:	f7fb fc4b 	bl	800029c <__adddf3>
 8004a06:	3e01      	subs	r6, #1
 8004a08:	e7ba      	b.n	8004980 <__kernel_rem_pio2+0x530>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	e7bf      	b.n	8004990 <__kernel_rem_pio2+0x540>
 8004a10:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004a14:	f7fb fc42 	bl	800029c <__adddf3>
 8004a18:	3501      	adds	r5, #1
 8004a1a:	e7c4      	b.n	80049a6 <__kernel_rem_pio2+0x556>
 8004a1c:	ed16 7b02 	vldr	d7, [r6, #-8]
 8004a20:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8004a24:	ec53 2b17 	vmov	r2, r3, d7
 8004a28:	4640      	mov	r0, r8
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	ed8d 7b00 	vstr	d7, [sp]
 8004a30:	f7fb fc34 	bl	800029c <__adddf3>
 8004a34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4640      	mov	r0, r8
 8004a3e:	4649      	mov	r1, r9
 8004a40:	f7fb fc2a 	bl	8000298 <__aeabi_dsub>
 8004a44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a48:	f7fb fc28 	bl	800029c <__adddf3>
 8004a4c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004a50:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8004a54:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004a58:	ed06 7b02 	vstr	d7, [r6, #-8]
 8004a5c:	e76c      	b.n	8004938 <__kernel_rem_pio2+0x4e8>
 8004a5e:	ed16 7b02 	vldr	d7, [r6, #-8]
 8004a62:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8004a66:	ec53 2b17 	vmov	r2, r3, d7
 8004a6a:	4640      	mov	r0, r8
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	ed8d 7b00 	vstr	d7, [sp]
 8004a72:	f7fb fc13 	bl	800029c <__adddf3>
 8004a76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4640      	mov	r0, r8
 8004a80:	4649      	mov	r1, r9
 8004a82:	f7fb fc09 	bl	8000298 <__aeabi_dsub>
 8004a86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a8a:	f7fb fc07 	bl	800029c <__adddf3>
 8004a8e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004a92:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8004a96:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004a9a:	ed06 7b02 	vstr	d7, [r6, #-8]
 8004a9e:	e750      	b.n	8004942 <__kernel_rem_pio2+0x4f2>
 8004aa0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004aa4:	f7fb fbfa 	bl	800029c <__adddf3>
 8004aa8:	3c01      	subs	r4, #1
 8004aaa:	e750      	b.n	800494e <__kernel_rem_pio2+0x4fe>
 8004aac:	9a02      	ldr	r2, [sp, #8]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6110      	str	r0, [r2, #16]
 8004ab6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004aba:	6053      	str	r3, [r2, #4]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	6093      	str	r3, [r2, #8]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004ac6:	60d3      	str	r3, [r2, #12]
 8004ac8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004acc:	6153      	str	r3, [r2, #20]
 8004ace:	e787      	b.n	80049e0 <__kernel_rem_pio2+0x590>
 8004ad0:	00000000 	.word	0x00000000
 8004ad4:	3ff00000 	.word	0x3ff00000
	...
 8004ae0:	08005338 	.word	0x08005338
 8004ae4:	41700000 	.word	0x41700000
 8004ae8:	3e700000 	.word	0x3e700000
 8004aec:	00000000 	.word	0x00000000

08004af0 <__kernel_sin>:
 8004af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af4:	ec55 4b10 	vmov	r4, r5, d0
 8004af8:	b085      	sub	sp, #20
 8004afa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004afe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004b02:	ed8d 1b00 	vstr	d1, [sp]
 8004b06:	9002      	str	r0, [sp, #8]
 8004b08:	da06      	bge.n	8004b18 <__kernel_sin+0x28>
 8004b0a:	ee10 0a10 	vmov	r0, s0
 8004b0e:	4629      	mov	r1, r5
 8004b10:	f7fc f826 	bl	8000b60 <__aeabi_d2iz>
 8004b14:	2800      	cmp	r0, #0
 8004b16:	d051      	beq.n	8004bbc <__kernel_sin+0xcc>
 8004b18:	4622      	mov	r2, r4
 8004b1a:	462b      	mov	r3, r5
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	4629      	mov	r1, r5
 8004b20:	f7fb fd6e 	bl	8000600 <__aeabi_dmul>
 8004b24:	4682      	mov	sl, r0
 8004b26:	468b      	mov	fp, r1
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	4629      	mov	r1, r5
 8004b30:	f7fb fd66 	bl	8000600 <__aeabi_dmul>
 8004b34:	a341      	add	r3, pc, #260	; (adr r3, 8004c3c <__kernel_sin+0x14c>)
 8004b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3a:	4680      	mov	r8, r0
 8004b3c:	4689      	mov	r9, r1
 8004b3e:	4650      	mov	r0, sl
 8004b40:	4659      	mov	r1, fp
 8004b42:	f7fb fd5d 	bl	8000600 <__aeabi_dmul>
 8004b46:	a33f      	add	r3, pc, #252	; (adr r3, 8004c44 <__kernel_sin+0x154>)
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	f7fb fba4 	bl	8000298 <__aeabi_dsub>
 8004b50:	4652      	mov	r2, sl
 8004b52:	465b      	mov	r3, fp
 8004b54:	f7fb fd54 	bl	8000600 <__aeabi_dmul>
 8004b58:	a33c      	add	r3, pc, #240	; (adr r3, 8004c4c <__kernel_sin+0x15c>)
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	f7fb fb9d 	bl	800029c <__adddf3>
 8004b62:	4652      	mov	r2, sl
 8004b64:	465b      	mov	r3, fp
 8004b66:	f7fb fd4b 	bl	8000600 <__aeabi_dmul>
 8004b6a:	a33a      	add	r3, pc, #232	; (adr r3, 8004c54 <__kernel_sin+0x164>)
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	f7fb fb92 	bl	8000298 <__aeabi_dsub>
 8004b74:	4652      	mov	r2, sl
 8004b76:	465b      	mov	r3, fp
 8004b78:	f7fb fd42 	bl	8000600 <__aeabi_dmul>
 8004b7c:	a337      	add	r3, pc, #220	; (adr r3, 8004c5c <__kernel_sin+0x16c>)
 8004b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b82:	f7fb fb8b 	bl	800029c <__adddf3>
 8004b86:	9b02      	ldr	r3, [sp, #8]
 8004b88:	4606      	mov	r6, r0
 8004b8a:	460f      	mov	r7, r1
 8004b8c:	b9db      	cbnz	r3, 8004bc6 <__kernel_sin+0xd6>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4650      	mov	r0, sl
 8004b94:	4659      	mov	r1, fp
 8004b96:	f7fb fd33 	bl	8000600 <__aeabi_dmul>
 8004b9a:	a325      	add	r3, pc, #148	; (adr r3, 8004c30 <__kernel_sin+0x140>)
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	f7fb fb7a 	bl	8000298 <__aeabi_dsub>
 8004ba4:	4642      	mov	r2, r8
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	f7fb fd2a 	bl	8000600 <__aeabi_dmul>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	f7fb fb72 	bl	800029c <__adddf3>
 8004bb8:	4604      	mov	r4, r0
 8004bba:	460d      	mov	r5, r1
 8004bbc:	ec45 4b10 	vmov	d0, r4, r5
 8004bc0:	b005      	add	sp, #20
 8004bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	4b1b      	ldr	r3, [pc, #108]	; (8004c38 <__kernel_sin+0x148>)
 8004bca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004bce:	f7fb fd17 	bl	8000600 <__aeabi_dmul>
 8004bd2:	4632      	mov	r2, r6
 8004bd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bd8:	463b      	mov	r3, r7
 8004bda:	4640      	mov	r0, r8
 8004bdc:	4649      	mov	r1, r9
 8004bde:	f7fb fd0f 	bl	8000600 <__aeabi_dmul>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bea:	f7fb fb55 	bl	8000298 <__aeabi_dsub>
 8004bee:	4652      	mov	r2, sl
 8004bf0:	465b      	mov	r3, fp
 8004bf2:	f7fb fd05 	bl	8000600 <__aeabi_dmul>
 8004bf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bfa:	f7fb fb4d 	bl	8000298 <__aeabi_dsub>
 8004bfe:	a30c      	add	r3, pc, #48	; (adr r3, 8004c30 <__kernel_sin+0x140>)
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	4606      	mov	r6, r0
 8004c06:	460f      	mov	r7, r1
 8004c08:	4640      	mov	r0, r8
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	f7fb fcf8 	bl	8000600 <__aeabi_dmul>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4630      	mov	r0, r6
 8004c16:	4639      	mov	r1, r7
 8004c18:	f7fb fb40 	bl	800029c <__adddf3>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4620      	mov	r0, r4
 8004c22:	4629      	mov	r1, r5
 8004c24:	f7fb fb38 	bl	8000298 <__aeabi_dsub>
 8004c28:	e7c6      	b.n	8004bb8 <__kernel_sin+0xc8>
 8004c2a:	bf00      	nop
 8004c2c:	f3af 8000 	nop.w
 8004c30:	55555549 	.word	0x55555549
 8004c34:	3fc55555 	.word	0x3fc55555
 8004c38:	3fe00000 	.word	0x3fe00000
 8004c3c:	5acfd57c 	.word	0x5acfd57c
 8004c40:	3de5d93a 	.word	0x3de5d93a
 8004c44:	8a2b9ceb 	.word	0x8a2b9ceb
 8004c48:	3e5ae5e6 	.word	0x3e5ae5e6
 8004c4c:	57b1fe7d 	.word	0x57b1fe7d
 8004c50:	3ec71de3 	.word	0x3ec71de3
 8004c54:	19c161d5 	.word	0x19c161d5
 8004c58:	3f2a01a0 	.word	0x3f2a01a0
 8004c5c:	1110f8a6 	.word	0x1110f8a6
 8004c60:	3f811111 	.word	0x3f811111
 8004c64:	00000000 	.word	0x00000000

08004c68 <floor>:
 8004c68:	ec51 0b10 	vmov	r0, r1, d0
 8004c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c70:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004c74:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004c78:	2e13      	cmp	r6, #19
 8004c7a:	ee10 8a10 	vmov	r8, s0
 8004c7e:	460c      	mov	r4, r1
 8004c80:	ee10 5a10 	vmov	r5, s0
 8004c84:	dc35      	bgt.n	8004cf2 <floor+0x8a>
 8004c86:	2e00      	cmp	r6, #0
 8004c88:	da17      	bge.n	8004cba <floor+0x52>
 8004c8a:	a335      	add	r3, pc, #212	; (adr r3, 8004d60 <floor+0xf8>)
 8004c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c90:	f7fb fb04 	bl	800029c <__adddf3>
 8004c94:	2200      	movs	r2, #0
 8004c96:	2300      	movs	r3, #0
 8004c98:	f7fb ff42 	bl	8000b20 <__aeabi_dcmpgt>
 8004c9c:	b150      	cbz	r0, 8004cb4 <floor+0x4c>
 8004c9e:	2c00      	cmp	r4, #0
 8004ca0:	da5a      	bge.n	8004d58 <floor+0xf0>
 8004ca2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004ca6:	ea53 0308 	orrs.w	r3, r3, r8
 8004caa:	4b2f      	ldr	r3, [pc, #188]	; (8004d68 <floor+0x100>)
 8004cac:	f04f 0500 	mov.w	r5, #0
 8004cb0:	bf18      	it	ne
 8004cb2:	461c      	movne	r4, r3
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	e025      	b.n	8004d06 <floor+0x9e>
 8004cba:	4f2c      	ldr	r7, [pc, #176]	; (8004d6c <floor+0x104>)
 8004cbc:	4137      	asrs	r7, r6
 8004cbe:	ea01 0307 	and.w	r3, r1, r7
 8004cc2:	4303      	orrs	r3, r0
 8004cc4:	d01f      	beq.n	8004d06 <floor+0x9e>
 8004cc6:	a326      	add	r3, pc, #152	; (adr r3, 8004d60 <floor+0xf8>)
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	f7fb fae6 	bl	800029c <__adddf3>
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f7fb ff24 	bl	8000b20 <__aeabi_dcmpgt>
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	d0eb      	beq.n	8004cb4 <floor+0x4c>
 8004cdc:	2c00      	cmp	r4, #0
 8004cde:	bfbe      	ittt	lt
 8004ce0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004ce4:	fa43 f606 	asrlt.w	r6, r3, r6
 8004ce8:	19a4      	addlt	r4, r4, r6
 8004cea:	ea24 0407 	bic.w	r4, r4, r7
 8004cee:	2500      	movs	r5, #0
 8004cf0:	e7e0      	b.n	8004cb4 <floor+0x4c>
 8004cf2:	2e33      	cmp	r6, #51	; 0x33
 8004cf4:	dd0b      	ble.n	8004d0e <floor+0xa6>
 8004cf6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004cfa:	d104      	bne.n	8004d06 <floor+0x9e>
 8004cfc:	ee10 2a10 	vmov	r2, s0
 8004d00:	460b      	mov	r3, r1
 8004d02:	f7fb facb 	bl	800029c <__adddf3>
 8004d06:	ec41 0b10 	vmov	d0, r0, r1
 8004d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d0e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d16:	fa23 f707 	lsr.w	r7, r3, r7
 8004d1a:	4238      	tst	r0, r7
 8004d1c:	d0f3      	beq.n	8004d06 <floor+0x9e>
 8004d1e:	a310      	add	r3, pc, #64	; (adr r3, 8004d60 <floor+0xf8>)
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	f7fb faba 	bl	800029c <__adddf3>
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f7fb fef8 	bl	8000b20 <__aeabi_dcmpgt>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d0bf      	beq.n	8004cb4 <floor+0x4c>
 8004d34:	2c00      	cmp	r4, #0
 8004d36:	da02      	bge.n	8004d3e <floor+0xd6>
 8004d38:	2e14      	cmp	r6, #20
 8004d3a:	d103      	bne.n	8004d44 <floor+0xdc>
 8004d3c:	3401      	adds	r4, #1
 8004d3e:	ea25 0507 	bic.w	r5, r5, r7
 8004d42:	e7b7      	b.n	8004cb4 <floor+0x4c>
 8004d44:	2301      	movs	r3, #1
 8004d46:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004d4a:	fa03 f606 	lsl.w	r6, r3, r6
 8004d4e:	4435      	add	r5, r6
 8004d50:	45a8      	cmp	r8, r5
 8004d52:	bf88      	it	hi
 8004d54:	18e4      	addhi	r4, r4, r3
 8004d56:	e7f2      	b.n	8004d3e <floor+0xd6>
 8004d58:	2500      	movs	r5, #0
 8004d5a:	462c      	mov	r4, r5
 8004d5c:	e7aa      	b.n	8004cb4 <floor+0x4c>
 8004d5e:	bf00      	nop
 8004d60:	8800759c 	.word	0x8800759c
 8004d64:	7e37e43c 	.word	0x7e37e43c
 8004d68:	bff00000 	.word	0xbff00000
 8004d6c:	000fffff 	.word	0x000fffff

08004d70 <matherr>:
 8004d70:	2000      	movs	r0, #0
 8004d72:	4770      	bx	lr
 8004d74:	0000      	movs	r0, r0
	...

08004d78 <scalbn>:
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	ec55 4b10 	vmov	r4, r5, d0
 8004d7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004d82:	4606      	mov	r6, r0
 8004d84:	462b      	mov	r3, r5
 8004d86:	b9b2      	cbnz	r2, 8004db6 <scalbn+0x3e>
 8004d88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004d8c:	4323      	orrs	r3, r4
 8004d8e:	d03c      	beq.n	8004e0a <scalbn+0x92>
 8004d90:	2200      	movs	r2, #0
 8004d92:	4b33      	ldr	r3, [pc, #204]	; (8004e60 <scalbn+0xe8>)
 8004d94:	4629      	mov	r1, r5
 8004d96:	ee10 0a10 	vmov	r0, s0
 8004d9a:	f7fb fc31 	bl	8000600 <__aeabi_dmul>
 8004d9e:	4a31      	ldr	r2, [pc, #196]	; (8004e64 <scalbn+0xec>)
 8004da0:	4296      	cmp	r6, r2
 8004da2:	4604      	mov	r4, r0
 8004da4:	460d      	mov	r5, r1
 8004da6:	460b      	mov	r3, r1
 8004da8:	da13      	bge.n	8004dd2 <scalbn+0x5a>
 8004daa:	a329      	add	r3, pc, #164	; (adr r3, 8004e50 <scalbn+0xd8>)
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	f7fb fc26 	bl	8000600 <__aeabi_dmul>
 8004db4:	e00a      	b.n	8004dcc <scalbn+0x54>
 8004db6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8004dba:	428a      	cmp	r2, r1
 8004dbc:	d10c      	bne.n	8004dd8 <scalbn+0x60>
 8004dbe:	ee10 2a10 	vmov	r2, s0
 8004dc2:	462b      	mov	r3, r5
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	f7fb fa68 	bl	800029c <__adddf3>
 8004dcc:	4604      	mov	r4, r0
 8004dce:	460d      	mov	r5, r1
 8004dd0:	e01b      	b.n	8004e0a <scalbn+0x92>
 8004dd2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004dd6:	3a36      	subs	r2, #54	; 0x36
 8004dd8:	4432      	add	r2, r6
 8004dda:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004dde:	428a      	cmp	r2, r1
 8004de0:	dd0b      	ble.n	8004dfa <scalbn+0x82>
 8004de2:	ec45 4b11 	vmov	d1, r4, r5
 8004de6:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8004e58 <scalbn+0xe0>
 8004dea:	f000 f83f 	bl	8004e6c <copysign>
 8004dee:	a31a      	add	r3, pc, #104	; (adr r3, 8004e58 <scalbn+0xe0>)
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	ec51 0b10 	vmov	r0, r1, d0
 8004df8:	e7da      	b.n	8004db0 <scalbn+0x38>
 8004dfa:	2a00      	cmp	r2, #0
 8004dfc:	dd08      	ble.n	8004e10 <scalbn+0x98>
 8004dfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004e02:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004e06:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004e0a:	ec45 4b10 	vmov	d0, r4, r5
 8004e0e:	bd70      	pop	{r4, r5, r6, pc}
 8004e10:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004e14:	da0d      	bge.n	8004e32 <scalbn+0xba>
 8004e16:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004e1a:	429e      	cmp	r6, r3
 8004e1c:	ec45 4b11 	vmov	d1, r4, r5
 8004e20:	dce1      	bgt.n	8004de6 <scalbn+0x6e>
 8004e22:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8004e50 <scalbn+0xd8>
 8004e26:	f000 f821 	bl	8004e6c <copysign>
 8004e2a:	a309      	add	r3, pc, #36	; (adr r3, 8004e50 <scalbn+0xd8>)
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	e7e0      	b.n	8004df4 <scalbn+0x7c>
 8004e32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004e36:	3236      	adds	r2, #54	; 0x36
 8004e38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004e3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004e40:	4620      	mov	r0, r4
 8004e42:	4629      	mov	r1, r5
 8004e44:	2200      	movs	r2, #0
 8004e46:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <scalbn+0xf0>)
 8004e48:	e7b2      	b.n	8004db0 <scalbn+0x38>
 8004e4a:	bf00      	nop
 8004e4c:	f3af 8000 	nop.w
 8004e50:	c2f8f359 	.word	0xc2f8f359
 8004e54:	01a56e1f 	.word	0x01a56e1f
 8004e58:	8800759c 	.word	0x8800759c
 8004e5c:	7e37e43c 	.word	0x7e37e43c
 8004e60:	43500000 	.word	0x43500000
 8004e64:	ffff3cb0 	.word	0xffff3cb0
 8004e68:	3c900000 	.word	0x3c900000

08004e6c <copysign>:
 8004e6c:	ec53 2b10 	vmov	r2, r3, d0
 8004e70:	ee11 0a90 	vmov	r0, s3
 8004e74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004e78:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8004e7c:	ea41 0300 	orr.w	r3, r1, r0
 8004e80:	ec43 2b10 	vmov	d0, r2, r3
 8004e84:	4770      	bx	lr
	...

08004e88 <_init>:
 8004e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8a:	bf00      	nop
 8004e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8e:	bc08      	pop	{r3}
 8004e90:	469e      	mov	lr, r3
 8004e92:	4770      	bx	lr

08004e94 <_fini>:
 8004e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e96:	bf00      	nop
 8004e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9a:	bc08      	pop	{r3}
 8004e9c:	469e      	mov	lr, r3
 8004e9e:	4770      	bx	lr
