
rover_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004680  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  08004820  08004820  00014820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004cc0  08004cc0  00014cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004ccc  08004ccc  00014ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001fc  20000000  08004cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000160  200001fc  08004ecc  000201fc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000035c  08004ecc  0002035c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000db5c  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001f47  00000000  00000000  0002dd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006245  00000000  00000000  0002fccf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000978  00000000  00000000  00035f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bc8  00000000  00000000  00036890  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004475  00000000  00000000  00037458  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003cb5  00000000  00000000  0003b8cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003f582  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002500  00000000  00000000  0003f600  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004808 	.word	0x08004808

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	08004808 	.word	0x08004808

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2iz>:
 8000b34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b3c:	d215      	bcs.n	8000b6a <__aeabi_d2iz+0x36>
 8000b3e:	d511      	bpl.n	8000b64 <__aeabi_d2iz+0x30>
 8000b40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d912      	bls.n	8000b70 <__aeabi_d2iz+0x3c>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d105      	bne.n	8000b7c <__aeabi_d2iz+0x48>
 8000b70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	bf08      	it	eq
 8000b76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__aeabi_uldivmod>:
 8000b84:	b953      	cbnz	r3, 8000b9c <__aeabi_uldivmod+0x18>
 8000b86:	b94a      	cbnz	r2, 8000b9c <__aeabi_uldivmod+0x18>
 8000b88:	2900      	cmp	r1, #0
 8000b8a:	bf08      	it	eq
 8000b8c:	2800      	cmpeq	r0, #0
 8000b8e:	bf1c      	itt	ne
 8000b90:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b94:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b98:	f000 b97a 	b.w	8000e90 <__aeabi_idiv0>
 8000b9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba4:	f000 f806 	bl	8000bb4 <__udivmoddi4>
 8000ba8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb0:	b004      	add	sp, #16
 8000bb2:	4770      	bx	lr

08000bb4 <__udivmoddi4>:
 8000bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb8:	468c      	mov	ip, r1
 8000bba:	460d      	mov	r5, r1
 8000bbc:	4604      	mov	r4, r0
 8000bbe:	9e08      	ldr	r6, [sp, #32]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d151      	bne.n	8000c68 <__udivmoddi4+0xb4>
 8000bc4:	428a      	cmp	r2, r1
 8000bc6:	4617      	mov	r7, r2
 8000bc8:	d96d      	bls.n	8000ca6 <__udivmoddi4+0xf2>
 8000bca:	fab2 fe82 	clz	lr, r2
 8000bce:	f1be 0f00 	cmp.w	lr, #0
 8000bd2:	d00b      	beq.n	8000bec <__udivmoddi4+0x38>
 8000bd4:	f1ce 0c20 	rsb	ip, lr, #32
 8000bd8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bdc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000be0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000be4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000be8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bec:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000bf0:	0c25      	lsrs	r5, r4, #16
 8000bf2:	fbbc f8fa 	udiv	r8, ip, sl
 8000bf6:	fa1f f987 	uxth.w	r9, r7
 8000bfa:	fb0a cc18 	mls	ip, sl, r8, ip
 8000bfe:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c02:	fb08 f309 	mul.w	r3, r8, r9
 8000c06:	42ab      	cmp	r3, r5
 8000c08:	d90a      	bls.n	8000c20 <__udivmoddi4+0x6c>
 8000c0a:	19ed      	adds	r5, r5, r7
 8000c0c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c10:	f080 8123 	bcs.w	8000e5a <__udivmoddi4+0x2a6>
 8000c14:	42ab      	cmp	r3, r5
 8000c16:	f240 8120 	bls.w	8000e5a <__udivmoddi4+0x2a6>
 8000c1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c1e:	443d      	add	r5, r7
 8000c20:	1aed      	subs	r5, r5, r3
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c28:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c30:	fb00 f909 	mul.w	r9, r0, r9
 8000c34:	45a1      	cmp	r9, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x98>
 8000c38:	19e4      	adds	r4, r4, r7
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 810a 	bcs.w	8000e56 <__udivmoddi4+0x2a2>
 8000c42:	45a1      	cmp	r9, r4
 8000c44:	f240 8107 	bls.w	8000e56 <__udivmoddi4+0x2a2>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	eba4 0409 	sub.w	r4, r4, r9
 8000c50:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c54:	2100      	movs	r1, #0
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	d061      	beq.n	8000d1e <__udivmoddi4+0x16a>
 8000c5a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c5e:	2300      	movs	r3, #0
 8000c60:	6034      	str	r4, [r6, #0]
 8000c62:	6073      	str	r3, [r6, #4]
 8000c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0xc8>
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d054      	beq.n	8000d1a <__udivmoddi4+0x166>
 8000c70:	2100      	movs	r1, #0
 8000c72:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c76:	4608      	mov	r0, r1
 8000c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7c:	fab3 f183 	clz	r1, r3
 8000c80:	2900      	cmp	r1, #0
 8000c82:	f040 808e 	bne.w	8000da2 <__udivmoddi4+0x1ee>
 8000c86:	42ab      	cmp	r3, r5
 8000c88:	d302      	bcc.n	8000c90 <__udivmoddi4+0xdc>
 8000c8a:	4282      	cmp	r2, r0
 8000c8c:	f200 80fa 	bhi.w	8000e84 <__udivmoddi4+0x2d0>
 8000c90:	1a84      	subs	r4, r0, r2
 8000c92:	eb65 0503 	sbc.w	r5, r5, r3
 8000c96:	2001      	movs	r0, #1
 8000c98:	46ac      	mov	ip, r5
 8000c9a:	2e00      	cmp	r6, #0
 8000c9c:	d03f      	beq.n	8000d1e <__udivmoddi4+0x16a>
 8000c9e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	b912      	cbnz	r2, 8000cae <__udivmoddi4+0xfa>
 8000ca8:	2701      	movs	r7, #1
 8000caa:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cae:	fab7 fe87 	clz	lr, r7
 8000cb2:	f1be 0f00 	cmp.w	lr, #0
 8000cb6:	d134      	bne.n	8000d22 <__udivmoddi4+0x16e>
 8000cb8:	1beb      	subs	r3, r5, r7
 8000cba:	0c3a      	lsrs	r2, r7, #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cc6:	0c25      	lsrs	r5, r4, #16
 8000cc8:	fb02 3318 	mls	r3, r2, r8, r3
 8000ccc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cd0:	fb0c f308 	mul.w	r3, ip, r8
 8000cd4:	42ab      	cmp	r3, r5
 8000cd6:	d907      	bls.n	8000ce8 <__udivmoddi4+0x134>
 8000cd8:	19ed      	adds	r5, r5, r7
 8000cda:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000cde:	d202      	bcs.n	8000ce6 <__udivmoddi4+0x132>
 8000ce0:	42ab      	cmp	r3, r5
 8000ce2:	f200 80d1 	bhi.w	8000e88 <__udivmoddi4+0x2d4>
 8000ce6:	4680      	mov	r8, r0
 8000ce8:	1aed      	subs	r5, r5, r3
 8000cea:	b2a3      	uxth	r3, r4
 8000cec:	fbb5 f0f2 	udiv	r0, r5, r2
 8000cf0:	fb02 5510 	mls	r5, r2, r0, r5
 8000cf4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000cf8:	fb0c fc00 	mul.w	ip, ip, r0
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d907      	bls.n	8000d10 <__udivmoddi4+0x15c>
 8000d00:	19e4      	adds	r4, r4, r7
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x15a>
 8000d08:	45a4      	cmp	ip, r4
 8000d0a:	f200 80b8 	bhi.w	8000e7e <__udivmoddi4+0x2ca>
 8000d0e:	4618      	mov	r0, r3
 8000d10:	eba4 040c 	sub.w	r4, r4, ip
 8000d14:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d18:	e79d      	b.n	8000c56 <__udivmoddi4+0xa2>
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	f1ce 0420 	rsb	r4, lr, #32
 8000d26:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d2a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d2e:	fa20 f804 	lsr.w	r8, r0, r4
 8000d32:	0c3a      	lsrs	r2, r7, #16
 8000d34:	fa25 f404 	lsr.w	r4, r5, r4
 8000d38:	ea48 0803 	orr.w	r8, r8, r3
 8000d3c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d40:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d44:	fb02 4411 	mls	r4, r2, r1, r4
 8000d48:	fa1f fc87 	uxth.w	ip, r7
 8000d4c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d50:	fb01 f30c 	mul.w	r3, r1, ip
 8000d54:	42ab      	cmp	r3, r5
 8000d56:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d5a:	d909      	bls.n	8000d70 <__udivmoddi4+0x1bc>
 8000d5c:	19ed      	adds	r5, r5, r7
 8000d5e:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d62:	f080 808a 	bcs.w	8000e7a <__udivmoddi4+0x2c6>
 8000d66:	42ab      	cmp	r3, r5
 8000d68:	f240 8087 	bls.w	8000e7a <__udivmoddi4+0x2c6>
 8000d6c:	3902      	subs	r1, #2
 8000d6e:	443d      	add	r5, r7
 8000d70:	1aeb      	subs	r3, r5, r3
 8000d72:	fa1f f588 	uxth.w	r5, r8
 8000d76:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d7a:	fb02 3310 	mls	r3, r2, r0, r3
 8000d7e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d82:	fb00 f30c 	mul.w	r3, r0, ip
 8000d86:	42ab      	cmp	r3, r5
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x1e6>
 8000d8a:	19ed      	adds	r5, r5, r7
 8000d8c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d90:	d26f      	bcs.n	8000e72 <__udivmoddi4+0x2be>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	d96d      	bls.n	8000e72 <__udivmoddi4+0x2be>
 8000d96:	3802      	subs	r0, #2
 8000d98:	443d      	add	r5, r7
 8000d9a:	1aeb      	subs	r3, r5, r3
 8000d9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da0:	e78f      	b.n	8000cc2 <__udivmoddi4+0x10e>
 8000da2:	f1c1 0720 	rsb	r7, r1, #32
 8000da6:	fa22 f807 	lsr.w	r8, r2, r7
 8000daa:	408b      	lsls	r3, r1
 8000dac:	fa05 f401 	lsl.w	r4, r5, r1
 8000db0:	ea48 0303 	orr.w	r3, r8, r3
 8000db4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000db8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dbc:	40fd      	lsrs	r5, r7
 8000dbe:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dc2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000dc6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000dca:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dce:	fa1f f883 	uxth.w	r8, r3
 8000dd2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000dd6:	fb09 f408 	mul.w	r4, r9, r8
 8000dda:	42ac      	cmp	r4, r5
 8000ddc:	fa02 f201 	lsl.w	r2, r2, r1
 8000de0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x244>
 8000de6:	18ed      	adds	r5, r5, r3
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d243      	bcs.n	8000e76 <__udivmoddi4+0x2c2>
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	d941      	bls.n	8000e76 <__udivmoddi4+0x2c2>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	441d      	add	r5, r3
 8000df8:	1b2d      	subs	r5, r5, r4
 8000dfa:	fa1f fe8e 	uxth.w	lr, lr
 8000dfe:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e02:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e06:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45a0      	cmp	r8, r4
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x26e>
 8000e12:	18e4      	adds	r4, r4, r3
 8000e14:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e18:	d229      	bcs.n	8000e6e <__udivmoddi4+0x2ba>
 8000e1a:	45a0      	cmp	r8, r4
 8000e1c:	d927      	bls.n	8000e6e <__udivmoddi4+0x2ba>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	441c      	add	r4, r3
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba4 0408 	sub.w	r4, r4, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454c      	cmp	r4, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	464d      	mov	r5, r9
 8000e34:	d315      	bcc.n	8000e62 <__udivmoddi4+0x2ae>
 8000e36:	d012      	beq.n	8000e5e <__udivmoddi4+0x2aa>
 8000e38:	b156      	cbz	r6, 8000e50 <__udivmoddi4+0x29c>
 8000e3a:	ebba 030e 	subs.w	r3, sl, lr
 8000e3e:	eb64 0405 	sbc.w	r4, r4, r5
 8000e42:	fa04 f707 	lsl.w	r7, r4, r7
 8000e46:	40cb      	lsrs	r3, r1
 8000e48:	431f      	orrs	r7, r3
 8000e4a:	40cc      	lsrs	r4, r1
 8000e4c:	6037      	str	r7, [r6, #0]
 8000e4e:	6074      	str	r4, [r6, #4]
 8000e50:	2100      	movs	r1, #0
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	4618      	mov	r0, r3
 8000e58:	e6f8      	b.n	8000c4c <__udivmoddi4+0x98>
 8000e5a:	4690      	mov	r8, r2
 8000e5c:	e6e0      	b.n	8000c20 <__udivmoddi4+0x6c>
 8000e5e:	45c2      	cmp	sl, r8
 8000e60:	d2ea      	bcs.n	8000e38 <__udivmoddi4+0x284>
 8000e62:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e66:	eb69 0503 	sbc.w	r5, r9, r3
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7e4      	b.n	8000e38 <__udivmoddi4+0x284>
 8000e6e:	4628      	mov	r0, r5
 8000e70:	e7d7      	b.n	8000e22 <__udivmoddi4+0x26e>
 8000e72:	4640      	mov	r0, r8
 8000e74:	e791      	b.n	8000d9a <__udivmoddi4+0x1e6>
 8000e76:	4681      	mov	r9, r0
 8000e78:	e7be      	b.n	8000df8 <__udivmoddi4+0x244>
 8000e7a:	4601      	mov	r1, r0
 8000e7c:	e778      	b.n	8000d70 <__udivmoddi4+0x1bc>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	443c      	add	r4, r7
 8000e82:	e745      	b.n	8000d10 <__udivmoddi4+0x15c>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xe6>
 8000e88:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8c:	443d      	add	r5, r7
 8000e8e:	e72b      	b.n	8000ce8 <__udivmoddi4+0x134>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_InitTick+0x3c>)
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_InitTick+0x40>)
{
 8000e9a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e9c:	7818      	ldrb	r0, [r3, #0]
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ea6:	6810      	ldr	r0, [r2, #0]
 8000ea8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000eac:	f000 f896 	bl	8000fdc <HAL_SYSTICK_Config>
 8000eb0:	4604      	mov	r4, r0
 8000eb2:	b958      	cbnz	r0, 8000ecc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb4:	2d0f      	cmp	r5, #15
 8000eb6:	d809      	bhi.n	8000ecc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	4602      	mov	r2, r0
 8000eba:	4629      	mov	r1, r5
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec0:	f000 f84a 	bl	8000f58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <HAL_InitTick+0x44>)
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	601d      	str	r5, [r3, #0]
 8000eca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ecc:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ece:	bd38      	pop	{r3, r4, r5, pc}
 8000ed0:	20000028 	.word	0x20000028
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000004 	.word	0x20000004

08000edc <HAL_Init>:
{
 8000edc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <HAL_Init+0x30>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ee6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000eee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ef6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 f81b 	bl	8000f34 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efe:	2000      	movs	r0, #0
 8000f00:	f7ff ffc8 	bl	8000e94 <HAL_InitTick>
  HAL_MspInit();
 8000f04:	f001 fd7a 	bl	80029fc <HAL_MspInit>
}
 8000f08:	2000      	movs	r0, #0
 8000f0a:	bd08      	pop	{r3, pc}
 8000f0c:	40023c00 	.word	0x40023c00

08000f10 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f10:	4a03      	ldr	r2, [pc, #12]	; (8000f20 <HAL_IncTick+0x10>)
 8000f12:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <HAL_IncTick+0x14>)
 8000f14:	6811      	ldr	r1, [r2, #0]
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	440b      	add	r3, r1
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000254 	.word	0x20000254
 8000f24:	20000000 	.word	0x20000000

08000f28 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f28:	4b01      	ldr	r3, [pc, #4]	; (8000f30 <HAL_GetTick+0x8>)
 8000f2a:	6818      	ldr	r0, [r3, #0]
}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000254 	.word	0x20000254

08000f34 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f36:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f3c:	041b      	lsls	r3, r3, #16
 8000f3e:	0c1b      	lsrs	r3, r3, #16
 8000f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f44:	0200      	lsls	r0, r0, #8
 8000f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000f4e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000f50:	60d3      	str	r3, [r2, #12]
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5a:	b530      	push	{r4, r5, lr}
 8000f5c:	68dc      	ldr	r4, [r3, #12]
 8000f5e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f62:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	bf28      	it	cs
 8000f6c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 0501 	mov.w	r5, #1
 8000f74:	fa05 f303 	lsl.w	r3, r5, r3
 8000f78:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7c:	bf8c      	ite	hi
 8000f7e:	3c03      	subhi	r4, #3
 8000f80:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f82:	4019      	ands	r1, r3
 8000f84:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f86:	fa05 f404 	lsl.w	r4, r5, r4
 8000f8a:	3c01      	subs	r4, #1
 8000f8c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	ea42 0201 	orr.w	r2, r2, r1
 8000f94:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	bfad      	iteet	ge
 8000f9a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	f000 000f 	andlt.w	r0, r0, #15
 8000fa2:	4b06      	ldrlt	r3, [pc, #24]	; (8000fbc <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	bfb5      	itete	lt
 8000faa:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000fb4:	bd30      	pop	{r4, r5, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00
 8000fbc:	e000ed14 	.word	0xe000ed14

08000fc0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	2800      	cmp	r0, #0
 8000fc2:	db08      	blt.n	8000fd6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc4:	0942      	lsrs	r2, r0, #5
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	f000 001f 	and.w	r0, r0, #31
 8000fcc:	fa03 f000 	lsl.w	r0, r3, r0
 8000fd0:	4b01      	ldr	r3, [pc, #4]	; (8000fd8 <HAL_NVIC_EnableIRQ+0x18>)
 8000fd2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fdc:	3801      	subs	r0, #1
 8000fde:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fe2:	d20a      	bcs.n	8000ffa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	21f0      	movs	r1, #240	; 0xf0
 8000fec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ffa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000e010 	.word	0xe000e010
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800100c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001010:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80011b0 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001014:	4a64      	ldr	r2, [pc, #400]	; (80011a8 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001016:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8001018:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001020:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001024:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8001028:	42b7      	cmp	r7, r6
 800102a:	f040 80ad 	bne.w	8001188 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102e:	684c      	ldr	r4, [r1, #4]
 8001030:	f024 0a10 	bic.w	sl, r4, #16
 8001034:	f1ba 0f02 	cmp.w	sl, #2
 8001038:	d116      	bne.n	8001068 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800103a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800103e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001042:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001046:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800104a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800104e:	f04f 0e0f 	mov.w	lr, #15
 8001052:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001056:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800105a:	690d      	ldr	r5, [r1, #16]
 800105c:	fa05 f50b 	lsl.w	r5, r5, fp
 8001060:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001064:	f8cc 5020 	str.w	r5, [ip, #32]
 8001068:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800106c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800106e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001072:	fa05 f50c 	lsl.w	r5, r5, ip
 8001076:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001078:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800107c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001080:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001084:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001088:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800108c:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001090:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 8001092:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001096:	d815      	bhi.n	80010c4 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8001098:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800109c:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a0:	68cd      	ldr	r5, [r1, #12]
 80010a2:	fa05 fa0c 	lsl.w	sl, r5, ip
 80010a6:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80010aa:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80010ae:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b2:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010b6:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80010ba:	fa0e fe03 	lsl.w	lr, lr, r3
 80010be:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80010c2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80010c4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010c6:	9d00      	ldr	r5, [sp, #0]
 80010c8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ca:	688f      	ldr	r7, [r1, #8]
 80010cc:	fa07 f70c 	lsl.w	r7, r7, ip
 80010d0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80010d2:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010d4:	00e5      	lsls	r5, r4, #3
 80010d6:	d557      	bpl.n	8001188 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d8:	f04f 0b00 	mov.w	fp, #0
 80010dc:	f8cd b00c 	str.w	fp, [sp, #12]
 80010e0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e4:	4d31      	ldr	r5, [pc, #196]	; (80011ac <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80010ea:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80010ee:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80010f2:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80010f6:	9703      	str	r7, [sp, #12]
 80010f8:	9f03      	ldr	r7, [sp, #12]
 80010fa:	f023 0703 	bic.w	r7, r3, #3
 80010fe:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001102:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001106:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800110a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800110e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001112:	f04f 0e0f 	mov.w	lr, #15
 8001116:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800111a:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800111c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001120:	d039      	beq.n	8001196 <HAL_GPIO_Init+0x18e>
 8001122:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001126:	42a8      	cmp	r0, r5
 8001128:	d037      	beq.n	800119a <HAL_GPIO_Init+0x192>
 800112a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800112e:	42a8      	cmp	r0, r5
 8001130:	d035      	beq.n	800119e <HAL_GPIO_Init+0x196>
 8001132:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001136:	42a8      	cmp	r0, r5
 8001138:	d033      	beq.n	80011a2 <HAL_GPIO_Init+0x19a>
 800113a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800113e:	42a8      	cmp	r0, r5
 8001140:	bf14      	ite	ne
 8001142:	2507      	movne	r5, #7
 8001144:	2504      	moveq	r5, #4
 8001146:	fa05 f50c 	lsl.w	r5, r5, ip
 800114a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001150:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001152:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001154:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001158:	bf0c      	ite	eq
 800115a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800115c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800115e:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001160:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001162:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001166:	bf0c      	ite	eq
 8001168:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800116a:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800116c:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800116e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001170:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001174:	bf0c      	ite	eq
 8001176:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001178:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800117a:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800117c:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800117e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001180:	bf54      	ite	pl
 8001182:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001184:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001186:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001188:	3301      	adds	r3, #1
 800118a:	2b10      	cmp	r3, #16
 800118c:	f47f af47 	bne.w	800101e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001190:	b005      	add	sp, #20
 8001192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001196:	465d      	mov	r5, fp
 8001198:	e7d5      	b.n	8001146 <HAL_GPIO_Init+0x13e>
 800119a:	2501      	movs	r5, #1
 800119c:	e7d3      	b.n	8001146 <HAL_GPIO_Init+0x13e>
 800119e:	2502      	movs	r5, #2
 80011a0:	e7d1      	b.n	8001146 <HAL_GPIO_Init+0x13e>
 80011a2:	2503      	movs	r5, #3
 80011a4:	e7cf      	b.n	8001146 <HAL_GPIO_Init+0x13e>
 80011a6:	bf00      	nop
 80011a8:	40013c00 	.word	0x40013c00
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40023800 	.word	0x40023800

080011b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b4:	b10a      	cbz	r2, 80011ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011b6:	6181      	str	r1, [r0, #24]
 80011b8:	4770      	bx	lr
 80011ba:	0409      	lsls	r1, r1, #16
 80011bc:	e7fb      	b.n	80011b6 <HAL_GPIO_WritePin+0x2>

080011be <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80011be:	6943      	ldr	r3, [r0, #20]
 80011c0:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011c4:	bf08      	it	eq
 80011c6:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80011c8:	6181      	str	r1, [r0, #24]
 80011ca:	4770      	bx	lr

080011cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011d0:	4604      	mov	r4, r0
 80011d2:	b918      	cbnz	r0, 80011dc <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80011d4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80011d6:	b002      	add	sp, #8
 80011d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011dc:	6803      	ldr	r3, [r0, #0]
 80011de:	07dd      	lsls	r5, r3, #31
 80011e0:	d410      	bmi.n	8001204 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e2:	6823      	ldr	r3, [r4, #0]
 80011e4:	0798      	lsls	r0, r3, #30
 80011e6:	d458      	bmi.n	800129a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e8:	6823      	ldr	r3, [r4, #0]
 80011ea:	071a      	lsls	r2, r3, #28
 80011ec:	f100 809a 	bmi.w	8001324 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	075b      	lsls	r3, r3, #29
 80011f4:	f100 80b8 	bmi.w	8001368 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011f8:	69a2      	ldr	r2, [r4, #24]
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	f040 8119 	bne.w	8001432 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001200:	2000      	movs	r0, #0
 8001202:	e7e8      	b.n	80011d6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001204:	4ba6      	ldr	r3, [pc, #664]	; (80014a0 <HAL_RCC_OscConfig+0x2d4>)
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	f002 020c 	and.w	r2, r2, #12
 800120c:	2a04      	cmp	r2, #4
 800120e:	d007      	beq.n	8001220 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001216:	2a08      	cmp	r2, #8
 8001218:	d10a      	bne.n	8001230 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	0259      	lsls	r1, r3, #9
 800121e:	d507      	bpl.n	8001230 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001220:	4b9f      	ldr	r3, [pc, #636]	; (80014a0 <HAL_RCC_OscConfig+0x2d4>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	039a      	lsls	r2, r3, #14
 8001226:	d5dc      	bpl.n	80011e2 <HAL_RCC_OscConfig+0x16>
 8001228:	6863      	ldr	r3, [r4, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1d9      	bne.n	80011e2 <HAL_RCC_OscConfig+0x16>
 800122e:	e7d1      	b.n	80011d4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001230:	6863      	ldr	r3, [r4, #4]
 8001232:	4d9b      	ldr	r5, [pc, #620]	; (80014a0 <HAL_RCC_OscConfig+0x2d4>)
 8001234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001238:	d111      	bne.n	800125e <HAL_RCC_OscConfig+0x92>
 800123a:	682b      	ldr	r3, [r5, #0]
 800123c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001240:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001242:	f7ff fe71 	bl	8000f28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001246:	4d96      	ldr	r5, [pc, #600]	; (80014a0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001248:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124a:	682b      	ldr	r3, [r5, #0]
 800124c:	039b      	lsls	r3, r3, #14
 800124e:	d4c8      	bmi.n	80011e2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001250:	f7ff fe6a 	bl	8000f28 <HAL_GetTick>
 8001254:	1b80      	subs	r0, r0, r6
 8001256:	2864      	cmp	r0, #100	; 0x64
 8001258:	d9f7      	bls.n	800124a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800125a:	2003      	movs	r0, #3
 800125c:	e7bb      	b.n	80011d6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001262:	d104      	bne.n	800126e <HAL_RCC_OscConfig+0xa2>
 8001264:	682b      	ldr	r3, [r5, #0]
 8001266:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800126a:	602b      	str	r3, [r5, #0]
 800126c:	e7e5      	b.n	800123a <HAL_RCC_OscConfig+0x6e>
 800126e:	682a      	ldr	r2, [r5, #0]
 8001270:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001274:	602a      	str	r2, [r5, #0]
 8001276:	682a      	ldr	r2, [r5, #0]
 8001278:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800127c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1df      	bne.n	8001242 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001282:	f7ff fe51 	bl	8000f28 <HAL_GetTick>
 8001286:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001288:	682b      	ldr	r3, [r5, #0]
 800128a:	039f      	lsls	r7, r3, #14
 800128c:	d5a9      	bpl.n	80011e2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800128e:	f7ff fe4b 	bl	8000f28 <HAL_GetTick>
 8001292:	1b80      	subs	r0, r0, r6
 8001294:	2864      	cmp	r0, #100	; 0x64
 8001296:	d9f7      	bls.n	8001288 <HAL_RCC_OscConfig+0xbc>
 8001298:	e7df      	b.n	800125a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800129a:	4b81      	ldr	r3, [pc, #516]	; (80014a0 <HAL_RCC_OscConfig+0x2d4>)
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	f012 0f0c 	tst.w	r2, #12
 80012a2:	d007      	beq.n	80012b4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012aa:	2a08      	cmp	r2, #8
 80012ac:	d111      	bne.n	80012d2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	025e      	lsls	r6, r3, #9
 80012b2:	d40e      	bmi.n	80012d2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b4:	4b7a      	ldr	r3, [pc, #488]	; (80014a0 <HAL_RCC_OscConfig+0x2d4>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	0795      	lsls	r5, r2, #30
 80012ba:	d502      	bpl.n	80012c2 <HAL_RCC_OscConfig+0xf6>
 80012bc:	68e2      	ldr	r2, [r4, #12]
 80012be:	2a01      	cmp	r2, #1
 80012c0:	d188      	bne.n	80011d4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	6921      	ldr	r1, [r4, #16]
 80012c6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80012ca:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80012ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d0:	e78a      	b.n	80011e8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012d2:	68e2      	ldr	r2, [r4, #12]
 80012d4:	4b73      	ldr	r3, [pc, #460]	; (80014a4 <HAL_RCC_OscConfig+0x2d8>)
 80012d6:	b1b2      	cbz	r2, 8001306 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012dc:	f7ff fe24 	bl	8000f28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e0:	4d6f      	ldr	r5, [pc, #444]	; (80014a0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80012e2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e4:	682b      	ldr	r3, [r5, #0]
 80012e6:	0798      	lsls	r0, r3, #30
 80012e8:	d507      	bpl.n	80012fa <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ea:	682b      	ldr	r3, [r5, #0]
 80012ec:	6922      	ldr	r2, [r4, #16]
 80012ee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012f2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012f6:	602b      	str	r3, [r5, #0]
 80012f8:	e776      	b.n	80011e8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012fa:	f7ff fe15 	bl	8000f28 <HAL_GetTick>
 80012fe:	1b80      	subs	r0, r0, r6
 8001300:	2802      	cmp	r0, #2
 8001302:	d9ef      	bls.n	80012e4 <HAL_RCC_OscConfig+0x118>
 8001304:	e7a9      	b.n	800125a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001306:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001308:	f7ff fe0e 	bl	8000f28 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130c:	4d64      	ldr	r5, [pc, #400]	; (80014a0 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800130e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001310:	682b      	ldr	r3, [r5, #0]
 8001312:	0799      	lsls	r1, r3, #30
 8001314:	f57f af68 	bpl.w	80011e8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001318:	f7ff fe06 	bl	8000f28 <HAL_GetTick>
 800131c:	1b80      	subs	r0, r0, r6
 800131e:	2802      	cmp	r0, #2
 8001320:	d9f6      	bls.n	8001310 <HAL_RCC_OscConfig+0x144>
 8001322:	e79a      	b.n	800125a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001324:	6962      	ldr	r2, [r4, #20]
 8001326:	4b60      	ldr	r3, [pc, #384]	; (80014a8 <HAL_RCC_OscConfig+0x2dc>)
 8001328:	b17a      	cbz	r2, 800134a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800132e:	f7ff fdfb 	bl	8000f28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001332:	4d5b      	ldr	r5, [pc, #364]	; (80014a0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001334:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001336:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001338:	079f      	lsls	r7, r3, #30
 800133a:	f53f af59 	bmi.w	80011f0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800133e:	f7ff fdf3 	bl	8000f28 <HAL_GetTick>
 8001342:	1b80      	subs	r0, r0, r6
 8001344:	2802      	cmp	r0, #2
 8001346:	d9f6      	bls.n	8001336 <HAL_RCC_OscConfig+0x16a>
 8001348:	e787      	b.n	800125a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800134a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800134c:	f7ff fdec 	bl	8000f28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	4d53      	ldr	r5, [pc, #332]	; (80014a0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001352:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001354:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001356:	0798      	lsls	r0, r3, #30
 8001358:	f57f af4a 	bpl.w	80011f0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800135c:	f7ff fde4 	bl	8000f28 <HAL_GetTick>
 8001360:	1b80      	subs	r0, r0, r6
 8001362:	2802      	cmp	r0, #2
 8001364:	d9f6      	bls.n	8001354 <HAL_RCC_OscConfig+0x188>
 8001366:	e778      	b.n	800125a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001368:	4b4d      	ldr	r3, [pc, #308]	; (80014a0 <HAL_RCC_OscConfig+0x2d4>)
 800136a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800136c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001370:	d128      	bne.n	80013c4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	9201      	str	r2, [sp, #4]
 8001374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001376:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800137a:	641a      	str	r2, [r3, #64]	; 0x40
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	9301      	str	r3, [sp, #4]
 8001384:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001386:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	4d48      	ldr	r5, [pc, #288]	; (80014ac <HAL_RCC_OscConfig+0x2e0>)
 800138a:	682b      	ldr	r3, [r5, #0]
 800138c:	05d9      	lsls	r1, r3, #23
 800138e:	d51b      	bpl.n	80013c8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001390:	68a3      	ldr	r3, [r4, #8]
 8001392:	4d43      	ldr	r5, [pc, #268]	; (80014a0 <HAL_RCC_OscConfig+0x2d4>)
 8001394:	2b01      	cmp	r3, #1
 8001396:	d127      	bne.n	80013e8 <HAL_RCC_OscConfig+0x21c>
 8001398:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80013a0:	f7ff fdc2 	bl	8000f28 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a4:	4d3e      	ldr	r5, [pc, #248]	; (80014a0 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80013a6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013ae:	079b      	lsls	r3, r3, #30
 80013b0:	d539      	bpl.n	8001426 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80013b2:	2e00      	cmp	r6, #0
 80013b4:	f43f af20 	beq.w	80011f8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b8:	4a39      	ldr	r2, [pc, #228]	; (80014a0 <HAL_RCC_OscConfig+0x2d4>)
 80013ba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013c0:	6413      	str	r3, [r2, #64]	; 0x40
 80013c2:	e719      	b.n	80011f8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80013c4:	2600      	movs	r6, #0
 80013c6:	e7df      	b.n	8001388 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c8:	682b      	ldr	r3, [r5, #0]
 80013ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ce:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80013d0:	f7ff fdaa 	bl	8000f28 <HAL_GetTick>
 80013d4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d6:	682b      	ldr	r3, [r5, #0]
 80013d8:	05da      	lsls	r2, r3, #23
 80013da:	d4d9      	bmi.n	8001390 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013dc:	f7ff fda4 	bl	8000f28 <HAL_GetTick>
 80013e0:	1bc0      	subs	r0, r0, r7
 80013e2:	2802      	cmp	r0, #2
 80013e4:	d9f7      	bls.n	80013d6 <HAL_RCC_OscConfig+0x20a>
 80013e6:	e738      	b.n	800125a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e8:	2b05      	cmp	r3, #5
 80013ea:	d104      	bne.n	80013f6 <HAL_RCC_OscConfig+0x22a>
 80013ec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	672b      	str	r3, [r5, #112]	; 0x70
 80013f4:	e7d0      	b.n	8001398 <HAL_RCC_OscConfig+0x1cc>
 80013f6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80013f8:	f022 0201 	bic.w	r2, r2, #1
 80013fc:	672a      	str	r2, [r5, #112]	; 0x70
 80013fe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001400:	f022 0204 	bic.w	r2, r2, #4
 8001404:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1ca      	bne.n	80013a0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 800140a:	f7ff fd8d 	bl	8000f28 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800140e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001412:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001414:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001416:	0798      	lsls	r0, r3, #30
 8001418:	d5cb      	bpl.n	80013b2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800141a:	f7ff fd85 	bl	8000f28 <HAL_GetTick>
 800141e:	1bc0      	subs	r0, r0, r7
 8001420:	4540      	cmp	r0, r8
 8001422:	d9f7      	bls.n	8001414 <HAL_RCC_OscConfig+0x248>
 8001424:	e719      	b.n	800125a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001426:	f7ff fd7f 	bl	8000f28 <HAL_GetTick>
 800142a:	1bc0      	subs	r0, r0, r7
 800142c:	4540      	cmp	r0, r8
 800142e:	d9bd      	bls.n	80013ac <HAL_RCC_OscConfig+0x1e0>
 8001430:	e713      	b.n	800125a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001432:	4d1b      	ldr	r5, [pc, #108]	; (80014a0 <HAL_RCC_OscConfig+0x2d4>)
 8001434:	68ab      	ldr	r3, [r5, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b08      	cmp	r3, #8
 800143c:	f43f aeca 	beq.w	80011d4 <HAL_RCC_OscConfig+0x8>
 8001440:	4e1b      	ldr	r6, [pc, #108]	; (80014b0 <HAL_RCC_OscConfig+0x2e4>)
 8001442:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001444:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001446:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001448:	d134      	bne.n	80014b4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800144a:	f7ff fd6d 	bl	8000f28 <HAL_GetTick>
 800144e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001450:	682b      	ldr	r3, [r5, #0]
 8001452:	0199      	lsls	r1, r3, #6
 8001454:	d41e      	bmi.n	8001494 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001456:	6a22      	ldr	r2, [r4, #32]
 8001458:	69e3      	ldr	r3, [r4, #28]
 800145a:	4313      	orrs	r3, r2
 800145c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800145e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001462:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001464:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001468:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146a:	4c0d      	ldr	r4, [pc, #52]	; (80014a0 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800146c:	0852      	lsrs	r2, r2, #1
 800146e:	3a01      	subs	r2, #1
 8001470:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001474:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001476:	2301      	movs	r3, #1
 8001478:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800147a:	f7ff fd55 	bl	8000f28 <HAL_GetTick>
 800147e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	019a      	lsls	r2, r3, #6
 8001484:	f53f aebc 	bmi.w	8001200 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001488:	f7ff fd4e 	bl	8000f28 <HAL_GetTick>
 800148c:	1b40      	subs	r0, r0, r5
 800148e:	2802      	cmp	r0, #2
 8001490:	d9f6      	bls.n	8001480 <HAL_RCC_OscConfig+0x2b4>
 8001492:	e6e2      	b.n	800125a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001494:	f7ff fd48 	bl	8000f28 <HAL_GetTick>
 8001498:	1bc0      	subs	r0, r0, r7
 800149a:	2802      	cmp	r0, #2
 800149c:	d9d8      	bls.n	8001450 <HAL_RCC_OscConfig+0x284>
 800149e:	e6dc      	b.n	800125a <HAL_RCC_OscConfig+0x8e>
 80014a0:	40023800 	.word	0x40023800
 80014a4:	42470000 	.word	0x42470000
 80014a8:	42470e80 	.word	0x42470e80
 80014ac:	40007000 	.word	0x40007000
 80014b0:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80014b4:	f7ff fd38 	bl	8000f28 <HAL_GetTick>
 80014b8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ba:	682b      	ldr	r3, [r5, #0]
 80014bc:	019b      	lsls	r3, r3, #6
 80014be:	f57f ae9f 	bpl.w	8001200 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c2:	f7ff fd31 	bl	8000f28 <HAL_GetTick>
 80014c6:	1b00      	subs	r0, r0, r4
 80014c8:	2802      	cmp	r0, #2
 80014ca:	d9f6      	bls.n	80014ba <HAL_RCC_OscConfig+0x2ee>
 80014cc:	e6c5      	b.n	800125a <HAL_RCC_OscConfig+0x8e>
 80014ce:	bf00      	nop

080014d0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014d0:	4913      	ldr	r1, [pc, #76]	; (8001520 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80014d2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014d4:	688b      	ldr	r3, [r1, #8]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d003      	beq.n	80014e6 <HAL_RCC_GetSysClockFreq+0x16>
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d003      	beq.n	80014ea <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014e2:	4810      	ldr	r0, [pc, #64]	; (8001524 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80014e4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80014e6:	4810      	ldr	r0, [pc, #64]	; (8001528 <HAL_RCC_GetSysClockFreq+0x58>)
 80014e8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014ea:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014ec:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ee:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014f0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f4:	bf14      	ite	ne
 80014f6:	480c      	ldrne	r0, [pc, #48]	; (8001528 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f8:	480a      	ldreq	r0, [pc, #40]	; (8001524 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014fa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80014fe:	bf18      	it	ne
 8001500:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001502:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001506:	fba1 0100 	umull	r0, r1, r1, r0
 800150a:	f7ff fb3b 	bl	8000b84 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <HAL_RCC_GetSysClockFreq+0x50>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001516:	3301      	adds	r3, #1
 8001518:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800151a:	fbb0 f0f3 	udiv	r0, r0, r3
 800151e:	bd08      	pop	{r3, pc}
 8001520:	40023800 	.word	0x40023800
 8001524:	00f42400 	.word	0x00f42400
 8001528:	007a1200 	.word	0x007a1200

0800152c <HAL_RCC_ClockConfig>:
{
 800152c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001530:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001532:	4604      	mov	r4, r0
 8001534:	b910      	cbnz	r0, 800153c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001536:	2001      	movs	r0, #1
 8001538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800153c:	4b44      	ldr	r3, [pc, #272]	; (8001650 <HAL_RCC_ClockConfig+0x124>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	f002 020f 	and.w	r2, r2, #15
 8001544:	428a      	cmp	r2, r1
 8001546:	d328      	bcc.n	800159a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001548:	6821      	ldr	r1, [r4, #0]
 800154a:	078f      	lsls	r7, r1, #30
 800154c:	d42d      	bmi.n	80015aa <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800154e:	07c8      	lsls	r0, r1, #31
 8001550:	d440      	bmi.n	80015d4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001552:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <HAL_RCC_ClockConfig+0x124>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	f002 020f 	and.w	r2, r2, #15
 800155a:	4295      	cmp	r5, r2
 800155c:	d366      	bcc.n	800162c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155e:	6822      	ldr	r2, [r4, #0]
 8001560:	0751      	lsls	r1, r2, #29
 8001562:	d46c      	bmi.n	800163e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001564:	0713      	lsls	r3, r2, #28
 8001566:	d507      	bpl.n	8001578 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001568:	4a3a      	ldr	r2, [pc, #232]	; (8001654 <HAL_RCC_ClockConfig+0x128>)
 800156a:	6921      	ldr	r1, [r4, #16]
 800156c:	6893      	ldr	r3, [r2, #8]
 800156e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001572:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001576:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001578:	f7ff ffaa 	bl	80014d0 <HAL_RCC_GetSysClockFreq>
 800157c:	4b35      	ldr	r3, [pc, #212]	; (8001654 <HAL_RCC_ClockConfig+0x128>)
 800157e:	4a36      	ldr	r2, [pc, #216]	; (8001658 <HAL_RCC_ClockConfig+0x12c>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001586:	5cd3      	ldrb	r3, [r2, r3]
 8001588:	40d8      	lsrs	r0, r3
 800158a:	4b34      	ldr	r3, [pc, #208]	; (800165c <HAL_RCC_ClockConfig+0x130>)
 800158c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800158e:	2000      	movs	r0, #0
 8001590:	f7ff fc80 	bl	8000e94 <HAL_InitTick>
  return HAL_OK;
 8001594:	2000      	movs	r0, #0
 8001596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	b2ca      	uxtb	r2, r1
 800159c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 030f 	and.w	r3, r3, #15
 80015a4:	4299      	cmp	r1, r3
 80015a6:	d1c6      	bne.n	8001536 <HAL_RCC_ClockConfig+0xa>
 80015a8:	e7ce      	b.n	8001548 <HAL_RCC_ClockConfig+0x1c>
 80015aa:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ac:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b0:	bf1e      	ittt	ne
 80015b2:	689a      	ldrne	r2, [r3, #8]
 80015b4:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80015b8:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ba:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015bc:	bf42      	ittt	mi
 80015be:	689a      	ldrmi	r2, [r3, #8]
 80015c0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80015c4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	68a0      	ldr	r0, [r4, #8]
 80015ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80015ce:	4302      	orrs	r2, r0
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	e7bc      	b.n	800154e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015d4:	6862      	ldr	r2, [r4, #4]
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <HAL_RCC_ClockConfig+0x128>)
 80015d8:	2a01      	cmp	r2, #1
 80015da:	d11d      	bne.n	8001618 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e2:	d0a8      	beq.n	8001536 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015e4:	4e1b      	ldr	r6, [pc, #108]	; (8001654 <HAL_RCC_ClockConfig+0x128>)
 80015e6:	68b3      	ldr	r3, [r6, #8]
 80015e8:	f023 0303 	bic.w	r3, r3, #3
 80015ec:	4313      	orrs	r3, r2
 80015ee:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80015f0:	f7ff fc9a 	bl	8000f28 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80015f8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015fa:	68b3      	ldr	r3, [r6, #8]
 80015fc:	6862      	ldr	r2, [r4, #4]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001606:	d0a4      	beq.n	8001552 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001608:	f7ff fc8e 	bl	8000f28 <HAL_GetTick>
 800160c:	1bc0      	subs	r0, r0, r7
 800160e:	4540      	cmp	r0, r8
 8001610:	d9f3      	bls.n	80015fa <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001612:	2003      	movs	r0, #3
}
 8001614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001618:	1e91      	subs	r1, r2, #2
 800161a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800161e:	d802      	bhi.n	8001626 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001620:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001624:	e7dd      	b.n	80015e2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001626:	f013 0f02 	tst.w	r3, #2
 800162a:	e7da      	b.n	80015e2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162c:	b2ea      	uxtb	r2, r5
 800162e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	429d      	cmp	r5, r3
 8001638:	f47f af7d 	bne.w	8001536 <HAL_RCC_ClockConfig+0xa>
 800163c:	e78f      	b.n	800155e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800163e:	4905      	ldr	r1, [pc, #20]	; (8001654 <HAL_RCC_ClockConfig+0x128>)
 8001640:	68e0      	ldr	r0, [r4, #12]
 8001642:	688b      	ldr	r3, [r1, #8]
 8001644:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001648:	4303      	orrs	r3, r0
 800164a:	608b      	str	r3, [r1, #8]
 800164c:	e78a      	b.n	8001564 <HAL_RCC_ClockConfig+0x38>
 800164e:	bf00      	nop
 8001650:	40023c00 	.word	0x40023c00
 8001654:	40023800 	.word	0x40023800
 8001658:	0800498e 	.word	0x0800498e
 800165c:	20000028 	.word	0x20000028

08001660 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001662:	4a05      	ldr	r2, [pc, #20]	; (8001678 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800166a:	5cd3      	ldrb	r3, [r2, r3]
 800166c:	4a03      	ldr	r2, [pc, #12]	; (800167c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800166e:	6810      	ldr	r0, [r2, #0]
}
 8001670:	40d8      	lsrs	r0, r3
 8001672:	4770      	bx	lr
 8001674:	40023800 	.word	0x40023800
 8001678:	0800499e 	.word	0x0800499e
 800167c:	20000028 	.word	0x20000028

08001680 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	4a03      	ldr	r2, [pc, #12]	; (800169c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800168e:	6810      	ldr	r0, [r2, #0]
}
 8001690:	40d8      	lsrs	r0, r3
 8001692:	4770      	bx	lr
 8001694:	40023800 	.word	0x40023800
 8001698:	0800499e 	.word	0x0800499e
 800169c:	20000028 	.word	0x20000028

080016a0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016a0:	6a03      	ldr	r3, [r0, #32]
 80016a2:	f023 0301 	bic.w	r3, r3, #1
 80016a6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016a8:	6a03      	ldr	r3, [r0, #32]
{
 80016aa:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016ac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80016ae:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80016b0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80016b2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80016b6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80016b8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80016ba:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80016be:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80016c0:	4d0a      	ldr	r5, [pc, #40]	; (80016ec <TIM_OC1_SetConfig+0x4c>)
 80016c2:	42a8      	cmp	r0, r5
 80016c4:	d10b      	bne.n	80016de <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80016c6:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80016c8:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 80016ca:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80016ce:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80016d0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80016d2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80016d6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80016d8:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80016dc:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016de:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80016e0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80016e2:	684a      	ldr	r2, [r1, #4]
 80016e4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016e6:	6203      	str	r3, [r0, #32]
 80016e8:	bd70      	pop	{r4, r5, r6, pc}
 80016ea:	bf00      	nop
 80016ec:	40010000 	.word	0x40010000

080016f0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80016f0:	6a03      	ldr	r3, [r0, #32]
 80016f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016f6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016f8:	6a03      	ldr	r3, [r0, #32]
{
 80016fa:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016fc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80016fe:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001700:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001702:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001706:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001708:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800170a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800170e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001712:	4d0b      	ldr	r5, [pc, #44]	; (8001740 <TIM_OC3_SetConfig+0x50>)
 8001714:	42a8      	cmp	r0, r5
 8001716:	d10d      	bne.n	8001734 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001718:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800171a:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 800171c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001720:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001724:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001726:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800172a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800172c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001730:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001734:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001736:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001738:	684a      	ldr	r2, [r1, #4]
 800173a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800173c:	6203      	str	r3, [r0, #32]
 800173e:	bd70      	pop	{r4, r5, r6, pc}
 8001740:	40010000 	.word	0x40010000

08001744 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001744:	6a03      	ldr	r3, [r0, #32]
 8001746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800174a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800174c:	6a03      	ldr	r3, [r0, #32]
{
 800174e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001750:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001752:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001754:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001756:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800175a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800175e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001760:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001764:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001768:	4d06      	ldr	r5, [pc, #24]	; (8001784 <TIM_OC4_SetConfig+0x40>)
 800176a:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800176c:	bf02      	ittt	eq
 800176e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001770:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001774:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001778:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800177a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800177c:	684a      	ldr	r2, [r1, #4]
 800177e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001780:	6203      	str	r3, [r0, #32]
 8001782:	bd30      	pop	{r4, r5, pc}
 8001784:	40010000 	.word	0x40010000

08001788 <HAL_TIM_PeriodElapsedCallback>:
 8001788:	4770      	bx	lr

0800178a <HAL_TIM_PWM_PulseFinishedCallback>:
 800178a:	4770      	bx	lr

0800178c <HAL_TIM_TriggerCallback>:
 800178c:	4770      	bx	lr

0800178e <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800178e:	6803      	ldr	r3, [r0, #0]
 8001790:	691a      	ldr	r2, [r3, #16]
 8001792:	0791      	lsls	r1, r2, #30
{
 8001794:	b510      	push	{r4, lr}
 8001796:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001798:	d50e      	bpl.n	80017b8 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	0792      	lsls	r2, r2, #30
 800179e:	d50b      	bpl.n	80017b8 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017a0:	f06f 0202 	mvn.w	r2, #2
 80017a4:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017a6:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017a8:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017aa:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017ac:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017ae:	d077      	beq.n	80018a0 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80017b0:	f000 fdc4 	bl	800233c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017b4:	2300      	movs	r3, #0
 80017b6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	0750      	lsls	r0, r2, #29
 80017be:	d510      	bpl.n	80017e2 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	0751      	lsls	r1, r2, #29
 80017c4:	d50d      	bpl.n	80017e2 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017c6:	f06f 0204 	mvn.w	r2, #4
 80017ca:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017cc:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017ce:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017d0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017d4:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80017d6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017d8:	d068      	beq.n	80018ac <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80017da:	f000 fdaf 	bl	800233c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017de:	2300      	movs	r3, #0
 80017e0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017e2:	6823      	ldr	r3, [r4, #0]
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	0712      	lsls	r2, r2, #28
 80017e8:	d50f      	bpl.n	800180a <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	0710      	lsls	r0, r2, #28
 80017ee:	d50c      	bpl.n	800180a <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017f0:	f06f 0208 	mvn.w	r2, #8
 80017f4:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017f6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017f8:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017fa:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017fc:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80017fe:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001800:	d05a      	beq.n	80018b8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001802:	f000 fd9b 	bl	800233c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001806:	2300      	movs	r3, #0
 8001808:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	691a      	ldr	r2, [r3, #16]
 800180e:	06d2      	lsls	r2, r2, #27
 8001810:	d510      	bpl.n	8001834 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	06d0      	lsls	r0, r2, #27
 8001816:	d50d      	bpl.n	8001834 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001818:	f06f 0210 	mvn.w	r2, #16
 800181c:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800181e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001820:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001822:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001826:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001828:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800182a:	d04b      	beq.n	80018c4 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800182c:	f000 fd86 	bl	800233c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001830:	2300      	movs	r3, #0
 8001832:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001834:	6823      	ldr	r3, [r4, #0]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	07d1      	lsls	r1, r2, #31
 800183a:	d508      	bpl.n	800184e <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800183c:	68da      	ldr	r2, [r3, #12]
 800183e:	07d2      	lsls	r2, r2, #31
 8001840:	d505      	bpl.n	800184e <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001842:	f06f 0201 	mvn.w	r2, #1
 8001846:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001848:	4620      	mov	r0, r4
 800184a:	f7ff ff9d 	bl	8001788 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	691a      	ldr	r2, [r3, #16]
 8001852:	0610      	lsls	r0, r2, #24
 8001854:	d508      	bpl.n	8001868 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	0611      	lsls	r1, r2, #24
 800185a:	d505      	bpl.n	8001868 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800185c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001860:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001862:	4620      	mov	r0, r4
 8001864:	f000 fafe 	bl	8001e64 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001868:	6823      	ldr	r3, [r4, #0]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	0652      	lsls	r2, r2, #25
 800186e:	d508      	bpl.n	8001882 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	0650      	lsls	r0, r2, #25
 8001874:	d505      	bpl.n	8001882 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001876:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800187a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800187c:	4620      	mov	r0, r4
 800187e:	f7ff ff85 	bl	800178c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001882:	6823      	ldr	r3, [r4, #0]
 8001884:	691a      	ldr	r2, [r3, #16]
 8001886:	0691      	lsls	r1, r2, #26
 8001888:	d522      	bpl.n	80018d0 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	0692      	lsls	r2, r2, #26
 800188e:	d51f      	bpl.n	80018d0 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001890:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001894:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001896:	611a      	str	r2, [r3, #16]
}
 8001898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800189c:	f000 bae1 	b.w	8001e62 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018a0:	f001 f858 	bl	8002954 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a4:	4620      	mov	r0, r4
 80018a6:	f7ff ff70 	bl	800178a <HAL_TIM_PWM_PulseFinishedCallback>
 80018aa:	e783      	b.n	80017b4 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ac:	f001 f852 	bl	8002954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018b0:	4620      	mov	r0, r4
 80018b2:	f7ff ff6a 	bl	800178a <HAL_TIM_PWM_PulseFinishedCallback>
 80018b6:	e792      	b.n	80017de <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018b8:	f001 f84c 	bl	8002954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018bc:	4620      	mov	r0, r4
 80018be:	f7ff ff64 	bl	800178a <HAL_TIM_PWM_PulseFinishedCallback>
 80018c2:	e7a0      	b.n	8001806 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018c4:	f001 f846 	bl	8002954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018c8:	4620      	mov	r0, r4
 80018ca:	f7ff ff5e 	bl	800178a <HAL_TIM_PWM_PulseFinishedCallback>
 80018ce:	e7af      	b.n	8001830 <HAL_TIM_IRQHandler+0xa2>
 80018d0:	bd10      	pop	{r4, pc}
	...

080018d4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018d4:	4a24      	ldr	r2, [pc, #144]	; (8001968 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 80018d6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018d8:	4290      	cmp	r0, r2
 80018da:	d00e      	beq.n	80018fa <TIM_Base_SetConfig+0x26>
 80018dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80018e0:	d00b      	beq.n	80018fa <TIM_Base_SetConfig+0x26>
 80018e2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80018e6:	4290      	cmp	r0, r2
 80018e8:	d007      	beq.n	80018fa <TIM_Base_SetConfig+0x26>
 80018ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018ee:	4290      	cmp	r0, r2
 80018f0:	d003      	beq.n	80018fa <TIM_Base_SetConfig+0x26>
 80018f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018f6:	4290      	cmp	r0, r2
 80018f8:	d115      	bne.n	8001926 <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 80018fa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001900:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001902:	4a19      	ldr	r2, [pc, #100]	; (8001968 <TIM_Base_SetConfig+0x94>)
 8001904:	4290      	cmp	r0, r2
 8001906:	d019      	beq.n	800193c <TIM_Base_SetConfig+0x68>
 8001908:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800190c:	d016      	beq.n	800193c <TIM_Base_SetConfig+0x68>
 800190e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001912:	4290      	cmp	r0, r2
 8001914:	d012      	beq.n	800193c <TIM_Base_SetConfig+0x68>
 8001916:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800191a:	4290      	cmp	r0, r2
 800191c:	d00e      	beq.n	800193c <TIM_Base_SetConfig+0x68>
 800191e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001922:	4290      	cmp	r0, r2
 8001924:	d00a      	beq.n	800193c <TIM_Base_SetConfig+0x68>
 8001926:	4a11      	ldr	r2, [pc, #68]	; (800196c <TIM_Base_SetConfig+0x98>)
 8001928:	4290      	cmp	r0, r2
 800192a:	d007      	beq.n	800193c <TIM_Base_SetConfig+0x68>
 800192c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001930:	4290      	cmp	r0, r2
 8001932:	d003      	beq.n	800193c <TIM_Base_SetConfig+0x68>
 8001934:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001938:	4290      	cmp	r0, r2
 800193a:	d103      	bne.n	8001944 <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800193c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800193e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001942:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001944:	694a      	ldr	r2, [r1, #20]
 8001946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800194a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800194c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800194e:	688b      	ldr	r3, [r1, #8]
 8001950:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001952:	680b      	ldr	r3, [r1, #0]
 8001954:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <TIM_Base_SetConfig+0x94>)
 8001958:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800195a:	bf04      	itt	eq
 800195c:	690b      	ldreq	r3, [r1, #16]
 800195e:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001960:	2301      	movs	r3, #1
 8001962:	6143      	str	r3, [r0, #20]
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40010000 	.word	0x40010000
 800196c:	40014000 	.word	0x40014000

08001970 <HAL_TIM_OC_Init>:
{
 8001970:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001972:	4604      	mov	r4, r0
 8001974:	b1a0      	cbz	r0, 80019a0 <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001976:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800197a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800197e:	b91b      	cbnz	r3, 8001988 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001980:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8001984:	f001 f8ac 	bl	8002ae0 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001988:	2302      	movs	r3, #2
 800198a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800198e:	6820      	ldr	r0, [r4, #0]
 8001990:	1d21      	adds	r1, r4, #4
 8001992:	f7ff ff9f 	bl	80018d4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001996:	2301      	movs	r3, #1
 8001998:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800199c:	2000      	movs	r0, #0
 800199e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019a0:	2001      	movs	r0, #1
}
 80019a2:	bd10      	pop	{r4, pc}

080019a4 <HAL_TIM_PWM_Init>:
{
 80019a4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80019a6:	4604      	mov	r4, r0
 80019a8:	b1a0      	cbz	r0, 80019d4 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80019aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019b2:	b91b      	cbnz	r3, 80019bc <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019b4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80019b8:	f001 f87a 	bl	8002ab0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80019bc:	2302      	movs	r3, #2
 80019be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019c2:	6820      	ldr	r0, [r4, #0]
 80019c4:	1d21      	adds	r1, r4, #4
 80019c6:	f7ff ff85 	bl	80018d4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80019ca:	2301      	movs	r3, #1
 80019cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80019d0:	2000      	movs	r0, #0
 80019d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019d4:	2001      	movs	r0, #1
}
 80019d6:	bd10      	pop	{r4, pc}

080019d8 <HAL_TIM_IC_Init>:
{
 80019d8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80019da:	4604      	mov	r4, r0
 80019dc:	b1a0      	cbz	r0, 8001a08 <HAL_TIM_IC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80019de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019e6:	b91b      	cbnz	r3, 80019f0 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 80019ec:	f001 f826 	bl	8002a3c <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80019f0:	2302      	movs	r3, #2
 80019f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019f6:	6820      	ldr	r0, [r4, #0]
 80019f8:	1d21      	adds	r1, r4, #4
 80019fa:	f7ff ff6b 	bl	80018d4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80019fe:	2301      	movs	r3, #1
 8001a00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001a04:	2000      	movs	r0, #0
 8001a06:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a08:	2001      	movs	r0, #1
}
 8001a0a:	bd10      	pop	{r4, pc}

08001a0c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a0c:	6a03      	ldr	r3, [r0, #32]
 8001a0e:	f023 0310 	bic.w	r3, r3, #16
 8001a12:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001a14:	6a03      	ldr	r3, [r0, #32]
{
 8001a16:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001a18:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001a1a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a1c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001a1e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a22:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001a26:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001a28:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001a2c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001a30:	4d0b      	ldr	r5, [pc, #44]	; (8001a60 <TIM_OC2_SetConfig+0x54>)
 8001a32:	42a8      	cmp	r0, r5
 8001a34:	d10d      	bne.n	8001a52 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a36:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a38:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a3e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001a42:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001a44:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a48:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a4e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001a52:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001a54:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001a56:	684a      	ldr	r2, [r1, #4]
 8001a58:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001a5a:	6203      	str	r3, [r0, #32]
 8001a5c:	bd70      	pop	{r4, r5, r6, pc}
 8001a5e:	bf00      	nop
 8001a60:	40010000 	.word	0x40010000

08001a64 <HAL_TIM_OC_ConfigChannel>:
{
 8001a64:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001a66:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001a6a:	2b01      	cmp	r3, #1
{
 8001a6c:	4604      	mov	r4, r0
 8001a6e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001a72:	d018      	beq.n	8001aa6 <HAL_TIM_OC_ConfigChannel+0x42>
 8001a74:	2301      	movs	r3, #1
 8001a76:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001a7a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 8001a7e:	461d      	mov	r5, r3
  switch (Channel)
 8001a80:	2a0c      	cmp	r2, #12
 8001a82:	d80b      	bhi.n	8001a9c <HAL_TIM_OC_ConfigChannel+0x38>
 8001a84:	e8df f002 	tbb	[pc, r2]
 8001a88:	0a0a0a07 	.word	0x0a0a0a07
 8001a8c:	0a0a0a10 	.word	0x0a0a0a10
 8001a90:	0a0a0a14 	.word	0x0a0a0a14
 8001a94:	18          	.byte	0x18
 8001a95:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a96:	6820      	ldr	r0, [r4, #0]
 8001a98:	f7ff fe02 	bl	80016a0 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8001a9c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001a9e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001aa2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001aa6:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001aa8:	6820      	ldr	r0, [r4, #0]
 8001aaa:	f7ff ffaf 	bl	8001a0c <TIM_OC2_SetConfig>
      break;
 8001aae:	e7f5      	b.n	8001a9c <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ab0:	6820      	ldr	r0, [r4, #0]
 8001ab2:	f7ff fe1d 	bl	80016f0 <TIM_OC3_SetConfig>
      break;
 8001ab6:	e7f1      	b.n	8001a9c <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ab8:	6820      	ldr	r0, [r4, #0]
 8001aba:	f7ff fe43 	bl	8001744 <TIM_OC4_SetConfig>
      break;
 8001abe:	e7ed      	b.n	8001a9c <HAL_TIM_OC_ConfigChannel+0x38>

08001ac0 <HAL_TIM_PWM_ConfigChannel>:
{
 8001ac0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001ac2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ac6:	2b01      	cmp	r3, #1
{
 8001ac8:	4604      	mov	r4, r0
 8001aca:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001ace:	d025      	beq.n	8001b1c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8001ada:	2a0c      	cmp	r2, #12
 8001adc:	d818      	bhi.n	8001b10 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001ade:	e8df f002 	tbb	[pc, r2]
 8001ae2:	1707      	.short	0x1707
 8001ae4:	171e1717 	.word	0x171e1717
 8001ae8:	172f1717 	.word	0x172f1717
 8001aec:	1717      	.short	0x1717
 8001aee:	40          	.byte	0x40
 8001aef:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001af0:	6820      	ldr	r0, [r4, #0]
 8001af2:	f7ff fdd5 	bl	80016a0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001af6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001af8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001afa:	699a      	ldr	r2, [r3, #24]
 8001afc:	f042 0208 	orr.w	r2, r2, #8
 8001b00:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b02:	699a      	ldr	r2, [r3, #24]
 8001b04:	f022 0204 	bic.w	r2, r2, #4
 8001b08:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b0a:	699a      	ldr	r2, [r3, #24]
 8001b0c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b0e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001b10:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001b12:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001b14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001b18:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001b1c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b1e:	6820      	ldr	r0, [r4, #0]
 8001b20:	f7ff ff74 	bl	8001a0c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b24:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b26:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b28:	699a      	ldr	r2, [r3, #24]
 8001b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001b30:	699a      	ldr	r2, [r3, #24]
 8001b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b38:	699a      	ldr	r2, [r3, #24]
 8001b3a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b3e:	e7e6      	b.n	8001b0e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b40:	6820      	ldr	r0, [r4, #0]
 8001b42:	f7ff fdd5 	bl	80016f0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b46:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b48:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b4a:	69da      	ldr	r2, [r3, #28]
 8001b4c:	f042 0208 	orr.w	r2, r2, #8
 8001b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b52:	69da      	ldr	r2, [r3, #28]
 8001b54:	f022 0204 	bic.w	r2, r2, #4
 8001b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b5a:	69da      	ldr	r2, [r3, #28]
 8001b5c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b5e:	61da      	str	r2, [r3, #28]
      break;
 8001b60:	e7d6      	b.n	8001b10 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b62:	6820      	ldr	r0, [r4, #0]
 8001b64:	f7ff fdee 	bl	8001744 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b68:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b6a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b6c:	69da      	ldr	r2, [r3, #28]
 8001b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b74:	69da      	ldr	r2, [r3, #28]
 8001b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b7a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b7c:	69da      	ldr	r2, [r3, #28]
 8001b7e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b82:	e7ec      	b.n	8001b5e <HAL_TIM_PWM_ConfigChannel+0x9e>

08001b84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001b84:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b86:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001b88:	4e16      	ldr	r6, [pc, #88]	; (8001be4 <TIM_TI1_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b8a:	f024 0401 	bic.w	r4, r4, #1
 8001b8e:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001b90:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8001b92:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001b94:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001b96:	d012      	beq.n	8001bbe <TIM_TI1_SetConfig+0x3a>
 8001b98:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b9c:	d00f      	beq.n	8001bbe <TIM_TI1_SetConfig+0x3a>
 8001b9e:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8001ba2:	42b0      	cmp	r0, r6
 8001ba4:	d00b      	beq.n	8001bbe <TIM_TI1_SetConfig+0x3a>
 8001ba6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001baa:	42b0      	cmp	r0, r6
 8001bac:	d007      	beq.n	8001bbe <TIM_TI1_SetConfig+0x3a>
 8001bae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001bb2:	42b0      	cmp	r0, r6
 8001bb4:	d003      	beq.n	8001bbe <TIM_TI1_SetConfig+0x3a>
 8001bb6:	f506 369a 	add.w	r6, r6, #78848	; 0x13400
 8001bba:	42b0      	cmp	r0, r6
 8001bbc:	d10f      	bne.n	8001bde <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001bbe:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8001bc2:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001bc4:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bc6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001bca:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bcc:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001bd0:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001bd4:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001bd6:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001bd8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001bda:	6201      	str	r1, [r0, #32]
}
 8001bdc:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001bde:	f044 0201 	orr.w	r2, r4, #1
 8001be2:	e7ef      	b.n	8001bc4 <TIM_TI1_SetConfig+0x40>
 8001be4:	40010000 	.word	0x40010000

08001be8 <HAL_TIM_IC_ConfigChannel>:
{
 8001be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001bea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001bee:	2b01      	cmp	r3, #1
{
 8001bf0:	4604      	mov	r4, r0
 8001bf2:	460d      	mov	r5, r1
 8001bf4:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001bf8:	d019      	beq.n	8001c2e <HAL_TIM_IC_ConfigChannel+0x46>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001c00:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 8001c04:	b9a2      	cbnz	r2, 8001c30 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8001c06:	68cb      	ldr	r3, [r1, #12]
 8001c08:	6820      	ldr	r0, [r4, #0]
 8001c0a:	c906      	ldmia	r1, {r1, r2}
 8001c0c:	f7ff ffba 	bl	8001b84 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001c10:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001c12:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001c14:	699a      	ldr	r2, [r3, #24]
 8001c16:	f022 020c 	bic.w	r2, r2, #12
 8001c1a:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001c22:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001c24:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001c26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001c2a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8001c30:	2a04      	cmp	r2, #4
 8001c32:	688e      	ldr	r6, [r1, #8]
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	68e8      	ldr	r0, [r5, #12]
 8001c38:	c982      	ldmia	r1, {r1, r7}
 8001c3a:	d11f      	bne.n	8001c7c <HAL_TIM_IC_ConfigChannel+0x94>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c3c:	6a1a      	ldr	r2, [r3, #32]
 8001c3e:	f022 0210 	bic.w	r2, r2, #16
 8001c42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c44:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001c46:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001c48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001c4c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001c50:	0300      	lsls	r0, r0, #12
 8001c52:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c54:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001c58:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001c5a:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001c5c:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c60:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001c64:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c68:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001c6a:	699a      	ldr	r2, [r3, #24]
 8001c6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001c70:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001c72:	699a      	ldr	r2, [r3, #24]
 8001c74:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001c78:	619e      	str	r6, [r3, #24]
 8001c7a:	e7d2      	b.n	8001c22 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8001c7c:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c7e:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8001c80:	d11c      	bne.n	8001cbc <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c86:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001c88:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001c8a:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001c8c:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8001c90:	433a      	orrs	r2, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001c92:	0100      	lsls	r0, r0, #4
 8001c94:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001c96:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001c9a:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001c9c:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001c9e:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001ca2:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001ca6:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001ca8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001caa:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001cac:	69da      	ldr	r2, [r3, #28]
 8001cae:	f022 020c 	bic.w	r2, r2, #12
 8001cb2:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001cb4:	69da      	ldr	r2, [r3, #28]
 8001cb6:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001cb8:	61de      	str	r6, [r3, #28]
 8001cba:	e7b2      	b.n	8001c22 <HAL_TIM_IC_ConfigChannel+0x3a>
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001cbc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cc0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001cc2:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001cc4:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001cc6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001cca:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001cce:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001cd0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001cd4:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001cd6:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001cd8:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001cda:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001cde:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001ce2:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001ce4:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001ce6:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001ce8:	69da      	ldr	r2, [r3, #28]
 8001cea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001cee:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001cf0:	69da      	ldr	r2, [r3, #28]
 8001cf2:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001cf6:	e7df      	b.n	8001cb8 <HAL_TIM_IC_ConfigChannel+0xd0>

08001cf8 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001cf8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001cfa:	f001 011f 	and.w	r1, r1, #31
{
 8001cfe:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001d00:	2401      	movs	r4, #1
 8001d02:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001d04:	ea23 0304 	bic.w	r3, r3, r4
 8001d08:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001d0a:	6a03      	ldr	r3, [r0, #32]
 8001d0c:	408a      	lsls	r2, r1
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	6202      	str	r2, [r0, #32]
 8001d12:	bd10      	pop	{r4, pc}

08001d14 <HAL_TIM_PWM_Start>:
{
 8001d14:	b510      	push	{r4, lr}
 8001d16:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	6800      	ldr	r0, [r0, #0]
 8001d1c:	f7ff ffec 	bl	8001cf8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d20:	6823      	ldr	r3, [r4, #0]
 8001d22:	4a09      	ldr	r2, [pc, #36]	; (8001d48 <HAL_TIM_PWM_Start+0x34>)
 8001d24:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001d26:	bf02      	ittt	eq
 8001d28:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001d2a:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001d2e:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d36:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001d38:	bf1e      	ittt	ne
 8001d3a:	681a      	ldrne	r2, [r3, #0]
 8001d3c:	f042 0201 	orrne.w	r2, r2, #1
 8001d40:	601a      	strne	r2, [r3, #0]
}
 8001d42:	2000      	movs	r0, #0
 8001d44:	bd10      	pop	{r4, pc}
 8001d46:	bf00      	nop
 8001d48:	40010000 	.word	0x40010000

08001d4c <HAL_TIM_PWM_Start_IT>:
{
 8001d4c:	b510      	push	{r4, lr}
 8001d4e:	4604      	mov	r4, r0
  switch (Channel)
 8001d50:	290c      	cmp	r1, #12
 8001d52:	d80d      	bhi.n	8001d70 <HAL_TIM_PWM_Start_IT+0x24>
 8001d54:	e8df f001 	tbb	[pc, r1]
 8001d58:	0c0c0c07 	.word	0x0c0c0c07
 8001d5c:	0c0c0c23 	.word	0x0c0c0c23
 8001d60:	0c0c0c28 	.word	0x0c0c0c28
 8001d64:	2d          	.byte	0x2d
 8001d65:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001d66:	6802      	ldr	r2, [r0, #0]
 8001d68:	68d3      	ldr	r3, [r2, #12]
 8001d6a:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001d6e:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d70:	6820      	ldr	r0, [r4, #0]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f7ff ffc0 	bl	8001cf8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d78:	6823      	ldr	r3, [r4, #0]
 8001d7a:	4a10      	ldr	r2, [pc, #64]	; (8001dbc <HAL_TIM_PWM_Start_IT+0x70>)
 8001d7c:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001d7e:	bf02      	ittt	eq
 8001d80:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001d82:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001d86:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d8e:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001d90:	bf1e      	ittt	ne
 8001d92:	681a      	ldrne	r2, [r3, #0]
 8001d94:	f042 0201 	orrne.w	r2, r2, #1
 8001d98:	601a      	strne	r2, [r3, #0]
}
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001d9e:	6802      	ldr	r2, [r0, #0]
 8001da0:	68d3      	ldr	r3, [r2, #12]
 8001da2:	f043 0304 	orr.w	r3, r3, #4
 8001da6:	e7e2      	b.n	8001d6e <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001da8:	6802      	ldr	r2, [r0, #0]
 8001daa:	68d3      	ldr	r3, [r2, #12]
 8001dac:	f043 0308 	orr.w	r3, r3, #8
 8001db0:	e7dd      	b.n	8001d6e <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001db2:	6802      	ldr	r2, [r0, #0]
 8001db4:	68d3      	ldr	r3, [r2, #12]
 8001db6:	f043 0310 	orr.w	r3, r3, #16
 8001dba:	e7d8      	b.n	8001d6e <HAL_TIM_PWM_Start_IT+0x22>
 8001dbc:	40010000 	.word	0x40010000

08001dc0 <HAL_TIM_OC_Start_IT>:
 8001dc0:	f7ff bfc4 	b.w	8001d4c <HAL_TIM_PWM_Start_IT>

08001dc4 <HAL_TIM_IC_Start_IT>:
{
 8001dc4:	b510      	push	{r4, lr}
 8001dc6:	4604      	mov	r4, r0
  switch (Channel)
 8001dc8:	290c      	cmp	r1, #12
 8001dca:	d80d      	bhi.n	8001de8 <HAL_TIM_IC_Start_IT+0x24>
 8001dcc:	e8df f001 	tbb	[pc, r1]
 8001dd0:	0c0c0c07 	.word	0x0c0c0c07
 8001dd4:	0c0c0c1c 	.word	0x0c0c0c1c
 8001dd8:	0c0c0c21 	.word	0x0c0c0c21
 8001ddc:	26          	.byte	0x26
 8001ddd:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001dde:	6802      	ldr	r2, [r0, #0]
 8001de0:	68d3      	ldr	r3, [r2, #12]
 8001de2:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001de6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001de8:	6820      	ldr	r0, [r4, #0]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f7ff ff84 	bl	8001cf8 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001df0:	6823      	ldr	r3, [r4, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001df8:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001dfa:	bf1e      	ittt	ne
 8001dfc:	681a      	ldrne	r2, [r3, #0]
 8001dfe:	f042 0201 	orrne.w	r2, r2, #1
 8001e02:	601a      	strne	r2, [r3, #0]
}
 8001e04:	2000      	movs	r0, #0
 8001e06:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001e08:	6802      	ldr	r2, [r0, #0]
 8001e0a:	68d3      	ldr	r3, [r2, #12]
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	e7e9      	b.n	8001de6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001e12:	6802      	ldr	r2, [r0, #0]
 8001e14:	68d3      	ldr	r3, [r2, #12]
 8001e16:	f043 0308 	orr.w	r3, r3, #8
 8001e1a:	e7e4      	b.n	8001de6 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001e1c:	6802      	ldr	r2, [r0, #0]
 8001e1e:	68d3      	ldr	r3, [r2, #12]
 8001e20:	f043 0310 	orr.w	r3, r3, #16
 8001e24:	e7df      	b.n	8001de6 <HAL_TIM_IC_Start_IT+0x22>

08001e26 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e26:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e2a:	2b01      	cmp	r3, #1
{
 8001e2c:	b530      	push	{r4, r5, lr}
 8001e2e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001e32:	d014      	beq.n	8001e5e <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001e34:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001e36:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001e3a:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e3c:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e3e:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e40:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001e42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001e4a:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001e4c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001e4e:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001e50:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001e52:	2301      	movs	r3, #1
 8001e54:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001e5e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001e60:	bd30      	pop	{r4, r5, pc}

08001e62 <HAL_TIMEx_CommutCallback>:
 8001e62:	4770      	bx	lr

08001e64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e64:	4770      	bx	lr
	...

08001e68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e6c:	6806      	ldr	r6, [r0, #0]
 8001e6e:	68c2      	ldr	r2, [r0, #12]
 8001e70:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e72:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	6133      	str	r3, [r6, #16]
{
 8001e7c:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e7e:	6883      	ldr	r3, [r0, #8]
 8001e80:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001e82:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e84:	4303      	orrs	r3, r0
 8001e86:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001e88:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e8c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001e8e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e92:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e98:	6973      	ldr	r3, [r6, #20]
 8001e9a:	69a2      	ldr	r2, [r4, #24]
 8001e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ea0:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ea2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ea6:	6173      	str	r3, [r6, #20]
 8001ea8:	4b7a      	ldr	r3, [pc, #488]	; (8002094 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001eaa:	d17c      	bne.n	8001fa6 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001eac:	429e      	cmp	r6, r3
 8001eae:	d003      	beq.n	8001eb8 <UART_SetConfig+0x50>
 8001eb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eb4:	429e      	cmp	r6, r3
 8001eb6:	d144      	bne.n	8001f42 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001eb8:	f7ff fbe2 	bl	8001680 <HAL_RCC_GetPCLK2Freq>
 8001ebc:	2519      	movs	r5, #25
 8001ebe:	fb05 f300 	mul.w	r3, r5, r0
 8001ec2:	6860      	ldr	r0, [r4, #4]
 8001ec4:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001ec8:	0040      	lsls	r0, r0, #1
 8001eca:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ece:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ed2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ed6:	f7ff fbd3 	bl	8001680 <HAL_RCC_GetPCLK2Freq>
 8001eda:	6863      	ldr	r3, [r4, #4]
 8001edc:	4368      	muls	r0, r5
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	fbb0 f7f3 	udiv	r7, r0, r3
 8001ee4:	f7ff fbcc 	bl	8001680 <HAL_RCC_GetPCLK2Freq>
 8001ee8:	6863      	ldr	r3, [r4, #4]
 8001eea:	4368      	muls	r0, r5
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef2:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ef6:	fb09 7313 	mls	r3, r9, r3, r7
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	3332      	adds	r3, #50	; 0x32
 8001efe:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001f08:	f7ff fbba 	bl	8001680 <HAL_RCC_GetPCLK2Freq>
 8001f0c:	6862      	ldr	r2, [r4, #4]
 8001f0e:	4368      	muls	r0, r5
 8001f10:	0052      	lsls	r2, r2, #1
 8001f12:	fbb0 faf2 	udiv	sl, r0, r2
 8001f16:	f7ff fbb3 	bl	8001680 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f1a:	6863      	ldr	r3, [r4, #4]
 8001f1c:	4368      	muls	r0, r5
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f24:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f28:	fb09 a313 	mls	r3, r9, r3, sl
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	3332      	adds	r3, #50	; 0x32
 8001f30:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f3a:	443b      	add	r3, r7
 8001f3c:	60b3      	str	r3, [r6, #8]
 8001f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f42:	f7ff fb8d 	bl	8001660 <HAL_RCC_GetPCLK1Freq>
 8001f46:	2519      	movs	r5, #25
 8001f48:	fb05 f300 	mul.w	r3, r5, r0
 8001f4c:	6860      	ldr	r0, [r4, #4]
 8001f4e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001f52:	0040      	lsls	r0, r0, #1
 8001f54:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f58:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f60:	f7ff fb7e 	bl	8001660 <HAL_RCC_GetPCLK1Freq>
 8001f64:	6863      	ldr	r3, [r4, #4]
 8001f66:	4368      	muls	r0, r5
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fbb0 f7f3 	udiv	r7, r0, r3
 8001f6e:	f7ff fb77 	bl	8001660 <HAL_RCC_GetPCLK1Freq>
 8001f72:	6863      	ldr	r3, [r4, #4]
 8001f74:	4368      	muls	r0, r5
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f7c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f80:	fb09 7313 	mls	r3, r9, r3, r7
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	3332      	adds	r3, #50	; 0x32
 8001f88:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001f92:	f7ff fb65 	bl	8001660 <HAL_RCC_GetPCLK1Freq>
 8001f96:	6862      	ldr	r2, [r4, #4]
 8001f98:	4368      	muls	r0, r5
 8001f9a:	0052      	lsls	r2, r2, #1
 8001f9c:	fbb0 faf2 	udiv	sl, r0, r2
 8001fa0:	f7ff fb5e 	bl	8001660 <HAL_RCC_GetPCLK1Freq>
 8001fa4:	e7b9      	b.n	8001f1a <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fa6:	429e      	cmp	r6, r3
 8001fa8:	d002      	beq.n	8001fb0 <UART_SetConfig+0x148>
 8001faa:	4b3b      	ldr	r3, [pc, #236]	; (8002098 <UART_SetConfig+0x230>)
 8001fac:	429e      	cmp	r6, r3
 8001fae:	d140      	bne.n	8002032 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001fb0:	f7ff fb66 	bl	8001680 <HAL_RCC_GetPCLK2Freq>
 8001fb4:	6867      	ldr	r7, [r4, #4]
 8001fb6:	2519      	movs	r5, #25
 8001fb8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001fbc:	fb05 f300 	mul.w	r3, r5, r0
 8001fc0:	00bf      	lsls	r7, r7, #2
 8001fc2:	fbb3 f3f7 	udiv	r3, r3, r7
 8001fc6:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fca:	011f      	lsls	r7, r3, #4
 8001fcc:	f7ff fb58 	bl	8001680 <HAL_RCC_GetPCLK2Freq>
 8001fd0:	6863      	ldr	r3, [r4, #4]
 8001fd2:	4368      	muls	r0, r5
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	fbb0 f8f3 	udiv	r8, r0, r3
 8001fda:	f7ff fb51 	bl	8001680 <HAL_RCC_GetPCLK2Freq>
 8001fde:	6863      	ldr	r3, [r4, #4]
 8001fe0:	4368      	muls	r0, r5
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe8:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fec:	fb09 8313 	mls	r3, r9, r3, r8
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	3332      	adds	r3, #50	; 0x32
 8001ff4:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ff8:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001ffc:	f7ff fb40 	bl	8001680 <HAL_RCC_GetPCLK2Freq>
 8002000:	6862      	ldr	r2, [r4, #4]
 8002002:	4368      	muls	r0, r5
 8002004:	0092      	lsls	r2, r2, #2
 8002006:	fbb0 faf2 	udiv	sl, r0, r2
 800200a:	f7ff fb39 	bl	8001680 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800200e:	6863      	ldr	r3, [r4, #4]
 8002010:	4368      	muls	r0, r5
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	fbb0 f3f3 	udiv	r3, r0, r3
 8002018:	fbb3 f3f9 	udiv	r3, r3, r9
 800201c:	fb09 a313 	mls	r3, r9, r3, sl
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	3332      	adds	r3, #50	; 0x32
 8002024:	fbb3 f3f9 	udiv	r3, r3, r9
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	ea43 0308 	orr.w	r3, r3, r8
 8002030:	e783      	b.n	8001f3a <UART_SetConfig+0xd2>
 8002032:	f7ff fb15 	bl	8001660 <HAL_RCC_GetPCLK1Freq>
 8002036:	6867      	ldr	r7, [r4, #4]
 8002038:	2519      	movs	r5, #25
 800203a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800203e:	fb05 f300 	mul.w	r3, r5, r0
 8002042:	00bf      	lsls	r7, r7, #2
 8002044:	fbb3 f3f7 	udiv	r3, r3, r7
 8002048:	fbb3 f3f9 	udiv	r3, r3, r9
 800204c:	011f      	lsls	r7, r3, #4
 800204e:	f7ff fb07 	bl	8001660 <HAL_RCC_GetPCLK1Freq>
 8002052:	6863      	ldr	r3, [r4, #4]
 8002054:	4368      	muls	r0, r5
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	fbb0 f8f3 	udiv	r8, r0, r3
 800205c:	f7ff fb00 	bl	8001660 <HAL_RCC_GetPCLK1Freq>
 8002060:	6863      	ldr	r3, [r4, #4]
 8002062:	4368      	muls	r0, r5
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	fbb0 f3f3 	udiv	r3, r0, r3
 800206a:	fbb3 f3f9 	udiv	r3, r3, r9
 800206e:	fb09 8313 	mls	r3, r9, r3, r8
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	3332      	adds	r3, #50	; 0x32
 8002076:	fbb3 f3f9 	udiv	r3, r3, r9
 800207a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800207e:	f7ff faef 	bl	8001660 <HAL_RCC_GetPCLK1Freq>
 8002082:	6862      	ldr	r2, [r4, #4]
 8002084:	4368      	muls	r0, r5
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	fbb0 faf2 	udiv	sl, r0, r2
 800208c:	f7ff fae8 	bl	8001660 <HAL_RCC_GetPCLK1Freq>
 8002090:	e7bd      	b.n	800200e <UART_SetConfig+0x1a6>
 8002092:	bf00      	nop
 8002094:	40011000 	.word	0x40011000
 8002098:	40011400 	.word	0x40011400

0800209c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209e:	4604      	mov	r4, r0
 80020a0:	460e      	mov	r6, r1
 80020a2:	4617      	mov	r7, r2
 80020a4:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020a6:	6821      	ldr	r1, [r4, #0]
 80020a8:	680b      	ldr	r3, [r1, #0]
 80020aa:	ea36 0303 	bics.w	r3, r6, r3
 80020ae:	d101      	bne.n	80020b4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80020b0:	2000      	movs	r0, #0
}
 80020b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80020b4:	1c6b      	adds	r3, r5, #1
 80020b6:	d0f7      	beq.n	80020a8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020b8:	b995      	cbnz	r5, 80020e0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020ba:	6823      	ldr	r3, [r4, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020c2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	f022 0201 	bic.w	r2, r2, #1
 80020ca:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80020cc:	2320      	movs	r3, #32
 80020ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80020d2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80020d6:	2300      	movs	r3, #0
 80020d8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80020dc:	2003      	movs	r0, #3
 80020de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020e0:	f7fe ff22 	bl	8000f28 <HAL_GetTick>
 80020e4:	1bc0      	subs	r0, r0, r7
 80020e6:	4285      	cmp	r5, r0
 80020e8:	d2dd      	bcs.n	80020a6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80020ea:	e7e6      	b.n	80020ba <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080020ec <HAL_UART_Init>:
{
 80020ec:	b510      	push	{r4, lr}
  if (huart == NULL)
 80020ee:	4604      	mov	r4, r0
 80020f0:	b340      	cbz	r0, 8002144 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80020f2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80020f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020fa:	b91b      	cbnz	r3, 8002104 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80020fc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002100:	f000 fd36 	bl	8002b70 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002104:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002106:	2324      	movs	r3, #36	; 0x24
 8002108:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800210c:	68d3      	ldr	r3, [r2, #12]
 800210e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002112:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002114:	4620      	mov	r0, r4
 8002116:	f7ff fea7 	bl	8001e68 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	691a      	ldr	r2, [r3, #16]
 800211e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002122:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800212a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002132:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002134:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002136:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002138:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800213a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800213e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002142:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002144:	2001      	movs	r0, #1
}
 8002146:	bd10      	pop	{r4, pc}

08002148 <HAL_UART_Transmit>:
{
 8002148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800214c:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800214e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002152:	2b20      	cmp	r3, #32
{
 8002154:	4604      	mov	r4, r0
 8002156:	460d      	mov	r5, r1
 8002158:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800215a:	d14f      	bne.n	80021fc <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 800215c:	2900      	cmp	r1, #0
 800215e:	d04a      	beq.n	80021f6 <HAL_UART_Transmit+0xae>
 8002160:	2a00      	cmp	r2, #0
 8002162:	d048      	beq.n	80021f6 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8002164:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002168:	2b01      	cmp	r3, #1
 800216a:	d047      	beq.n	80021fc <HAL_UART_Transmit+0xb4>
 800216c:	2301      	movs	r3, #1
 800216e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002172:	2300      	movs	r3, #0
 8002174:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002176:	2321      	movs	r3, #33	; 0x21
 8002178:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800217c:	f7fe fed4 	bl	8000f28 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002180:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002184:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002186:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800218a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800218c:	b29b      	uxth	r3, r3
 800218e:	b96b      	cbnz	r3, 80021ac <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002190:	463b      	mov	r3, r7
 8002192:	4632      	mov	r2, r6
 8002194:	2140      	movs	r1, #64	; 0x40
 8002196:	4620      	mov	r0, r4
 8002198:	f7ff ff80 	bl	800209c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800219c:	b9b0      	cbnz	r0, 80021cc <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 800219e:	2320      	movs	r3, #32
 80021a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80021a4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80021a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80021ac:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021b4:	68a3      	ldr	r3, [r4, #8]
 80021b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021ba:	4632      	mov	r2, r6
 80021bc:	463b      	mov	r3, r7
 80021be:	f04f 0180 	mov.w	r1, #128	; 0x80
 80021c2:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021c4:	d10e      	bne.n	80021e4 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021c6:	f7ff ff69 	bl	800209c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80021ca:	b110      	cbz	r0, 80021d2 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80021cc:	2003      	movs	r0, #3
 80021ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80021d2:	882b      	ldrh	r3, [r5, #0]
 80021d4:	6822      	ldr	r2, [r4, #0]
 80021d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021da:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80021dc:	6923      	ldr	r3, [r4, #16]
 80021de:	b943      	cbnz	r3, 80021f2 <HAL_UART_Transmit+0xaa>
          pData += 2U;
 80021e0:	3502      	adds	r5, #2
 80021e2:	e7d2      	b.n	800218a <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021e4:	f7ff ff5a 	bl	800209c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80021e8:	2800      	cmp	r0, #0
 80021ea:	d1ef      	bne.n	80021cc <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80021ec:	6823      	ldr	r3, [r4, #0]
 80021ee:	782a      	ldrb	r2, [r5, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	3501      	adds	r5, #1
 80021f4:	e7c9      	b.n	800218a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80021f6:	2001      	movs	r0, #1
 80021f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80021fc:	2002      	movs	r0, #2
}
 80021fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002202 <HAL_UART_Receive>:
{
 8002202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002206:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002208:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800220c:	2b20      	cmp	r3, #32
{
 800220e:	4604      	mov	r4, r0
 8002210:	460d      	mov	r5, r1
 8002212:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002214:	d152      	bne.n	80022bc <HAL_UART_Receive+0xba>
    if ((pData == NULL) || (Size == 0U))
 8002216:	2900      	cmp	r1, #0
 8002218:	d04d      	beq.n	80022b6 <HAL_UART_Receive+0xb4>
 800221a:	2a00      	cmp	r2, #0
 800221c:	d04b      	beq.n	80022b6 <HAL_UART_Receive+0xb4>
    __HAL_LOCK(huart);
 800221e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002222:	2b01      	cmp	r3, #1
 8002224:	d04a      	beq.n	80022bc <HAL_UART_Receive+0xba>
 8002226:	2301      	movs	r3, #1
 8002228:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800222c:	2300      	movs	r3, #0
 800222e:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002230:	2322      	movs	r3, #34	; 0x22
 8002232:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8002236:	f7fe fe77 	bl	8000f28 <HAL_GetTick>
    huart->RxXferSize = Size;
 800223a:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 800223e:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 8002240:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002244:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8002246:	b280      	uxth	r0, r0
 8002248:	b930      	cbnz	r0, 8002258 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 800224a:	2320      	movs	r3, #32
 800224c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8002250:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 8002258:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 800225a:	3b01      	subs	r3, #1
 800225c:	b29b      	uxth	r3, r3
 800225e:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002260:	68a3      	ldr	r3, [r4, #8]
 8002262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002266:	4632      	mov	r2, r6
 8002268:	463b      	mov	r3, r7
 800226a:	f04f 0120 	mov.w	r1, #32
 800226e:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002270:	d112      	bne.n	8002298 <HAL_UART_Receive+0x96>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002272:	f7ff ff13 	bl	800209c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002276:	b110      	cbz	r0, 800227e <HAL_UART_Receive+0x7c>
          return HAL_TIMEOUT;
 8002278:	2003      	movs	r0, #3
 800227a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800227e:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002280:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002282:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002284:	b922      	cbnz	r2, 8002290 <HAL_UART_Receive+0x8e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800228a:	f825 3b02 	strh.w	r3, [r5], #2
 800228e:	e7d9      	b.n	8002244 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f825 3b01 	strh.w	r3, [r5], #1
 8002296:	e7d5      	b.n	8002244 <HAL_UART_Receive+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002298:	f7ff ff00 	bl	800209c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800229c:	2800      	cmp	r0, #0
 800229e:	d1eb      	bne.n	8002278 <HAL_UART_Receive+0x76>
 80022a0:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022a2:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	1c6a      	adds	r2, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022a8:	b911      	cbnz	r1, 80022b0 <HAL_UART_Receive+0xae>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022aa:	702b      	strb	r3, [r5, #0]
 80022ac:	4615      	mov	r5, r2
 80022ae:	e7c9      	b.n	8002244 <HAL_UART_Receive+0x42>
 80022b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022b4:	e7f9      	b.n	80022aa <HAL_UART_Receive+0xa8>
      return  HAL_ERROR;
 80022b6:	2001      	movs	r0, #1
 80022b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80022bc:	2002      	movs	r0, #2
}
 80022be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080022c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022c4:	b530      	push	{r4, r5, lr}
 80022c6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022c8:	2230      	movs	r2, #48	; 0x30
 80022ca:	2100      	movs	r1, #0
 80022cc:	a808      	add	r0, sp, #32
 80022ce:	f000 fd35 	bl	8002d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022d2:	2100      	movs	r1, #0
 80022d4:	2214      	movs	r2, #20
 80022d6:	a803      	add	r0, sp, #12
 80022d8:	f000 fd30 	bl	8002d3c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022dc:	2400      	movs	r4, #0
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <SystemClock_Config+0x70>)
 80022e0:	9401      	str	r4, [sp, #4]
 80022e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f0:	9301      	str	r3, [sp, #4]
 80022f2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022f4:	4b10      	ldr	r3, [pc, #64]	; (8002338 <SystemClock_Config+0x74>)
 80022f6:	9402      	str	r4, [sp, #8]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002302:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002304:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002308:	9302      	str	r3, [sp, #8]
 800230a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800230c:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800230e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002312:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002314:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002316:	9508      	str	r5, [sp, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002318:	f7fe ff58 	bl	80011cc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800231c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800231e:	4621      	mov	r1, r4
 8002320:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002322:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002324:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002326:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002328:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800232a:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800232c:	f7ff f8fe 	bl	800152c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002330:	b015      	add	sp, #84	; 0x54
 8002332:	bd30      	pop	{r4, r5, pc}
 8002334:	40023800 	.word	0x40023800
 8002338:	40007000 	.word	0x40007000

0800233c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
//	uint8_t pw_array_length = PW_ARRAY_LENGTH;
	if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) // measure the speed of wheel 1
 800233c:	6803      	ldr	r3, [r0, #0]
 800233e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002342:	d106      	bne.n	8002352 <HAL_TIM_IC_CaptureCallback+0x16>
 8002344:	7f03      	ldrb	r3, [r0, #28]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d104      	bne.n	8002354 <HAL_TIM_IC_CaptureCallback+0x18>
	{
		input_capture1++;
 800234a:	4a04      	ldr	r2, [pc, #16]	; (800235c <HAL_TIM_IC_CaptureCallback+0x20>)
	}

	else if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) // measure the speed of wheel 2
	{
		input_capture2++;
 800234c:	6813      	ldr	r3, [r2, #0]
 800234e:	3301      	adds	r3, #1
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	4770      	bx	lr
	else if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) // measure the speed of wheel 2
 8002354:	2b02      	cmp	r3, #2
 8002356:	d1fc      	bne.n	8002352 <HAL_TIM_IC_CaptureCallback+0x16>
		input_capture2++;
 8002358:	4a01      	ldr	r2, [pc, #4]	; (8002360 <HAL_TIM_IC_CaptureCallback+0x24>)
 800235a:	e7f7      	b.n	800234c <HAL_TIM_IC_CaptureCallback+0x10>
 800235c:	20000224 	.word	0x20000224
 8002360:	20000228 	.word	0x20000228

08002364 <printWelcomeMessage>:
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, returned_pwm1);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, returned_pwm2);
	}
}

void printWelcomeMessage(void) {
 8002364:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[0;0H", strlen("\033[0;0H"), HAL_MAX_DELAY);
 8002366:	4c0f      	ldr	r4, [pc, #60]	; (80023a4 <printWelcomeMessage+0x40>)
 8002368:	490f      	ldr	r1, [pc, #60]	; (80023a8 <printWelcomeMessage+0x44>)
 800236a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800236e:	2206      	movs	r2, #6
 8002370:	4620      	mov	r0, r4
 8002372:	f7ff fee9 	bl	8002148 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[2J", strlen("\033[2J"), HAL_MAX_DELAY);
 8002376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800237a:	2204      	movs	r2, #4
 800237c:	490b      	ldr	r1, [pc, #44]	; (80023ac <printWelcomeMessage+0x48>)
 800237e:	4620      	mov	r0, r4
 8002380:	f7ff fee2 	bl	8002148 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)WELCOME_MSG, strlen(WELCOME_MSG), HAL_MAX_DELAY);
 8002384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002388:	222a      	movs	r2, #42	; 0x2a
 800238a:	4909      	ldr	r1, [pc, #36]	; (80023b0 <printWelcomeMessage+0x4c>)
 800238c:	4620      	mov	r0, r4
 800238e:	f7ff fedb 	bl	8002148 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 8002392:	4620      	mov	r0, r4
 8002394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002398:	2276      	movs	r2, #118	; 0x76
 800239a:	4906      	ldr	r1, [pc, #24]	; (80023b4 <printWelcomeMessage+0x50>)
}
 800239c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 80023a0:	f7ff bed2 	b.w	8002148 <HAL_UART_Transmit>
 80023a4:	20000318 	.word	0x20000318
 80023a8:	08004884 	.word	0x08004884
 80023ac:	0800488b 	.word	0x0800488b
 80023b0:	08004890 	.word	0x08004890
 80023b4:	080048bb 	.word	0x080048bb

080023b8 <readUserInput>:

uint8_t readUserInput(void) {
 80023b8:	b513      	push	{r0, r1, r4, lr}
	char readBuf[1];

	HAL_UART_Transmit(&huart2, (uint8_t*)PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
 80023ba:	4c0a      	ldr	r4, [pc, #40]	; (80023e4 <readUserInput+0x2c>)
 80023bc:	490a      	ldr	r1, [pc, #40]	; (80023e8 <readUserInput+0x30>)
 80023be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023c2:	2204      	movs	r2, #4
 80023c4:	4620      	mov	r0, r4
 80023c6:	f7ff febf 	bl	8002148 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, (uint8_t*)readBuf, 1, HAL_MAX_DELAY);
 80023ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023ce:	2201      	movs	r2, #1
 80023d0:	a901      	add	r1, sp, #4
 80023d2:	4620      	mov	r0, r4
 80023d4:	f7ff ff15 	bl	8002202 <HAL_UART_Receive>
	return atoi(readBuf);
 80023d8:	a801      	add	r0, sp, #4
 80023da:	f000 fc80 	bl	8002cde <atoi>
}
 80023de:	b2c0      	uxtb	r0, r0
 80023e0:	b002      	add	sp, #8
 80023e2:	bd10      	pop	{r4, pc}
 80023e4:	20000318 	.word	0x20000318
 80023e8:	08004989 	.word	0x08004989

080023ec <processUserInput>:


uint8_t processUserInput(uint8_t opt) {
 80023ec:	b570      	push	{r4, r5, r6, lr}
	char msg0[100] = "\r\nYour desired speed is: ";
 80023ee:	4b5d      	ldr	r3, [pc, #372]	; (8002564 <processUserInput+0x178>)
uint8_t processUserInput(uint8_t opt) {
 80023f0:	f5ad 7d30 	sub.w	sp, sp, #704	; 0x2c0
 80023f4:	4604      	mov	r4, r0
	char msg0[100] = "\r\nYour desired speed is: ";
 80023f6:	aa01      	add	r2, sp, #4
 80023f8:	f103 0618 	add.w	r6, r3, #24
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	6859      	ldr	r1, [r3, #4]
 8002400:	4615      	mov	r5, r2
 8002402:	c503      	stmia	r5!, {r0, r1}
 8002404:	3308      	adds	r3, #8
 8002406:	42b3      	cmp	r3, r6
 8002408:	462a      	mov	r2, r5
 800240a:	d1f7      	bne.n	80023fc <processUserInput+0x10>
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	802b      	strh	r3, [r5, #0]
 8002410:	224a      	movs	r2, #74	; 0x4a
 8002412:	2100      	movs	r1, #0
 8002414:	f10d 001e 	add.w	r0, sp, #30
 8002418:	f000 fc90 	bl	8002d3c <memset>
	char msg6[100];
	char readN_PULSE[3];
	uint16_t n_pulse_received1 = 0;


	if(!opt || opt > 3)
 800241c:	1e63      	subs	r3, r4, #1
 800241e:	2b02      	cmp	r3, #2
 8002420:	f200 809c 	bhi.w	800255c <processUserInput+0x170>
		return 0;

	sprintf(msg1, "%d", opt);
 8002424:	4622      	mov	r2, r4
 8002426:	4950      	ldr	r1, [pc, #320]	; (8002568 <processUserInput+0x17c>)
 8002428:	a81a      	add	r0, sp, #104	; 0x68
 800242a:	f000 fc8f 	bl	8002d4c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 800242e:	a81a      	add	r0, sp, #104	; 0x68
 8002430:	f7fd fed6 	bl	80001e0 <strlen>
 8002434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002438:	b282      	uxth	r2, r0
 800243a:	a91a      	add	r1, sp, #104	; 0x68
 800243c:	484b      	ldr	r0, [pc, #300]	; (800256c <processUserInput+0x180>)
 800243e:	f7ff fe83 	bl	8002148 <HAL_UART_Transmit>

	switch(opt) {
 8002442:	2c02      	cmp	r4, #2
 8002444:	d02a      	beq.n	800249c <processUserInput+0xb0>
 8002446:	2c03      	cmp	r4, #3
 8002448:	f000 808a 	beq.w	8002560 <processUserInput+0x174>
	case 1: // Set n_pulse

		HAL_UART_Transmit(&huart2, (uint8_t*)msg0, strlen(msg0), HAL_MAX_DELAY);
 800244c:	a801      	add	r0, sp, #4
 800244e:	f7fd fec7 	bl	80001e0 <strlen>
 8002452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002456:	b282      	uxth	r2, r0
 8002458:	a901      	add	r1, sp, #4
 800245a:	4844      	ldr	r0, [pc, #272]	; (800256c <processUserInput+0x180>)
 800245c:	f7ff fe74 	bl	8002148 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, (uint8_t*)readN_PULSE, 3, HAL_MAX_DELAY);
 8002460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002464:	2203      	movs	r2, #3
 8002466:	a997      	add	r1, sp, #604	; 0x25c
 8002468:	4840      	ldr	r0, [pc, #256]	; (800256c <processUserInput+0x180>)
 800246a:	f7ff feca 	bl	8002202 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, (uint8_t*)readN_PULSE, 3, HAL_MAX_DELAY);
 800246e:	2203      	movs	r2, #3
 8002470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002474:	a997      	add	r1, sp, #604	; 0x25c
 8002476:	483d      	ldr	r0, [pc, #244]	; (800256c <processUserInput+0x180>)
 8002478:	f7ff fe66 	bl	8002148 <HAL_UART_Transmit>
		n_pulse_received1 = atoi(readN_PULSE);
 800247c:	a897      	add	r0, sp, #604	; 0x25c
 800247e:	f000 fc2e 	bl	8002cde <atoi>
 8002482:	b280      	uxth	r0, r0
		if (n_pulse_received1 > 30)
 8002484:	281e      	cmp	r0, #30
 8002486:	4b3a      	ldr	r3, [pc, #232]	; (8002570 <processUserInput+0x184>)
		{
			n_pulse_set1 = 30;
 8002488:	bf8a      	itet	hi
 800248a:	221e      	movhi	r2, #30
		}
		else
		{
			n_pulse_set1 = n_pulse_received1;
 800248c:	8018      	strhls	r0, [r3, #0]
			n_pulse_set1 = 30;
 800248e:	801a      	strhhi	r2, [r3, #0]
		}
		give_command = 1;
 8002490:	4b38      	ldr	r3, [pc, #224]	; (8002574 <processUserInput+0x188>)
 8002492:	2001      	movs	r0, #1
 8002494:	7018      	strb	r0, [r3, #0]
	case 3:
		return 2;
	};

	return 1;
}
 8002496:	f50d 7d30 	add.w	sp, sp, #704	; 0x2c0
 800249a:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(msg1, "\r\n x: %ld", my_rover.x);
 800249c:	4c36      	ldr	r4, [pc, #216]	; (8002578 <processUserInput+0x18c>)
 800249e:	4937      	ldr	r1, [pc, #220]	; (800257c <processUserInput+0x190>)
 80024a0:	6822      	ldr	r2, [r4, #0]
 80024a2:	a81a      	add	r0, sp, #104	; 0x68
 80024a4:	f000 fc52 	bl	8002d4c <siprintf>
		sprintf(msg2, "\r\n y: %ld", my_rover.y);
 80024a8:	6862      	ldr	r2, [r4, #4]
 80024aa:	4935      	ldr	r1, [pc, #212]	; (8002580 <processUserInput+0x194>)
 80024ac:	a833      	add	r0, sp, #204	; 0xcc
 80024ae:	f000 fc4d 	bl	8002d4c <siprintf>
		sprintf(msg3, "\r\n phi: %ld", my_rover.phi);
 80024b2:	68a2      	ldr	r2, [r4, #8]
 80024b4:	4933      	ldr	r1, [pc, #204]	; (8002584 <processUserInput+0x198>)
 80024b6:	a84c      	add	r0, sp, #304	; 0x130
 80024b8:	f000 fc48 	bl	8002d4c <siprintf>
		sprintf(msg4, "\r\n PWM: %u", returned_pwm1);
 80024bc:	4b32      	ldr	r3, [pc, #200]	; (8002588 <processUserInput+0x19c>)
 80024be:	4933      	ldr	r1, [pc, #204]	; (800258c <processUserInput+0x1a0>)
 80024c0:	881a      	ldrh	r2, [r3, #0]
 80024c2:	a865      	add	r0, sp, #404	; 0x194
 80024c4:	f000 fc42 	bl	8002d4c <siprintf>
		sprintf(msg5, "\r\n error1: %ld", error1);
 80024c8:	4b31      	ldr	r3, [pc, #196]	; (8002590 <processUserInput+0x1a4>)
 80024ca:	4932      	ldr	r1, [pc, #200]	; (8002594 <processUserInput+0x1a8>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	a87e      	add	r0, sp, #504	; 0x1f8
 80024d0:	f000 fc3c 	bl	8002d4c <siprintf>
		sprintf(msg6, "\r\n integrated_error1: %ld", integrated_error1);
 80024d4:	4b30      	ldr	r3, [pc, #192]	; (8002598 <processUserInput+0x1ac>)
 80024d6:	4931      	ldr	r1, [pc, #196]	; (800259c <processUserInput+0x1b0>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	a897      	add	r0, sp, #604	; 0x25c
 80024dc:	f000 fc36 	bl	8002d4c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 80024e0:	a81a      	add	r0, sp, #104	; 0x68
 80024e2:	f7fd fe7d 	bl	80001e0 <strlen>
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ea:	b282      	uxth	r2, r0
 80024ec:	a91a      	add	r1, sp, #104	; 0x68
 80024ee:	481f      	ldr	r0, [pc, #124]	; (800256c <processUserInput+0x180>)
 80024f0:	f7ff fe2a 	bl	8002148 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg2, strlen(msg2), HAL_MAX_DELAY);
 80024f4:	a833      	add	r0, sp, #204	; 0xcc
 80024f6:	f7fd fe73 	bl	80001e0 <strlen>
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024fe:	b282      	uxth	r2, r0
 8002500:	a933      	add	r1, sp, #204	; 0xcc
 8002502:	481a      	ldr	r0, [pc, #104]	; (800256c <processUserInput+0x180>)
 8002504:	f7ff fe20 	bl	8002148 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg3, strlen(msg3), HAL_MAX_DELAY);
 8002508:	a84c      	add	r0, sp, #304	; 0x130
 800250a:	f7fd fe69 	bl	80001e0 <strlen>
 800250e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002512:	b282      	uxth	r2, r0
 8002514:	a94c      	add	r1, sp, #304	; 0x130
 8002516:	4815      	ldr	r0, [pc, #84]	; (800256c <processUserInput+0x180>)
 8002518:	f7ff fe16 	bl	8002148 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg4, strlen(msg3), HAL_MAX_DELAY);
 800251c:	a84c      	add	r0, sp, #304	; 0x130
 800251e:	f7fd fe5f 	bl	80001e0 <strlen>
 8002522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002526:	b282      	uxth	r2, r0
 8002528:	a965      	add	r1, sp, #404	; 0x194
 800252a:	4810      	ldr	r0, [pc, #64]	; (800256c <processUserInput+0x180>)
 800252c:	f7ff fe0c 	bl	8002148 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg5, strlen(msg5), HAL_MAX_DELAY);
 8002530:	a87e      	add	r0, sp, #504	; 0x1f8
 8002532:	f7fd fe55 	bl	80001e0 <strlen>
 8002536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800253a:	b282      	uxth	r2, r0
 800253c:	a97e      	add	r1, sp, #504	; 0x1f8
 800253e:	480b      	ldr	r0, [pc, #44]	; (800256c <processUserInput+0x180>)
 8002540:	f7ff fe02 	bl	8002148 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg6, strlen(msg6), HAL_MAX_DELAY);
 8002544:	a897      	add	r0, sp, #604	; 0x25c
 8002546:	f7fd fe4b 	bl	80001e0 <strlen>
 800254a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800254e:	b282      	uxth	r2, r0
 8002550:	a997      	add	r1, sp, #604	; 0x25c
 8002552:	4806      	ldr	r0, [pc, #24]	; (800256c <processUserInput+0x180>)
 8002554:	f7ff fdf8 	bl	8002148 <HAL_UART_Transmit>
	return 1;
 8002558:	2001      	movs	r0, #1
		break;
 800255a:	e79c      	b.n	8002496 <processUserInput+0xaa>
		return 0;
 800255c:	2000      	movs	r0, #0
 800255e:	e79a      	b.n	8002496 <processUserInput+0xaa>
		return 2;
 8002560:	2002      	movs	r0, #2
 8002562:	e798      	b.n	8002496 <processUserInput+0xaa>
 8002564:	08004820 	.word	0x08004820
 8002568:	08004932 	.word	0x08004932
 800256c:	20000318 	.word	0x20000318
 8002570:	20000240 	.word	0x20000240
 8002574:	20000220 	.word	0x20000220
 8002578:	2000000c 	.word	0x2000000c
 800257c:	08004935 	.word	0x08004935
 8002580:	0800493f 	.word	0x0800493f
 8002584:	08004949 	.word	0x08004949
 8002588:	20000244 	.word	0x20000244
 800258c:	08004955 	.word	0x08004955
 8002590:	20000218 	.word	0x20000218
 8002594:	08004960 	.word	0x08004960
 8002598:	20000234 	.word	0x20000234
 800259c:	0800496f 	.word	0x0800496f

080025a0 <main>:
{
 80025a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025a4:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 80025a6:	f7fe fc99 	bl	8000edc <HAL_Init>
  SystemClock_Config();
 80025aa:	f7ff fe8b 	bl	80022c4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ae:	2214      	movs	r2, #20
 80025b0:	2100      	movs	r1, #0
 80025b2:	a807      	add	r0, sp, #28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b4:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b6:	f000 fbc1 	bl	8002d3c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ba:	4b82      	ldr	r3, [pc, #520]	; (80027c4 <main+0x224>)
 80025bc:	9401      	str	r4, [sp, #4]
 80025be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80025c0:	4881      	ldr	r0, [pc, #516]	; (80027c8 <main+0x228>)
  htim3.Instance = TIM3;
 80025c2:	4d82      	ldr	r5, [pc, #520]	; (80027cc <main+0x22c>)
  htim4.Instance = TIM4;
 80025c4:	4f82      	ldr	r7, [pc, #520]	; (80027d0 <main+0x230>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c6:	f042 0204 	orr.w	r2, r2, #4
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30
 80025cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ce:	f002 0204 	and.w	r2, r2, #4
 80025d2:	9201      	str	r2, [sp, #4]
 80025d4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025d6:	9402      	str	r4, [sp, #8]
 80025d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025de:	631a      	str	r2, [r3, #48]	; 0x30
 80025e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80025e6:	9202      	str	r2, [sp, #8]
 80025e8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ea:	9403      	str	r4, [sp, #12]
 80025ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
 80025f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025f6:	f002 0201 	and.w	r2, r2, #1
 80025fa:	9203      	str	r2, [sp, #12]
 80025fc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fe:	9404      	str	r4, [sp, #16]
 8002600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002602:	f042 0202 	orr.w	r2, r2, #2
 8002606:	631a      	str	r2, [r3, #48]	; 0x30
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8002610:	4622      	mov	r2, r4
 8002612:	f44f 7108 	mov.w	r1, #544	; 0x220
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002616:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8002618:	f7fe fdcc 	bl	80011b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800261c:	4622      	mov	r2, r4
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	486c      	ldr	r0, [pc, #432]	; (80027d4 <main+0x234>)
 8002622:	f7fe fdc7 	bl	80011b4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8002626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800262a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800262c:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800262e:	4b6a      	ldr	r3, [pc, #424]	; (80027d8 <main+0x238>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002630:	4868      	ldr	r0, [pc, #416]	; (80027d4 <main+0x234>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002632:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002634:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800263a:	f7fe fce5 	bl	8001008 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 800263e:	f44f 7308 	mov.w	r3, #544	; 0x220
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	a907      	add	r1, sp, #28
 8002644:	4860      	ldr	r0, [pc, #384]	; (80027c8 <main+0x228>)
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 8002646:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002648:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002650:	f7fe fcda 	bl	8001008 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002654:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002656:	a907      	add	r1, sp, #28
 8002658:	485e      	ldr	r0, [pc, #376]	; (80027d4 <main+0x234>)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800265a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265c:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002662:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002664:	f7fe fcd0 	bl	8001008 <HAL_GPIO_Init>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002668:	221c      	movs	r2, #28
 800266a:	eb0d 0002 	add.w	r0, sp, r2
 800266e:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002670:	9405      	str	r4, [sp, #20]
 8002672:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002674:	f000 fb62 	bl	8002d3c <memset>
  htim3.Instance = TIM3;
 8002678:	4b58      	ldr	r3, [pc, #352]	; (80027dc <main+0x23c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267a:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 400-1;
 800267c:	f240 168f 	movw	r6, #399	; 0x18f
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002680:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 1-1;
 8002682:	e885 0018 	stmia.w	r5, {r3, r4}
  htim3.Init.Period = 400-1;
 8002686:	60ee      	str	r6, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002688:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800268a:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800268c:	f7ff f98a 	bl	80019a4 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002690:	a905      	add	r1, sp, #20
 8002692:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002694:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002696:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002698:	f7ff fbc5 	bl	8001e26 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800269c:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800269e:	4622      	mov	r2, r4
 80026a0:	a907      	add	r1, sp, #28
 80026a2:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026a4:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 399;
 80026a6:	9608      	str	r6, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026a8:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026aa:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026ac:	f7ff fa08 	bl	8001ac0 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026b0:	2204      	movs	r2, #4
 80026b2:	a907      	add	r1, sp, #28
 80026b4:	4628      	mov	r0, r5
 80026b6:	f7ff fa03 	bl	8001ac0 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 80026ba:	4628      	mov	r0, r5
 80026bc:	f000 fa2e 	bl	8002b1c <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026c0:	221c      	movs	r2, #28
 80026c2:	4621      	mov	r1, r4
 80026c4:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c8:	9405      	str	r4, [sp, #20]
 80026ca:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026cc:	f000 fb36 	bl	8002d3c <memset>
  htim4.Init.Prescaler = 8000-1;
 80026d0:	4a43      	ldr	r2, [pc, #268]	; (80027e0 <main+0x240>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d2:	60bc      	str	r4, [r7, #8]
  htim4.Init.Prescaler = 8000-1;
 80026d4:	f641 733f 	movw	r3, #7999	; 0x1f3f
 80026d8:	e887 000c 	stmia.w	r7, {r2, r3}
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80026dc:	4638      	mov	r0, r7
  htim4.Init.Period = 50-1;
 80026de:	2331      	movs	r3, #49	; 0x31
 80026e0:	60fb      	str	r3, [r7, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e2:	613c      	str	r4, [r7, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e4:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80026e6:	f7ff f943 	bl	8001970 <HAL_TIM_OC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026ea:	a905      	add	r1, sp, #20
 80026ec:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ee:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f0:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026f2:	f7ff fb98 	bl	8001e26 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026f6:	4622      	mov	r2, r4
 80026f8:	a907      	add	r1, sp, #28
 80026fa:	4638      	mov	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80026fc:	9407      	str	r4, [sp, #28]
  sConfigOC.Pulse = 0;
 80026fe:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002700:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002702:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002704:	f7ff f9ae 	bl	8001a64 <HAL_TIM_OC_ConfigChannel>
  huart2.Instance = USART2;
 8002708:	4836      	ldr	r0, [pc, #216]	; (80027e4 <main+0x244>)
  huart2.Init.BaudRate = 115200;
 800270a:	4937      	ldr	r1, [pc, #220]	; (80027e8 <main+0x248>)
  htim2.Instance = TIM2;
 800270c:	4e37      	ldr	r6, [pc, #220]	; (80027ec <main+0x24c>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800270e:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002710:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002714:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002718:	230c      	movs	r3, #12
 800271a:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800271c:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800271e:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002720:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002722:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002724:	f7ff fce2 	bl	80020ec <HAL_UART_Init>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002728:	2210      	movs	r2, #16
 800272a:	4621      	mov	r1, r4
 800272c:	a807      	add	r0, sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800272e:	9405      	str	r4, [sp, #20]
 8002730:	9406      	str	r4, [sp, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002732:	f000 fb03 	bl	8002d3c <memset>
  htim2.Init.Prescaler = 80-1;
 8002736:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800273a:	234f      	movs	r3, #79	; 0x4f
 800273c:	e886 0009 	stmia.w	r6, {r0, r3}
  htim2.Init.Period = 4294967295;
 8002740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002744:	4630      	mov	r0, r6
  htim2.Init.Period = 4294967295;
 8002746:	60f3      	str	r3, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002748:	60b4      	str	r4, [r6, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800274a:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274c:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800274e:	f7ff f943 	bl	80019d8 <HAL_TIM_IC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002752:	a905      	add	r1, sp, #20
 8002754:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002756:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002758:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800275a:	f7ff fb64 	bl	8001e26 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800275e:	4622      	mov	r2, r4
 8002760:	a907      	add	r1, sp, #28
 8002762:	4630      	mov	r0, r6
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002764:	9407      	str	r4, [sp, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002766:	f8cd 8020 	str.w	r8, [sp, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800276a:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 800276c:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800276e:	f7ff fa3b 	bl	8001be8 <HAL_TIM_IC_ConfigChannel>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002772:	2204      	movs	r2, #4
 8002774:	a907      	add	r1, sp, #28
 8002776:	4630      	mov	r0, r6
 8002778:	f7ff fa36 	bl	8001be8 <HAL_TIM_IC_ConfigChannel>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800277c:	4621      	mov	r1, r4
 800277e:	4630      	mov	r0, r6
 8002780:	f7ff fb20 	bl	8001dc4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8002784:	2104      	movs	r1, #4
 8002786:	4630      	mov	r0, r6
 8002788:	f7ff fb1c 	bl	8001dc4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800278c:	4621      	mov	r1, r4
 800278e:	4628      	mov	r0, r5
 8002790:	f7ff fac0 	bl	8001d14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8002794:	2104      	movs	r1, #4
 8002796:	4628      	mov	r0, r5
 8002798:	f7ff fabc 	bl	8001d14 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start_IT(&htim4,TIM_CHANNEL_1);
 800279c:	4621      	mov	r1, r4
 800279e:	4638      	mov	r0, r7
 80027a0:	f7ff fb0e 	bl	8001dc0 <HAL_TIM_OC_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 80027a4:	682b      	ldr	r3, [r5, #0]
 80027a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80027aa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38
    	printWelcomeMessage();
 80027ae:	f7ff fdd9 	bl	8002364 <printWelcomeMessage>
    		opt = readUserInput();
 80027b2:	f7ff fe01 	bl	80023b8 <readUserInput>
 80027b6:	4604      	mov	r4, r0
    		processUserInput(opt);
 80027b8:	f7ff fe18 	bl	80023ec <processUserInput>
    		if(opt == 3)
 80027bc:	2c03      	cmp	r4, #3
 80027be:	d1f8      	bne.n	80027b2 <main+0x212>
 80027c0:	e7f5      	b.n	80027ae <main+0x20e>
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40020000 	.word	0x40020000
 80027cc:	20000298 	.word	0x20000298
 80027d0:	20000258 	.word	0x20000258
 80027d4:	40020800 	.word	0x40020800
 80027d8:	10210000 	.word	0x10210000
 80027dc:	40000400 	.word	0x40000400
 80027e0:	40000800 	.word	0x40000800
 80027e4:	20000318 	.word	0x20000318
 80027e8:	40004400 	.word	0x40004400
 80027ec:	200002d8 	.word	0x200002d8

080027f0 <pid_controller>:

	int32_t output_pwm = 0;
	uint16_t return_pwm = 0;


	if (wheel_id == 1)
 80027f0:	2a01      	cmp	r2, #1
{
 80027f2:	b510      	push	{r4, lr}
	if (wheel_id == 1)
 80027f4:	d11a      	bne.n	800282c <pid_controller+0x3c>
	{
		error1 = desired_point - current_point;
 80027f6:	4b19      	ldr	r3, [pc, #100]	; (800285c <pid_controller+0x6c>)
		output_pwm = (Kp*error1) + (Ki*integrated_error1);
 80027f8:	4a19      	ldr	r2, [pc, #100]	; (8002860 <pid_controller+0x70>)
		error1 = desired_point - current_point;
 80027fa:	1a09      	subs	r1, r1, r0
 80027fc:	6019      	str	r1, [r3, #0]
		output_pwm = (Kp*error1) + (Ki*integrated_error1);
 80027fe:	6813      	ldr	r3, [r2, #0]
 8002800:	eba1 1401 	sub.w	r4, r1, r1, lsl #4
 8002804:	eba3 1003 	sub.w	r0, r3, r3, lsl #4
 8002808:	4420      	add	r0, r4

		if ((abs(integrated_error1)<25) || ((error1*integrated_error1)<=0)) // anti winding
 800280a:	f103 0418 	add.w	r4, r3, #24
 800280e:	2c30      	cmp	r4, #48	; 0x30
	else if (wheel_id == 2)
	{
		error2 = desired_point - current_point;
		output_pwm = (Kp*error2) + (Ki*integrated_error2);

		if ((abs(integrated_error2)<20) || ((error2*integrated_error2)<=0)) // anti winding
 8002810:	d903      	bls.n	800281a <pid_controller+0x2a>
 8002812:	fb03 f401 	mul.w	r4, r3, r1
 8002816:	2c00      	cmp	r4, #0
 8002818:	dc01      	bgt.n	800281e <pid_controller+0x2e>
		{
			integrated_error2 += error2;
 800281a:	4419      	add	r1, r3
 800281c:	6011      	str	r1, [r2, #0]
		}
	}

	if (output_pwm < 0)
 800281e:	2800      	cmp	r0, #0
 8002820:	db16      	blt.n	8002850 <pid_controller+0x60>
	{
		return_pwm = 0;
	}
	else if (output_pwm > 400)
 8002822:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 8002826:	dc15      	bgt.n	8002854 <pid_controller+0x64>
	{
		return_pwm = 400;
	}
	else
	{
		return_pwm = (uint16_t) output_pwm;
 8002828:	b280      	uxth	r0, r0
 800282a:	bd10      	pop	{r4, pc}
	else if (wheel_id == 2)
 800282c:	2a02      	cmp	r2, #2
 800282e:	d10d      	bne.n	800284c <pid_controller+0x5c>
		error2 = desired_point - current_point;
 8002830:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <pid_controller+0x74>)
		output_pwm = (Kp*error2) + (Ki*integrated_error2);
 8002832:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <pid_controller+0x78>)
		error2 = desired_point - current_point;
 8002834:	1a09      	subs	r1, r1, r0
 8002836:	6019      	str	r1, [r3, #0]
		output_pwm = (Kp*error2) + (Ki*integrated_error2);
 8002838:	6813      	ldr	r3, [r2, #0]
 800283a:	eba1 1401 	sub.w	r4, r1, r1, lsl #4
 800283e:	eba3 1003 	sub.w	r0, r3, r3, lsl #4
 8002842:	4420      	add	r0, r4
		if ((abs(integrated_error2)<20) || ((error2*integrated_error2)<=0)) // anti winding
 8002844:	f103 0413 	add.w	r4, r3, #19
 8002848:	2c26      	cmp	r4, #38	; 0x26
 800284a:	e7e1      	b.n	8002810 <pid_controller+0x20>
	int32_t output_pwm = 0;
 800284c:	2000      	movs	r0, #0
 800284e:	e7eb      	b.n	8002828 <pid_controller+0x38>
		return_pwm = 0;
 8002850:	2000      	movs	r0, #0
 8002852:	bd10      	pop	{r4, pc}
		return_pwm = 400;
 8002854:	f44f 70c8 	mov.w	r0, #400	; 0x190
	}

	return return_pwm;
}
 8002858:	bd10      	pop	{r4, pc}
 800285a:	bf00      	nop
 800285c:	20000218 	.word	0x20000218
 8002860:	20000234 	.word	0x20000234
 8002864:	2000021c 	.word	0x2000021c
 8002868:	20000238 	.word	0x20000238

0800286c <update_my_position>:
{
	int32_t s1 = 0;
	int32_t s2 = 0;
	int32_t s_mean = 0;

	s1 = 280*n_pulse1; // in 10*mm
 800286c:	4b34      	ldr	r3, [pc, #208]	; (8002940 <update_my_position+0xd4>)
	s2 = 280*n_pulse2; // in 10*mm
 800286e:	4a35      	ldr	r2, [pc, #212]	; (8002944 <update_my_position+0xd8>)
	s1 = 280*n_pulse1; // in 10*mm
 8002870:	8818      	ldrh	r0, [r3, #0]
	s2 = 280*n_pulse2; // in 10*mm
 8002872:	8812      	ldrh	r2, [r2, #0]
{
 8002874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	s1 = 280*n_pulse1; // in 10*mm
 8002878:	f44f 738c 	mov.w	r3, #280	; 0x118
 800287c:	4358      	muls	r0, r3
	s2 = 280*n_pulse2; // in 10*mm
 800287e:	4353      	muls	r3, r2
	s_mean = (s1+s2)/2;

	my_rover.phi += (s2-s1)/(2*b); // in 10*rad
 8002880:	4a31      	ldr	r2, [pc, #196]	; (8002948 <update_my_position+0xdc>)
 8002882:	4c32      	ldr	r4, [pc, #200]	; (800294c <update_my_position+0xe0>)
 8002884:	8812      	ldrh	r2, [r2, #0]
 8002886:	1a1d      	subs	r5, r3, r0
{
 8002888:	ed2d 8b02 	vpush	{d8}
	my_rover.phi += (s2-s1)/(2*b); // in 10*rad
 800288c:	0052      	lsls	r2, r2, #1
 800288e:	fb95 f5f2 	sdiv	r5, r5, r2
 8002892:	68a2      	ldr	r2, [r4, #8]
	s_mean = (s1+s2)/2;
 8002894:	4418      	add	r0, r3
	my_rover.phi += (s2-s1)/(2*b); // in 10*rad
 8002896:	4415      	add	r5, r2
{
 8002898:	b083      	sub	sp, #12
	my_rover.phi += (s2-s1)/(2*b); // in 10*rad
 800289a:	60a5      	str	r5, [r4, #8]
	my_rover.x += s_mean*cos(((float)my_rover.phi)/10.0); // in 10*mm
 800289c:	1040      	asrs	r0, r0, #1
 800289e:	f7fd fe49 	bl	8000534 <__aeabi_i2d>
 80028a2:	ee07 5a90 	vmov	s15, r5
 80028a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028aa:	4606      	mov	r6, r0
 80028ac:	ee17 0a90 	vmov	r0, s15
 80028b0:	460f      	mov	r7, r1
 80028b2:	f7fd fe51 	bl	8000558 <__aeabi_f2d>
 80028b6:	2200      	movs	r2, #0
 80028b8:	4b25      	ldr	r3, [pc, #148]	; (8002950 <update_my_position+0xe4>)
 80028ba:	f7fd ffcb 	bl	8000854 <__aeabi_ddiv>
 80028be:	ec41 0b10 	vmov	d0, r0, r1
 80028c2:	ec41 0b18 	vmov	d8, r0, r1
 80028c6:	f000 ff17 	bl	80036f8 <cos>
 80028ca:	ec53 2b10 	vmov	r2, r3, d0
 80028ce:	6820      	ldr	r0, [r4, #0]
 80028d0:	e9cd 2300 	strd	r2, r3, [sp]
 80028d4:	f7fd fe2e 	bl	8000534 <__aeabi_i2d>
 80028d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80028dc:	4680      	mov	r8, r0
 80028de:	4689      	mov	r9, r1
 80028e0:	4630      	mov	r0, r6
 80028e2:	4639      	mov	r1, r7
 80028e4:	f7fd fe8c 	bl	8000600 <__aeabi_dmul>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4640      	mov	r0, r8
 80028ee:	4649      	mov	r1, r9
 80028f0:	f7fd fcd4 	bl	800029c <__adddf3>
 80028f4:	f7fe f91e 	bl	8000b34 <__aeabi_d2iz>
	my_rover.y += s_mean*sin(((float)my_rover.phi)/10.0); // in 10*mm
 80028f8:	eeb0 0a48 	vmov.f32	s0, s16
 80028fc:	eef0 0a68 	vmov.f32	s1, s17
	my_rover.x += s_mean*cos(((float)my_rover.phi)/10.0); // in 10*mm
 8002900:	6020      	str	r0, [r4, #0]
	my_rover.y += s_mean*sin(((float)my_rover.phi)/10.0); // in 10*mm
 8002902:	f000 ff3d 	bl	8003780 <sin>
 8002906:	ec53 2b10 	vmov	r2, r3, d0
 800290a:	6860      	ldr	r0, [r4, #4]
 800290c:	e9cd 2300 	strd	r2, r3, [sp]
 8002910:	f7fd fe10 	bl	8000534 <__aeabi_i2d>
 8002914:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002918:	4680      	mov	r8, r0
 800291a:	4689      	mov	r9, r1
 800291c:	4630      	mov	r0, r6
 800291e:	4639      	mov	r1, r7
 8002920:	f7fd fe6e 	bl	8000600 <__aeabi_dmul>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4640      	mov	r0, r8
 800292a:	4649      	mov	r1, r9
 800292c:	f7fd fcb6 	bl	800029c <__adddf3>
 8002930:	f7fe f900 	bl	8000b34 <__aeabi_d2iz>
 8002934:	6060      	str	r0, [r4, #4]
}
 8002936:	b003      	add	sp, #12
 8002938:	ecbd 8b02 	vpop	{d8}
 800293c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002940:	2000023c 	.word	0x2000023c
 8002944:	2000023e 	.word	0x2000023e
 8002948:	20000008 	.word	0x20000008
 800294c:	2000000c 	.word	0x2000000c
 8002950:	40240000 	.word	0x40240000

08002954 <HAL_TIM_OC_DelayElapsedCallback>:
	if ((htim->Instance == TIM4) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) && give_command == 1)
 8002954:	6802      	ldr	r2, [r0, #0]
 8002956:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 8002958:	429a      	cmp	r2, r3
{
 800295a:	b570      	push	{r4, r5, r6, lr}
	if ((htim->Instance == TIM4) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) && give_command == 1)
 800295c:	d131      	bne.n	80029c2 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
 800295e:	7f03      	ldrb	r3, [r0, #28]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d12e      	bne.n	80029c2 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
 8002964:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8002966:	781e      	ldrb	r6, [r3, #0]
 8002968:	2e01      	cmp	r6, #1
 800296a:	d12a      	bne.n	80029c2 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
		HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 800296c:	4817      	ldr	r0, [pc, #92]	; (80029cc <HAL_TIM_OC_DelayElapsedCallback+0x78>)
		n_pulse1 = input_capture1 - input_capture_prev1;
 800296e:	4c18      	ldr	r4, [pc, #96]	; (80029d0 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
		n_pulse2 = input_capture2 - input_capture_prev2;
 8002970:	4d18      	ldr	r5, [pc, #96]	; (80029d4 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
		HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8002972:	2120      	movs	r1, #32
 8002974:	f7fe fc23 	bl	80011be <HAL_GPIO_TogglePin>
		n_pulse1 = input_capture1 - input_capture_prev1;
 8002978:	4a17      	ldr	r2, [pc, #92]	; (80029d8 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 800297a:	4b18      	ldr	r3, [pc, #96]	; (80029dc <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 800297c:	6819      	ldr	r1, [r3, #0]
 800297e:	6813      	ldr	r3, [r2, #0]
		input_capture_prev1 = input_capture1;
 8002980:	6011      	str	r1, [r2, #0]
		n_pulse1 = input_capture1 - input_capture_prev1;
 8002982:	1acb      	subs	r3, r1, r3
		n_pulse2 = input_capture2 - input_capture_prev2;
 8002984:	4a16      	ldr	r2, [pc, #88]	; (80029e0 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
		n_pulse1 = input_capture1 - input_capture_prev1;
 8002986:	8023      	strh	r3, [r4, #0]
		n_pulse2 = input_capture2 - input_capture_prev2;
 8002988:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 800298a:	6819      	ldr	r1, [r3, #0]
 800298c:	6813      	ldr	r3, [r2, #0]
		input_capture_prev2 = input_capture2;
 800298e:	6011      	str	r1, [r2, #0]
		n_pulse2 = input_capture2 - input_capture_prev2;
 8002990:	1acb      	subs	r3, r1, r3
 8002992:	802b      	strh	r3, [r5, #0]
		update_my_position();
 8002994:	f7ff ff6a 	bl	800286c <update_my_position>
		returned_pwm1 = pid_controller(n_pulse1, n_pulse_set1, 1);
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 800299a:	8820      	ldrh	r0, [r4, #0]
 800299c:	8819      	ldrh	r1, [r3, #0]
 800299e:	4c13      	ldr	r4, [pc, #76]	; (80029ec <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80029a0:	4632      	mov	r2, r6
 80029a2:	f7ff ff25 	bl	80027f0 <pid_controller>
		returned_pwm2 = pid_controller(n_pulse2, n_pulse_set2, 2);
 80029a6:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
		returned_pwm1 = pid_controller(n_pulse1, n_pulse_set1, 1);
 80029a8:	8020      	strh	r0, [r4, #0]
		returned_pwm2 = pid_controller(n_pulse2, n_pulse_set2, 2);
 80029aa:	2202      	movs	r2, #2
 80029ac:	8819      	ldrh	r1, [r3, #0]
 80029ae:	8828      	ldrh	r0, [r5, #0]
 80029b0:	f7ff ff1e 	bl	80027f0 <pid_controller>
 80029b4:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, returned_pwm1);
 80029b6:	8822      	ldrh	r2, [r4, #0]
		returned_pwm2 = pid_controller(n_pulse2, n_pulse_set2, 2);
 80029b8:	8018      	strh	r0, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, returned_pwm1);
 80029ba:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, returned_pwm2);
 80029c0:	6398      	str	r0, [r3, #56]	; 0x38
 80029c2:	bd70      	pop	{r4, r5, r6, pc}
 80029c4:	40000800 	.word	0x40000800
 80029c8:	20000220 	.word	0x20000220
 80029cc:	40020000 	.word	0x40020000
 80029d0:	2000023c 	.word	0x2000023c
 80029d4:	2000023e 	.word	0x2000023e
 80029d8:	2000022c 	.word	0x2000022c
 80029dc:	20000224 	.word	0x20000224
 80029e0:	20000230 	.word	0x20000230
 80029e4:	20000228 	.word	0x20000228
 80029e8:	20000240 	.word	0x20000240
 80029ec:	20000244 	.word	0x20000244
 80029f0:	20000242 	.word	0x20000242
 80029f4:	20000246 	.word	0x20000246
 80029f8:	20000298 	.word	0x20000298

080029fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029fc:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <HAL_MspInit+0x3c>)
 8002a00:	2100      	movs	r1, #0
 8002a02:	9100      	str	r1, [sp, #0]
 8002a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a0a:	645a      	str	r2, [r3, #68]	; 0x44
 8002a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a0e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002a12:	9200      	str	r2, [sp, #0]
 8002a14:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	9101      	str	r1, [sp, #4]
 8002a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a26:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a28:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a2a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a2c:	f7fe fa82 	bl	8000f34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a30:	b003      	add	sp, #12
 8002a32:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800

08002a3c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002a3c:	b510      	push	{r4, lr}
 8002a3e:	4604      	mov	r4, r0
 8002a40:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a42:	2214      	movs	r2, #20
 8002a44:	2100      	movs	r1, #0
 8002a46:	a803      	add	r0, sp, #12
 8002a48:	f000 f978 	bl	8002d3c <memset>
  if(htim_ic->Instance==TIM2)
 8002a4c:	6823      	ldr	r3, [r4, #0]
 8002a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a52:	d128      	bne.n	8002aa6 <HAL_TIM_IC_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a54:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002a58:	2400      	movs	r4, #0
 8002a5a:	9401      	str	r4, [sp, #4]
 8002a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5e:	4813      	ldr	r0, [pc, #76]	; (8002aac <HAL_TIM_IC_MspInit+0x70>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a60:	f042 0201 	orr.w	r2, r2, #1
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
 8002a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a68:	f002 0201 	and.w	r2, r2, #1
 8002a6c:	9201      	str	r2, [sp, #4]
 8002a6e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a70:	9402      	str	r4, [sp, #8]
 8002a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a74:	f042 0201 	orr.w	r2, r2, #1
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	9302      	str	r3, [sp, #8]
 8002a82:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a84:	2303      	movs	r3, #3
 8002a86:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a92:	f7fe fab9 	bl	8001008 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a96:	201c      	movs	r0, #28
 8002a98:	4622      	mov	r2, r4
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	f7fe fa5c 	bl	8000f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002aa0:	201c      	movs	r0, #28
 8002aa2:	f7fe fa8d 	bl	8000fc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002aa6:	b008      	add	sp, #32
 8002aa8:	bd10      	pop	{r4, pc}
 8002aaa:	bf00      	nop
 8002aac:	40020000 	.word	0x40020000

08002ab0 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8002ab0:	6802      	ldr	r2, [r0, #0]
 8002ab2:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <HAL_TIM_PWM_MspInit+0x28>)
 8002ab4:	429a      	cmp	r2, r3
{
 8002ab6:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 8002ab8:	d10b      	bne.n	8002ad2 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	4b07      	ldr	r3, [pc, #28]	; (8002adc <HAL_TIM_PWM_MspInit+0x2c>)
 8002ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ac2:	f042 0202 	orr.w	r2, r2, #2
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	9301      	str	r3, [sp, #4]
 8002ad0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002ad2:	b002      	add	sp, #8
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40000400 	.word	0x40000400
 8002adc:	40023800 	.word	0x40023800

08002ae0 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002ae0:	b507      	push	{r0, r1, r2, lr}
  if(htim_oc->Instance==TIM4)
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <HAL_TIM_OC_MspInit+0x38>)
 8002ae4:	6802      	ldr	r2, [r0, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d113      	bne.n	8002b12 <HAL_TIM_OC_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002aea:	2200      	movs	r2, #0
 8002aec:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8002af0:	9201      	str	r2, [sp, #4]
 8002af2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002af4:	f041 0104 	orr.w	r1, r1, #4
 8002af8:	6419      	str	r1, [r3, #64]	; 0x40
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	9301      	str	r3, [sp, #4]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b02:	201e      	movs	r0, #30
 8002b04:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b06:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b08:	f7fe fa26 	bl	8000f58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b0c:	201e      	movs	r0, #30
 8002b0e:	f7fe fa57 	bl	8000fc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b12:	b003      	add	sp, #12
 8002b14:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b18:	40000800 	.word	0x40000800

08002b1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b1c:	b510      	push	{r4, lr}
 8002b1e:	4604      	mov	r4, r0
 8002b20:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b22:	2214      	movs	r2, #20
 8002b24:	2100      	movs	r1, #0
 8002b26:	a801      	add	r0, sp, #4
 8002b28:	f000 f908 	bl	8002d3c <memset>
  if(htim->Instance==TIM3)
 8002b2c:	6822      	ldr	r2, [r4, #0]
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_TIM_MspPostInit+0x48>)
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d114      	bne.n	8002b5e <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b34:	2300      	movs	r3, #0
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3a:	480c      	ldr	r0, [pc, #48]	; (8002b6c <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b4e:	23c0      	movs	r3, #192	; 0xc0
 8002b50:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b52:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b58:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5a:	f7fe fa55 	bl	8001008 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b5e:	b006      	add	sp, #24
 8002b60:	bd10      	pop	{r4, pc}
 8002b62:	bf00      	nop
 8002b64:	40000400 	.word	0x40000400
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40020000 	.word	0x40020000

08002b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b70:	b510      	push	{r4, lr}
 8002b72:	4604      	mov	r4, r0
 8002b74:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b76:	2214      	movs	r2, #20
 8002b78:	2100      	movs	r1, #0
 8002b7a:	a803      	add	r0, sp, #12
 8002b7c:	f000 f8de 	bl	8002d3c <memset>
  if(huart->Instance==USART2)
 8002b80:	6822      	ldr	r2, [r4, #0]
 8002b82:	4b15      	ldr	r3, [pc, #84]	; (8002bd8 <HAL_UART_MspInit+0x68>)
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d124      	bne.n	8002bd2 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b88:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	9101      	str	r1, [sp, #4]
 8002b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b92:	4812      	ldr	r0, [pc, #72]	; (8002bdc <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b94:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
 8002b9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b9c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002ba0:	9201      	str	r2, [sp, #4]
 8002ba2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba4:	9102      	str	r1, [sp, #8]
 8002ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ba8:	f042 0201 	orr.w	r2, r2, #1
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	9302      	str	r3, [sp, #8]
 8002bb6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002bb8:	230c      	movs	r3, #12
 8002bba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bca:	2307      	movs	r3, #7
 8002bcc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bce:	f7fe fa1b 	bl	8001008 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bd2:	b008      	add	sp, #32
 8002bd4:	bd10      	pop	{r4, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40004400 	.word	0x40004400
 8002bdc:	40020000 	.word	0x40020000

08002be0 <NMI_Handler>:
 8002be0:	4770      	bx	lr

08002be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002be2:	e7fe      	b.n	8002be2 <HardFault_Handler>

08002be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be4:	e7fe      	b.n	8002be4 <MemManage_Handler>

08002be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002be6:	e7fe      	b.n	8002be6 <BusFault_Handler>

08002be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be8:	e7fe      	b.n	8002be8 <UsageFault_Handler>

08002bea <SVC_Handler>:
 8002bea:	4770      	bx	lr

08002bec <DebugMon_Handler>:
 8002bec:	4770      	bx	lr

08002bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bee:	4770      	bx	lr

08002bf0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bf0:	f7fe b98e 	b.w	8000f10 <HAL_IncTick>

08002bf4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bf4:	4801      	ldr	r0, [pc, #4]	; (8002bfc <TIM2_IRQHandler+0x8>)
 8002bf6:	f7fe bdca 	b.w	800178e <HAL_TIM_IRQHandler>
 8002bfa:	bf00      	nop
 8002bfc:	200002d8 	.word	0x200002d8

08002c00 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002c00:	4801      	ldr	r0, [pc, #4]	; (8002c08 <TIM4_IRQHandler+0x8>)
 8002c02:	f7fe bdc4 	b.w	800178e <HAL_TIM_IRQHandler>
 8002c06:	bf00      	nop
 8002c08:	20000258 	.word	0x20000258

08002c0c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002c0c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <_sbrk+0x2c>)
 8002c10:	6819      	ldr	r1, [r3, #0]
{
 8002c12:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002c14:	b909      	cbnz	r1, 8002c1a <_sbrk+0xe>
		heap_end = &end;
 8002c16:	4909      	ldr	r1, [pc, #36]	; (8002c3c <_sbrk+0x30>)
 8002c18:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8002c1a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002c1c:	4669      	mov	r1, sp
 8002c1e:	4402      	add	r2, r0
 8002c20:	428a      	cmp	r2, r1
 8002c22:	d906      	bls.n	8002c32 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002c24:	f000 f860 	bl	8002ce8 <__errno>
 8002c28:	230c      	movs	r3, #12
 8002c2a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c30:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002c32:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002c34:	bd08      	pop	{r3, pc}
 8002c36:	bf00      	nop
 8002c38:	20000248 	.word	0x20000248
 8002c3c:	2000035c 	.word	0x2000035c

08002c40 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c40:	490f      	ldr	r1, [pc, #60]	; (8002c80 <SystemInit+0x40>)
 8002c42:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002c46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <SystemInit+0x44>)
 8002c50:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c52:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002c54:	f042 0201 	orr.w	r2, r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002c5a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002c62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c66:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002c68:	4a07      	ldr	r2, [pc, #28]	; (8002c88 <SystemInit+0x48>)
 8002c6a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c72:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002c74:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c7a:	608b      	str	r3, [r1, #8]
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000ed00 	.word	0xe000ed00
 8002c84:	40023800 	.word	0x40023800
 8002c88:	24003010 	.word	0x24003010

08002c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c92:	e003      	b.n	8002c9c <LoopCopyDataInit>

08002c94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c9a:	3104      	adds	r1, #4

08002c9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c9c:	480b      	ldr	r0, [pc, #44]	; (8002ccc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c9e:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ca0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ca2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ca4:	d3f6      	bcc.n	8002c94 <CopyDataInit>
  ldr  r2, =_sbss
 8002ca6:	4a0b      	ldr	r2, [pc, #44]	; (8002cd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ca8:	e002      	b.n	8002cb0 <LoopFillZerobss>

08002caa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002caa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002cac:	f842 3b04 	str.w	r3, [r2], #4

08002cb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002cb0:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002cb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002cb4:	d3f9      	bcc.n	8002caa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cb6:	f7ff ffc3 	bl	8002c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cba:	f000 f81b 	bl	8002cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cbe:	f7ff fc6f 	bl	80025a0 <main>
  bx  lr    
 8002cc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cc4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002cc8:	08004cd0 	.word	0x08004cd0
  ldr  r0, =_sdata
 8002ccc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002cd0:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8002cd4:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8002cd8:	2000035c 	.word	0x2000035c

08002cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cdc:	e7fe      	b.n	8002cdc <ADC_IRQHandler>

08002cde <atoi>:
 8002cde:	220a      	movs	r2, #10
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	f000 b8d7 	b.w	8002e94 <strtol>
	...

08002ce8 <__errno>:
 8002ce8:	4b01      	ldr	r3, [pc, #4]	; (8002cf0 <__errno+0x8>)
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	2000002c 	.word	0x2000002c

08002cf4 <__libc_init_array>:
 8002cf4:	b570      	push	{r4, r5, r6, lr}
 8002cf6:	4e0d      	ldr	r6, [pc, #52]	; (8002d2c <__libc_init_array+0x38>)
 8002cf8:	4c0d      	ldr	r4, [pc, #52]	; (8002d30 <__libc_init_array+0x3c>)
 8002cfa:	1ba4      	subs	r4, r4, r6
 8002cfc:	10a4      	asrs	r4, r4, #2
 8002cfe:	2500      	movs	r5, #0
 8002d00:	42a5      	cmp	r5, r4
 8002d02:	d109      	bne.n	8002d18 <__libc_init_array+0x24>
 8002d04:	4e0b      	ldr	r6, [pc, #44]	; (8002d34 <__libc_init_array+0x40>)
 8002d06:	4c0c      	ldr	r4, [pc, #48]	; (8002d38 <__libc_init_array+0x44>)
 8002d08:	f001 fd7e 	bl	8004808 <_init>
 8002d0c:	1ba4      	subs	r4, r4, r6
 8002d0e:	10a4      	asrs	r4, r4, #2
 8002d10:	2500      	movs	r5, #0
 8002d12:	42a5      	cmp	r5, r4
 8002d14:	d105      	bne.n	8002d22 <__libc_init_array+0x2e>
 8002d16:	bd70      	pop	{r4, r5, r6, pc}
 8002d18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d1c:	4798      	blx	r3
 8002d1e:	3501      	adds	r5, #1
 8002d20:	e7ee      	b.n	8002d00 <__libc_init_array+0xc>
 8002d22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d26:	4798      	blx	r3
 8002d28:	3501      	adds	r5, #1
 8002d2a:	e7f2      	b.n	8002d12 <__libc_init_array+0x1e>
 8002d2c:	08004cc8 	.word	0x08004cc8
 8002d30:	08004cc8 	.word	0x08004cc8
 8002d34:	08004cc8 	.word	0x08004cc8
 8002d38:	08004ccc 	.word	0x08004ccc

08002d3c <memset>:
 8002d3c:	4402      	add	r2, r0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d100      	bne.n	8002d46 <memset+0xa>
 8002d44:	4770      	bx	lr
 8002d46:	f803 1b01 	strb.w	r1, [r3], #1
 8002d4a:	e7f9      	b.n	8002d40 <memset+0x4>

08002d4c <siprintf>:
 8002d4c:	b40e      	push	{r1, r2, r3}
 8002d4e:	b500      	push	{lr}
 8002d50:	b09c      	sub	sp, #112	; 0x70
 8002d52:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002d56:	ab1d      	add	r3, sp, #116	; 0x74
 8002d58:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002d5c:	9002      	str	r0, [sp, #8]
 8002d5e:	9006      	str	r0, [sp, #24]
 8002d60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d64:	480a      	ldr	r0, [pc, #40]	; (8002d90 <siprintf+0x44>)
 8002d66:	9104      	str	r1, [sp, #16]
 8002d68:	9107      	str	r1, [sp, #28]
 8002d6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d72:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002d76:	6800      	ldr	r0, [r0, #0]
 8002d78:	9301      	str	r3, [sp, #4]
 8002d7a:	a902      	add	r1, sp, #8
 8002d7c:	f000 f910 	bl	8002fa0 <_svfiprintf_r>
 8002d80:	9b02      	ldr	r3, [sp, #8]
 8002d82:	2200      	movs	r2, #0
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	b01c      	add	sp, #112	; 0x70
 8002d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d8c:	b003      	add	sp, #12
 8002d8e:	4770      	bx	lr
 8002d90:	2000002c 	.word	0x2000002c

08002d94 <_strtol_l.isra.0>:
 8002d94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d98:	4680      	mov	r8, r0
 8002d9a:	4689      	mov	r9, r1
 8002d9c:	4692      	mov	sl, r2
 8002d9e:	461f      	mov	r7, r3
 8002da0:	468b      	mov	fp, r1
 8002da2:	465d      	mov	r5, fp
 8002da4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002da6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002daa:	f000 f889 	bl	8002ec0 <__locale_ctype_ptr_l>
 8002dae:	4420      	add	r0, r4
 8002db0:	7846      	ldrb	r6, [r0, #1]
 8002db2:	f016 0608 	ands.w	r6, r6, #8
 8002db6:	d10b      	bne.n	8002dd0 <_strtol_l.isra.0+0x3c>
 8002db8:	2c2d      	cmp	r4, #45	; 0x2d
 8002dba:	d10b      	bne.n	8002dd4 <_strtol_l.isra.0+0x40>
 8002dbc:	782c      	ldrb	r4, [r5, #0]
 8002dbe:	2601      	movs	r6, #1
 8002dc0:	f10b 0502 	add.w	r5, fp, #2
 8002dc4:	b167      	cbz	r7, 8002de0 <_strtol_l.isra.0+0x4c>
 8002dc6:	2f10      	cmp	r7, #16
 8002dc8:	d114      	bne.n	8002df4 <_strtol_l.isra.0+0x60>
 8002dca:	2c30      	cmp	r4, #48	; 0x30
 8002dcc:	d00a      	beq.n	8002de4 <_strtol_l.isra.0+0x50>
 8002dce:	e011      	b.n	8002df4 <_strtol_l.isra.0+0x60>
 8002dd0:	46ab      	mov	fp, r5
 8002dd2:	e7e6      	b.n	8002da2 <_strtol_l.isra.0+0xe>
 8002dd4:	2c2b      	cmp	r4, #43	; 0x2b
 8002dd6:	bf04      	itt	eq
 8002dd8:	782c      	ldrbeq	r4, [r5, #0]
 8002dda:	f10b 0502 	addeq.w	r5, fp, #2
 8002dde:	e7f1      	b.n	8002dc4 <_strtol_l.isra.0+0x30>
 8002de0:	2c30      	cmp	r4, #48	; 0x30
 8002de2:	d127      	bne.n	8002e34 <_strtol_l.isra.0+0xa0>
 8002de4:	782b      	ldrb	r3, [r5, #0]
 8002de6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002dea:	2b58      	cmp	r3, #88	; 0x58
 8002dec:	d14b      	bne.n	8002e86 <_strtol_l.isra.0+0xf2>
 8002dee:	786c      	ldrb	r4, [r5, #1]
 8002df0:	2710      	movs	r7, #16
 8002df2:	3502      	adds	r5, #2
 8002df4:	2e00      	cmp	r6, #0
 8002df6:	bf0c      	ite	eq
 8002df8:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002dfc:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002e00:	2200      	movs	r2, #0
 8002e02:	fbb1 fef7 	udiv	lr, r1, r7
 8002e06:	4610      	mov	r0, r2
 8002e08:	fb07 1c1e 	mls	ip, r7, lr, r1
 8002e0c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002e10:	2b09      	cmp	r3, #9
 8002e12:	d811      	bhi.n	8002e38 <_strtol_l.isra.0+0xa4>
 8002e14:	461c      	mov	r4, r3
 8002e16:	42a7      	cmp	r7, r4
 8002e18:	dd1d      	ble.n	8002e56 <_strtol_l.isra.0+0xc2>
 8002e1a:	1c53      	adds	r3, r2, #1
 8002e1c:	d007      	beq.n	8002e2e <_strtol_l.isra.0+0x9a>
 8002e1e:	4586      	cmp	lr, r0
 8002e20:	d316      	bcc.n	8002e50 <_strtol_l.isra.0+0xbc>
 8002e22:	d101      	bne.n	8002e28 <_strtol_l.isra.0+0x94>
 8002e24:	45a4      	cmp	ip, r4
 8002e26:	db13      	blt.n	8002e50 <_strtol_l.isra.0+0xbc>
 8002e28:	fb00 4007 	mla	r0, r0, r7, r4
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002e32:	e7eb      	b.n	8002e0c <_strtol_l.isra.0+0x78>
 8002e34:	270a      	movs	r7, #10
 8002e36:	e7dd      	b.n	8002df4 <_strtol_l.isra.0+0x60>
 8002e38:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002e3c:	2b19      	cmp	r3, #25
 8002e3e:	d801      	bhi.n	8002e44 <_strtol_l.isra.0+0xb0>
 8002e40:	3c37      	subs	r4, #55	; 0x37
 8002e42:	e7e8      	b.n	8002e16 <_strtol_l.isra.0+0x82>
 8002e44:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002e48:	2b19      	cmp	r3, #25
 8002e4a:	d804      	bhi.n	8002e56 <_strtol_l.isra.0+0xc2>
 8002e4c:	3c57      	subs	r4, #87	; 0x57
 8002e4e:	e7e2      	b.n	8002e16 <_strtol_l.isra.0+0x82>
 8002e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e54:	e7eb      	b.n	8002e2e <_strtol_l.isra.0+0x9a>
 8002e56:	1c53      	adds	r3, r2, #1
 8002e58:	d108      	bne.n	8002e6c <_strtol_l.isra.0+0xd8>
 8002e5a:	2322      	movs	r3, #34	; 0x22
 8002e5c:	f8c8 3000 	str.w	r3, [r8]
 8002e60:	4608      	mov	r0, r1
 8002e62:	f1ba 0f00 	cmp.w	sl, #0
 8002e66:	d107      	bne.n	8002e78 <_strtol_l.isra.0+0xe4>
 8002e68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e6c:	b106      	cbz	r6, 8002e70 <_strtol_l.isra.0+0xdc>
 8002e6e:	4240      	negs	r0, r0
 8002e70:	f1ba 0f00 	cmp.w	sl, #0
 8002e74:	d00c      	beq.n	8002e90 <_strtol_l.isra.0+0xfc>
 8002e76:	b122      	cbz	r2, 8002e82 <_strtol_l.isra.0+0xee>
 8002e78:	3d01      	subs	r5, #1
 8002e7a:	f8ca 5000 	str.w	r5, [sl]
 8002e7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e82:	464d      	mov	r5, r9
 8002e84:	e7f9      	b.n	8002e7a <_strtol_l.isra.0+0xe6>
 8002e86:	2430      	movs	r4, #48	; 0x30
 8002e88:	2f00      	cmp	r7, #0
 8002e8a:	d1b3      	bne.n	8002df4 <_strtol_l.isra.0+0x60>
 8002e8c:	2708      	movs	r7, #8
 8002e8e:	e7b1      	b.n	8002df4 <_strtol_l.isra.0+0x60>
 8002e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002e94 <strtol>:
 8002e94:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <strtol+0x24>)
 8002e96:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e98:	681c      	ldr	r4, [r3, #0]
 8002e9a:	4d08      	ldr	r5, [pc, #32]	; (8002ebc <strtol+0x28>)
 8002e9c:	6a23      	ldr	r3, [r4, #32]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	bf08      	it	eq
 8002ea2:	462b      	moveq	r3, r5
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	460a      	mov	r2, r1
 8002eaa:	4601      	mov	r1, r0
 8002eac:	4620      	mov	r0, r4
 8002eae:	f7ff ff71 	bl	8002d94 <_strtol_l.isra.0>
 8002eb2:	b003      	add	sp, #12
 8002eb4:	bd30      	pop	{r4, r5, pc}
 8002eb6:	bf00      	nop
 8002eb8:	2000002c 	.word	0x2000002c
 8002ebc:	20000090 	.word	0x20000090

08002ec0 <__locale_ctype_ptr_l>:
 8002ec0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8002ec4:	4770      	bx	lr

08002ec6 <__ascii_mbtowc>:
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	b901      	cbnz	r1, 8002ecc <__ascii_mbtowc+0x6>
 8002eca:	a901      	add	r1, sp, #4
 8002ecc:	b142      	cbz	r2, 8002ee0 <__ascii_mbtowc+0x1a>
 8002ece:	b14b      	cbz	r3, 8002ee4 <__ascii_mbtowc+0x1e>
 8002ed0:	7813      	ldrb	r3, [r2, #0]
 8002ed2:	600b      	str	r3, [r1, #0]
 8002ed4:	7812      	ldrb	r2, [r2, #0]
 8002ed6:	1c10      	adds	r0, r2, #0
 8002ed8:	bf18      	it	ne
 8002eda:	2001      	movne	r0, #1
 8002edc:	b002      	add	sp, #8
 8002ede:	4770      	bx	lr
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	e7fb      	b.n	8002edc <__ascii_mbtowc+0x16>
 8002ee4:	f06f 0001 	mvn.w	r0, #1
 8002ee8:	e7f8      	b.n	8002edc <__ascii_mbtowc+0x16>

08002eea <__ssputs_r>:
 8002eea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002eee:	688e      	ldr	r6, [r1, #8]
 8002ef0:	429e      	cmp	r6, r3
 8002ef2:	4682      	mov	sl, r0
 8002ef4:	460c      	mov	r4, r1
 8002ef6:	4691      	mov	r9, r2
 8002ef8:	4698      	mov	r8, r3
 8002efa:	d835      	bhi.n	8002f68 <__ssputs_r+0x7e>
 8002efc:	898a      	ldrh	r2, [r1, #12]
 8002efe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f02:	d031      	beq.n	8002f68 <__ssputs_r+0x7e>
 8002f04:	6825      	ldr	r5, [r4, #0]
 8002f06:	6909      	ldr	r1, [r1, #16]
 8002f08:	1a6f      	subs	r7, r5, r1
 8002f0a:	6965      	ldr	r5, [r4, #20]
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f12:	fb95 f5f3 	sdiv	r5, r5, r3
 8002f16:	f108 0301 	add.w	r3, r8, #1
 8002f1a:	443b      	add	r3, r7
 8002f1c:	429d      	cmp	r5, r3
 8002f1e:	bf38      	it	cc
 8002f20:	461d      	movcc	r5, r3
 8002f22:	0553      	lsls	r3, r2, #21
 8002f24:	d531      	bpl.n	8002f8a <__ssputs_r+0xa0>
 8002f26:	4629      	mov	r1, r5
 8002f28:	f000 fb44 	bl	80035b4 <_malloc_r>
 8002f2c:	4606      	mov	r6, r0
 8002f2e:	b950      	cbnz	r0, 8002f46 <__ssputs_r+0x5c>
 8002f30:	230c      	movs	r3, #12
 8002f32:	f8ca 3000 	str.w	r3, [sl]
 8002f36:	89a3      	ldrh	r3, [r4, #12]
 8002f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f3c:	81a3      	strh	r3, [r4, #12]
 8002f3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f46:	463a      	mov	r2, r7
 8002f48:	6921      	ldr	r1, [r4, #16]
 8002f4a:	f000 fac0 	bl	80034ce <memcpy>
 8002f4e:	89a3      	ldrh	r3, [r4, #12]
 8002f50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f58:	81a3      	strh	r3, [r4, #12]
 8002f5a:	6126      	str	r6, [r4, #16]
 8002f5c:	6165      	str	r5, [r4, #20]
 8002f5e:	443e      	add	r6, r7
 8002f60:	1bed      	subs	r5, r5, r7
 8002f62:	6026      	str	r6, [r4, #0]
 8002f64:	60a5      	str	r5, [r4, #8]
 8002f66:	4646      	mov	r6, r8
 8002f68:	4546      	cmp	r6, r8
 8002f6a:	bf28      	it	cs
 8002f6c:	4646      	movcs	r6, r8
 8002f6e:	4632      	mov	r2, r6
 8002f70:	4649      	mov	r1, r9
 8002f72:	6820      	ldr	r0, [r4, #0]
 8002f74:	f000 fab6 	bl	80034e4 <memmove>
 8002f78:	68a3      	ldr	r3, [r4, #8]
 8002f7a:	1b9b      	subs	r3, r3, r6
 8002f7c:	60a3      	str	r3, [r4, #8]
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	441e      	add	r6, r3
 8002f82:	6026      	str	r6, [r4, #0]
 8002f84:	2000      	movs	r0, #0
 8002f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f8a:	462a      	mov	r2, r5
 8002f8c:	f000 fb70 	bl	8003670 <_realloc_r>
 8002f90:	4606      	mov	r6, r0
 8002f92:	2800      	cmp	r0, #0
 8002f94:	d1e1      	bne.n	8002f5a <__ssputs_r+0x70>
 8002f96:	6921      	ldr	r1, [r4, #16]
 8002f98:	4650      	mov	r0, sl
 8002f9a:	f000 fabd 	bl	8003518 <_free_r>
 8002f9e:	e7c7      	b.n	8002f30 <__ssputs_r+0x46>

08002fa0 <_svfiprintf_r>:
 8002fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa4:	b09d      	sub	sp, #116	; 0x74
 8002fa6:	4680      	mov	r8, r0
 8002fa8:	9303      	str	r3, [sp, #12]
 8002faa:	898b      	ldrh	r3, [r1, #12]
 8002fac:	061c      	lsls	r4, r3, #24
 8002fae:	460d      	mov	r5, r1
 8002fb0:	4616      	mov	r6, r2
 8002fb2:	d50f      	bpl.n	8002fd4 <_svfiprintf_r+0x34>
 8002fb4:	690b      	ldr	r3, [r1, #16]
 8002fb6:	b96b      	cbnz	r3, 8002fd4 <_svfiprintf_r+0x34>
 8002fb8:	2140      	movs	r1, #64	; 0x40
 8002fba:	f000 fafb 	bl	80035b4 <_malloc_r>
 8002fbe:	6028      	str	r0, [r5, #0]
 8002fc0:	6128      	str	r0, [r5, #16]
 8002fc2:	b928      	cbnz	r0, 8002fd0 <_svfiprintf_r+0x30>
 8002fc4:	230c      	movs	r3, #12
 8002fc6:	f8c8 3000 	str.w	r3, [r8]
 8002fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fce:	e0c5      	b.n	800315c <_svfiprintf_r+0x1bc>
 8002fd0:	2340      	movs	r3, #64	; 0x40
 8002fd2:	616b      	str	r3, [r5, #20]
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8002fd8:	2320      	movs	r3, #32
 8002fda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fde:	2330      	movs	r3, #48	; 0x30
 8002fe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002fe4:	f04f 0b01 	mov.w	fp, #1
 8002fe8:	4637      	mov	r7, r6
 8002fea:	463c      	mov	r4, r7
 8002fec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d13c      	bne.n	800306e <_svfiprintf_r+0xce>
 8002ff4:	ebb7 0a06 	subs.w	sl, r7, r6
 8002ff8:	d00b      	beq.n	8003012 <_svfiprintf_r+0x72>
 8002ffa:	4653      	mov	r3, sl
 8002ffc:	4632      	mov	r2, r6
 8002ffe:	4629      	mov	r1, r5
 8003000:	4640      	mov	r0, r8
 8003002:	f7ff ff72 	bl	8002eea <__ssputs_r>
 8003006:	3001      	adds	r0, #1
 8003008:	f000 80a3 	beq.w	8003152 <_svfiprintf_r+0x1b2>
 800300c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800300e:	4453      	add	r3, sl
 8003010:	9309      	str	r3, [sp, #36]	; 0x24
 8003012:	783b      	ldrb	r3, [r7, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 809c 	beq.w	8003152 <_svfiprintf_r+0x1b2>
 800301a:	2300      	movs	r3, #0
 800301c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003020:	9304      	str	r3, [sp, #16]
 8003022:	9307      	str	r3, [sp, #28]
 8003024:	9205      	str	r2, [sp, #20]
 8003026:	9306      	str	r3, [sp, #24]
 8003028:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800302c:	931a      	str	r3, [sp, #104]	; 0x68
 800302e:	2205      	movs	r2, #5
 8003030:	7821      	ldrb	r1, [r4, #0]
 8003032:	4850      	ldr	r0, [pc, #320]	; (8003174 <_svfiprintf_r+0x1d4>)
 8003034:	f7fd f8dc 	bl	80001f0 <memchr>
 8003038:	1c67      	adds	r7, r4, #1
 800303a:	9b04      	ldr	r3, [sp, #16]
 800303c:	b9d8      	cbnz	r0, 8003076 <_svfiprintf_r+0xd6>
 800303e:	06d9      	lsls	r1, r3, #27
 8003040:	bf44      	itt	mi
 8003042:	2220      	movmi	r2, #32
 8003044:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003048:	071a      	lsls	r2, r3, #28
 800304a:	bf44      	itt	mi
 800304c:	222b      	movmi	r2, #43	; 0x2b
 800304e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003052:	7822      	ldrb	r2, [r4, #0]
 8003054:	2a2a      	cmp	r2, #42	; 0x2a
 8003056:	d016      	beq.n	8003086 <_svfiprintf_r+0xe6>
 8003058:	9a07      	ldr	r2, [sp, #28]
 800305a:	2100      	movs	r1, #0
 800305c:	200a      	movs	r0, #10
 800305e:	4627      	mov	r7, r4
 8003060:	3401      	adds	r4, #1
 8003062:	783b      	ldrb	r3, [r7, #0]
 8003064:	3b30      	subs	r3, #48	; 0x30
 8003066:	2b09      	cmp	r3, #9
 8003068:	d951      	bls.n	800310e <_svfiprintf_r+0x16e>
 800306a:	b1c9      	cbz	r1, 80030a0 <_svfiprintf_r+0x100>
 800306c:	e011      	b.n	8003092 <_svfiprintf_r+0xf2>
 800306e:	2b25      	cmp	r3, #37	; 0x25
 8003070:	d0c0      	beq.n	8002ff4 <_svfiprintf_r+0x54>
 8003072:	4627      	mov	r7, r4
 8003074:	e7b9      	b.n	8002fea <_svfiprintf_r+0x4a>
 8003076:	4a3f      	ldr	r2, [pc, #252]	; (8003174 <_svfiprintf_r+0x1d4>)
 8003078:	1a80      	subs	r0, r0, r2
 800307a:	fa0b f000 	lsl.w	r0, fp, r0
 800307e:	4318      	orrs	r0, r3
 8003080:	9004      	str	r0, [sp, #16]
 8003082:	463c      	mov	r4, r7
 8003084:	e7d3      	b.n	800302e <_svfiprintf_r+0x8e>
 8003086:	9a03      	ldr	r2, [sp, #12]
 8003088:	1d11      	adds	r1, r2, #4
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	9103      	str	r1, [sp, #12]
 800308e:	2a00      	cmp	r2, #0
 8003090:	db01      	blt.n	8003096 <_svfiprintf_r+0xf6>
 8003092:	9207      	str	r2, [sp, #28]
 8003094:	e004      	b.n	80030a0 <_svfiprintf_r+0x100>
 8003096:	4252      	negs	r2, r2
 8003098:	f043 0302 	orr.w	r3, r3, #2
 800309c:	9207      	str	r2, [sp, #28]
 800309e:	9304      	str	r3, [sp, #16]
 80030a0:	783b      	ldrb	r3, [r7, #0]
 80030a2:	2b2e      	cmp	r3, #46	; 0x2e
 80030a4:	d10e      	bne.n	80030c4 <_svfiprintf_r+0x124>
 80030a6:	787b      	ldrb	r3, [r7, #1]
 80030a8:	2b2a      	cmp	r3, #42	; 0x2a
 80030aa:	f107 0101 	add.w	r1, r7, #1
 80030ae:	d132      	bne.n	8003116 <_svfiprintf_r+0x176>
 80030b0:	9b03      	ldr	r3, [sp, #12]
 80030b2:	1d1a      	adds	r2, r3, #4
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	9203      	str	r2, [sp, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bfb8      	it	lt
 80030bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80030c0:	3702      	adds	r7, #2
 80030c2:	9305      	str	r3, [sp, #20]
 80030c4:	4c2c      	ldr	r4, [pc, #176]	; (8003178 <_svfiprintf_r+0x1d8>)
 80030c6:	7839      	ldrb	r1, [r7, #0]
 80030c8:	2203      	movs	r2, #3
 80030ca:	4620      	mov	r0, r4
 80030cc:	f7fd f890 	bl	80001f0 <memchr>
 80030d0:	b138      	cbz	r0, 80030e2 <_svfiprintf_r+0x142>
 80030d2:	2340      	movs	r3, #64	; 0x40
 80030d4:	1b00      	subs	r0, r0, r4
 80030d6:	fa03 f000 	lsl.w	r0, r3, r0
 80030da:	9b04      	ldr	r3, [sp, #16]
 80030dc:	4303      	orrs	r3, r0
 80030de:	9304      	str	r3, [sp, #16]
 80030e0:	3701      	adds	r7, #1
 80030e2:	7839      	ldrb	r1, [r7, #0]
 80030e4:	4825      	ldr	r0, [pc, #148]	; (800317c <_svfiprintf_r+0x1dc>)
 80030e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030ea:	2206      	movs	r2, #6
 80030ec:	1c7e      	adds	r6, r7, #1
 80030ee:	f7fd f87f 	bl	80001f0 <memchr>
 80030f2:	2800      	cmp	r0, #0
 80030f4:	d035      	beq.n	8003162 <_svfiprintf_r+0x1c2>
 80030f6:	4b22      	ldr	r3, [pc, #136]	; (8003180 <_svfiprintf_r+0x1e0>)
 80030f8:	b9fb      	cbnz	r3, 800313a <_svfiprintf_r+0x19a>
 80030fa:	9b03      	ldr	r3, [sp, #12]
 80030fc:	3307      	adds	r3, #7
 80030fe:	f023 0307 	bic.w	r3, r3, #7
 8003102:	3308      	adds	r3, #8
 8003104:	9303      	str	r3, [sp, #12]
 8003106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003108:	444b      	add	r3, r9
 800310a:	9309      	str	r3, [sp, #36]	; 0x24
 800310c:	e76c      	b.n	8002fe8 <_svfiprintf_r+0x48>
 800310e:	fb00 3202 	mla	r2, r0, r2, r3
 8003112:	2101      	movs	r1, #1
 8003114:	e7a3      	b.n	800305e <_svfiprintf_r+0xbe>
 8003116:	2300      	movs	r3, #0
 8003118:	9305      	str	r3, [sp, #20]
 800311a:	4618      	mov	r0, r3
 800311c:	240a      	movs	r4, #10
 800311e:	460f      	mov	r7, r1
 8003120:	3101      	adds	r1, #1
 8003122:	783a      	ldrb	r2, [r7, #0]
 8003124:	3a30      	subs	r2, #48	; 0x30
 8003126:	2a09      	cmp	r2, #9
 8003128:	d903      	bls.n	8003132 <_svfiprintf_r+0x192>
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0ca      	beq.n	80030c4 <_svfiprintf_r+0x124>
 800312e:	9005      	str	r0, [sp, #20]
 8003130:	e7c8      	b.n	80030c4 <_svfiprintf_r+0x124>
 8003132:	fb04 2000 	mla	r0, r4, r0, r2
 8003136:	2301      	movs	r3, #1
 8003138:	e7f1      	b.n	800311e <_svfiprintf_r+0x17e>
 800313a:	ab03      	add	r3, sp, #12
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	462a      	mov	r2, r5
 8003140:	4b10      	ldr	r3, [pc, #64]	; (8003184 <_svfiprintf_r+0x1e4>)
 8003142:	a904      	add	r1, sp, #16
 8003144:	4640      	mov	r0, r8
 8003146:	f3af 8000 	nop.w
 800314a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800314e:	4681      	mov	r9, r0
 8003150:	d1d9      	bne.n	8003106 <_svfiprintf_r+0x166>
 8003152:	89ab      	ldrh	r3, [r5, #12]
 8003154:	065b      	lsls	r3, r3, #25
 8003156:	f53f af38 	bmi.w	8002fca <_svfiprintf_r+0x2a>
 800315a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800315c:	b01d      	add	sp, #116	; 0x74
 800315e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003162:	ab03      	add	r3, sp, #12
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	462a      	mov	r2, r5
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <_svfiprintf_r+0x1e4>)
 800316a:	a904      	add	r1, sp, #16
 800316c:	4640      	mov	r0, r8
 800316e:	f000 f881 	bl	8003274 <_printf_i>
 8003172:	e7ea      	b.n	800314a <_svfiprintf_r+0x1aa>
 8003174:	080049b0 	.word	0x080049b0
 8003178:	080049b6 	.word	0x080049b6
 800317c:	080049ba 	.word	0x080049ba
 8003180:	00000000 	.word	0x00000000
 8003184:	08002eeb 	.word	0x08002eeb

08003188 <_printf_common>:
 8003188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800318c:	4691      	mov	r9, r2
 800318e:	461f      	mov	r7, r3
 8003190:	688a      	ldr	r2, [r1, #8]
 8003192:	690b      	ldr	r3, [r1, #16]
 8003194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003198:	4293      	cmp	r3, r2
 800319a:	bfb8      	it	lt
 800319c:	4613      	movlt	r3, r2
 800319e:	f8c9 3000 	str.w	r3, [r9]
 80031a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031a6:	4606      	mov	r6, r0
 80031a8:	460c      	mov	r4, r1
 80031aa:	b112      	cbz	r2, 80031b2 <_printf_common+0x2a>
 80031ac:	3301      	adds	r3, #1
 80031ae:	f8c9 3000 	str.w	r3, [r9]
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	0699      	lsls	r1, r3, #26
 80031b6:	bf42      	ittt	mi
 80031b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80031bc:	3302      	addmi	r3, #2
 80031be:	f8c9 3000 	strmi.w	r3, [r9]
 80031c2:	6825      	ldr	r5, [r4, #0]
 80031c4:	f015 0506 	ands.w	r5, r5, #6
 80031c8:	d107      	bne.n	80031da <_printf_common+0x52>
 80031ca:	f104 0a19 	add.w	sl, r4, #25
 80031ce:	68e3      	ldr	r3, [r4, #12]
 80031d0:	f8d9 2000 	ldr.w	r2, [r9]
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	429d      	cmp	r5, r3
 80031d8:	db29      	blt.n	800322e <_printf_common+0xa6>
 80031da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80031de:	6822      	ldr	r2, [r4, #0]
 80031e0:	3300      	adds	r3, #0
 80031e2:	bf18      	it	ne
 80031e4:	2301      	movne	r3, #1
 80031e6:	0692      	lsls	r2, r2, #26
 80031e8:	d42e      	bmi.n	8003248 <_printf_common+0xc0>
 80031ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031ee:	4639      	mov	r1, r7
 80031f0:	4630      	mov	r0, r6
 80031f2:	47c0      	blx	r8
 80031f4:	3001      	adds	r0, #1
 80031f6:	d021      	beq.n	800323c <_printf_common+0xb4>
 80031f8:	6823      	ldr	r3, [r4, #0]
 80031fa:	68e5      	ldr	r5, [r4, #12]
 80031fc:	f8d9 2000 	ldr.w	r2, [r9]
 8003200:	f003 0306 	and.w	r3, r3, #6
 8003204:	2b04      	cmp	r3, #4
 8003206:	bf08      	it	eq
 8003208:	1aad      	subeq	r5, r5, r2
 800320a:	68a3      	ldr	r3, [r4, #8]
 800320c:	6922      	ldr	r2, [r4, #16]
 800320e:	bf0c      	ite	eq
 8003210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003214:	2500      	movne	r5, #0
 8003216:	4293      	cmp	r3, r2
 8003218:	bfc4      	itt	gt
 800321a:	1a9b      	subgt	r3, r3, r2
 800321c:	18ed      	addgt	r5, r5, r3
 800321e:	f04f 0900 	mov.w	r9, #0
 8003222:	341a      	adds	r4, #26
 8003224:	454d      	cmp	r5, r9
 8003226:	d11b      	bne.n	8003260 <_printf_common+0xd8>
 8003228:	2000      	movs	r0, #0
 800322a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800322e:	2301      	movs	r3, #1
 8003230:	4652      	mov	r2, sl
 8003232:	4639      	mov	r1, r7
 8003234:	4630      	mov	r0, r6
 8003236:	47c0      	blx	r8
 8003238:	3001      	adds	r0, #1
 800323a:	d103      	bne.n	8003244 <_printf_common+0xbc>
 800323c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003244:	3501      	adds	r5, #1
 8003246:	e7c2      	b.n	80031ce <_printf_common+0x46>
 8003248:	18e1      	adds	r1, r4, r3
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	2030      	movs	r0, #48	; 0x30
 800324e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003252:	4422      	add	r2, r4
 8003254:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003258:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800325c:	3302      	adds	r3, #2
 800325e:	e7c4      	b.n	80031ea <_printf_common+0x62>
 8003260:	2301      	movs	r3, #1
 8003262:	4622      	mov	r2, r4
 8003264:	4639      	mov	r1, r7
 8003266:	4630      	mov	r0, r6
 8003268:	47c0      	blx	r8
 800326a:	3001      	adds	r0, #1
 800326c:	d0e6      	beq.n	800323c <_printf_common+0xb4>
 800326e:	f109 0901 	add.w	r9, r9, #1
 8003272:	e7d7      	b.n	8003224 <_printf_common+0x9c>

08003274 <_printf_i>:
 8003274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003278:	4617      	mov	r7, r2
 800327a:	7e0a      	ldrb	r2, [r1, #24]
 800327c:	b085      	sub	sp, #20
 800327e:	2a6e      	cmp	r2, #110	; 0x6e
 8003280:	4698      	mov	r8, r3
 8003282:	4606      	mov	r6, r0
 8003284:	460c      	mov	r4, r1
 8003286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003288:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800328c:	f000 80bc 	beq.w	8003408 <_printf_i+0x194>
 8003290:	d81a      	bhi.n	80032c8 <_printf_i+0x54>
 8003292:	2a63      	cmp	r2, #99	; 0x63
 8003294:	d02e      	beq.n	80032f4 <_printf_i+0x80>
 8003296:	d80a      	bhi.n	80032ae <_printf_i+0x3a>
 8003298:	2a00      	cmp	r2, #0
 800329a:	f000 80c8 	beq.w	800342e <_printf_i+0x1ba>
 800329e:	2a58      	cmp	r2, #88	; 0x58
 80032a0:	f000 808a 	beq.w	80033b8 <_printf_i+0x144>
 80032a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032a8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80032ac:	e02a      	b.n	8003304 <_printf_i+0x90>
 80032ae:	2a64      	cmp	r2, #100	; 0x64
 80032b0:	d001      	beq.n	80032b6 <_printf_i+0x42>
 80032b2:	2a69      	cmp	r2, #105	; 0x69
 80032b4:	d1f6      	bne.n	80032a4 <_printf_i+0x30>
 80032b6:	6821      	ldr	r1, [r4, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	f011 0f80 	tst.w	r1, #128	; 0x80
 80032be:	d023      	beq.n	8003308 <_printf_i+0x94>
 80032c0:	1d11      	adds	r1, r2, #4
 80032c2:	6019      	str	r1, [r3, #0]
 80032c4:	6813      	ldr	r3, [r2, #0]
 80032c6:	e027      	b.n	8003318 <_printf_i+0xa4>
 80032c8:	2a73      	cmp	r2, #115	; 0x73
 80032ca:	f000 80b4 	beq.w	8003436 <_printf_i+0x1c2>
 80032ce:	d808      	bhi.n	80032e2 <_printf_i+0x6e>
 80032d0:	2a6f      	cmp	r2, #111	; 0x6f
 80032d2:	d02a      	beq.n	800332a <_printf_i+0xb6>
 80032d4:	2a70      	cmp	r2, #112	; 0x70
 80032d6:	d1e5      	bne.n	80032a4 <_printf_i+0x30>
 80032d8:	680a      	ldr	r2, [r1, #0]
 80032da:	f042 0220 	orr.w	r2, r2, #32
 80032de:	600a      	str	r2, [r1, #0]
 80032e0:	e003      	b.n	80032ea <_printf_i+0x76>
 80032e2:	2a75      	cmp	r2, #117	; 0x75
 80032e4:	d021      	beq.n	800332a <_printf_i+0xb6>
 80032e6:	2a78      	cmp	r2, #120	; 0x78
 80032e8:	d1dc      	bne.n	80032a4 <_printf_i+0x30>
 80032ea:	2278      	movs	r2, #120	; 0x78
 80032ec:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80032f0:	496e      	ldr	r1, [pc, #440]	; (80034ac <_printf_i+0x238>)
 80032f2:	e064      	b.n	80033be <_printf_i+0x14a>
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80032fa:	1d11      	adds	r1, r2, #4
 80032fc:	6019      	str	r1, [r3, #0]
 80032fe:	6813      	ldr	r3, [r2, #0]
 8003300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003304:	2301      	movs	r3, #1
 8003306:	e0a3      	b.n	8003450 <_printf_i+0x1dc>
 8003308:	f011 0f40 	tst.w	r1, #64	; 0x40
 800330c:	f102 0104 	add.w	r1, r2, #4
 8003310:	6019      	str	r1, [r3, #0]
 8003312:	d0d7      	beq.n	80032c4 <_printf_i+0x50>
 8003314:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003318:	2b00      	cmp	r3, #0
 800331a:	da03      	bge.n	8003324 <_printf_i+0xb0>
 800331c:	222d      	movs	r2, #45	; 0x2d
 800331e:	425b      	negs	r3, r3
 8003320:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003324:	4962      	ldr	r1, [pc, #392]	; (80034b0 <_printf_i+0x23c>)
 8003326:	220a      	movs	r2, #10
 8003328:	e017      	b.n	800335a <_printf_i+0xe6>
 800332a:	6820      	ldr	r0, [r4, #0]
 800332c:	6819      	ldr	r1, [r3, #0]
 800332e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003332:	d003      	beq.n	800333c <_printf_i+0xc8>
 8003334:	1d08      	adds	r0, r1, #4
 8003336:	6018      	str	r0, [r3, #0]
 8003338:	680b      	ldr	r3, [r1, #0]
 800333a:	e006      	b.n	800334a <_printf_i+0xd6>
 800333c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003340:	f101 0004 	add.w	r0, r1, #4
 8003344:	6018      	str	r0, [r3, #0]
 8003346:	d0f7      	beq.n	8003338 <_printf_i+0xc4>
 8003348:	880b      	ldrh	r3, [r1, #0]
 800334a:	4959      	ldr	r1, [pc, #356]	; (80034b0 <_printf_i+0x23c>)
 800334c:	2a6f      	cmp	r2, #111	; 0x6f
 800334e:	bf14      	ite	ne
 8003350:	220a      	movne	r2, #10
 8003352:	2208      	moveq	r2, #8
 8003354:	2000      	movs	r0, #0
 8003356:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800335a:	6865      	ldr	r5, [r4, #4]
 800335c:	60a5      	str	r5, [r4, #8]
 800335e:	2d00      	cmp	r5, #0
 8003360:	f2c0 809c 	blt.w	800349c <_printf_i+0x228>
 8003364:	6820      	ldr	r0, [r4, #0]
 8003366:	f020 0004 	bic.w	r0, r0, #4
 800336a:	6020      	str	r0, [r4, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d13f      	bne.n	80033f0 <_printf_i+0x17c>
 8003370:	2d00      	cmp	r5, #0
 8003372:	f040 8095 	bne.w	80034a0 <_printf_i+0x22c>
 8003376:	4675      	mov	r5, lr
 8003378:	2a08      	cmp	r2, #8
 800337a:	d10b      	bne.n	8003394 <_printf_i+0x120>
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	07da      	lsls	r2, r3, #31
 8003380:	d508      	bpl.n	8003394 <_printf_i+0x120>
 8003382:	6923      	ldr	r3, [r4, #16]
 8003384:	6862      	ldr	r2, [r4, #4]
 8003386:	429a      	cmp	r2, r3
 8003388:	bfde      	ittt	le
 800338a:	2330      	movle	r3, #48	; 0x30
 800338c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003390:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003394:	ebae 0305 	sub.w	r3, lr, r5
 8003398:	6123      	str	r3, [r4, #16]
 800339a:	f8cd 8000 	str.w	r8, [sp]
 800339e:	463b      	mov	r3, r7
 80033a0:	aa03      	add	r2, sp, #12
 80033a2:	4621      	mov	r1, r4
 80033a4:	4630      	mov	r0, r6
 80033a6:	f7ff feef 	bl	8003188 <_printf_common>
 80033aa:	3001      	adds	r0, #1
 80033ac:	d155      	bne.n	800345a <_printf_i+0x1e6>
 80033ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033b2:	b005      	add	sp, #20
 80033b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033b8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80033bc:	493c      	ldr	r1, [pc, #240]	; (80034b0 <_printf_i+0x23c>)
 80033be:	6822      	ldr	r2, [r4, #0]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80033c6:	f100 0504 	add.w	r5, r0, #4
 80033ca:	601d      	str	r5, [r3, #0]
 80033cc:	d001      	beq.n	80033d2 <_printf_i+0x15e>
 80033ce:	6803      	ldr	r3, [r0, #0]
 80033d0:	e002      	b.n	80033d8 <_printf_i+0x164>
 80033d2:	0655      	lsls	r5, r2, #25
 80033d4:	d5fb      	bpl.n	80033ce <_printf_i+0x15a>
 80033d6:	8803      	ldrh	r3, [r0, #0]
 80033d8:	07d0      	lsls	r0, r2, #31
 80033da:	bf44      	itt	mi
 80033dc:	f042 0220 	orrmi.w	r2, r2, #32
 80033e0:	6022      	strmi	r2, [r4, #0]
 80033e2:	b91b      	cbnz	r3, 80033ec <_printf_i+0x178>
 80033e4:	6822      	ldr	r2, [r4, #0]
 80033e6:	f022 0220 	bic.w	r2, r2, #32
 80033ea:	6022      	str	r2, [r4, #0]
 80033ec:	2210      	movs	r2, #16
 80033ee:	e7b1      	b.n	8003354 <_printf_i+0xe0>
 80033f0:	4675      	mov	r5, lr
 80033f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80033f6:	fb02 3310 	mls	r3, r2, r0, r3
 80033fa:	5ccb      	ldrb	r3, [r1, r3]
 80033fc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003400:	4603      	mov	r3, r0
 8003402:	2800      	cmp	r0, #0
 8003404:	d1f5      	bne.n	80033f2 <_printf_i+0x17e>
 8003406:	e7b7      	b.n	8003378 <_printf_i+0x104>
 8003408:	6808      	ldr	r0, [r1, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	6949      	ldr	r1, [r1, #20]
 800340e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003412:	d004      	beq.n	800341e <_printf_i+0x1aa>
 8003414:	1d10      	adds	r0, r2, #4
 8003416:	6018      	str	r0, [r3, #0]
 8003418:	6813      	ldr	r3, [r2, #0]
 800341a:	6019      	str	r1, [r3, #0]
 800341c:	e007      	b.n	800342e <_printf_i+0x1ba>
 800341e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003422:	f102 0004 	add.w	r0, r2, #4
 8003426:	6018      	str	r0, [r3, #0]
 8003428:	6813      	ldr	r3, [r2, #0]
 800342a:	d0f6      	beq.n	800341a <_printf_i+0x1a6>
 800342c:	8019      	strh	r1, [r3, #0]
 800342e:	2300      	movs	r3, #0
 8003430:	6123      	str	r3, [r4, #16]
 8003432:	4675      	mov	r5, lr
 8003434:	e7b1      	b.n	800339a <_printf_i+0x126>
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	1d11      	adds	r1, r2, #4
 800343a:	6019      	str	r1, [r3, #0]
 800343c:	6815      	ldr	r5, [r2, #0]
 800343e:	6862      	ldr	r2, [r4, #4]
 8003440:	2100      	movs	r1, #0
 8003442:	4628      	mov	r0, r5
 8003444:	f7fc fed4 	bl	80001f0 <memchr>
 8003448:	b108      	cbz	r0, 800344e <_printf_i+0x1da>
 800344a:	1b40      	subs	r0, r0, r5
 800344c:	6060      	str	r0, [r4, #4]
 800344e:	6863      	ldr	r3, [r4, #4]
 8003450:	6123      	str	r3, [r4, #16]
 8003452:	2300      	movs	r3, #0
 8003454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003458:	e79f      	b.n	800339a <_printf_i+0x126>
 800345a:	6923      	ldr	r3, [r4, #16]
 800345c:	462a      	mov	r2, r5
 800345e:	4639      	mov	r1, r7
 8003460:	4630      	mov	r0, r6
 8003462:	47c0      	blx	r8
 8003464:	3001      	adds	r0, #1
 8003466:	d0a2      	beq.n	80033ae <_printf_i+0x13a>
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	079b      	lsls	r3, r3, #30
 800346c:	d507      	bpl.n	800347e <_printf_i+0x20a>
 800346e:	2500      	movs	r5, #0
 8003470:	f104 0919 	add.w	r9, r4, #25
 8003474:	68e3      	ldr	r3, [r4, #12]
 8003476:	9a03      	ldr	r2, [sp, #12]
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	429d      	cmp	r5, r3
 800347c:	db05      	blt.n	800348a <_printf_i+0x216>
 800347e:	68e0      	ldr	r0, [r4, #12]
 8003480:	9b03      	ldr	r3, [sp, #12]
 8003482:	4298      	cmp	r0, r3
 8003484:	bfb8      	it	lt
 8003486:	4618      	movlt	r0, r3
 8003488:	e793      	b.n	80033b2 <_printf_i+0x13e>
 800348a:	2301      	movs	r3, #1
 800348c:	464a      	mov	r2, r9
 800348e:	4639      	mov	r1, r7
 8003490:	4630      	mov	r0, r6
 8003492:	47c0      	blx	r8
 8003494:	3001      	adds	r0, #1
 8003496:	d08a      	beq.n	80033ae <_printf_i+0x13a>
 8003498:	3501      	adds	r5, #1
 800349a:	e7eb      	b.n	8003474 <_printf_i+0x200>
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1a7      	bne.n	80033f0 <_printf_i+0x17c>
 80034a0:	780b      	ldrb	r3, [r1, #0]
 80034a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034aa:	e765      	b.n	8003378 <_printf_i+0x104>
 80034ac:	080049d2 	.word	0x080049d2
 80034b0:	080049c1 	.word	0x080049c1

080034b4 <__ascii_wctomb>:
 80034b4:	b149      	cbz	r1, 80034ca <__ascii_wctomb+0x16>
 80034b6:	2aff      	cmp	r2, #255	; 0xff
 80034b8:	bf85      	ittet	hi
 80034ba:	238a      	movhi	r3, #138	; 0x8a
 80034bc:	6003      	strhi	r3, [r0, #0]
 80034be:	700a      	strbls	r2, [r1, #0]
 80034c0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80034c4:	bf98      	it	ls
 80034c6:	2001      	movls	r0, #1
 80034c8:	4770      	bx	lr
 80034ca:	4608      	mov	r0, r1
 80034cc:	4770      	bx	lr

080034ce <memcpy>:
 80034ce:	b510      	push	{r4, lr}
 80034d0:	1e43      	subs	r3, r0, #1
 80034d2:	440a      	add	r2, r1
 80034d4:	4291      	cmp	r1, r2
 80034d6:	d100      	bne.n	80034da <memcpy+0xc>
 80034d8:	bd10      	pop	{r4, pc}
 80034da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034e2:	e7f7      	b.n	80034d4 <memcpy+0x6>

080034e4 <memmove>:
 80034e4:	4288      	cmp	r0, r1
 80034e6:	b510      	push	{r4, lr}
 80034e8:	eb01 0302 	add.w	r3, r1, r2
 80034ec:	d803      	bhi.n	80034f6 <memmove+0x12>
 80034ee:	1e42      	subs	r2, r0, #1
 80034f0:	4299      	cmp	r1, r3
 80034f2:	d10c      	bne.n	800350e <memmove+0x2a>
 80034f4:	bd10      	pop	{r4, pc}
 80034f6:	4298      	cmp	r0, r3
 80034f8:	d2f9      	bcs.n	80034ee <memmove+0xa>
 80034fa:	1881      	adds	r1, r0, r2
 80034fc:	1ad2      	subs	r2, r2, r3
 80034fe:	42d3      	cmn	r3, r2
 8003500:	d100      	bne.n	8003504 <memmove+0x20>
 8003502:	bd10      	pop	{r4, pc}
 8003504:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003508:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800350c:	e7f7      	b.n	80034fe <memmove+0x1a>
 800350e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003512:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003516:	e7eb      	b.n	80034f0 <memmove+0xc>

08003518 <_free_r>:
 8003518:	b538      	push	{r3, r4, r5, lr}
 800351a:	4605      	mov	r5, r0
 800351c:	2900      	cmp	r1, #0
 800351e:	d045      	beq.n	80035ac <_free_r+0x94>
 8003520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003524:	1f0c      	subs	r4, r1, #4
 8003526:	2b00      	cmp	r3, #0
 8003528:	bfb8      	it	lt
 800352a:	18e4      	addlt	r4, r4, r3
 800352c:	f000 f8d6 	bl	80036dc <__malloc_lock>
 8003530:	4a1f      	ldr	r2, [pc, #124]	; (80035b0 <_free_r+0x98>)
 8003532:	6813      	ldr	r3, [r2, #0]
 8003534:	4610      	mov	r0, r2
 8003536:	b933      	cbnz	r3, 8003546 <_free_r+0x2e>
 8003538:	6063      	str	r3, [r4, #4]
 800353a:	6014      	str	r4, [r2, #0]
 800353c:	4628      	mov	r0, r5
 800353e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003542:	f000 b8cc 	b.w	80036de <__malloc_unlock>
 8003546:	42a3      	cmp	r3, r4
 8003548:	d90c      	bls.n	8003564 <_free_r+0x4c>
 800354a:	6821      	ldr	r1, [r4, #0]
 800354c:	1862      	adds	r2, r4, r1
 800354e:	4293      	cmp	r3, r2
 8003550:	bf04      	itt	eq
 8003552:	681a      	ldreq	r2, [r3, #0]
 8003554:	685b      	ldreq	r3, [r3, #4]
 8003556:	6063      	str	r3, [r4, #4]
 8003558:	bf04      	itt	eq
 800355a:	1852      	addeq	r2, r2, r1
 800355c:	6022      	streq	r2, [r4, #0]
 800355e:	6004      	str	r4, [r0, #0]
 8003560:	e7ec      	b.n	800353c <_free_r+0x24>
 8003562:	4613      	mov	r3, r2
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	b10a      	cbz	r2, 800356c <_free_r+0x54>
 8003568:	42a2      	cmp	r2, r4
 800356a:	d9fa      	bls.n	8003562 <_free_r+0x4a>
 800356c:	6819      	ldr	r1, [r3, #0]
 800356e:	1858      	adds	r0, r3, r1
 8003570:	42a0      	cmp	r0, r4
 8003572:	d10b      	bne.n	800358c <_free_r+0x74>
 8003574:	6820      	ldr	r0, [r4, #0]
 8003576:	4401      	add	r1, r0
 8003578:	1858      	adds	r0, r3, r1
 800357a:	4282      	cmp	r2, r0
 800357c:	6019      	str	r1, [r3, #0]
 800357e:	d1dd      	bne.n	800353c <_free_r+0x24>
 8003580:	6810      	ldr	r0, [r2, #0]
 8003582:	6852      	ldr	r2, [r2, #4]
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	4401      	add	r1, r0
 8003588:	6019      	str	r1, [r3, #0]
 800358a:	e7d7      	b.n	800353c <_free_r+0x24>
 800358c:	d902      	bls.n	8003594 <_free_r+0x7c>
 800358e:	230c      	movs	r3, #12
 8003590:	602b      	str	r3, [r5, #0]
 8003592:	e7d3      	b.n	800353c <_free_r+0x24>
 8003594:	6820      	ldr	r0, [r4, #0]
 8003596:	1821      	adds	r1, r4, r0
 8003598:	428a      	cmp	r2, r1
 800359a:	bf04      	itt	eq
 800359c:	6811      	ldreq	r1, [r2, #0]
 800359e:	6852      	ldreq	r2, [r2, #4]
 80035a0:	6062      	str	r2, [r4, #4]
 80035a2:	bf04      	itt	eq
 80035a4:	1809      	addeq	r1, r1, r0
 80035a6:	6021      	streq	r1, [r4, #0]
 80035a8:	605c      	str	r4, [r3, #4]
 80035aa:	e7c7      	b.n	800353c <_free_r+0x24>
 80035ac:	bd38      	pop	{r3, r4, r5, pc}
 80035ae:	bf00      	nop
 80035b0:	2000024c 	.word	0x2000024c

080035b4 <_malloc_r>:
 80035b4:	b570      	push	{r4, r5, r6, lr}
 80035b6:	1ccd      	adds	r5, r1, #3
 80035b8:	f025 0503 	bic.w	r5, r5, #3
 80035bc:	3508      	adds	r5, #8
 80035be:	2d0c      	cmp	r5, #12
 80035c0:	bf38      	it	cc
 80035c2:	250c      	movcc	r5, #12
 80035c4:	2d00      	cmp	r5, #0
 80035c6:	4606      	mov	r6, r0
 80035c8:	db01      	blt.n	80035ce <_malloc_r+0x1a>
 80035ca:	42a9      	cmp	r1, r5
 80035cc:	d903      	bls.n	80035d6 <_malloc_r+0x22>
 80035ce:	230c      	movs	r3, #12
 80035d0:	6033      	str	r3, [r6, #0]
 80035d2:	2000      	movs	r0, #0
 80035d4:	bd70      	pop	{r4, r5, r6, pc}
 80035d6:	f000 f881 	bl	80036dc <__malloc_lock>
 80035da:	4a23      	ldr	r2, [pc, #140]	; (8003668 <_malloc_r+0xb4>)
 80035dc:	6814      	ldr	r4, [r2, #0]
 80035de:	4621      	mov	r1, r4
 80035e0:	b991      	cbnz	r1, 8003608 <_malloc_r+0x54>
 80035e2:	4c22      	ldr	r4, [pc, #136]	; (800366c <_malloc_r+0xb8>)
 80035e4:	6823      	ldr	r3, [r4, #0]
 80035e6:	b91b      	cbnz	r3, 80035f0 <_malloc_r+0x3c>
 80035e8:	4630      	mov	r0, r6
 80035ea:	f000 f867 	bl	80036bc <_sbrk_r>
 80035ee:	6020      	str	r0, [r4, #0]
 80035f0:	4629      	mov	r1, r5
 80035f2:	4630      	mov	r0, r6
 80035f4:	f000 f862 	bl	80036bc <_sbrk_r>
 80035f8:	1c43      	adds	r3, r0, #1
 80035fa:	d126      	bne.n	800364a <_malloc_r+0x96>
 80035fc:	230c      	movs	r3, #12
 80035fe:	6033      	str	r3, [r6, #0]
 8003600:	4630      	mov	r0, r6
 8003602:	f000 f86c 	bl	80036de <__malloc_unlock>
 8003606:	e7e4      	b.n	80035d2 <_malloc_r+0x1e>
 8003608:	680b      	ldr	r3, [r1, #0]
 800360a:	1b5b      	subs	r3, r3, r5
 800360c:	d41a      	bmi.n	8003644 <_malloc_r+0x90>
 800360e:	2b0b      	cmp	r3, #11
 8003610:	d90f      	bls.n	8003632 <_malloc_r+0x7e>
 8003612:	600b      	str	r3, [r1, #0]
 8003614:	50cd      	str	r5, [r1, r3]
 8003616:	18cc      	adds	r4, r1, r3
 8003618:	4630      	mov	r0, r6
 800361a:	f000 f860 	bl	80036de <__malloc_unlock>
 800361e:	f104 000b 	add.w	r0, r4, #11
 8003622:	1d23      	adds	r3, r4, #4
 8003624:	f020 0007 	bic.w	r0, r0, #7
 8003628:	1ac3      	subs	r3, r0, r3
 800362a:	d01b      	beq.n	8003664 <_malloc_r+0xb0>
 800362c:	425a      	negs	r2, r3
 800362e:	50e2      	str	r2, [r4, r3]
 8003630:	bd70      	pop	{r4, r5, r6, pc}
 8003632:	428c      	cmp	r4, r1
 8003634:	bf0d      	iteet	eq
 8003636:	6863      	ldreq	r3, [r4, #4]
 8003638:	684b      	ldrne	r3, [r1, #4]
 800363a:	6063      	strne	r3, [r4, #4]
 800363c:	6013      	streq	r3, [r2, #0]
 800363e:	bf18      	it	ne
 8003640:	460c      	movne	r4, r1
 8003642:	e7e9      	b.n	8003618 <_malloc_r+0x64>
 8003644:	460c      	mov	r4, r1
 8003646:	6849      	ldr	r1, [r1, #4]
 8003648:	e7ca      	b.n	80035e0 <_malloc_r+0x2c>
 800364a:	1cc4      	adds	r4, r0, #3
 800364c:	f024 0403 	bic.w	r4, r4, #3
 8003650:	42a0      	cmp	r0, r4
 8003652:	d005      	beq.n	8003660 <_malloc_r+0xac>
 8003654:	1a21      	subs	r1, r4, r0
 8003656:	4630      	mov	r0, r6
 8003658:	f000 f830 	bl	80036bc <_sbrk_r>
 800365c:	3001      	adds	r0, #1
 800365e:	d0cd      	beq.n	80035fc <_malloc_r+0x48>
 8003660:	6025      	str	r5, [r4, #0]
 8003662:	e7d9      	b.n	8003618 <_malloc_r+0x64>
 8003664:	bd70      	pop	{r4, r5, r6, pc}
 8003666:	bf00      	nop
 8003668:	2000024c 	.word	0x2000024c
 800366c:	20000250 	.word	0x20000250

08003670 <_realloc_r>:
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003672:	4607      	mov	r7, r0
 8003674:	4614      	mov	r4, r2
 8003676:	460e      	mov	r6, r1
 8003678:	b921      	cbnz	r1, 8003684 <_realloc_r+0x14>
 800367a:	4611      	mov	r1, r2
 800367c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003680:	f7ff bf98 	b.w	80035b4 <_malloc_r>
 8003684:	b922      	cbnz	r2, 8003690 <_realloc_r+0x20>
 8003686:	f7ff ff47 	bl	8003518 <_free_r>
 800368a:	4625      	mov	r5, r4
 800368c:	4628      	mov	r0, r5
 800368e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003690:	f000 f826 	bl	80036e0 <_malloc_usable_size_r>
 8003694:	4284      	cmp	r4, r0
 8003696:	d90f      	bls.n	80036b8 <_realloc_r+0x48>
 8003698:	4621      	mov	r1, r4
 800369a:	4638      	mov	r0, r7
 800369c:	f7ff ff8a 	bl	80035b4 <_malloc_r>
 80036a0:	4605      	mov	r5, r0
 80036a2:	2800      	cmp	r0, #0
 80036a4:	d0f2      	beq.n	800368c <_realloc_r+0x1c>
 80036a6:	4631      	mov	r1, r6
 80036a8:	4622      	mov	r2, r4
 80036aa:	f7ff ff10 	bl	80034ce <memcpy>
 80036ae:	4631      	mov	r1, r6
 80036b0:	4638      	mov	r0, r7
 80036b2:	f7ff ff31 	bl	8003518 <_free_r>
 80036b6:	e7e9      	b.n	800368c <_realloc_r+0x1c>
 80036b8:	4635      	mov	r5, r6
 80036ba:	e7e7      	b.n	800368c <_realloc_r+0x1c>

080036bc <_sbrk_r>:
 80036bc:	b538      	push	{r3, r4, r5, lr}
 80036be:	4c06      	ldr	r4, [pc, #24]	; (80036d8 <_sbrk_r+0x1c>)
 80036c0:	2300      	movs	r3, #0
 80036c2:	4605      	mov	r5, r0
 80036c4:	4608      	mov	r0, r1
 80036c6:	6023      	str	r3, [r4, #0]
 80036c8:	f7ff faa0 	bl	8002c0c <_sbrk>
 80036cc:	1c43      	adds	r3, r0, #1
 80036ce:	d102      	bne.n	80036d6 <_sbrk_r+0x1a>
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	b103      	cbz	r3, 80036d6 <_sbrk_r+0x1a>
 80036d4:	602b      	str	r3, [r5, #0]
 80036d6:	bd38      	pop	{r3, r4, r5, pc}
 80036d8:	20000358 	.word	0x20000358

080036dc <__malloc_lock>:
 80036dc:	4770      	bx	lr

080036de <__malloc_unlock>:
 80036de:	4770      	bx	lr

080036e0 <_malloc_usable_size_r>:
 80036e0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80036e4:	2800      	cmp	r0, #0
 80036e6:	f1a0 0004 	sub.w	r0, r0, #4
 80036ea:	bfbc      	itt	lt
 80036ec:	580b      	ldrlt	r3, [r1, r0]
 80036ee:	18c0      	addlt	r0, r0, r3
 80036f0:	4770      	bx	lr
 80036f2:	0000      	movs	r0, r0
 80036f4:	0000      	movs	r0, r0
	...

080036f8 <cos>:
 80036f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80036fa:	ec51 0b10 	vmov	r0, r1, d0
 80036fe:	4a1e      	ldr	r2, [pc, #120]	; (8003778 <cos+0x80>)
 8003700:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003704:	4293      	cmp	r3, r2
 8003706:	dc06      	bgt.n	8003716 <cos+0x1e>
 8003708:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8003770 <cos+0x78>
 800370c:	f000 fa74 	bl	8003bf8 <__kernel_cos>
 8003710:	ec51 0b10 	vmov	r0, r1, d0
 8003714:	e007      	b.n	8003726 <cos+0x2e>
 8003716:	4a19      	ldr	r2, [pc, #100]	; (800377c <cos+0x84>)
 8003718:	4293      	cmp	r3, r2
 800371a:	dd09      	ble.n	8003730 <cos+0x38>
 800371c:	ee10 2a10 	vmov	r2, s0
 8003720:	460b      	mov	r3, r1
 8003722:	f7fc fdb9 	bl	8000298 <__aeabi_dsub>
 8003726:	ec41 0b10 	vmov	d0, r0, r1
 800372a:	b005      	add	sp, #20
 800372c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003730:	4668      	mov	r0, sp
 8003732:	f000 f86d 	bl	8003810 <__ieee754_rem_pio2>
 8003736:	f000 0003 	and.w	r0, r0, #3
 800373a:	2801      	cmp	r0, #1
 800373c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003740:	ed9d 0b00 	vldr	d0, [sp]
 8003744:	d007      	beq.n	8003756 <cos+0x5e>
 8003746:	2802      	cmp	r0, #2
 8003748:	d00e      	beq.n	8003768 <cos+0x70>
 800374a:	2800      	cmp	r0, #0
 800374c:	d0de      	beq.n	800370c <cos+0x14>
 800374e:	2001      	movs	r0, #1
 8003750:	f000 fe8a 	bl	8004468 <__kernel_sin>
 8003754:	e7dc      	b.n	8003710 <cos+0x18>
 8003756:	f000 fe87 	bl	8004468 <__kernel_sin>
 800375a:	ec53 2b10 	vmov	r2, r3, d0
 800375e:	ee10 0a10 	vmov	r0, s0
 8003762:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003766:	e7de      	b.n	8003726 <cos+0x2e>
 8003768:	f000 fa46 	bl	8003bf8 <__kernel_cos>
 800376c:	e7f5      	b.n	800375a <cos+0x62>
 800376e:	bf00      	nop
	...
 8003778:	3fe921fb 	.word	0x3fe921fb
 800377c:	7fefffff 	.word	0x7fefffff

08003780 <sin>:
 8003780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003782:	ec51 0b10 	vmov	r0, r1, d0
 8003786:	4a20      	ldr	r2, [pc, #128]	; (8003808 <sin+0x88>)
 8003788:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800378c:	4293      	cmp	r3, r2
 800378e:	dc07      	bgt.n	80037a0 <sin+0x20>
 8003790:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8003800 <sin+0x80>
 8003794:	2000      	movs	r0, #0
 8003796:	f000 fe67 	bl	8004468 <__kernel_sin>
 800379a:	ec51 0b10 	vmov	r0, r1, d0
 800379e:	e007      	b.n	80037b0 <sin+0x30>
 80037a0:	4a1a      	ldr	r2, [pc, #104]	; (800380c <sin+0x8c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	dd09      	ble.n	80037ba <sin+0x3a>
 80037a6:	ee10 2a10 	vmov	r2, s0
 80037aa:	460b      	mov	r3, r1
 80037ac:	f7fc fd74 	bl	8000298 <__aeabi_dsub>
 80037b0:	ec41 0b10 	vmov	d0, r0, r1
 80037b4:	b005      	add	sp, #20
 80037b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80037ba:	4668      	mov	r0, sp
 80037bc:	f000 f828 	bl	8003810 <__ieee754_rem_pio2>
 80037c0:	f000 0003 	and.w	r0, r0, #3
 80037c4:	2801      	cmp	r0, #1
 80037c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80037ca:	ed9d 0b00 	vldr	d0, [sp]
 80037ce:	d004      	beq.n	80037da <sin+0x5a>
 80037d0:	2802      	cmp	r0, #2
 80037d2:	d005      	beq.n	80037e0 <sin+0x60>
 80037d4:	b970      	cbnz	r0, 80037f4 <sin+0x74>
 80037d6:	2001      	movs	r0, #1
 80037d8:	e7dd      	b.n	8003796 <sin+0x16>
 80037da:	f000 fa0d 	bl	8003bf8 <__kernel_cos>
 80037de:	e7dc      	b.n	800379a <sin+0x1a>
 80037e0:	2001      	movs	r0, #1
 80037e2:	f000 fe41 	bl	8004468 <__kernel_sin>
 80037e6:	ec53 2b10 	vmov	r2, r3, d0
 80037ea:	ee10 0a10 	vmov	r0, s0
 80037ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80037f2:	e7dd      	b.n	80037b0 <sin+0x30>
 80037f4:	f000 fa00 	bl	8003bf8 <__kernel_cos>
 80037f8:	e7f5      	b.n	80037e6 <sin+0x66>
 80037fa:	bf00      	nop
 80037fc:	f3af 8000 	nop.w
	...
 8003808:	3fe921fb 	.word	0x3fe921fb
 800380c:	7fefffff 	.word	0x7fefffff

08003810 <__ieee754_rem_pio2>:
 8003810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003814:	ec57 6b10 	vmov	r6, r7, d0
 8003818:	4bc3      	ldr	r3, [pc, #780]	; (8003b28 <__ieee754_rem_pio2+0x318>)
 800381a:	b08d      	sub	sp, #52	; 0x34
 800381c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003820:	4598      	cmp	r8, r3
 8003822:	4604      	mov	r4, r0
 8003824:	9704      	str	r7, [sp, #16]
 8003826:	dc07      	bgt.n	8003838 <__ieee754_rem_pio2+0x28>
 8003828:	2200      	movs	r2, #0
 800382a:	2300      	movs	r3, #0
 800382c:	ed84 0b00 	vstr	d0, [r4]
 8003830:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003834:	2500      	movs	r5, #0
 8003836:	e027      	b.n	8003888 <__ieee754_rem_pio2+0x78>
 8003838:	4bbc      	ldr	r3, [pc, #752]	; (8003b2c <__ieee754_rem_pio2+0x31c>)
 800383a:	4598      	cmp	r8, r3
 800383c:	dc75      	bgt.n	800392a <__ieee754_rem_pio2+0x11a>
 800383e:	9b04      	ldr	r3, [sp, #16]
 8003840:	4dbb      	ldr	r5, [pc, #748]	; (8003b30 <__ieee754_rem_pio2+0x320>)
 8003842:	2b00      	cmp	r3, #0
 8003844:	ee10 0a10 	vmov	r0, s0
 8003848:	a3a9      	add	r3, pc, #676	; (adr r3, 8003af0 <__ieee754_rem_pio2+0x2e0>)
 800384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384e:	4639      	mov	r1, r7
 8003850:	dd36      	ble.n	80038c0 <__ieee754_rem_pio2+0xb0>
 8003852:	f7fc fd21 	bl	8000298 <__aeabi_dsub>
 8003856:	45a8      	cmp	r8, r5
 8003858:	4606      	mov	r6, r0
 800385a:	460f      	mov	r7, r1
 800385c:	d018      	beq.n	8003890 <__ieee754_rem_pio2+0x80>
 800385e:	a3a6      	add	r3, pc, #664	; (adr r3, 8003af8 <__ieee754_rem_pio2+0x2e8>)
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f7fc fd18 	bl	8000298 <__aeabi_dsub>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	e9c4 2300 	strd	r2, r3, [r4]
 8003870:	4630      	mov	r0, r6
 8003872:	4639      	mov	r1, r7
 8003874:	f7fc fd10 	bl	8000298 <__aeabi_dsub>
 8003878:	a39f      	add	r3, pc, #636	; (adr r3, 8003af8 <__ieee754_rem_pio2+0x2e8>)
 800387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387e:	f7fc fd0b 	bl	8000298 <__aeabi_dsub>
 8003882:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003886:	2501      	movs	r5, #1
 8003888:	4628      	mov	r0, r5
 800388a:	b00d      	add	sp, #52	; 0x34
 800388c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003890:	a39b      	add	r3, pc, #620	; (adr r3, 8003b00 <__ieee754_rem_pio2+0x2f0>)
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	f7fc fcff 	bl	8000298 <__aeabi_dsub>
 800389a:	a39b      	add	r3, pc, #620	; (adr r3, 8003b08 <__ieee754_rem_pio2+0x2f8>)
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	4606      	mov	r6, r0
 80038a2:	460f      	mov	r7, r1
 80038a4:	f7fc fcf8 	bl	8000298 <__aeabi_dsub>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	e9c4 2300 	strd	r2, r3, [r4]
 80038b0:	4630      	mov	r0, r6
 80038b2:	4639      	mov	r1, r7
 80038b4:	f7fc fcf0 	bl	8000298 <__aeabi_dsub>
 80038b8:	a393      	add	r3, pc, #588	; (adr r3, 8003b08 <__ieee754_rem_pio2+0x2f8>)
 80038ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038be:	e7de      	b.n	800387e <__ieee754_rem_pio2+0x6e>
 80038c0:	f7fc fcec 	bl	800029c <__adddf3>
 80038c4:	45a8      	cmp	r8, r5
 80038c6:	4606      	mov	r6, r0
 80038c8:	460f      	mov	r7, r1
 80038ca:	d016      	beq.n	80038fa <__ieee754_rem_pio2+0xea>
 80038cc:	a38a      	add	r3, pc, #552	; (adr r3, 8003af8 <__ieee754_rem_pio2+0x2e8>)
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	f7fc fce3 	bl	800029c <__adddf3>
 80038d6:	4602      	mov	r2, r0
 80038d8:	460b      	mov	r3, r1
 80038da:	e9c4 2300 	strd	r2, r3, [r4]
 80038de:	4630      	mov	r0, r6
 80038e0:	4639      	mov	r1, r7
 80038e2:	f7fc fcd9 	bl	8000298 <__aeabi_dsub>
 80038e6:	a384      	add	r3, pc, #528	; (adr r3, 8003af8 <__ieee754_rem_pio2+0x2e8>)
 80038e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ec:	f7fc fcd6 	bl	800029c <__adddf3>
 80038f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80038f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80038f8:	e7c6      	b.n	8003888 <__ieee754_rem_pio2+0x78>
 80038fa:	a381      	add	r3, pc, #516	; (adr r3, 8003b00 <__ieee754_rem_pio2+0x2f0>)
 80038fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003900:	f7fc fccc 	bl	800029c <__adddf3>
 8003904:	a380      	add	r3, pc, #512	; (adr r3, 8003b08 <__ieee754_rem_pio2+0x2f8>)
 8003906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390a:	4606      	mov	r6, r0
 800390c:	460f      	mov	r7, r1
 800390e:	f7fc fcc5 	bl	800029c <__adddf3>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	e9c4 2300 	strd	r2, r3, [r4]
 800391a:	4630      	mov	r0, r6
 800391c:	4639      	mov	r1, r7
 800391e:	f7fc fcbb 	bl	8000298 <__aeabi_dsub>
 8003922:	a379      	add	r3, pc, #484	; (adr r3, 8003b08 <__ieee754_rem_pio2+0x2f8>)
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	e7e0      	b.n	80038ec <__ieee754_rem_pio2+0xdc>
 800392a:	4b82      	ldr	r3, [pc, #520]	; (8003b34 <__ieee754_rem_pio2+0x324>)
 800392c:	4598      	cmp	r8, r3
 800392e:	f300 80d0 	bgt.w	8003ad2 <__ieee754_rem_pio2+0x2c2>
 8003932:	f000 fe53 	bl	80045dc <fabs>
 8003936:	ec57 6b10 	vmov	r6, r7, d0
 800393a:	ee10 0a10 	vmov	r0, s0
 800393e:	a374      	add	r3, pc, #464	; (adr r3, 8003b10 <__ieee754_rem_pio2+0x300>)
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	4639      	mov	r1, r7
 8003946:	f7fc fe5b 	bl	8000600 <__aeabi_dmul>
 800394a:	2200      	movs	r2, #0
 800394c:	4b7a      	ldr	r3, [pc, #488]	; (8003b38 <__ieee754_rem_pio2+0x328>)
 800394e:	f7fc fca5 	bl	800029c <__adddf3>
 8003952:	f7fd f8ef 	bl	8000b34 <__aeabi_d2iz>
 8003956:	4605      	mov	r5, r0
 8003958:	f7fc fdec 	bl	8000534 <__aeabi_i2d>
 800395c:	a364      	add	r3, pc, #400	; (adr r3, 8003af0 <__ieee754_rem_pio2+0x2e0>)
 800395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003962:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003966:	f7fc fe4b 	bl	8000600 <__aeabi_dmul>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4630      	mov	r0, r6
 8003970:	4639      	mov	r1, r7
 8003972:	f7fc fc91 	bl	8000298 <__aeabi_dsub>
 8003976:	a360      	add	r3, pc, #384	; (adr r3, 8003af8 <__ieee754_rem_pio2+0x2e8>)
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	4682      	mov	sl, r0
 800397e:	468b      	mov	fp, r1
 8003980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003984:	f7fc fe3c 	bl	8000600 <__aeabi_dmul>
 8003988:	2d1f      	cmp	r5, #31
 800398a:	4606      	mov	r6, r0
 800398c:	460f      	mov	r7, r1
 800398e:	dc2a      	bgt.n	80039e6 <__ieee754_rem_pio2+0x1d6>
 8003990:	1e6a      	subs	r2, r5, #1
 8003992:	4b6a      	ldr	r3, [pc, #424]	; (8003b3c <__ieee754_rem_pio2+0x32c>)
 8003994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003998:	4598      	cmp	r8, r3
 800399a:	d024      	beq.n	80039e6 <__ieee754_rem_pio2+0x1d6>
 800399c:	4632      	mov	r2, r6
 800399e:	463b      	mov	r3, r7
 80039a0:	4650      	mov	r0, sl
 80039a2:	4659      	mov	r1, fp
 80039a4:	f7fc fc78 	bl	8000298 <__aeabi_dsub>
 80039a8:	e9c4 0100 	strd	r0, r1, [r4]
 80039ac:	e9d4 8900 	ldrd	r8, r9, [r4]
 80039b0:	4650      	mov	r0, sl
 80039b2:	4642      	mov	r2, r8
 80039b4:	464b      	mov	r3, r9
 80039b6:	4659      	mov	r1, fp
 80039b8:	f7fc fc6e 	bl	8000298 <__aeabi_dsub>
 80039bc:	463b      	mov	r3, r7
 80039be:	4632      	mov	r2, r6
 80039c0:	f7fc fc6a 	bl	8000298 <__aeabi_dsub>
 80039c4:	9b04      	ldr	r3, [sp, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80039cc:	f6bf af5c 	bge.w	8003888 <__ieee754_rem_pio2+0x78>
 80039d0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80039d4:	6063      	str	r3, [r4, #4]
 80039d6:	f8c4 8000 	str.w	r8, [r4]
 80039da:	60a0      	str	r0, [r4, #8]
 80039dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80039e0:	60e3      	str	r3, [r4, #12]
 80039e2:	426d      	negs	r5, r5
 80039e4:	e750      	b.n	8003888 <__ieee754_rem_pio2+0x78>
 80039e6:	4632      	mov	r2, r6
 80039e8:	463b      	mov	r3, r7
 80039ea:	4650      	mov	r0, sl
 80039ec:	4659      	mov	r1, fp
 80039ee:	f7fc fc53 	bl	8000298 <__aeabi_dsub>
 80039f2:	ea4f 5228 	mov.w	r2, r8, asr #20
 80039f6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b10      	cmp	r3, #16
 80039fe:	e9c4 0100 	strd	r0, r1, [r4]
 8003a02:	9205      	str	r2, [sp, #20]
 8003a04:	ddd2      	ble.n	80039ac <__ieee754_rem_pio2+0x19c>
 8003a06:	a33e      	add	r3, pc, #248	; (adr r3, 8003b00 <__ieee754_rem_pio2+0x2f0>)
 8003a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a10:	f7fc fdf6 	bl	8000600 <__aeabi_dmul>
 8003a14:	4606      	mov	r6, r0
 8003a16:	460f      	mov	r7, r1
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4650      	mov	r0, sl
 8003a1e:	4659      	mov	r1, fp
 8003a20:	f7fc fc3a 	bl	8000298 <__aeabi_dsub>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4680      	mov	r8, r0
 8003a2a:	4689      	mov	r9, r1
 8003a2c:	4650      	mov	r0, sl
 8003a2e:	4659      	mov	r1, fp
 8003a30:	f7fc fc32 	bl	8000298 <__aeabi_dsub>
 8003a34:	4632      	mov	r2, r6
 8003a36:	463b      	mov	r3, r7
 8003a38:	f7fc fc2e 	bl	8000298 <__aeabi_dsub>
 8003a3c:	a332      	add	r3, pc, #200	; (adr r3, 8003b08 <__ieee754_rem_pio2+0x2f8>)
 8003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a42:	4606      	mov	r6, r0
 8003a44:	460f      	mov	r7, r1
 8003a46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a4a:	f7fc fdd9 	bl	8000600 <__aeabi_dmul>
 8003a4e:	4632      	mov	r2, r6
 8003a50:	463b      	mov	r3, r7
 8003a52:	f7fc fc21 	bl	8000298 <__aeabi_dsub>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4606      	mov	r6, r0
 8003a5c:	460f      	mov	r7, r1
 8003a5e:	4640      	mov	r0, r8
 8003a60:	4649      	mov	r1, r9
 8003a62:	f7fc fc19 	bl	8000298 <__aeabi_dsub>
 8003a66:	9a05      	ldr	r2, [sp, #20]
 8003a68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b31      	cmp	r3, #49	; 0x31
 8003a70:	e9c4 0100 	strd	r0, r1, [r4]
 8003a74:	dd2a      	ble.n	8003acc <__ieee754_rem_pio2+0x2bc>
 8003a76:	a328      	add	r3, pc, #160	; (adr r3, 8003b18 <__ieee754_rem_pio2+0x308>)
 8003a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a80:	f7fc fdbe 	bl	8000600 <__aeabi_dmul>
 8003a84:	4606      	mov	r6, r0
 8003a86:	460f      	mov	r7, r1
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4640      	mov	r0, r8
 8003a8e:	4649      	mov	r1, r9
 8003a90:	f7fc fc02 	bl	8000298 <__aeabi_dsub>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4682      	mov	sl, r0
 8003a9a:	468b      	mov	fp, r1
 8003a9c:	4640      	mov	r0, r8
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	f7fc fbfa 	bl	8000298 <__aeabi_dsub>
 8003aa4:	4632      	mov	r2, r6
 8003aa6:	463b      	mov	r3, r7
 8003aa8:	f7fc fbf6 	bl	8000298 <__aeabi_dsub>
 8003aac:	a31c      	add	r3, pc, #112	; (adr r3, 8003b20 <__ieee754_rem_pio2+0x310>)
 8003aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab2:	4606      	mov	r6, r0
 8003ab4:	460f      	mov	r7, r1
 8003ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003aba:	f7fc fda1 	bl	8000600 <__aeabi_dmul>
 8003abe:	4632      	mov	r2, r6
 8003ac0:	463b      	mov	r3, r7
 8003ac2:	f7fc fbe9 	bl	8000298 <__aeabi_dsub>
 8003ac6:	4606      	mov	r6, r0
 8003ac8:	460f      	mov	r7, r1
 8003aca:	e767      	b.n	800399c <__ieee754_rem_pio2+0x18c>
 8003acc:	46c2      	mov	sl, r8
 8003ace:	46cb      	mov	fp, r9
 8003ad0:	e76c      	b.n	80039ac <__ieee754_rem_pio2+0x19c>
 8003ad2:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <__ieee754_rem_pio2+0x330>)
 8003ad4:	4598      	cmp	r8, r3
 8003ad6:	dd35      	ble.n	8003b44 <__ieee754_rem_pio2+0x334>
 8003ad8:	ee10 2a10 	vmov	r2, s0
 8003adc:	463b      	mov	r3, r7
 8003ade:	4630      	mov	r0, r6
 8003ae0:	4639      	mov	r1, r7
 8003ae2:	f7fc fbd9 	bl	8000298 <__aeabi_dsub>
 8003ae6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003aea:	e9c4 0100 	strd	r0, r1, [r4]
 8003aee:	e6a1      	b.n	8003834 <__ieee754_rem_pio2+0x24>
 8003af0:	54400000 	.word	0x54400000
 8003af4:	3ff921fb 	.word	0x3ff921fb
 8003af8:	1a626331 	.word	0x1a626331
 8003afc:	3dd0b461 	.word	0x3dd0b461
 8003b00:	1a600000 	.word	0x1a600000
 8003b04:	3dd0b461 	.word	0x3dd0b461
 8003b08:	2e037073 	.word	0x2e037073
 8003b0c:	3ba3198a 	.word	0x3ba3198a
 8003b10:	6dc9c883 	.word	0x6dc9c883
 8003b14:	3fe45f30 	.word	0x3fe45f30
 8003b18:	2e000000 	.word	0x2e000000
 8003b1c:	3ba3198a 	.word	0x3ba3198a
 8003b20:	252049c1 	.word	0x252049c1
 8003b24:	397b839a 	.word	0x397b839a
 8003b28:	3fe921fb 	.word	0x3fe921fb
 8003b2c:	4002d97b 	.word	0x4002d97b
 8003b30:	3ff921fb 	.word	0x3ff921fb
 8003b34:	413921fb 	.word	0x413921fb
 8003b38:	3fe00000 	.word	0x3fe00000
 8003b3c:	08004ae4 	.word	0x08004ae4
 8003b40:	7fefffff 	.word	0x7fefffff
 8003b44:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003b48:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8003b4c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003b50:	4630      	mov	r0, r6
 8003b52:	460f      	mov	r7, r1
 8003b54:	f7fc ffee 	bl	8000b34 <__aeabi_d2iz>
 8003b58:	f7fc fcec 	bl	8000534 <__aeabi_i2d>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4630      	mov	r0, r6
 8003b62:	4639      	mov	r1, r7
 8003b64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003b68:	f7fc fb96 	bl	8000298 <__aeabi_dsub>
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	4b1f      	ldr	r3, [pc, #124]	; (8003bec <__ieee754_rem_pio2+0x3dc>)
 8003b70:	f7fc fd46 	bl	8000600 <__aeabi_dmul>
 8003b74:	460f      	mov	r7, r1
 8003b76:	4606      	mov	r6, r0
 8003b78:	f7fc ffdc 	bl	8000b34 <__aeabi_d2iz>
 8003b7c:	f7fc fcda 	bl	8000534 <__aeabi_i2d>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4630      	mov	r0, r6
 8003b86:	4639      	mov	r1, r7
 8003b88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003b8c:	f7fc fb84 	bl	8000298 <__aeabi_dsub>
 8003b90:	2200      	movs	r2, #0
 8003b92:	4b16      	ldr	r3, [pc, #88]	; (8003bec <__ieee754_rem_pio2+0x3dc>)
 8003b94:	f7fc fd34 	bl	8000600 <__aeabi_dmul>
 8003b98:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003b9c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003ba0:	f04f 0803 	mov.w	r8, #3
 8003ba4:	2600      	movs	r6, #0
 8003ba6:	2700      	movs	r7, #0
 8003ba8:	4632      	mov	r2, r6
 8003baa:	463b      	mov	r3, r7
 8003bac:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003bb0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8003bb4:	f7fc ff8c 	bl	8000ad0 <__aeabi_dcmpeq>
 8003bb8:	b9b0      	cbnz	r0, 8003be8 <__ieee754_rem_pio2+0x3d8>
 8003bba:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <__ieee754_rem_pio2+0x3e0>)
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	462a      	mov	r2, r5
 8003bc4:	4643      	mov	r3, r8
 8003bc6:	4621      	mov	r1, r4
 8003bc8:	a806      	add	r0, sp, #24
 8003bca:	f000 f8fd 	bl	8003dc8 <__kernel_rem_pio2>
 8003bce:	9b04      	ldr	r3, [sp, #16]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	4605      	mov	r5, r0
 8003bd4:	f6bf ae58 	bge.w	8003888 <__ieee754_rem_pio2+0x78>
 8003bd8:	6863      	ldr	r3, [r4, #4]
 8003bda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003bde:	6063      	str	r3, [r4, #4]
 8003be0:	68e3      	ldr	r3, [r4, #12]
 8003be2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003be6:	e6fb      	b.n	80039e0 <__ieee754_rem_pio2+0x1d0>
 8003be8:	46d0      	mov	r8, sl
 8003bea:	e7dd      	b.n	8003ba8 <__ieee754_rem_pio2+0x398>
 8003bec:	41700000 	.word	0x41700000
 8003bf0:	08004b64 	.word	0x08004b64
 8003bf4:	00000000 	.word	0x00000000

08003bf8 <__kernel_cos>:
 8003bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bfc:	ec59 8b10 	vmov	r8, r9, d0
 8003c00:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8003c04:	b085      	sub	sp, #20
 8003c06:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8003c0a:	ed8d 1b00 	vstr	d1, [sp]
 8003c0e:	da07      	bge.n	8003c20 <__kernel_cos+0x28>
 8003c10:	ee10 0a10 	vmov	r0, s0
 8003c14:	4649      	mov	r1, r9
 8003c16:	f7fc ff8d 	bl	8000b34 <__aeabi_d2iz>
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	f000 80aa 	beq.w	8003d74 <__kernel_cos+0x17c>
 8003c20:	4642      	mov	r2, r8
 8003c22:	464b      	mov	r3, r9
 8003c24:	4640      	mov	r0, r8
 8003c26:	4649      	mov	r1, r9
 8003c28:	f7fc fcea 	bl	8000600 <__aeabi_dmul>
 8003c2c:	a359      	add	r3, pc, #356	; (adr r3, 8003d94 <__kernel_cos+0x19c>)
 8003c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c32:	4604      	mov	r4, r0
 8003c34:	460d      	mov	r5, r1
 8003c36:	f7fc fce3 	bl	8000600 <__aeabi_dmul>
 8003c3a:	a358      	add	r3, pc, #352	; (adr r3, 8003d9c <__kernel_cos+0x1a4>)
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	f7fc fb2c 	bl	800029c <__adddf3>
 8003c44:	4622      	mov	r2, r4
 8003c46:	462b      	mov	r3, r5
 8003c48:	f7fc fcda 	bl	8000600 <__aeabi_dmul>
 8003c4c:	a355      	add	r3, pc, #340	; (adr r3, 8003da4 <__kernel_cos+0x1ac>)
 8003c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c52:	f7fc fb21 	bl	8000298 <__aeabi_dsub>
 8003c56:	4622      	mov	r2, r4
 8003c58:	462b      	mov	r3, r5
 8003c5a:	f7fc fcd1 	bl	8000600 <__aeabi_dmul>
 8003c5e:	a353      	add	r3, pc, #332	; (adr r3, 8003dac <__kernel_cos+0x1b4>)
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	f7fc fb1a 	bl	800029c <__adddf3>
 8003c68:	4622      	mov	r2, r4
 8003c6a:	462b      	mov	r3, r5
 8003c6c:	f7fc fcc8 	bl	8000600 <__aeabi_dmul>
 8003c70:	a350      	add	r3, pc, #320	; (adr r3, 8003db4 <__kernel_cos+0x1bc>)
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	f7fc fb0f 	bl	8000298 <__aeabi_dsub>
 8003c7a:	4622      	mov	r2, r4
 8003c7c:	462b      	mov	r3, r5
 8003c7e:	f7fc fcbf 	bl	8000600 <__aeabi_dmul>
 8003c82:	a34e      	add	r3, pc, #312	; (adr r3, 8003dbc <__kernel_cos+0x1c4>)
 8003c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c88:	f7fc fb08 	bl	800029c <__adddf3>
 8003c8c:	462b      	mov	r3, r5
 8003c8e:	4622      	mov	r2, r4
 8003c90:	f7fc fcb6 	bl	8000600 <__aeabi_dmul>
 8003c94:	4b3a      	ldr	r3, [pc, #232]	; (8003d80 <__kernel_cos+0x188>)
 8003c96:	429f      	cmp	r7, r3
 8003c98:	4682      	mov	sl, r0
 8003c9a:	468b      	mov	fp, r1
 8003c9c:	dc2c      	bgt.n	8003cf8 <__kernel_cos+0x100>
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	4b38      	ldr	r3, [pc, #224]	; (8003d84 <__kernel_cos+0x18c>)
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	f7fc fcab 	bl	8000600 <__aeabi_dmul>
 8003caa:	4652      	mov	r2, sl
 8003cac:	4606      	mov	r6, r0
 8003cae:	460f      	mov	r7, r1
 8003cb0:	465b      	mov	r3, fp
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	4629      	mov	r1, r5
 8003cb6:	f7fc fca3 	bl	8000600 <__aeabi_dmul>
 8003cba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	460d      	mov	r5, r1
 8003cc2:	4640      	mov	r0, r8
 8003cc4:	4649      	mov	r1, r9
 8003cc6:	f7fc fc9b 	bl	8000600 <__aeabi_dmul>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4620      	mov	r0, r4
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	f7fc fae1 	bl	8000298 <__aeabi_dsub>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4630      	mov	r0, r6
 8003cdc:	4639      	mov	r1, r7
 8003cde:	f7fc fadb 	bl	8000298 <__aeabi_dsub>
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4928      	ldr	r1, [pc, #160]	; (8003d88 <__kernel_cos+0x190>)
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	2000      	movs	r0, #0
 8003cea:	f7fc fad5 	bl	8000298 <__aeabi_dsub>
 8003cee:	ec41 0b10 	vmov	d0, r0, r1
 8003cf2:	b005      	add	sp, #20
 8003cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf8:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <__kernel_cos+0x194>)
 8003cfa:	4923      	ldr	r1, [pc, #140]	; (8003d88 <__kernel_cos+0x190>)
 8003cfc:	429f      	cmp	r7, r3
 8003cfe:	bfd7      	itett	le
 8003d00:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8003d04:	4f22      	ldrgt	r7, [pc, #136]	; (8003d90 <__kernel_cos+0x198>)
 8003d06:	2200      	movle	r2, #0
 8003d08:	4616      	movle	r6, r2
 8003d0a:	bfd4      	ite	le
 8003d0c:	461f      	movle	r7, r3
 8003d0e:	2600      	movgt	r6, #0
 8003d10:	4632      	mov	r2, r6
 8003d12:	463b      	mov	r3, r7
 8003d14:	2000      	movs	r0, #0
 8003d16:	f7fc fabf 	bl	8000298 <__aeabi_dsub>
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d20:	4b18      	ldr	r3, [pc, #96]	; (8003d84 <__kernel_cos+0x18c>)
 8003d22:	4620      	mov	r0, r4
 8003d24:	4629      	mov	r1, r5
 8003d26:	f7fc fc6b 	bl	8000600 <__aeabi_dmul>
 8003d2a:	4632      	mov	r2, r6
 8003d2c:	463b      	mov	r3, r7
 8003d2e:	f7fc fab3 	bl	8000298 <__aeabi_dsub>
 8003d32:	4652      	mov	r2, sl
 8003d34:	4606      	mov	r6, r0
 8003d36:	460f      	mov	r7, r1
 8003d38:	465b      	mov	r3, fp
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	f7fc fc5f 	bl	8000600 <__aeabi_dmul>
 8003d42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d46:	4604      	mov	r4, r0
 8003d48:	460d      	mov	r5, r1
 8003d4a:	4640      	mov	r0, r8
 8003d4c:	4649      	mov	r1, r9
 8003d4e:	f7fc fc57 	bl	8000600 <__aeabi_dmul>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4620      	mov	r0, r4
 8003d58:	4629      	mov	r1, r5
 8003d5a:	f7fc fa9d 	bl	8000298 <__aeabi_dsub>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4630      	mov	r0, r6
 8003d64:	4639      	mov	r1, r7
 8003d66:	f7fc fa97 	bl	8000298 <__aeabi_dsub>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d72:	e7ba      	b.n	8003cea <__kernel_cos+0xf2>
 8003d74:	2000      	movs	r0, #0
 8003d76:	4904      	ldr	r1, [pc, #16]	; (8003d88 <__kernel_cos+0x190>)
 8003d78:	e7b9      	b.n	8003cee <__kernel_cos+0xf6>
 8003d7a:	bf00      	nop
 8003d7c:	f3af 8000 	nop.w
 8003d80:	3fd33332 	.word	0x3fd33332
 8003d84:	3fe00000 	.word	0x3fe00000
 8003d88:	3ff00000 	.word	0x3ff00000
 8003d8c:	3fe90000 	.word	0x3fe90000
 8003d90:	3fd20000 	.word	0x3fd20000
 8003d94:	be8838d4 	.word	0xbe8838d4
 8003d98:	bda8fae9 	.word	0xbda8fae9
 8003d9c:	bdb4b1c4 	.word	0xbdb4b1c4
 8003da0:	3e21ee9e 	.word	0x3e21ee9e
 8003da4:	809c52ad 	.word	0x809c52ad
 8003da8:	3e927e4f 	.word	0x3e927e4f
 8003dac:	19cb1590 	.word	0x19cb1590
 8003db0:	3efa01a0 	.word	0x3efa01a0
 8003db4:	16c15177 	.word	0x16c15177
 8003db8:	3f56c16c 	.word	0x3f56c16c
 8003dbc:	5555554c 	.word	0x5555554c
 8003dc0:	3fa55555 	.word	0x3fa55555
 8003dc4:	00000000 	.word	0x00000000

08003dc8 <__kernel_rem_pio2>:
 8003dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dcc:	ed2d 8b02 	vpush	{d8}
 8003dd0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003dd4:	1ed4      	subs	r4, r2, #3
 8003dd6:	9306      	str	r3, [sp, #24]
 8003dd8:	9102      	str	r1, [sp, #8]
 8003dda:	4bc3      	ldr	r3, [pc, #780]	; (80040e8 <__kernel_rem_pio2+0x320>)
 8003ddc:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8003dde:	9009      	str	r0, [sp, #36]	; 0x24
 8003de0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	9b06      	ldr	r3, [sp, #24]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	9304      	str	r3, [sp, #16]
 8003dec:	2318      	movs	r3, #24
 8003dee:	fb94 f4f3 	sdiv	r4, r4, r3
 8003df2:	f06f 0317 	mvn.w	r3, #23
 8003df6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003dfa:	fb04 3303 	mla	r3, r4, r3, r3
 8003dfe:	eb03 0a02 	add.w	sl, r3, r2
 8003e02:	9b00      	ldr	r3, [sp, #0]
 8003e04:	9a04      	ldr	r2, [sp, #16]
 8003e06:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80040d8 <__kernel_rem_pio2+0x310>
 8003e0a:	eb03 0802 	add.w	r8, r3, r2
 8003e0e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003e10:	1aa7      	subs	r7, r4, r2
 8003e12:	ae20      	add	r6, sp, #128	; 0x80
 8003e14:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003e18:	2500      	movs	r5, #0
 8003e1a:	4545      	cmp	r5, r8
 8003e1c:	dd13      	ble.n	8003e46 <__kernel_rem_pio2+0x7e>
 8003e1e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 80040d8 <__kernel_rem_pio2+0x310>
 8003e22:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8003e26:	2600      	movs	r6, #0
 8003e28:	9b00      	ldr	r3, [sp, #0]
 8003e2a:	429e      	cmp	r6, r3
 8003e2c:	dc32      	bgt.n	8003e94 <__kernel_rem_pio2+0xcc>
 8003e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e30:	9303      	str	r3, [sp, #12]
 8003e32:	9b06      	ldr	r3, [sp, #24]
 8003e34:	199d      	adds	r5, r3, r6
 8003e36:	ab20      	add	r3, sp, #128	; 0x80
 8003e38:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003e3c:	9308      	str	r3, [sp, #32]
 8003e3e:	ec59 8b18 	vmov	r8, r9, d8
 8003e42:	2700      	movs	r7, #0
 8003e44:	e01f      	b.n	8003e86 <__kernel_rem_pio2+0xbe>
 8003e46:	42ef      	cmn	r7, r5
 8003e48:	d407      	bmi.n	8003e5a <__kernel_rem_pio2+0x92>
 8003e4a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003e4e:	f7fc fb71 	bl	8000534 <__aeabi_i2d>
 8003e52:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003e56:	3501      	adds	r5, #1
 8003e58:	e7df      	b.n	8003e1a <__kernel_rem_pio2+0x52>
 8003e5a:	ec51 0b18 	vmov	r0, r1, d8
 8003e5e:	e7f8      	b.n	8003e52 <__kernel_rem_pio2+0x8a>
 8003e60:	9908      	ldr	r1, [sp, #32]
 8003e62:	9d03      	ldr	r5, [sp, #12]
 8003e64:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8003e68:	9108      	str	r1, [sp, #32]
 8003e6a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8003e6e:	9503      	str	r5, [sp, #12]
 8003e70:	f7fc fbc6 	bl	8000600 <__aeabi_dmul>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4640      	mov	r0, r8
 8003e7a:	4649      	mov	r1, r9
 8003e7c:	f7fc fa0e 	bl	800029c <__adddf3>
 8003e80:	3701      	adds	r7, #1
 8003e82:	4680      	mov	r8, r0
 8003e84:	4689      	mov	r9, r1
 8003e86:	9b04      	ldr	r3, [sp, #16]
 8003e88:	429f      	cmp	r7, r3
 8003e8a:	dde9      	ble.n	8003e60 <__kernel_rem_pio2+0x98>
 8003e8c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8003e90:	3601      	adds	r6, #1
 8003e92:	e7c9      	b.n	8003e28 <__kernel_rem_pio2+0x60>
 8003e94:	9b00      	ldr	r3, [sp, #0]
 8003e96:	9f00      	ldr	r7, [sp, #0]
 8003e98:	aa0c      	add	r2, sp, #48	; 0x30
 8003e9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003e9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ea0:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003ea2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003ea6:	930a      	str	r3, [sp, #40]	; 0x28
 8003ea8:	ab98      	add	r3, sp, #608	; 0x260
 8003eaa:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8003eae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003eb2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003eb6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8003eba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ebe:	9308      	str	r3, [sp, #32]
 8003ec0:	9a08      	ldr	r2, [sp, #32]
 8003ec2:	ab98      	add	r3, sp, #608	; 0x260
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8003eca:	2600      	movs	r6, #0
 8003ecc:	1bbb      	subs	r3, r7, r6
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	dc77      	bgt.n	8003fc2 <__kernel_rem_pio2+0x1fa>
 8003ed2:	ec49 8b10 	vmov	d0, r8, r9
 8003ed6:	4650      	mov	r0, sl
 8003ed8:	f000 fc0e 	bl	80046f8 <scalbn>
 8003edc:	ec55 4b10 	vmov	r4, r5, d0
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003ee6:	ee10 0a10 	vmov	r0, s0
 8003eea:	4629      	mov	r1, r5
 8003eec:	f7fc fb88 	bl	8000600 <__aeabi_dmul>
 8003ef0:	ec41 0b10 	vmov	d0, r0, r1
 8003ef4:	f000 fb7c 	bl	80045f0 <floor>
 8003ef8:	2200      	movs	r2, #0
 8003efa:	ec51 0b10 	vmov	r0, r1, d0
 8003efe:	4b7b      	ldr	r3, [pc, #492]	; (80040ec <__kernel_rem_pio2+0x324>)
 8003f00:	f7fc fb7e 	bl	8000600 <__aeabi_dmul>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4620      	mov	r0, r4
 8003f0a:	4629      	mov	r1, r5
 8003f0c:	f7fc f9c4 	bl	8000298 <__aeabi_dsub>
 8003f10:	460d      	mov	r5, r1
 8003f12:	4604      	mov	r4, r0
 8003f14:	f7fc fe0e 	bl	8000b34 <__aeabi_d2iz>
 8003f18:	9003      	str	r0, [sp, #12]
 8003f1a:	f7fc fb0b 	bl	8000534 <__aeabi_i2d>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4620      	mov	r0, r4
 8003f24:	4629      	mov	r1, r5
 8003f26:	f7fc f9b7 	bl	8000298 <__aeabi_dsub>
 8003f2a:	f1ba 0f00 	cmp.w	sl, #0
 8003f2e:	4680      	mov	r8, r0
 8003f30:	4689      	mov	r9, r1
 8003f32:	dd6b      	ble.n	800400c <__kernel_rem_pio2+0x244>
 8003f34:	1e7a      	subs	r2, r7, #1
 8003f36:	ab0c      	add	r3, sp, #48	; 0x30
 8003f38:	f1ca 0118 	rsb	r1, sl, #24
 8003f3c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003f40:	9c03      	ldr	r4, [sp, #12]
 8003f42:	fa40 f301 	asr.w	r3, r0, r1
 8003f46:	441c      	add	r4, r3
 8003f48:	408b      	lsls	r3, r1
 8003f4a:	1ac0      	subs	r0, r0, r3
 8003f4c:	ab0c      	add	r3, sp, #48	; 0x30
 8003f4e:	9403      	str	r4, [sp, #12]
 8003f50:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003f54:	f1ca 0317 	rsb	r3, sl, #23
 8003f58:	fa40 fb03 	asr.w	fp, r0, r3
 8003f5c:	f1bb 0f00 	cmp.w	fp, #0
 8003f60:	dd62      	ble.n	8004028 <__kernel_rem_pio2+0x260>
 8003f62:	9b03      	ldr	r3, [sp, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	3301      	adds	r3, #1
 8003f68:	9303      	str	r3, [sp, #12]
 8003f6a:	4614      	mov	r4, r2
 8003f6c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003f70:	4297      	cmp	r7, r2
 8003f72:	f300 8089 	bgt.w	8004088 <__kernel_rem_pio2+0x2c0>
 8003f76:	f1ba 0f00 	cmp.w	sl, #0
 8003f7a:	dd07      	ble.n	8003f8c <__kernel_rem_pio2+0x1c4>
 8003f7c:	f1ba 0f01 	cmp.w	sl, #1
 8003f80:	f000 8096 	beq.w	80040b0 <__kernel_rem_pio2+0x2e8>
 8003f84:	f1ba 0f02 	cmp.w	sl, #2
 8003f88:	f000 809c 	beq.w	80040c4 <__kernel_rem_pio2+0x2fc>
 8003f8c:	f1bb 0f02 	cmp.w	fp, #2
 8003f90:	d14a      	bne.n	8004028 <__kernel_rem_pio2+0x260>
 8003f92:	4642      	mov	r2, r8
 8003f94:	464b      	mov	r3, r9
 8003f96:	2000      	movs	r0, #0
 8003f98:	4955      	ldr	r1, [pc, #340]	; (80040f0 <__kernel_rem_pio2+0x328>)
 8003f9a:	f7fc f97d 	bl	8000298 <__aeabi_dsub>
 8003f9e:	4680      	mov	r8, r0
 8003fa0:	4689      	mov	r9, r1
 8003fa2:	2c00      	cmp	r4, #0
 8003fa4:	d040      	beq.n	8004028 <__kernel_rem_pio2+0x260>
 8003fa6:	4650      	mov	r0, sl
 8003fa8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80040e0 <__kernel_rem_pio2+0x318>
 8003fac:	f000 fba4 	bl	80046f8 <scalbn>
 8003fb0:	4640      	mov	r0, r8
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	ec53 2b10 	vmov	r2, r3, d0
 8003fb8:	f7fc f96e 	bl	8000298 <__aeabi_dsub>
 8003fbc:	4680      	mov	r8, r0
 8003fbe:	4689      	mov	r9, r1
 8003fc0:	e032      	b.n	8004028 <__kernel_rem_pio2+0x260>
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	4b4b      	ldr	r3, [pc, #300]	; (80040f4 <__kernel_rem_pio2+0x32c>)
 8003fc6:	4640      	mov	r0, r8
 8003fc8:	4649      	mov	r1, r9
 8003fca:	f7fc fb19 	bl	8000600 <__aeabi_dmul>
 8003fce:	f7fc fdb1 	bl	8000b34 <__aeabi_d2iz>
 8003fd2:	f7fc faaf 	bl	8000534 <__aeabi_i2d>
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	4b47      	ldr	r3, [pc, #284]	; (80040f8 <__kernel_rem_pio2+0x330>)
 8003fda:	4604      	mov	r4, r0
 8003fdc:	460d      	mov	r5, r1
 8003fde:	f7fc fb0f 	bl	8000600 <__aeabi_dmul>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4640      	mov	r0, r8
 8003fe8:	4649      	mov	r1, r9
 8003fea:	f7fc f955 	bl	8000298 <__aeabi_dsub>
 8003fee:	f7fc fda1 	bl	8000b34 <__aeabi_d2iz>
 8003ff2:	ab0c      	add	r3, sp, #48	; 0x30
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8003ffa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003ffe:	4620      	mov	r0, r4
 8004000:	f7fc f94c 	bl	800029c <__adddf3>
 8004004:	3601      	adds	r6, #1
 8004006:	4680      	mov	r8, r0
 8004008:	4689      	mov	r9, r1
 800400a:	e75f      	b.n	8003ecc <__kernel_rem_pio2+0x104>
 800400c:	d106      	bne.n	800401c <__kernel_rem_pio2+0x254>
 800400e:	1e7b      	subs	r3, r7, #1
 8004010:	aa0c      	add	r2, sp, #48	; 0x30
 8004012:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004016:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800401a:	e79f      	b.n	8003f5c <__kernel_rem_pio2+0x194>
 800401c:	2200      	movs	r2, #0
 800401e:	4b37      	ldr	r3, [pc, #220]	; (80040fc <__kernel_rem_pio2+0x334>)
 8004020:	f7fc fd74 	bl	8000b0c <__aeabi_dcmpge>
 8004024:	bb68      	cbnz	r0, 8004082 <__kernel_rem_pio2+0x2ba>
 8004026:	4683      	mov	fp, r0
 8004028:	2200      	movs	r2, #0
 800402a:	2300      	movs	r3, #0
 800402c:	4640      	mov	r0, r8
 800402e:	4649      	mov	r1, r9
 8004030:	f7fc fd4e 	bl	8000ad0 <__aeabi_dcmpeq>
 8004034:	2800      	cmp	r0, #0
 8004036:	f000 80c1 	beq.w	80041bc <__kernel_rem_pio2+0x3f4>
 800403a:	1e7c      	subs	r4, r7, #1
 800403c:	4623      	mov	r3, r4
 800403e:	2200      	movs	r2, #0
 8004040:	9900      	ldr	r1, [sp, #0]
 8004042:	428b      	cmp	r3, r1
 8004044:	da5c      	bge.n	8004100 <__kernel_rem_pio2+0x338>
 8004046:	2a00      	cmp	r2, #0
 8004048:	f040 808b 	bne.w	8004162 <__kernel_rem_pio2+0x39a>
 800404c:	2401      	movs	r4, #1
 800404e:	f06f 0203 	mvn.w	r2, #3
 8004052:	fb02 f304 	mul.w	r3, r2, r4
 8004056:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004058:	58cb      	ldr	r3, [r1, r3]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d056      	beq.n	800410c <__kernel_rem_pio2+0x344>
 800405e:	9b08      	ldr	r3, [sp, #32]
 8004060:	aa98      	add	r2, sp, #608	; 0x260
 8004062:	4413      	add	r3, r2
 8004064:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8004068:	9b06      	ldr	r3, [sp, #24]
 800406a:	19dd      	adds	r5, r3, r7
 800406c:	ab20      	add	r3, sp, #128	; 0x80
 800406e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004072:	19e3      	adds	r3, r4, r7
 8004074:	1c7e      	adds	r6, r7, #1
 8004076:	9303      	str	r3, [sp, #12]
 8004078:	9b03      	ldr	r3, [sp, #12]
 800407a:	429e      	cmp	r6, r3
 800407c:	dd48      	ble.n	8004110 <__kernel_rem_pio2+0x348>
 800407e:	461f      	mov	r7, r3
 8004080:	e712      	b.n	8003ea8 <__kernel_rem_pio2+0xe0>
 8004082:	f04f 0b02 	mov.w	fp, #2
 8004086:	e76c      	b.n	8003f62 <__kernel_rem_pio2+0x19a>
 8004088:	ab0c      	add	r3, sp, #48	; 0x30
 800408a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800408e:	b94c      	cbnz	r4, 80040a4 <__kernel_rem_pio2+0x2dc>
 8004090:	b12b      	cbz	r3, 800409e <__kernel_rem_pio2+0x2d6>
 8004092:	a80c      	add	r0, sp, #48	; 0x30
 8004094:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004098:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800409c:	2301      	movs	r3, #1
 800409e:	3201      	adds	r2, #1
 80040a0:	461c      	mov	r4, r3
 80040a2:	e765      	b.n	8003f70 <__kernel_rem_pio2+0x1a8>
 80040a4:	a80c      	add	r0, sp, #48	; 0x30
 80040a6:	1acb      	subs	r3, r1, r3
 80040a8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80040ac:	4623      	mov	r3, r4
 80040ae:	e7f6      	b.n	800409e <__kernel_rem_pio2+0x2d6>
 80040b0:	1e7a      	subs	r2, r7, #1
 80040b2:	ab0c      	add	r3, sp, #48	; 0x30
 80040b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040b8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80040bc:	a90c      	add	r1, sp, #48	; 0x30
 80040be:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80040c2:	e763      	b.n	8003f8c <__kernel_rem_pio2+0x1c4>
 80040c4:	1e7a      	subs	r2, r7, #1
 80040c6:	ab0c      	add	r3, sp, #48	; 0x30
 80040c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040cc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80040d0:	e7f4      	b.n	80040bc <__kernel_rem_pio2+0x2f4>
 80040d2:	bf00      	nop
 80040d4:	f3af 8000 	nop.w
	...
 80040e4:	3ff00000 	.word	0x3ff00000
 80040e8:	08004cb0 	.word	0x08004cb0
 80040ec:	40200000 	.word	0x40200000
 80040f0:	3ff00000 	.word	0x3ff00000
 80040f4:	3e700000 	.word	0x3e700000
 80040f8:	41700000 	.word	0x41700000
 80040fc:	3fe00000 	.word	0x3fe00000
 8004100:	a90c      	add	r1, sp, #48	; 0x30
 8004102:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004106:	3b01      	subs	r3, #1
 8004108:	430a      	orrs	r2, r1
 800410a:	e799      	b.n	8004040 <__kernel_rem_pio2+0x278>
 800410c:	3401      	adds	r4, #1
 800410e:	e7a0      	b.n	8004052 <__kernel_rem_pio2+0x28a>
 8004110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004112:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004116:	f7fc fa0d 	bl	8000534 <__aeabi_i2d>
 800411a:	e8e5 0102 	strd	r0, r1, [r5], #8
 800411e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004120:	9508      	str	r5, [sp, #32]
 8004122:	461c      	mov	r4, r3
 8004124:	2700      	movs	r7, #0
 8004126:	f04f 0800 	mov.w	r8, #0
 800412a:	f04f 0900 	mov.w	r9, #0
 800412e:	9b04      	ldr	r3, [sp, #16]
 8004130:	429f      	cmp	r7, r3
 8004132:	dd03      	ble.n	800413c <__kernel_rem_pio2+0x374>
 8004134:	e8eb 8902 	strd	r8, r9, [fp], #8
 8004138:	3601      	adds	r6, #1
 800413a:	e79d      	b.n	8004078 <__kernel_rem_pio2+0x2b0>
 800413c:	9908      	ldr	r1, [sp, #32]
 800413e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8004142:	9108      	str	r1, [sp, #32]
 8004144:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004148:	f7fc fa5a 	bl	8000600 <__aeabi_dmul>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	4640      	mov	r0, r8
 8004152:	4649      	mov	r1, r9
 8004154:	f7fc f8a2 	bl	800029c <__adddf3>
 8004158:	3701      	adds	r7, #1
 800415a:	4680      	mov	r8, r0
 800415c:	4689      	mov	r9, r1
 800415e:	e7e6      	b.n	800412e <__kernel_rem_pio2+0x366>
 8004160:	3c01      	subs	r4, #1
 8004162:	ab0c      	add	r3, sp, #48	; 0x30
 8004164:	f1aa 0a18 	sub.w	sl, sl, #24
 8004168:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f7      	beq.n	8004160 <__kernel_rem_pio2+0x398>
 8004170:	4650      	mov	r0, sl
 8004172:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8004448 <__kernel_rem_pio2+0x680>
 8004176:	f000 fabf 	bl	80046f8 <scalbn>
 800417a:	00e5      	lsls	r5, r4, #3
 800417c:	ab98      	add	r3, sp, #608	; 0x260
 800417e:	eb03 0905 	add.w	r9, r3, r5
 8004182:	ec57 6b10 	vmov	r6, r7, d0
 8004186:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 800418a:	46a0      	mov	r8, r4
 800418c:	f1b8 0f00 	cmp.w	r8, #0
 8004190:	da4d      	bge.n	800422e <__kernel_rem_pio2+0x466>
 8004192:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8004450 <__kernel_rem_pio2+0x688>
 8004196:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 800419a:	2300      	movs	r3, #0
 800419c:	9304      	str	r3, [sp, #16]
 800419e:	4657      	mov	r7, sl
 80041a0:	9b04      	ldr	r3, [sp, #16]
 80041a2:	ebb4 0903 	subs.w	r9, r4, r3
 80041a6:	d476      	bmi.n	8004296 <__kernel_rem_pio2+0x4ce>
 80041a8:	4bab      	ldr	r3, [pc, #684]	; (8004458 <__kernel_rem_pio2+0x690>)
 80041aa:	461e      	mov	r6, r3
 80041ac:	ab70      	add	r3, sp, #448	; 0x1c0
 80041ae:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80041b2:	ed8d 8b06 	vstr	d8, [sp, #24]
 80041b6:	f04f 0800 	mov.w	r8, #0
 80041ba:	e05e      	b.n	800427a <__kernel_rem_pio2+0x4b2>
 80041bc:	f1ca 0000 	rsb	r0, sl, #0
 80041c0:	ec49 8b10 	vmov	d0, r8, r9
 80041c4:	f000 fa98 	bl	80046f8 <scalbn>
 80041c8:	ec55 4b10 	vmov	r4, r5, d0
 80041cc:	2200      	movs	r2, #0
 80041ce:	4ba3      	ldr	r3, [pc, #652]	; (800445c <__kernel_rem_pio2+0x694>)
 80041d0:	ee10 0a10 	vmov	r0, s0
 80041d4:	4629      	mov	r1, r5
 80041d6:	f7fc fc99 	bl	8000b0c <__aeabi_dcmpge>
 80041da:	b1f8      	cbz	r0, 800421c <__kernel_rem_pio2+0x454>
 80041dc:	2200      	movs	r2, #0
 80041de:	4ba0      	ldr	r3, [pc, #640]	; (8004460 <__kernel_rem_pio2+0x698>)
 80041e0:	4620      	mov	r0, r4
 80041e2:	4629      	mov	r1, r5
 80041e4:	f7fc fa0c 	bl	8000600 <__aeabi_dmul>
 80041e8:	f7fc fca4 	bl	8000b34 <__aeabi_d2iz>
 80041ec:	4606      	mov	r6, r0
 80041ee:	f7fc f9a1 	bl	8000534 <__aeabi_i2d>
 80041f2:	2200      	movs	r2, #0
 80041f4:	4b99      	ldr	r3, [pc, #612]	; (800445c <__kernel_rem_pio2+0x694>)
 80041f6:	f7fc fa03 	bl	8000600 <__aeabi_dmul>
 80041fa:	460b      	mov	r3, r1
 80041fc:	4602      	mov	r2, r0
 80041fe:	4629      	mov	r1, r5
 8004200:	4620      	mov	r0, r4
 8004202:	f7fc f849 	bl	8000298 <__aeabi_dsub>
 8004206:	f7fc fc95 	bl	8000b34 <__aeabi_d2iz>
 800420a:	1c7c      	adds	r4, r7, #1
 800420c:	ab0c      	add	r3, sp, #48	; 0x30
 800420e:	f10a 0a18 	add.w	sl, sl, #24
 8004212:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8004216:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800421a:	e7a9      	b.n	8004170 <__kernel_rem_pio2+0x3a8>
 800421c:	4620      	mov	r0, r4
 800421e:	4629      	mov	r1, r5
 8004220:	f7fc fc88 	bl	8000b34 <__aeabi_d2iz>
 8004224:	ab0c      	add	r3, sp, #48	; 0x30
 8004226:	463c      	mov	r4, r7
 8004228:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800422c:	e7a0      	b.n	8004170 <__kernel_rem_pio2+0x3a8>
 800422e:	ab0c      	add	r3, sp, #48	; 0x30
 8004230:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004234:	f7fc f97e 	bl	8000534 <__aeabi_i2d>
 8004238:	4632      	mov	r2, r6
 800423a:	463b      	mov	r3, r7
 800423c:	f7fc f9e0 	bl	8000600 <__aeabi_dmul>
 8004240:	2200      	movs	r2, #0
 8004242:	e969 0102 	strd	r0, r1, [r9, #-8]!
 8004246:	4b86      	ldr	r3, [pc, #536]	; (8004460 <__kernel_rem_pio2+0x698>)
 8004248:	4630      	mov	r0, r6
 800424a:	4639      	mov	r1, r7
 800424c:	f7fc f9d8 	bl	8000600 <__aeabi_dmul>
 8004250:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004254:	4606      	mov	r6, r0
 8004256:	460f      	mov	r7, r1
 8004258:	e798      	b.n	800418c <__kernel_rem_pio2+0x3c4>
 800425a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800425e:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8004262:	f7fc f9cd 	bl	8000600 <__aeabi_dmul>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800426e:	f7fc f815 	bl	800029c <__adddf3>
 8004272:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004276:	f108 0801 	add.w	r8, r8, #1
 800427a:	9b00      	ldr	r3, [sp, #0]
 800427c:	4598      	cmp	r8, r3
 800427e:	dc02      	bgt.n	8004286 <__kernel_rem_pio2+0x4be>
 8004280:	9b04      	ldr	r3, [sp, #16]
 8004282:	4598      	cmp	r8, r3
 8004284:	dde9      	ble.n	800425a <__kernel_rem_pio2+0x492>
 8004286:	9b04      	ldr	r3, [sp, #16]
 8004288:	ed9d 7b06 	vldr	d7, [sp, #24]
 800428c:	3301      	adds	r3, #1
 800428e:	ecaa 7b02 	vstmia	sl!, {d7}
 8004292:	9304      	str	r3, [sp, #16]
 8004294:	e784      	b.n	80041a0 <__kernel_rem_pio2+0x3d8>
 8004296:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004298:	2b03      	cmp	r3, #3
 800429a:	d85d      	bhi.n	8004358 <__kernel_rem_pio2+0x590>
 800429c:	e8df f003 	tbb	[pc, r3]
 80042a0:	0226264b 	.word	0x0226264b
 80042a4:	ab98      	add	r3, sp, #608	; 0x260
 80042a6:	441d      	add	r5, r3
 80042a8:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 80042ac:	462e      	mov	r6, r5
 80042ae:	46a2      	mov	sl, r4
 80042b0:	f1ba 0f00 	cmp.w	sl, #0
 80042b4:	dc6e      	bgt.n	8004394 <__kernel_rem_pio2+0x5cc>
 80042b6:	462e      	mov	r6, r5
 80042b8:	46a2      	mov	sl, r4
 80042ba:	f1ba 0f01 	cmp.w	sl, #1
 80042be:	f300 808a 	bgt.w	80043d6 <__kernel_rem_pio2+0x60e>
 80042c2:	2000      	movs	r0, #0
 80042c4:	2100      	movs	r1, #0
 80042c6:	2c01      	cmp	r4, #1
 80042c8:	f300 80a6 	bgt.w	8004418 <__kernel_rem_pio2+0x650>
 80042cc:	f1bb 0f00 	cmp.w	fp, #0
 80042d0:	f040 80a8 	bne.w	8004424 <__kernel_rem_pio2+0x65c>
 80042d4:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 80042d8:	9c02      	ldr	r4, [sp, #8]
 80042da:	e9c4 2300 	strd	r2, r3, [r4]
 80042de:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 80042e2:	e9c4 0104 	strd	r0, r1, [r4, #16]
 80042e6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80042ea:	e035      	b.n	8004358 <__kernel_rem_pio2+0x590>
 80042ec:	3508      	adds	r5, #8
 80042ee:	ab48      	add	r3, sp, #288	; 0x120
 80042f0:	441d      	add	r5, r3
 80042f2:	4626      	mov	r6, r4
 80042f4:	2000      	movs	r0, #0
 80042f6:	2100      	movs	r1, #0
 80042f8:	2e00      	cmp	r6, #0
 80042fa:	da3c      	bge.n	8004376 <__kernel_rem_pio2+0x5ae>
 80042fc:	f1bb 0f00 	cmp.w	fp, #0
 8004300:	d03f      	beq.n	8004382 <__kernel_rem_pio2+0x5ba>
 8004302:	4602      	mov	r2, r0
 8004304:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004308:	9d02      	ldr	r5, [sp, #8]
 800430a:	e9c5 2300 	strd	r2, r3, [r5]
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004316:	f7fb ffbf 	bl	8000298 <__aeabi_dsub>
 800431a:	ae4a      	add	r6, sp, #296	; 0x128
 800431c:	2501      	movs	r5, #1
 800431e:	42ac      	cmp	r4, r5
 8004320:	da32      	bge.n	8004388 <__kernel_rem_pio2+0x5c0>
 8004322:	f1bb 0f00 	cmp.w	fp, #0
 8004326:	d002      	beq.n	800432e <__kernel_rem_pio2+0x566>
 8004328:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800432c:	4619      	mov	r1, r3
 800432e:	9b02      	ldr	r3, [sp, #8]
 8004330:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004334:	e010      	b.n	8004358 <__kernel_rem_pio2+0x590>
 8004336:	ab98      	add	r3, sp, #608	; 0x260
 8004338:	441d      	add	r5, r3
 800433a:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 800433e:	2000      	movs	r0, #0
 8004340:	2100      	movs	r1, #0
 8004342:	2c00      	cmp	r4, #0
 8004344:	da11      	bge.n	800436a <__kernel_rem_pio2+0x5a2>
 8004346:	f1bb 0f00 	cmp.w	fp, #0
 800434a:	d002      	beq.n	8004352 <__kernel_rem_pio2+0x58a>
 800434c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004350:	4619      	mov	r1, r3
 8004352:	9b02      	ldr	r3, [sp, #8]
 8004354:	e9c3 0100 	strd	r0, r1, [r3]
 8004358:	9b03      	ldr	r3, [sp, #12]
 800435a:	f003 0007 	and.w	r0, r3, #7
 800435e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004362:	ecbd 8b02 	vpop	{d8}
 8004366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800436a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800436e:	f7fb ff95 	bl	800029c <__adddf3>
 8004372:	3c01      	subs	r4, #1
 8004374:	e7e5      	b.n	8004342 <__kernel_rem_pio2+0x57a>
 8004376:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800437a:	f7fb ff8f 	bl	800029c <__adddf3>
 800437e:	3e01      	subs	r6, #1
 8004380:	e7ba      	b.n	80042f8 <__kernel_rem_pio2+0x530>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	e7bf      	b.n	8004308 <__kernel_rem_pio2+0x540>
 8004388:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800438c:	f7fb ff86 	bl	800029c <__adddf3>
 8004390:	3501      	adds	r5, #1
 8004392:	e7c4      	b.n	800431e <__kernel_rem_pio2+0x556>
 8004394:	ed16 7b02 	vldr	d7, [r6, #-8]
 8004398:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 800439c:	ec53 2b17 	vmov	r2, r3, d7
 80043a0:	4640      	mov	r0, r8
 80043a2:	4649      	mov	r1, r9
 80043a4:	ed8d 7b00 	vstr	d7, [sp]
 80043a8:	f7fb ff78 	bl	800029c <__adddf3>
 80043ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4640      	mov	r0, r8
 80043b6:	4649      	mov	r1, r9
 80043b8:	f7fb ff6e 	bl	8000298 <__aeabi_dsub>
 80043bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043c0:	f7fb ff6c 	bl	800029c <__adddf3>
 80043c4:	ed9d 7b04 	vldr	d7, [sp, #16]
 80043c8:	e966 0102 	strd	r0, r1, [r6, #-8]!
 80043cc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80043d0:	ed06 7b02 	vstr	d7, [r6, #-8]
 80043d4:	e76c      	b.n	80042b0 <__kernel_rem_pio2+0x4e8>
 80043d6:	ed16 7b02 	vldr	d7, [r6, #-8]
 80043da:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 80043de:	ec53 2b17 	vmov	r2, r3, d7
 80043e2:	4640      	mov	r0, r8
 80043e4:	4649      	mov	r1, r9
 80043e6:	ed8d 7b00 	vstr	d7, [sp]
 80043ea:	f7fb ff57 	bl	800029c <__adddf3>
 80043ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	4640      	mov	r0, r8
 80043f8:	4649      	mov	r1, r9
 80043fa:	f7fb ff4d 	bl	8000298 <__aeabi_dsub>
 80043fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004402:	f7fb ff4b 	bl	800029c <__adddf3>
 8004406:	ed9d 7b04 	vldr	d7, [sp, #16]
 800440a:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800440e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004412:	ed06 7b02 	vstr	d7, [r6, #-8]
 8004416:	e750      	b.n	80042ba <__kernel_rem_pio2+0x4f2>
 8004418:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800441c:	f7fb ff3e 	bl	800029c <__adddf3>
 8004420:	3c01      	subs	r4, #1
 8004422:	e750      	b.n	80042c6 <__kernel_rem_pio2+0x4fe>
 8004424:	9a02      	ldr	r2, [sp, #8]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6110      	str	r0, [r2, #16]
 800442e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004432:	6053      	str	r3, [r2, #4]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6093      	str	r3, [r2, #8]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800443e:	60d3      	str	r3, [r2, #12]
 8004440:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004444:	6153      	str	r3, [r2, #20]
 8004446:	e787      	b.n	8004358 <__kernel_rem_pio2+0x590>
 8004448:	00000000 	.word	0x00000000
 800444c:	3ff00000 	.word	0x3ff00000
	...
 8004458:	08004c70 	.word	0x08004c70
 800445c:	41700000 	.word	0x41700000
 8004460:	3e700000 	.word	0x3e700000
 8004464:	00000000 	.word	0x00000000

08004468 <__kernel_sin>:
 8004468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800446c:	ec55 4b10 	vmov	r4, r5, d0
 8004470:	b085      	sub	sp, #20
 8004472:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004476:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800447a:	ed8d 1b00 	vstr	d1, [sp]
 800447e:	9002      	str	r0, [sp, #8]
 8004480:	da06      	bge.n	8004490 <__kernel_sin+0x28>
 8004482:	ee10 0a10 	vmov	r0, s0
 8004486:	4629      	mov	r1, r5
 8004488:	f7fc fb54 	bl	8000b34 <__aeabi_d2iz>
 800448c:	2800      	cmp	r0, #0
 800448e:	d051      	beq.n	8004534 <__kernel_sin+0xcc>
 8004490:	4622      	mov	r2, r4
 8004492:	462b      	mov	r3, r5
 8004494:	4620      	mov	r0, r4
 8004496:	4629      	mov	r1, r5
 8004498:	f7fc f8b2 	bl	8000600 <__aeabi_dmul>
 800449c:	4682      	mov	sl, r0
 800449e:	468b      	mov	fp, r1
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4620      	mov	r0, r4
 80044a6:	4629      	mov	r1, r5
 80044a8:	f7fc f8aa 	bl	8000600 <__aeabi_dmul>
 80044ac:	a341      	add	r3, pc, #260	; (adr r3, 80045b4 <__kernel_sin+0x14c>)
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	4680      	mov	r8, r0
 80044b4:	4689      	mov	r9, r1
 80044b6:	4650      	mov	r0, sl
 80044b8:	4659      	mov	r1, fp
 80044ba:	f7fc f8a1 	bl	8000600 <__aeabi_dmul>
 80044be:	a33f      	add	r3, pc, #252	; (adr r3, 80045bc <__kernel_sin+0x154>)
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f7fb fee8 	bl	8000298 <__aeabi_dsub>
 80044c8:	4652      	mov	r2, sl
 80044ca:	465b      	mov	r3, fp
 80044cc:	f7fc f898 	bl	8000600 <__aeabi_dmul>
 80044d0:	a33c      	add	r3, pc, #240	; (adr r3, 80045c4 <__kernel_sin+0x15c>)
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f7fb fee1 	bl	800029c <__adddf3>
 80044da:	4652      	mov	r2, sl
 80044dc:	465b      	mov	r3, fp
 80044de:	f7fc f88f 	bl	8000600 <__aeabi_dmul>
 80044e2:	a33a      	add	r3, pc, #232	; (adr r3, 80045cc <__kernel_sin+0x164>)
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	f7fb fed6 	bl	8000298 <__aeabi_dsub>
 80044ec:	4652      	mov	r2, sl
 80044ee:	465b      	mov	r3, fp
 80044f0:	f7fc f886 	bl	8000600 <__aeabi_dmul>
 80044f4:	a337      	add	r3, pc, #220	; (adr r3, 80045d4 <__kernel_sin+0x16c>)
 80044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fa:	f7fb fecf 	bl	800029c <__adddf3>
 80044fe:	9b02      	ldr	r3, [sp, #8]
 8004500:	4606      	mov	r6, r0
 8004502:	460f      	mov	r7, r1
 8004504:	b9db      	cbnz	r3, 800453e <__kernel_sin+0xd6>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4650      	mov	r0, sl
 800450c:	4659      	mov	r1, fp
 800450e:	f7fc f877 	bl	8000600 <__aeabi_dmul>
 8004512:	a325      	add	r3, pc, #148	; (adr r3, 80045a8 <__kernel_sin+0x140>)
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f7fb febe 	bl	8000298 <__aeabi_dsub>
 800451c:	4642      	mov	r2, r8
 800451e:	464b      	mov	r3, r9
 8004520:	f7fc f86e 	bl	8000600 <__aeabi_dmul>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4620      	mov	r0, r4
 800452a:	4629      	mov	r1, r5
 800452c:	f7fb feb6 	bl	800029c <__adddf3>
 8004530:	4604      	mov	r4, r0
 8004532:	460d      	mov	r5, r1
 8004534:	ec45 4b10 	vmov	d0, r4, r5
 8004538:	b005      	add	sp, #20
 800453a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800453e:	2200      	movs	r2, #0
 8004540:	4b1b      	ldr	r3, [pc, #108]	; (80045b0 <__kernel_sin+0x148>)
 8004542:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004546:	f7fc f85b 	bl	8000600 <__aeabi_dmul>
 800454a:	4632      	mov	r2, r6
 800454c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004550:	463b      	mov	r3, r7
 8004552:	4640      	mov	r0, r8
 8004554:	4649      	mov	r1, r9
 8004556:	f7fc f853 	bl	8000600 <__aeabi_dmul>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004562:	f7fb fe99 	bl	8000298 <__aeabi_dsub>
 8004566:	4652      	mov	r2, sl
 8004568:	465b      	mov	r3, fp
 800456a:	f7fc f849 	bl	8000600 <__aeabi_dmul>
 800456e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004572:	f7fb fe91 	bl	8000298 <__aeabi_dsub>
 8004576:	a30c      	add	r3, pc, #48	; (adr r3, 80045a8 <__kernel_sin+0x140>)
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	4606      	mov	r6, r0
 800457e:	460f      	mov	r7, r1
 8004580:	4640      	mov	r0, r8
 8004582:	4649      	mov	r1, r9
 8004584:	f7fc f83c 	bl	8000600 <__aeabi_dmul>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	4630      	mov	r0, r6
 800458e:	4639      	mov	r1, r7
 8004590:	f7fb fe84 	bl	800029c <__adddf3>
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4620      	mov	r0, r4
 800459a:	4629      	mov	r1, r5
 800459c:	f7fb fe7c 	bl	8000298 <__aeabi_dsub>
 80045a0:	e7c6      	b.n	8004530 <__kernel_sin+0xc8>
 80045a2:	bf00      	nop
 80045a4:	f3af 8000 	nop.w
 80045a8:	55555549 	.word	0x55555549
 80045ac:	3fc55555 	.word	0x3fc55555
 80045b0:	3fe00000 	.word	0x3fe00000
 80045b4:	5acfd57c 	.word	0x5acfd57c
 80045b8:	3de5d93a 	.word	0x3de5d93a
 80045bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80045c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80045c4:	57b1fe7d 	.word	0x57b1fe7d
 80045c8:	3ec71de3 	.word	0x3ec71de3
 80045cc:	19c161d5 	.word	0x19c161d5
 80045d0:	3f2a01a0 	.word	0x3f2a01a0
 80045d4:	1110f8a6 	.word	0x1110f8a6
 80045d8:	3f811111 	.word	0x3f811111

080045dc <fabs>:
 80045dc:	ec53 2b10 	vmov	r2, r3, d0
 80045e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045e4:	ec43 2b10 	vmov	d0, r2, r3
 80045e8:	4770      	bx	lr
 80045ea:	0000      	movs	r0, r0
 80045ec:	0000      	movs	r0, r0
	...

080045f0 <floor>:
 80045f0:	ec51 0b10 	vmov	r0, r1, d0
 80045f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80045fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004600:	2e13      	cmp	r6, #19
 8004602:	ee10 8a10 	vmov	r8, s0
 8004606:	460c      	mov	r4, r1
 8004608:	ee10 5a10 	vmov	r5, s0
 800460c:	dc35      	bgt.n	800467a <floor+0x8a>
 800460e:	2e00      	cmp	r6, #0
 8004610:	da17      	bge.n	8004642 <floor+0x52>
 8004612:	a335      	add	r3, pc, #212	; (adr r3, 80046e8 <floor+0xf8>)
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	f7fb fe40 	bl	800029c <__adddf3>
 800461c:	2200      	movs	r2, #0
 800461e:	2300      	movs	r3, #0
 8004620:	f7fc fa7e 	bl	8000b20 <__aeabi_dcmpgt>
 8004624:	b150      	cbz	r0, 800463c <floor+0x4c>
 8004626:	2c00      	cmp	r4, #0
 8004628:	da5a      	bge.n	80046e0 <floor+0xf0>
 800462a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800462e:	ea53 0308 	orrs.w	r3, r3, r8
 8004632:	4b2f      	ldr	r3, [pc, #188]	; (80046f0 <floor+0x100>)
 8004634:	f04f 0500 	mov.w	r5, #0
 8004638:	bf18      	it	ne
 800463a:	461c      	movne	r4, r3
 800463c:	4621      	mov	r1, r4
 800463e:	4628      	mov	r0, r5
 8004640:	e025      	b.n	800468e <floor+0x9e>
 8004642:	4f2c      	ldr	r7, [pc, #176]	; (80046f4 <floor+0x104>)
 8004644:	4137      	asrs	r7, r6
 8004646:	ea01 0307 	and.w	r3, r1, r7
 800464a:	4303      	orrs	r3, r0
 800464c:	d01f      	beq.n	800468e <floor+0x9e>
 800464e:	a326      	add	r3, pc, #152	; (adr r3, 80046e8 <floor+0xf8>)
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f7fb fe22 	bl	800029c <__adddf3>
 8004658:	2200      	movs	r2, #0
 800465a:	2300      	movs	r3, #0
 800465c:	f7fc fa60 	bl	8000b20 <__aeabi_dcmpgt>
 8004660:	2800      	cmp	r0, #0
 8004662:	d0eb      	beq.n	800463c <floor+0x4c>
 8004664:	2c00      	cmp	r4, #0
 8004666:	bfbe      	ittt	lt
 8004668:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800466c:	fa43 f606 	asrlt.w	r6, r3, r6
 8004670:	19a4      	addlt	r4, r4, r6
 8004672:	ea24 0407 	bic.w	r4, r4, r7
 8004676:	2500      	movs	r5, #0
 8004678:	e7e0      	b.n	800463c <floor+0x4c>
 800467a:	2e33      	cmp	r6, #51	; 0x33
 800467c:	dd0b      	ble.n	8004696 <floor+0xa6>
 800467e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004682:	d104      	bne.n	800468e <floor+0x9e>
 8004684:	ee10 2a10 	vmov	r2, s0
 8004688:	460b      	mov	r3, r1
 800468a:	f7fb fe07 	bl	800029c <__adddf3>
 800468e:	ec41 0b10 	vmov	d0, r0, r1
 8004692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004696:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800469a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800469e:	fa23 f707 	lsr.w	r7, r3, r7
 80046a2:	4238      	tst	r0, r7
 80046a4:	d0f3      	beq.n	800468e <floor+0x9e>
 80046a6:	a310      	add	r3, pc, #64	; (adr r3, 80046e8 <floor+0xf8>)
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f7fb fdf6 	bl	800029c <__adddf3>
 80046b0:	2200      	movs	r2, #0
 80046b2:	2300      	movs	r3, #0
 80046b4:	f7fc fa34 	bl	8000b20 <__aeabi_dcmpgt>
 80046b8:	2800      	cmp	r0, #0
 80046ba:	d0bf      	beq.n	800463c <floor+0x4c>
 80046bc:	2c00      	cmp	r4, #0
 80046be:	da02      	bge.n	80046c6 <floor+0xd6>
 80046c0:	2e14      	cmp	r6, #20
 80046c2:	d103      	bne.n	80046cc <floor+0xdc>
 80046c4:	3401      	adds	r4, #1
 80046c6:	ea25 0507 	bic.w	r5, r5, r7
 80046ca:	e7b7      	b.n	800463c <floor+0x4c>
 80046cc:	2301      	movs	r3, #1
 80046ce:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80046d2:	fa03 f606 	lsl.w	r6, r3, r6
 80046d6:	4435      	add	r5, r6
 80046d8:	45a8      	cmp	r8, r5
 80046da:	bf88      	it	hi
 80046dc:	18e4      	addhi	r4, r4, r3
 80046de:	e7f2      	b.n	80046c6 <floor+0xd6>
 80046e0:	2500      	movs	r5, #0
 80046e2:	462c      	mov	r4, r5
 80046e4:	e7aa      	b.n	800463c <floor+0x4c>
 80046e6:	bf00      	nop
 80046e8:	8800759c 	.word	0x8800759c
 80046ec:	7e37e43c 	.word	0x7e37e43c
 80046f0:	bff00000 	.word	0xbff00000
 80046f4:	000fffff 	.word	0x000fffff

080046f8 <scalbn>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	ec55 4b10 	vmov	r4, r5, d0
 80046fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004702:	4606      	mov	r6, r0
 8004704:	462b      	mov	r3, r5
 8004706:	b9b2      	cbnz	r2, 8004736 <scalbn+0x3e>
 8004708:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800470c:	4323      	orrs	r3, r4
 800470e:	d03c      	beq.n	800478a <scalbn+0x92>
 8004710:	2200      	movs	r2, #0
 8004712:	4b33      	ldr	r3, [pc, #204]	; (80047e0 <scalbn+0xe8>)
 8004714:	4629      	mov	r1, r5
 8004716:	ee10 0a10 	vmov	r0, s0
 800471a:	f7fb ff71 	bl	8000600 <__aeabi_dmul>
 800471e:	4a31      	ldr	r2, [pc, #196]	; (80047e4 <scalbn+0xec>)
 8004720:	4296      	cmp	r6, r2
 8004722:	4604      	mov	r4, r0
 8004724:	460d      	mov	r5, r1
 8004726:	460b      	mov	r3, r1
 8004728:	da13      	bge.n	8004752 <scalbn+0x5a>
 800472a:	a329      	add	r3, pc, #164	; (adr r3, 80047d0 <scalbn+0xd8>)
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	f7fb ff66 	bl	8000600 <__aeabi_dmul>
 8004734:	e00a      	b.n	800474c <scalbn+0x54>
 8004736:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800473a:	428a      	cmp	r2, r1
 800473c:	d10c      	bne.n	8004758 <scalbn+0x60>
 800473e:	ee10 2a10 	vmov	r2, s0
 8004742:	462b      	mov	r3, r5
 8004744:	4620      	mov	r0, r4
 8004746:	4629      	mov	r1, r5
 8004748:	f7fb fda8 	bl	800029c <__adddf3>
 800474c:	4604      	mov	r4, r0
 800474e:	460d      	mov	r5, r1
 8004750:	e01b      	b.n	800478a <scalbn+0x92>
 8004752:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004756:	3a36      	subs	r2, #54	; 0x36
 8004758:	4432      	add	r2, r6
 800475a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800475e:	428a      	cmp	r2, r1
 8004760:	dd0b      	ble.n	800477a <scalbn+0x82>
 8004762:	ec45 4b11 	vmov	d1, r4, r5
 8004766:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80047d8 <scalbn+0xe0>
 800476a:	f000 f83f 	bl	80047ec <copysign>
 800476e:	a31a      	add	r3, pc, #104	; (adr r3, 80047d8 <scalbn+0xe0>)
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	ec51 0b10 	vmov	r0, r1, d0
 8004778:	e7da      	b.n	8004730 <scalbn+0x38>
 800477a:	2a00      	cmp	r2, #0
 800477c:	dd08      	ble.n	8004790 <scalbn+0x98>
 800477e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004782:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004786:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800478a:	ec45 4b10 	vmov	d0, r4, r5
 800478e:	bd70      	pop	{r4, r5, r6, pc}
 8004790:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004794:	da0d      	bge.n	80047b2 <scalbn+0xba>
 8004796:	f24c 3350 	movw	r3, #50000	; 0xc350
 800479a:	429e      	cmp	r6, r3
 800479c:	ec45 4b11 	vmov	d1, r4, r5
 80047a0:	dce1      	bgt.n	8004766 <scalbn+0x6e>
 80047a2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80047d0 <scalbn+0xd8>
 80047a6:	f000 f821 	bl	80047ec <copysign>
 80047aa:	a309      	add	r3, pc, #36	; (adr r3, 80047d0 <scalbn+0xd8>)
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	e7e0      	b.n	8004774 <scalbn+0x7c>
 80047b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80047b6:	3236      	adds	r2, #54	; 0x36
 80047b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80047bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80047c0:	4620      	mov	r0, r4
 80047c2:	4629      	mov	r1, r5
 80047c4:	2200      	movs	r2, #0
 80047c6:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <scalbn+0xf0>)
 80047c8:	e7b2      	b.n	8004730 <scalbn+0x38>
 80047ca:	bf00      	nop
 80047cc:	f3af 8000 	nop.w
 80047d0:	c2f8f359 	.word	0xc2f8f359
 80047d4:	01a56e1f 	.word	0x01a56e1f
 80047d8:	8800759c 	.word	0x8800759c
 80047dc:	7e37e43c 	.word	0x7e37e43c
 80047e0:	43500000 	.word	0x43500000
 80047e4:	ffff3cb0 	.word	0xffff3cb0
 80047e8:	3c900000 	.word	0x3c900000

080047ec <copysign>:
 80047ec:	ec53 2b10 	vmov	r2, r3, d0
 80047f0:	ee11 0a90 	vmov	r0, s3
 80047f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80047f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80047fc:	ea41 0300 	orr.w	r3, r1, r0
 8004800:	ec43 2b10 	vmov	d0, r2, r3
 8004804:	4770      	bx	lr
	...

08004808 <_init>:
 8004808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480a:	bf00      	nop
 800480c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480e:	bc08      	pop	{r3}
 8004810:	469e      	mov	lr, r3
 8004812:	4770      	bx	lr

08004814 <_fini>:
 8004814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004816:	bf00      	nop
 8004818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481a:	bc08      	pop	{r3}
 800481c:	469e      	mov	lr, r3
 800481e:	4770      	bx	lr
