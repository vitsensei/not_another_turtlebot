
rover_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005238  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  080053d8  080053d8  000153d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005918  08005918  00015918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005920  08005920  00015920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005924  08005924  00015924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  20000000  08005928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000164  2000020c  08005b34  0002020c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000370  08005b34  00020370  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000dff6  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fa8  00000000  00000000  0002e232  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000635d  00000000  00000000  000301da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000988  00000000  00000000  00036538  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bf0  00000000  00000000  00036ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000044f7  00000000  00000000  00037ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003d53  00000000  00000000  0003bfa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003fcfa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000026d4  00000000  00000000  0003fd78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000020c 	.word	0x2000020c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080053c0 	.word	0x080053c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000210 	.word	0x20000210
 80001dc:	080053c0 	.word	0x080053c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_uldivmod>:
 8000c50:	b953      	cbnz	r3, 8000c68 <__aeabi_uldivmod+0x18>
 8000c52:	b94a      	cbnz	r2, 8000c68 <__aeabi_uldivmod+0x18>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bf08      	it	eq
 8000c58:	2800      	cmpeq	r0, #0
 8000c5a:	bf1c      	itt	ne
 8000c5c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c60:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c64:	f000 b97a 	b.w	8000f5c <__aeabi_idiv0>
 8000c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c70:	f000 f806 	bl	8000c80 <__udivmoddi4>
 8000c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <__udivmoddi4>:
 8000c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c84:	468c      	mov	ip, r1
 8000c86:	460d      	mov	r5, r1
 8000c88:	4604      	mov	r4, r0
 8000c8a:	9e08      	ldr	r6, [sp, #32]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d151      	bne.n	8000d34 <__udivmoddi4+0xb4>
 8000c90:	428a      	cmp	r2, r1
 8000c92:	4617      	mov	r7, r2
 8000c94:	d96d      	bls.n	8000d72 <__udivmoddi4+0xf2>
 8000c96:	fab2 fe82 	clz	lr, r2
 8000c9a:	f1be 0f00 	cmp.w	lr, #0
 8000c9e:	d00b      	beq.n	8000cb8 <__udivmoddi4+0x38>
 8000ca0:	f1ce 0c20 	rsb	ip, lr, #32
 8000ca4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000ca8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cac:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cb0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cb4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cb8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cbc:	0c25      	lsrs	r5, r4, #16
 8000cbe:	fbbc f8fa 	udiv	r8, ip, sl
 8000cc2:	fa1f f987 	uxth.w	r9, r7
 8000cc6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cca:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cce:	fb08 f309 	mul.w	r3, r8, r9
 8000cd2:	42ab      	cmp	r3, r5
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x6c>
 8000cd6:	19ed      	adds	r5, r5, r7
 8000cd8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000cdc:	f080 8123 	bcs.w	8000f26 <__udivmoddi4+0x2a6>
 8000ce0:	42ab      	cmp	r3, r5
 8000ce2:	f240 8120 	bls.w	8000f26 <__udivmoddi4+0x2a6>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	443d      	add	r5, r7
 8000cec:	1aed      	subs	r5, r5, r3
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000cf4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000cf8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cfc:	fb00 f909 	mul.w	r9, r0, r9
 8000d00:	45a1      	cmp	r9, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x98>
 8000d04:	19e4      	adds	r4, r4, r7
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 810a 	bcs.w	8000f22 <__udivmoddi4+0x2a2>
 8000d0e:	45a1      	cmp	r9, r4
 8000d10:	f240 8107 	bls.w	8000f22 <__udivmoddi4+0x2a2>
 8000d14:	3802      	subs	r0, #2
 8000d16:	443c      	add	r4, r7
 8000d18:	eba4 0409 	sub.w	r4, r4, r9
 8000d1c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d20:	2100      	movs	r1, #0
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d061      	beq.n	8000dea <__udivmoddi4+0x16a>
 8000d26:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	6034      	str	r4, [r6, #0]
 8000d2e:	6073      	str	r3, [r6, #4]
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	428b      	cmp	r3, r1
 8000d36:	d907      	bls.n	8000d48 <__udivmoddi4+0xc8>
 8000d38:	2e00      	cmp	r6, #0
 8000d3a:	d054      	beq.n	8000de6 <__udivmoddi4+0x166>
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d42:	4608      	mov	r0, r1
 8000d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d48:	fab3 f183 	clz	r1, r3
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	f040 808e 	bne.w	8000e6e <__udivmoddi4+0x1ee>
 8000d52:	42ab      	cmp	r3, r5
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xdc>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80fa 	bhi.w	8000f50 <__udivmoddi4+0x2d0>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	46ac      	mov	ip, r5
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d03f      	beq.n	8000dea <__udivmoddi4+0x16a>
 8000d6a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	b912      	cbnz	r2, 8000d7a <__udivmoddi4+0xfa>
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d7a:	fab7 fe87 	clz	lr, r7
 8000d7e:	f1be 0f00 	cmp.w	lr, #0
 8000d82:	d134      	bne.n	8000dee <__udivmoddi4+0x16e>
 8000d84:	1beb      	subs	r3, r5, r7
 8000d86:	0c3a      	lsrs	r2, r7, #16
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d92:	0c25      	lsrs	r5, r4, #16
 8000d94:	fb02 3318 	mls	r3, r2, r8, r3
 8000d98:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9c:	fb0c f308 	mul.w	r3, ip, r8
 8000da0:	42ab      	cmp	r3, r5
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x134>
 8000da4:	19ed      	adds	r5, r5, r7
 8000da6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x132>
 8000dac:	42ab      	cmp	r3, r5
 8000dae:	f200 80d1 	bhi.w	8000f54 <__udivmoddi4+0x2d4>
 8000db2:	4680      	mov	r8, r0
 8000db4:	1aed      	subs	r5, r5, r3
 8000db6:	b2a3      	uxth	r3, r4
 8000db8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dbc:	fb02 5510 	mls	r5, r2, r0, r5
 8000dc0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000dc4:	fb0c fc00 	mul.w	ip, ip, r0
 8000dc8:	45a4      	cmp	ip, r4
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x15c>
 8000dcc:	19e4      	adds	r4, r4, r7
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x15a>
 8000dd4:	45a4      	cmp	ip, r4
 8000dd6:	f200 80b8 	bhi.w	8000f4a <__udivmoddi4+0x2ca>
 8000dda:	4618      	mov	r0, r3
 8000ddc:	eba4 040c 	sub.w	r4, r4, ip
 8000de0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000de4:	e79d      	b.n	8000d22 <__udivmoddi4+0xa2>
 8000de6:	4631      	mov	r1, r6
 8000de8:	4630      	mov	r0, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	f1ce 0420 	rsb	r4, lr, #32
 8000df2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000df6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dfa:	fa20 f804 	lsr.w	r8, r0, r4
 8000dfe:	0c3a      	lsrs	r2, r7, #16
 8000e00:	fa25 f404 	lsr.w	r4, r5, r4
 8000e04:	ea48 0803 	orr.w	r8, r8, r3
 8000e08:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e0c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e10:	fb02 4411 	mls	r4, r2, r1, r4
 8000e14:	fa1f fc87 	uxth.w	ip, r7
 8000e18:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e1c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e20:	42ab      	cmp	r3, r5
 8000e22:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e26:	d909      	bls.n	8000e3c <__udivmoddi4+0x1bc>
 8000e28:	19ed      	adds	r5, r5, r7
 8000e2a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000e2e:	f080 808a 	bcs.w	8000f46 <__udivmoddi4+0x2c6>
 8000e32:	42ab      	cmp	r3, r5
 8000e34:	f240 8087 	bls.w	8000f46 <__udivmoddi4+0x2c6>
 8000e38:	3902      	subs	r1, #2
 8000e3a:	443d      	add	r5, r7
 8000e3c:	1aeb      	subs	r3, r5, r3
 8000e3e:	fa1f f588 	uxth.w	r5, r8
 8000e42:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e46:	fb02 3310 	mls	r3, r2, r0, r3
 8000e4a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e4e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e52:	42ab      	cmp	r3, r5
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x1e6>
 8000e56:	19ed      	adds	r5, r5, r7
 8000e58:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5c:	d26f      	bcs.n	8000f3e <__udivmoddi4+0x2be>
 8000e5e:	42ab      	cmp	r3, r5
 8000e60:	d96d      	bls.n	8000f3e <__udivmoddi4+0x2be>
 8000e62:	3802      	subs	r0, #2
 8000e64:	443d      	add	r5, r7
 8000e66:	1aeb      	subs	r3, r5, r3
 8000e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6c:	e78f      	b.n	8000d8e <__udivmoddi4+0x10e>
 8000e6e:	f1c1 0720 	rsb	r7, r1, #32
 8000e72:	fa22 f807 	lsr.w	r8, r2, r7
 8000e76:	408b      	lsls	r3, r1
 8000e78:	fa05 f401 	lsl.w	r4, r5, r1
 8000e7c:	ea48 0303 	orr.w	r3, r8, r3
 8000e80:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e84:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e8e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e92:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e96:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e9a:	fa1f f883 	uxth.w	r8, r3
 8000e9e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ea2:	fb09 f408 	mul.w	r4, r9, r8
 8000ea6:	42ac      	cmp	r4, r5
 8000ea8:	fa02 f201 	lsl.w	r2, r2, r1
 8000eac:	fa00 fa01 	lsl.w	sl, r0, r1
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x244>
 8000eb2:	18ed      	adds	r5, r5, r3
 8000eb4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000eb8:	d243      	bcs.n	8000f42 <__udivmoddi4+0x2c2>
 8000eba:	42ac      	cmp	r4, r5
 8000ebc:	d941      	bls.n	8000f42 <__udivmoddi4+0x2c2>
 8000ebe:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec2:	441d      	add	r5, r3
 8000ec4:	1b2d      	subs	r5, r5, r4
 8000ec6:	fa1f fe8e 	uxth.w	lr, lr
 8000eca:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ece:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ed2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ed6:	fb00 f808 	mul.w	r8, r0, r8
 8000eda:	45a0      	cmp	r8, r4
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x26e>
 8000ede:	18e4      	adds	r4, r4, r3
 8000ee0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000ee4:	d229      	bcs.n	8000f3a <__udivmoddi4+0x2ba>
 8000ee6:	45a0      	cmp	r8, r4
 8000ee8:	d927      	bls.n	8000f3a <__udivmoddi4+0x2ba>
 8000eea:	3802      	subs	r0, #2
 8000eec:	441c      	add	r4, r3
 8000eee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef2:	eba4 0408 	sub.w	r4, r4, r8
 8000ef6:	fba0 8902 	umull	r8, r9, r0, r2
 8000efa:	454c      	cmp	r4, r9
 8000efc:	46c6      	mov	lr, r8
 8000efe:	464d      	mov	r5, r9
 8000f00:	d315      	bcc.n	8000f2e <__udivmoddi4+0x2ae>
 8000f02:	d012      	beq.n	8000f2a <__udivmoddi4+0x2aa>
 8000f04:	b156      	cbz	r6, 8000f1c <__udivmoddi4+0x29c>
 8000f06:	ebba 030e 	subs.w	r3, sl, lr
 8000f0a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f0e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f12:	40cb      	lsrs	r3, r1
 8000f14:	431f      	orrs	r7, r3
 8000f16:	40cc      	lsrs	r4, r1
 8000f18:	6037      	str	r7, [r6, #0]
 8000f1a:	6074      	str	r4, [r6, #4]
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f22:	4618      	mov	r0, r3
 8000f24:	e6f8      	b.n	8000d18 <__udivmoddi4+0x98>
 8000f26:	4690      	mov	r8, r2
 8000f28:	e6e0      	b.n	8000cec <__udivmoddi4+0x6c>
 8000f2a:	45c2      	cmp	sl, r8
 8000f2c:	d2ea      	bcs.n	8000f04 <__udivmoddi4+0x284>
 8000f2e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f32:	eb69 0503 	sbc.w	r5, r9, r3
 8000f36:	3801      	subs	r0, #1
 8000f38:	e7e4      	b.n	8000f04 <__udivmoddi4+0x284>
 8000f3a:	4628      	mov	r0, r5
 8000f3c:	e7d7      	b.n	8000eee <__udivmoddi4+0x26e>
 8000f3e:	4640      	mov	r0, r8
 8000f40:	e791      	b.n	8000e66 <__udivmoddi4+0x1e6>
 8000f42:	4681      	mov	r9, r0
 8000f44:	e7be      	b.n	8000ec4 <__udivmoddi4+0x244>
 8000f46:	4601      	mov	r1, r0
 8000f48:	e778      	b.n	8000e3c <__udivmoddi4+0x1bc>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	443c      	add	r4, r7
 8000f4e:	e745      	b.n	8000ddc <__udivmoddi4+0x15c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e708      	b.n	8000d66 <__udivmoddi4+0xe6>
 8000f54:	f1a8 0802 	sub.w	r8, r8, #2
 8000f58:	443d      	add	r5, r7
 8000f5a:	e72b      	b.n	8000db4 <__udivmoddi4+0x134>

08000f5c <__aeabi_idiv0>:
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f62:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <HAL_InitTick+0x3c>)
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_InitTick+0x40>)
{
 8000f66:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	7818      	ldrb	r0, [r3, #0]
 8000f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f72:	6810      	ldr	r0, [r2, #0]
 8000f74:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f78:	f000 f896 	bl	80010a8 <HAL_SYSTICK_Config>
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	b958      	cbnz	r0, 8000f98 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f80:	2d0f      	cmp	r5, #15
 8000f82:	d809      	bhi.n	8000f98 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f84:	4602      	mov	r2, r0
 8000f86:	4629      	mov	r1, r5
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f8c:	f000 f84a 	bl	8001024 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <HAL_InitTick+0x44>)
 8000f92:	4620      	mov	r0, r4
 8000f94:	601d      	str	r5, [r3, #0]
 8000f96:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f98:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f9a:	bd38      	pop	{r3, r4, r5, pc}
 8000f9c:	20000034 	.word	0x20000034
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20000004 	.word	0x20000004

08000fa8 <HAL_Init>:
{
 8000fa8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x30>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fb2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fc2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f81b 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff ffc8 	bl	8000f60 <HAL_InitTick>
  HAL_MspInit();
 8000fd0:	f001 ff5c 	bl	8002e8c <HAL_MspInit>
}
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	bd08      	pop	{r3, pc}
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <HAL_IncTick+0x10>)
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <HAL_IncTick+0x14>)
 8000fe0:	6811      	ldr	r1, [r2, #0]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	440b      	add	r3, r1
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000268 	.word	0x20000268
 8000ff0:	20000000 	.word	0x20000000

08000ff4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ff4:	4b01      	ldr	r3, [pc, #4]	; (8000ffc <HAL_GetTick+0x8>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000268 	.word	0x20000268

08001000 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001002:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001004:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001008:	041b      	lsls	r3, r3, #16
 800100a:	0c1b      	lsrs	r3, r3, #16
 800100c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	0200      	lsls	r0, r0, #8
 8001012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001016:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800101a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800101c:	60d3      	str	r3, [r2, #12]
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001026:	b530      	push	{r4, r5, lr}
 8001028:	68dc      	ldr	r4, [r3, #12]
 800102a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	2b04      	cmp	r3, #4
 8001036:	bf28      	it	cs
 8001038:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 0501 	mov.w	r5, #1
 8001040:	fa05 f303 	lsl.w	r3, r5, r3
 8001044:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001048:	bf8c      	ite	hi
 800104a:	3c03      	subhi	r4, #3
 800104c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104e:	4019      	ands	r1, r3
 8001050:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001052:	fa05 f404 	lsl.w	r4, r5, r4
 8001056:	3c01      	subs	r4, #1
 8001058:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800105a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	ea42 0201 	orr.w	r2, r2, r1
 8001060:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	bfad      	iteet	ge
 8001066:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	f000 000f 	andlt.w	r0, r0, #15
 800106e:	4b06      	ldrlt	r3, [pc, #24]	; (8001088 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	bfb5      	itete	lt
 8001076:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001080:	bd30      	pop	{r4, r5, pc}
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00
 8001088:	e000ed14 	.word	0xe000ed14

0800108c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800108c:	2800      	cmp	r0, #0
 800108e:	db08      	blt.n	80010a2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001090:	0942      	lsrs	r2, r0, #5
 8001092:	2301      	movs	r3, #1
 8001094:	f000 001f 	and.w	r0, r0, #31
 8001098:	fa03 f000 	lsl.w	r0, r3, r0
 800109c:	4b01      	ldr	r3, [pc, #4]	; (80010a4 <HAL_NVIC_EnableIRQ+0x18>)
 800109e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80010a2:	4770      	bx	lr
 80010a4:	e000e100 	.word	0xe000e100

080010a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a8:	3801      	subs	r0, #1
 80010aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010ae:	d20a      	bcs.n	80010c6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	21f0      	movs	r1, #240	; 0xf0
 80010b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010bc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010d8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010da:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010dc:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800127c <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e0:	4a64      	ldr	r2, [pc, #400]	; (8001274 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010e2:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 80010e4:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e8:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ea:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80010ec:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f0:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 80010f4:	42b7      	cmp	r7, r6
 80010f6:	f040 80ad 	bne.w	8001254 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010fa:	684c      	ldr	r4, [r1, #4]
 80010fc:	f024 0a10 	bic.w	sl, r4, #16
 8001100:	f1ba 0f02 	cmp.w	sl, #2
 8001104:	d116      	bne.n	8001134 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 8001106:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800110a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800110e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001112:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001116:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800111a:	f04f 0e0f 	mov.w	lr, #15
 800111e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001122:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001126:	690d      	ldr	r5, [r1, #16]
 8001128:	fa05 f50b 	lsl.w	r5, r5, fp
 800112c:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001130:	f8cc 5020 	str.w	r5, [ip, #32]
 8001134:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001138:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800113a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800113e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001142:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001144:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001148:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800114c:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001150:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001154:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001158:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115c:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 800115e:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001162:	d815      	bhi.n	8001190 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 8001164:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001168:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116c:	68cd      	ldr	r5, [r1, #12]
 800116e:	fa05 fa0c 	lsl.w	sl, r5, ip
 8001172:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 8001176:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 800117a:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800117e:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001182:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8001186:	fa0e fe03 	lsl.w	lr, lr, r3
 800118a:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 800118e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001190:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001192:	9d00      	ldr	r5, [sp, #0]
 8001194:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001196:	688f      	ldr	r7, [r1, #8]
 8001198:	fa07 f70c 	lsl.w	r7, r7, ip
 800119c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800119e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a0:	00e5      	lsls	r5, r4, #3
 80011a2:	d557      	bpl.n	8001254 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a4:	f04f 0b00 	mov.w	fp, #0
 80011a8:	f8cd b00c 	str.w	fp, [sp, #12]
 80011ac:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011b0:	4d31      	ldr	r5, [pc, #196]	; (8001278 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80011b6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80011ba:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80011be:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80011c2:	9703      	str	r7, [sp, #12]
 80011c4:	9f03      	ldr	r7, [sp, #12]
 80011c6:	f023 0703 	bic.w	r7, r3, #3
 80011ca:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80011ce:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d2:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80011d6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011da:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80011de:	f04f 0e0f 	mov.w	lr, #15
 80011e2:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011e6:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e8:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ec:	d039      	beq.n	8001262 <HAL_GPIO_Init+0x18e>
 80011ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011f2:	42a8      	cmp	r0, r5
 80011f4:	d037      	beq.n	8001266 <HAL_GPIO_Init+0x192>
 80011f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011fa:	42a8      	cmp	r0, r5
 80011fc:	d035      	beq.n	800126a <HAL_GPIO_Init+0x196>
 80011fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001202:	42a8      	cmp	r0, r5
 8001204:	d033      	beq.n	800126e <HAL_GPIO_Init+0x19a>
 8001206:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800120a:	42a8      	cmp	r0, r5
 800120c:	bf14      	ite	ne
 800120e:	2507      	movne	r5, #7
 8001210:	2504      	moveq	r5, #4
 8001212:	fa05 f50c 	lsl.w	r5, r5, ip
 8001216:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800121a:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800121c:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800121e:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001220:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001224:	bf0c      	ite	eq
 8001226:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001228:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800122a:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800122c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800122e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001232:	bf0c      	ite	eq
 8001234:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001236:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001238:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800123c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001240:	bf0c      	ite	eq
 8001242:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001244:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001246:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001248:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800124a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800124c:	bf54      	ite	pl
 800124e:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001250:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001252:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001254:	3301      	adds	r3, #1
 8001256:	2b10      	cmp	r3, #16
 8001258:	f47f af47 	bne.w	80010ea <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800125c:	b005      	add	sp, #20
 800125e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001262:	465d      	mov	r5, fp
 8001264:	e7d5      	b.n	8001212 <HAL_GPIO_Init+0x13e>
 8001266:	2501      	movs	r5, #1
 8001268:	e7d3      	b.n	8001212 <HAL_GPIO_Init+0x13e>
 800126a:	2502      	movs	r5, #2
 800126c:	e7d1      	b.n	8001212 <HAL_GPIO_Init+0x13e>
 800126e:	2503      	movs	r5, #3
 8001270:	e7cf      	b.n	8001212 <HAL_GPIO_Init+0x13e>
 8001272:	bf00      	nop
 8001274:	40013c00 	.word	0x40013c00
 8001278:	40020000 	.word	0x40020000
 800127c:	40023800 	.word	0x40023800

08001280 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001280:	b10a      	cbz	r2, 8001286 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001282:	6181      	str	r1, [r0, #24]
 8001284:	4770      	bx	lr
 8001286:	0409      	lsls	r1, r1, #16
 8001288:	e7fb      	b.n	8001282 <HAL_GPIO_WritePin+0x2>

0800128a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800128a:	6943      	ldr	r3, [r0, #20]
 800128c:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001290:	bf08      	it	eq
 8001292:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001294:	6181      	str	r1, [r0, #24]
 8001296:	4770      	bx	lr

08001298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001298:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800129c:	4604      	mov	r4, r0
 800129e:	b918      	cbnz	r0, 80012a8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80012a0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80012a2:	b002      	add	sp, #8
 80012a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a8:	6803      	ldr	r3, [r0, #0]
 80012aa:	07dd      	lsls	r5, r3, #31
 80012ac:	d410      	bmi.n	80012d0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	0798      	lsls	r0, r3, #30
 80012b2:	d458      	bmi.n	8001366 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	071a      	lsls	r2, r3, #28
 80012b8:	f100 809a 	bmi.w	80013f0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012bc:	6823      	ldr	r3, [r4, #0]
 80012be:	075b      	lsls	r3, r3, #29
 80012c0:	f100 80b8 	bmi.w	8001434 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012c4:	69a2      	ldr	r2, [r4, #24]
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	f040 8119 	bne.w	80014fe <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80012cc:	2000      	movs	r0, #0
 80012ce:	e7e8      	b.n	80012a2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d0:	4ba6      	ldr	r3, [pc, #664]	; (800156c <HAL_RCC_OscConfig+0x2d4>)
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	f002 020c 	and.w	r2, r2, #12
 80012d8:	2a04      	cmp	r2, #4
 80012da:	d007      	beq.n	80012ec <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e2:	2a08      	cmp	r2, #8
 80012e4:	d10a      	bne.n	80012fc <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	0259      	lsls	r1, r3, #9
 80012ea:	d507      	bpl.n	80012fc <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ec:	4b9f      	ldr	r3, [pc, #636]	; (800156c <HAL_RCC_OscConfig+0x2d4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	039a      	lsls	r2, r3, #14
 80012f2:	d5dc      	bpl.n	80012ae <HAL_RCC_OscConfig+0x16>
 80012f4:	6863      	ldr	r3, [r4, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1d9      	bne.n	80012ae <HAL_RCC_OscConfig+0x16>
 80012fa:	e7d1      	b.n	80012a0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fc:	6863      	ldr	r3, [r4, #4]
 80012fe:	4d9b      	ldr	r5, [pc, #620]	; (800156c <HAL_RCC_OscConfig+0x2d4>)
 8001300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001304:	d111      	bne.n	800132a <HAL_RCC_OscConfig+0x92>
 8001306:	682b      	ldr	r3, [r5, #0]
 8001308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800130c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800130e:	f7ff fe71 	bl	8000ff4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	4d96      	ldr	r5, [pc, #600]	; (800156c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001314:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	682b      	ldr	r3, [r5, #0]
 8001318:	039b      	lsls	r3, r3, #14
 800131a:	d4c8      	bmi.n	80012ae <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fe6a 	bl	8000ff4 <HAL_GetTick>
 8001320:	1b80      	subs	r0, r0, r6
 8001322:	2864      	cmp	r0, #100	; 0x64
 8001324:	d9f7      	bls.n	8001316 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001326:	2003      	movs	r0, #3
 8001328:	e7bb      	b.n	80012a2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800132e:	d104      	bne.n	800133a <HAL_RCC_OscConfig+0xa2>
 8001330:	682b      	ldr	r3, [r5, #0]
 8001332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001336:	602b      	str	r3, [r5, #0]
 8001338:	e7e5      	b.n	8001306 <HAL_RCC_OscConfig+0x6e>
 800133a:	682a      	ldr	r2, [r5, #0]
 800133c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001340:	602a      	str	r2, [r5, #0]
 8001342:	682a      	ldr	r2, [r5, #0]
 8001344:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001348:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1df      	bne.n	800130e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800134e:	f7ff fe51 	bl	8000ff4 <HAL_GetTick>
 8001352:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001354:	682b      	ldr	r3, [r5, #0]
 8001356:	039f      	lsls	r7, r3, #14
 8001358:	d5a9      	bpl.n	80012ae <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800135a:	f7ff fe4b 	bl	8000ff4 <HAL_GetTick>
 800135e:	1b80      	subs	r0, r0, r6
 8001360:	2864      	cmp	r0, #100	; 0x64
 8001362:	d9f7      	bls.n	8001354 <HAL_RCC_OscConfig+0xbc>
 8001364:	e7df      	b.n	8001326 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001366:	4b81      	ldr	r3, [pc, #516]	; (800156c <HAL_RCC_OscConfig+0x2d4>)
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	f012 0f0c 	tst.w	r2, #12
 800136e:	d007      	beq.n	8001380 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001376:	2a08      	cmp	r2, #8
 8001378:	d111      	bne.n	800139e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	025e      	lsls	r6, r3, #9
 800137e:	d40e      	bmi.n	800139e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001380:	4b7a      	ldr	r3, [pc, #488]	; (800156c <HAL_RCC_OscConfig+0x2d4>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	0795      	lsls	r5, r2, #30
 8001386:	d502      	bpl.n	800138e <HAL_RCC_OscConfig+0xf6>
 8001388:	68e2      	ldr	r2, [r4, #12]
 800138a:	2a01      	cmp	r2, #1
 800138c:	d188      	bne.n	80012a0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	6921      	ldr	r1, [r4, #16]
 8001392:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001396:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800139a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139c:	e78a      	b.n	80012b4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800139e:	68e2      	ldr	r2, [r4, #12]
 80013a0:	4b73      	ldr	r3, [pc, #460]	; (8001570 <HAL_RCC_OscConfig+0x2d8>)
 80013a2:	b1b2      	cbz	r2, 80013d2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013a8:	f7ff fe24 	bl	8000ff4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	4d6f      	ldr	r5, [pc, #444]	; (800156c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80013ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b0:	682b      	ldr	r3, [r5, #0]
 80013b2:	0798      	lsls	r0, r3, #30
 80013b4:	d507      	bpl.n	80013c6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b6:	682b      	ldr	r3, [r5, #0]
 80013b8:	6922      	ldr	r2, [r4, #16]
 80013ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013c2:	602b      	str	r3, [r5, #0]
 80013c4:	e776      	b.n	80012b4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c6:	f7ff fe15 	bl	8000ff4 <HAL_GetTick>
 80013ca:	1b80      	subs	r0, r0, r6
 80013cc:	2802      	cmp	r0, #2
 80013ce:	d9ef      	bls.n	80013b0 <HAL_RCC_OscConfig+0x118>
 80013d0:	e7a9      	b.n	8001326 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80013d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013d4:	f7ff fe0e 	bl	8000ff4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d8:	4d64      	ldr	r5, [pc, #400]	; (800156c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80013da:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013dc:	682b      	ldr	r3, [r5, #0]
 80013de:	0799      	lsls	r1, r3, #30
 80013e0:	f57f af68 	bpl.w	80012b4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e4:	f7ff fe06 	bl	8000ff4 <HAL_GetTick>
 80013e8:	1b80      	subs	r0, r0, r6
 80013ea:	2802      	cmp	r0, #2
 80013ec:	d9f6      	bls.n	80013dc <HAL_RCC_OscConfig+0x144>
 80013ee:	e79a      	b.n	8001326 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013f0:	6962      	ldr	r2, [r4, #20]
 80013f2:	4b60      	ldr	r3, [pc, #384]	; (8001574 <HAL_RCC_OscConfig+0x2dc>)
 80013f4:	b17a      	cbz	r2, 8001416 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80013fa:	f7ff fdfb 	bl	8000ff4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fe:	4d5b      	ldr	r5, [pc, #364]	; (800156c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001400:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001404:	079f      	lsls	r7, r3, #30
 8001406:	f53f af59 	bmi.w	80012bc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800140a:	f7ff fdf3 	bl	8000ff4 <HAL_GetTick>
 800140e:	1b80      	subs	r0, r0, r6
 8001410:	2802      	cmp	r0, #2
 8001412:	d9f6      	bls.n	8001402 <HAL_RCC_OscConfig+0x16a>
 8001414:	e787      	b.n	8001326 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001416:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001418:	f7ff fdec 	bl	8000ff4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	4d53      	ldr	r5, [pc, #332]	; (800156c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800141e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001420:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001422:	0798      	lsls	r0, r3, #30
 8001424:	f57f af4a 	bpl.w	80012bc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001428:	f7ff fde4 	bl	8000ff4 <HAL_GetTick>
 800142c:	1b80      	subs	r0, r0, r6
 800142e:	2802      	cmp	r0, #2
 8001430:	d9f6      	bls.n	8001420 <HAL_RCC_OscConfig+0x188>
 8001432:	e778      	b.n	8001326 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001434:	4b4d      	ldr	r3, [pc, #308]	; (800156c <HAL_RCC_OscConfig+0x2d4>)
 8001436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001438:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800143c:	d128      	bne.n	8001490 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	9201      	str	r2, [sp, #4]
 8001440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001442:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001446:	641a      	str	r2, [r3, #64]	; 0x40
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	9301      	str	r3, [sp, #4]
 8001450:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001452:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001454:	4d48      	ldr	r5, [pc, #288]	; (8001578 <HAL_RCC_OscConfig+0x2e0>)
 8001456:	682b      	ldr	r3, [r5, #0]
 8001458:	05d9      	lsls	r1, r3, #23
 800145a:	d51b      	bpl.n	8001494 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800145c:	68a3      	ldr	r3, [r4, #8]
 800145e:	4d43      	ldr	r5, [pc, #268]	; (800156c <HAL_RCC_OscConfig+0x2d4>)
 8001460:	2b01      	cmp	r3, #1
 8001462:	d127      	bne.n	80014b4 <HAL_RCC_OscConfig+0x21c>
 8001464:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800146c:	f7ff fdc2 	bl	8000ff4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001470:	4d3e      	ldr	r5, [pc, #248]	; (800156c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001472:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001474:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001478:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800147a:	079b      	lsls	r3, r3, #30
 800147c:	d539      	bpl.n	80014f2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800147e:	2e00      	cmp	r6, #0
 8001480:	f43f af20 	beq.w	80012c4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001484:	4a39      	ldr	r2, [pc, #228]	; (800156c <HAL_RCC_OscConfig+0x2d4>)
 8001486:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	e719      	b.n	80012c4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001490:	2600      	movs	r6, #0
 8001492:	e7df      	b.n	8001454 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001494:	682b      	ldr	r3, [r5, #0]
 8001496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800149c:	f7ff fdaa 	bl	8000ff4 <HAL_GetTick>
 80014a0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a2:	682b      	ldr	r3, [r5, #0]
 80014a4:	05da      	lsls	r2, r3, #23
 80014a6:	d4d9      	bmi.n	800145c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a8:	f7ff fda4 	bl	8000ff4 <HAL_GetTick>
 80014ac:	1bc0      	subs	r0, r0, r7
 80014ae:	2802      	cmp	r0, #2
 80014b0:	d9f7      	bls.n	80014a2 <HAL_RCC_OscConfig+0x20a>
 80014b2:	e738      	b.n	8001326 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b4:	2b05      	cmp	r3, #5
 80014b6:	d104      	bne.n	80014c2 <HAL_RCC_OscConfig+0x22a>
 80014b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014ba:	f043 0304 	orr.w	r3, r3, #4
 80014be:	672b      	str	r3, [r5, #112]	; 0x70
 80014c0:	e7d0      	b.n	8001464 <HAL_RCC_OscConfig+0x1cc>
 80014c2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80014c4:	f022 0201 	bic.w	r2, r2, #1
 80014c8:	672a      	str	r2, [r5, #112]	; 0x70
 80014ca:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80014cc:	f022 0204 	bic.w	r2, r2, #4
 80014d0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1ca      	bne.n	800146c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80014d6:	f7ff fd8d 	bl	8000ff4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014da:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80014de:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80014e2:	0798      	lsls	r0, r3, #30
 80014e4:	d5cb      	bpl.n	800147e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e6:	f7ff fd85 	bl	8000ff4 <HAL_GetTick>
 80014ea:	1bc0      	subs	r0, r0, r7
 80014ec:	4540      	cmp	r0, r8
 80014ee:	d9f7      	bls.n	80014e0 <HAL_RCC_OscConfig+0x248>
 80014f0:	e719      	b.n	8001326 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f2:	f7ff fd7f 	bl	8000ff4 <HAL_GetTick>
 80014f6:	1bc0      	subs	r0, r0, r7
 80014f8:	4540      	cmp	r0, r8
 80014fa:	d9bd      	bls.n	8001478 <HAL_RCC_OscConfig+0x1e0>
 80014fc:	e713      	b.n	8001326 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014fe:	4d1b      	ldr	r5, [pc, #108]	; (800156c <HAL_RCC_OscConfig+0x2d4>)
 8001500:	68ab      	ldr	r3, [r5, #8]
 8001502:	f003 030c 	and.w	r3, r3, #12
 8001506:	2b08      	cmp	r3, #8
 8001508:	f43f aeca 	beq.w	80012a0 <HAL_RCC_OscConfig+0x8>
 800150c:	4e1b      	ldr	r6, [pc, #108]	; (800157c <HAL_RCC_OscConfig+0x2e4>)
 800150e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001510:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001512:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001514:	d134      	bne.n	8001580 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001516:	f7ff fd6d 	bl	8000ff4 <HAL_GetTick>
 800151a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151c:	682b      	ldr	r3, [r5, #0]
 800151e:	0199      	lsls	r1, r3, #6
 8001520:	d41e      	bmi.n	8001560 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001522:	6a22      	ldr	r2, [r4, #32]
 8001524:	69e3      	ldr	r3, [r4, #28]
 8001526:	4313      	orrs	r3, r2
 8001528:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800152a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800152e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001530:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001534:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001536:	4c0d      	ldr	r4, [pc, #52]	; (800156c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001538:	0852      	lsrs	r2, r2, #1
 800153a:	3a01      	subs	r2, #1
 800153c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001540:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001542:	2301      	movs	r3, #1
 8001544:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001546:	f7ff fd55 	bl	8000ff4 <HAL_GetTick>
 800154a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154c:	6823      	ldr	r3, [r4, #0]
 800154e:	019a      	lsls	r2, r3, #6
 8001550:	f53f aebc 	bmi.w	80012cc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001554:	f7ff fd4e 	bl	8000ff4 <HAL_GetTick>
 8001558:	1b40      	subs	r0, r0, r5
 800155a:	2802      	cmp	r0, #2
 800155c:	d9f6      	bls.n	800154c <HAL_RCC_OscConfig+0x2b4>
 800155e:	e6e2      	b.n	8001326 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001560:	f7ff fd48 	bl	8000ff4 <HAL_GetTick>
 8001564:	1bc0      	subs	r0, r0, r7
 8001566:	2802      	cmp	r0, #2
 8001568:	d9d8      	bls.n	800151c <HAL_RCC_OscConfig+0x284>
 800156a:	e6dc      	b.n	8001326 <HAL_RCC_OscConfig+0x8e>
 800156c:	40023800 	.word	0x40023800
 8001570:	42470000 	.word	0x42470000
 8001574:	42470e80 	.word	0x42470e80
 8001578:	40007000 	.word	0x40007000
 800157c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001580:	f7ff fd38 	bl	8000ff4 <HAL_GetTick>
 8001584:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001586:	682b      	ldr	r3, [r5, #0]
 8001588:	019b      	lsls	r3, r3, #6
 800158a:	f57f ae9f 	bpl.w	80012cc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158e:	f7ff fd31 	bl	8000ff4 <HAL_GetTick>
 8001592:	1b00      	subs	r0, r0, r4
 8001594:	2802      	cmp	r0, #2
 8001596:	d9f6      	bls.n	8001586 <HAL_RCC_OscConfig+0x2ee>
 8001598:	e6c5      	b.n	8001326 <HAL_RCC_OscConfig+0x8e>
 800159a:	bf00      	nop

0800159c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800159c:	4913      	ldr	r1, [pc, #76]	; (80015ec <HAL_RCC_GetSysClockFreq+0x50>)
{
 800159e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015a0:	688b      	ldr	r3, [r1, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d003      	beq.n	80015b2 <HAL_RCC_GetSysClockFreq+0x16>
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d003      	beq.n	80015b6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015ae:	4810      	ldr	r0, [pc, #64]	; (80015f0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80015b0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80015b2:	4810      	ldr	r0, [pc, #64]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x58>)
 80015b4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015b8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ba:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015bc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c0:	bf14      	ite	ne
 80015c2:	480c      	ldrne	r0, [pc, #48]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c4:	480a      	ldreq	r0, [pc, #40]	; (80015f0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80015ca:	bf18      	it	ne
 80015cc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d2:	fba1 0100 	umull	r0, r1, r1, r0
 80015d6:	f7ff fb3b 	bl	8000c50 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <HAL_RCC_GetSysClockFreq+0x50>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80015e2:	3301      	adds	r3, #1
 80015e4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80015e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80015ea:	bd08      	pop	{r3, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	00f42400 	.word	0x00f42400
 80015f4:	007a1200 	.word	0x007a1200

080015f8 <HAL_RCC_ClockConfig>:
{
 80015f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015fc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80015fe:	4604      	mov	r4, r0
 8001600:	b910      	cbnz	r0, 8001608 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001602:	2001      	movs	r0, #1
 8001604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001608:	4b44      	ldr	r3, [pc, #272]	; (800171c <HAL_RCC_ClockConfig+0x124>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	f002 020f 	and.w	r2, r2, #15
 8001610:	428a      	cmp	r2, r1
 8001612:	d328      	bcc.n	8001666 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001614:	6821      	ldr	r1, [r4, #0]
 8001616:	078f      	lsls	r7, r1, #30
 8001618:	d42d      	bmi.n	8001676 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161a:	07c8      	lsls	r0, r1, #31
 800161c:	d440      	bmi.n	80016a0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <HAL_RCC_ClockConfig+0x124>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	f002 020f 	and.w	r2, r2, #15
 8001626:	4295      	cmp	r5, r2
 8001628:	d366      	bcc.n	80016f8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800162a:	6822      	ldr	r2, [r4, #0]
 800162c:	0751      	lsls	r1, r2, #29
 800162e:	d46c      	bmi.n	800170a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001630:	0713      	lsls	r3, r2, #28
 8001632:	d507      	bpl.n	8001644 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001634:	4a3a      	ldr	r2, [pc, #232]	; (8001720 <HAL_RCC_ClockConfig+0x128>)
 8001636:	6921      	ldr	r1, [r4, #16]
 8001638:	6893      	ldr	r3, [r2, #8]
 800163a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800163e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001642:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001644:	f7ff ffaa 	bl	800159c <HAL_RCC_GetSysClockFreq>
 8001648:	4b35      	ldr	r3, [pc, #212]	; (8001720 <HAL_RCC_ClockConfig+0x128>)
 800164a:	4a36      	ldr	r2, [pc, #216]	; (8001724 <HAL_RCC_ClockConfig+0x12c>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001652:	5cd3      	ldrb	r3, [r2, r3]
 8001654:	40d8      	lsrs	r0, r3
 8001656:	4b34      	ldr	r3, [pc, #208]	; (8001728 <HAL_RCC_ClockConfig+0x130>)
 8001658:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff fc80 	bl	8000f60 <HAL_InitTick>
  return HAL_OK;
 8001660:	2000      	movs	r0, #0
 8001662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001666:	b2ca      	uxtb	r2, r1
 8001668:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	4299      	cmp	r1, r3
 8001672:	d1c6      	bne.n	8001602 <HAL_RCC_ClockConfig+0xa>
 8001674:	e7ce      	b.n	8001614 <HAL_RCC_ClockConfig+0x1c>
 8001676:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800167c:	bf1e      	ittt	ne
 800167e:	689a      	ldrne	r2, [r3, #8]
 8001680:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001684:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001686:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001688:	bf42      	ittt	mi
 800168a:	689a      	ldrmi	r2, [r3, #8]
 800168c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001690:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	68a0      	ldr	r0, [r4, #8]
 8001696:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800169a:	4302      	orrs	r2, r0
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	e7bc      	b.n	800161a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a0:	6862      	ldr	r2, [r4, #4]
 80016a2:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <HAL_RCC_ClockConfig+0x128>)
 80016a4:	2a01      	cmp	r2, #1
 80016a6:	d11d      	bne.n	80016e4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ae:	d0a8      	beq.n	8001602 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b0:	4e1b      	ldr	r6, [pc, #108]	; (8001720 <HAL_RCC_ClockConfig+0x128>)
 80016b2:	68b3      	ldr	r3, [r6, #8]
 80016b4:	f023 0303 	bic.w	r3, r3, #3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80016bc:	f7ff fc9a 	bl	8000ff4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80016c4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c6:	68b3      	ldr	r3, [r6, #8]
 80016c8:	6862      	ldr	r2, [r4, #4]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80016d2:	d0a4      	beq.n	800161e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d4:	f7ff fc8e 	bl	8000ff4 <HAL_GetTick>
 80016d8:	1bc0      	subs	r0, r0, r7
 80016da:	4540      	cmp	r0, r8
 80016dc:	d9f3      	bls.n	80016c6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80016de:	2003      	movs	r0, #3
}
 80016e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016e4:	1e91      	subs	r1, r2, #2
 80016e6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ea:	d802      	bhi.n	80016f2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80016f0:	e7dd      	b.n	80016ae <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f2:	f013 0f02 	tst.w	r3, #2
 80016f6:	e7da      	b.n	80016ae <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f8:	b2ea      	uxtb	r2, r5
 80016fa:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	429d      	cmp	r5, r3
 8001704:	f47f af7d 	bne.w	8001602 <HAL_RCC_ClockConfig+0xa>
 8001708:	e78f      	b.n	800162a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800170a:	4905      	ldr	r1, [pc, #20]	; (8001720 <HAL_RCC_ClockConfig+0x128>)
 800170c:	68e0      	ldr	r0, [r4, #12]
 800170e:	688b      	ldr	r3, [r1, #8]
 8001710:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001714:	4303      	orrs	r3, r0
 8001716:	608b      	str	r3, [r1, #8]
 8001718:	e78a      	b.n	8001630 <HAL_RCC_ClockConfig+0x38>
 800171a:	bf00      	nop
 800171c:	40023c00 	.word	0x40023c00
 8001720:	40023800 	.word	0x40023800
 8001724:	0800559e 	.word	0x0800559e
 8001728:	20000034 	.word	0x20000034

0800172c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <HAL_RCC_GetPCLK1Freq+0x14>)
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001736:	5cd3      	ldrb	r3, [r2, r3]
 8001738:	4a03      	ldr	r2, [pc, #12]	; (8001748 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800173a:	6810      	ldr	r0, [r2, #0]
}
 800173c:	40d8      	lsrs	r0, r3
 800173e:	4770      	bx	lr
 8001740:	40023800 	.word	0x40023800
 8001744:	080055ae 	.word	0x080055ae
 8001748:	20000034 	.word	0x20000034

0800174c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <HAL_RCC_GetPCLK2Freq+0x14>)
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001756:	5cd3      	ldrb	r3, [r2, r3]
 8001758:	4a03      	ldr	r2, [pc, #12]	; (8001768 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800175a:	6810      	ldr	r0, [r2, #0]
}
 800175c:	40d8      	lsrs	r0, r3
 800175e:	4770      	bx	lr
 8001760:	40023800 	.word	0x40023800
 8001764:	080055ae 	.word	0x080055ae
 8001768:	20000034 	.word	0x20000034

0800176c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800176c:	6a03      	ldr	r3, [r0, #32]
 800176e:	f023 0301 	bic.w	r3, r3, #1
 8001772:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001774:	6a03      	ldr	r3, [r0, #32]
{
 8001776:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001778:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800177a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800177c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800177e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001782:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001784:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001786:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800178a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800178c:	4d0a      	ldr	r5, [pc, #40]	; (80017b8 <TIM_OC1_SetConfig+0x4c>)
 800178e:	42a8      	cmp	r0, r5
 8001790:	d10b      	bne.n	80017aa <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001792:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001794:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001796:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800179a:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800179c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800179e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80017a2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80017a4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80017a8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017aa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80017ac:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80017ae:	684a      	ldr	r2, [r1, #4]
 80017b0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017b2:	6203      	str	r3, [r0, #32]
 80017b4:	bd70      	pop	{r4, r5, r6, pc}
 80017b6:	bf00      	nop
 80017b8:	40010000 	.word	0x40010000

080017bc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80017bc:	6a03      	ldr	r3, [r0, #32]
 80017be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017c2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017c4:	6a03      	ldr	r3, [r0, #32]
{
 80017c6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017c8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80017ca:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80017cc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80017ce:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80017d2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80017d4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80017d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80017da:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80017de:	4d0b      	ldr	r5, [pc, #44]	; (800180c <TIM_OC3_SetConfig+0x50>)
 80017e0:	42a8      	cmp	r0, r5
 80017e2:	d10d      	bne.n	8001800 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80017e4:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80017e6:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 80017e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80017ec:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80017f0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80017f2:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80017f6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80017f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80017fc:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001800:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001802:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001804:	684a      	ldr	r2, [r1, #4]
 8001806:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001808:	6203      	str	r3, [r0, #32]
 800180a:	bd70      	pop	{r4, r5, r6, pc}
 800180c:	40010000 	.word	0x40010000

08001810 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001810:	6a03      	ldr	r3, [r0, #32]
 8001812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001816:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001818:	6a03      	ldr	r3, [r0, #32]
{
 800181a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800181c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800181e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001820:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001822:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001826:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800182a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800182c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001830:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001834:	4d06      	ldr	r5, [pc, #24]	; (8001850 <TIM_OC4_SetConfig+0x40>)
 8001836:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001838:	bf02      	ittt	eq
 800183a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800183c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001840:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001844:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001846:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001848:	684a      	ldr	r2, [r1, #4]
 800184a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800184c:	6203      	str	r3, [r0, #32]
 800184e:	bd30      	pop	{r4, r5, pc}
 8001850:	40010000 	.word	0x40010000

08001854 <HAL_TIM_PeriodElapsedCallback>:
 8001854:	4770      	bx	lr

08001856 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001856:	4770      	bx	lr

08001858 <HAL_TIM_TriggerCallback>:
 8001858:	4770      	bx	lr

0800185a <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800185a:	6803      	ldr	r3, [r0, #0]
 800185c:	691a      	ldr	r2, [r3, #16]
 800185e:	0791      	lsls	r1, r2, #30
{
 8001860:	b510      	push	{r4, lr}
 8001862:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001864:	d50e      	bpl.n	8001884 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	0792      	lsls	r2, r2, #30
 800186a:	d50b      	bpl.n	8001884 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800186c:	f06f 0202 	mvn.w	r2, #2
 8001870:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001872:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001874:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001876:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001878:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800187a:	d077      	beq.n	800196c <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800187c:	f000 fdc4 	bl	8002408 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001880:	2300      	movs	r3, #0
 8001882:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	0750      	lsls	r0, r2, #29
 800188a:	d510      	bpl.n	80018ae <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	0751      	lsls	r1, r2, #29
 8001890:	d50d      	bpl.n	80018ae <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001892:	f06f 0204 	mvn.w	r2, #4
 8001896:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001898:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800189a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800189c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018a0:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80018a2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018a4:	d068      	beq.n	8001978 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80018a6:	f000 fdaf 	bl	8002408 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018aa:	2300      	movs	r3, #0
 80018ac:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	691a      	ldr	r2, [r3, #16]
 80018b2:	0712      	lsls	r2, r2, #28
 80018b4:	d50f      	bpl.n	80018d6 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	0710      	lsls	r0, r2, #28
 80018ba:	d50c      	bpl.n	80018d6 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018bc:	f06f 0208 	mvn.w	r2, #8
 80018c0:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018c2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018c4:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018c6:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018c8:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80018ca:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018cc:	d05a      	beq.n	8001984 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80018ce:	f000 fd9b 	bl	8002408 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018d2:	2300      	movs	r3, #0
 80018d4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	06d2      	lsls	r2, r2, #27
 80018dc:	d510      	bpl.n	8001900 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	06d0      	lsls	r0, r2, #27
 80018e2:	d50d      	bpl.n	8001900 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018e4:	f06f 0210 	mvn.w	r2, #16
 80018e8:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018ea:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018ec:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018ee:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018f2:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80018f4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018f6:	d04b      	beq.n	8001990 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80018f8:	f000 fd86 	bl	8002408 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018fc:	2300      	movs	r3, #0
 80018fe:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	07d1      	lsls	r1, r2, #31
 8001906:	d508      	bpl.n	800191a <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	07d2      	lsls	r2, r2, #31
 800190c:	d505      	bpl.n	800191a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800190e:	f06f 0201 	mvn.w	r2, #1
 8001912:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001914:	4620      	mov	r0, r4
 8001916:	f7ff ff9d 	bl	8001854 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800191a:	6823      	ldr	r3, [r4, #0]
 800191c:	691a      	ldr	r2, [r3, #16]
 800191e:	0610      	lsls	r0, r2, #24
 8001920:	d508      	bpl.n	8001934 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	0611      	lsls	r1, r2, #24
 8001926:	d505      	bpl.n	8001934 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001928:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800192c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800192e:	4620      	mov	r0, r4
 8001930:	f000 fafe 	bl	8001f30 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001934:	6823      	ldr	r3, [r4, #0]
 8001936:	691a      	ldr	r2, [r3, #16]
 8001938:	0652      	lsls	r2, r2, #25
 800193a:	d508      	bpl.n	800194e <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	0650      	lsls	r0, r2, #25
 8001940:	d505      	bpl.n	800194e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001942:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001946:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001948:	4620      	mov	r0, r4
 800194a:	f7ff ff85 	bl	8001858 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	691a      	ldr	r2, [r3, #16]
 8001952:	0691      	lsls	r1, r2, #26
 8001954:	d522      	bpl.n	800199c <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	0692      	lsls	r2, r2, #26
 800195a:	d51f      	bpl.n	800199c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800195c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001960:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001962:	611a      	str	r2, [r3, #16]
}
 8001964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001968:	f000 bae1 	b.w	8001f2e <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800196c:	f001 fa1e 	bl	8002dac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001970:	4620      	mov	r0, r4
 8001972:	f7ff ff70 	bl	8001856 <HAL_TIM_PWM_PulseFinishedCallback>
 8001976:	e783      	b.n	8001880 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001978:	f001 fa18 	bl	8002dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800197c:	4620      	mov	r0, r4
 800197e:	f7ff ff6a 	bl	8001856 <HAL_TIM_PWM_PulseFinishedCallback>
 8001982:	e792      	b.n	80018aa <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001984:	f001 fa12 	bl	8002dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001988:	4620      	mov	r0, r4
 800198a:	f7ff ff64 	bl	8001856 <HAL_TIM_PWM_PulseFinishedCallback>
 800198e:	e7a0      	b.n	80018d2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001990:	f001 fa0c 	bl	8002dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001994:	4620      	mov	r0, r4
 8001996:	f7ff ff5e 	bl	8001856 <HAL_TIM_PWM_PulseFinishedCallback>
 800199a:	e7af      	b.n	80018fc <HAL_TIM_IRQHandler+0xa2>
 800199c:	bd10      	pop	{r4, pc}
	...

080019a0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019a0:	4a24      	ldr	r2, [pc, #144]	; (8001a34 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 80019a2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019a4:	4290      	cmp	r0, r2
 80019a6:	d00e      	beq.n	80019c6 <TIM_Base_SetConfig+0x26>
 80019a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80019ac:	d00b      	beq.n	80019c6 <TIM_Base_SetConfig+0x26>
 80019ae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80019b2:	4290      	cmp	r0, r2
 80019b4:	d007      	beq.n	80019c6 <TIM_Base_SetConfig+0x26>
 80019b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019ba:	4290      	cmp	r0, r2
 80019bc:	d003      	beq.n	80019c6 <TIM_Base_SetConfig+0x26>
 80019be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019c2:	4290      	cmp	r0, r2
 80019c4:	d115      	bne.n	80019f2 <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 80019c6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80019cc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019ce:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <TIM_Base_SetConfig+0x94>)
 80019d0:	4290      	cmp	r0, r2
 80019d2:	d019      	beq.n	8001a08 <TIM_Base_SetConfig+0x68>
 80019d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80019d8:	d016      	beq.n	8001a08 <TIM_Base_SetConfig+0x68>
 80019da:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80019de:	4290      	cmp	r0, r2
 80019e0:	d012      	beq.n	8001a08 <TIM_Base_SetConfig+0x68>
 80019e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019e6:	4290      	cmp	r0, r2
 80019e8:	d00e      	beq.n	8001a08 <TIM_Base_SetConfig+0x68>
 80019ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019ee:	4290      	cmp	r0, r2
 80019f0:	d00a      	beq.n	8001a08 <TIM_Base_SetConfig+0x68>
 80019f2:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <TIM_Base_SetConfig+0x98>)
 80019f4:	4290      	cmp	r0, r2
 80019f6:	d007      	beq.n	8001a08 <TIM_Base_SetConfig+0x68>
 80019f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019fc:	4290      	cmp	r0, r2
 80019fe:	d003      	beq.n	8001a08 <TIM_Base_SetConfig+0x68>
 8001a00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a04:	4290      	cmp	r0, r2
 8001a06:	d103      	bne.n	8001a10 <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a08:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a0e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a10:	694a      	ldr	r2, [r1, #20]
 8001a12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a16:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001a18:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a1a:	688b      	ldr	r3, [r1, #8]
 8001a1c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001a1e:	680b      	ldr	r3, [r1, #0]
 8001a20:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a22:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <TIM_Base_SetConfig+0x94>)
 8001a24:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001a26:	bf04      	itt	eq
 8001a28:	690b      	ldreq	r3, [r1, #16]
 8001a2a:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	6143      	str	r3, [r0, #20]
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40010000 	.word	0x40010000
 8001a38:	40014000 	.word	0x40014000

08001a3c <HAL_TIM_OC_Init>:
{
 8001a3c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001a3e:	4604      	mov	r4, r0
 8001a40:	b1a0      	cbz	r0, 8001a6c <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001a42:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a4a:	b91b      	cbnz	r3, 8001a54 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001a4c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8001a50:	f001 fa8e 	bl	8002f70 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001a54:	2302      	movs	r3, #2
 8001a56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001a5a:	6820      	ldr	r0, [r4, #0]
 8001a5c:	1d21      	adds	r1, r4, #4
 8001a5e:	f7ff ff9f 	bl	80019a0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001a62:	2301      	movs	r3, #1
 8001a64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001a68:	2000      	movs	r0, #0
 8001a6a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a6c:	2001      	movs	r0, #1
}
 8001a6e:	bd10      	pop	{r4, pc}

08001a70 <HAL_TIM_PWM_Init>:
{
 8001a70:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001a72:	4604      	mov	r4, r0
 8001a74:	b1a0      	cbz	r0, 8001aa0 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001a76:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a7e:	b91b      	cbnz	r3, 8001a88 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001a80:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001a84:	f001 fa5c 	bl	8002f40 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a8e:	6820      	ldr	r0, [r4, #0]
 8001a90:	1d21      	adds	r1, r4, #4
 8001a92:	f7ff ff85 	bl	80019a0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001aa0:	2001      	movs	r0, #1
}
 8001aa2:	bd10      	pop	{r4, pc}

08001aa4 <HAL_TIM_IC_Init>:
{
 8001aa4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	b1a0      	cbz	r0, 8001ad4 <HAL_TIM_IC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001aaa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001aae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ab2:	b91b      	cbnz	r3, 8001abc <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001ab4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8001ab8:	f001 fa08 	bl	8002ecc <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001abc:	2302      	movs	r3, #2
 8001abe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ac2:	6820      	ldr	r0, [r4, #0]
 8001ac4:	1d21      	adds	r1, r4, #4
 8001ac6:	f7ff ff6b 	bl	80019a0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ad4:	2001      	movs	r0, #1
}
 8001ad6:	bd10      	pop	{r4, pc}

08001ad8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ad8:	6a03      	ldr	r3, [r0, #32]
 8001ada:	f023 0310 	bic.w	r3, r3, #16
 8001ade:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001ae0:	6a03      	ldr	r3, [r0, #32]
{
 8001ae2:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001ae4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001ae6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ae8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001aea:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001aee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001af2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001af4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001af8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001afc:	4d0b      	ldr	r5, [pc, #44]	; (8001b2c <TIM_OC2_SetConfig+0x54>)
 8001afe:	42a8      	cmp	r0, r5
 8001b00:	d10d      	bne.n	8001b1e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b02:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b04:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b0a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001b0e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b10:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b14:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b1a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001b1e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001b20:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001b22:	684a      	ldr	r2, [r1, #4]
 8001b24:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001b26:	6203      	str	r3, [r0, #32]
 8001b28:	bd70      	pop	{r4, r5, r6, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40010000 	.word	0x40010000

08001b30 <HAL_TIM_OC_ConfigChannel>:
{
 8001b30:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001b32:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001b36:	2b01      	cmp	r3, #1
{
 8001b38:	4604      	mov	r4, r0
 8001b3a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001b3e:	d018      	beq.n	8001b72 <HAL_TIM_OC_ConfigChannel+0x42>
 8001b40:	2301      	movs	r3, #1
 8001b42:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001b46:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 8001b4a:	461d      	mov	r5, r3
  switch (Channel)
 8001b4c:	2a0c      	cmp	r2, #12
 8001b4e:	d80b      	bhi.n	8001b68 <HAL_TIM_OC_ConfigChannel+0x38>
 8001b50:	e8df f002 	tbb	[pc, r2]
 8001b54:	0a0a0a07 	.word	0x0a0a0a07
 8001b58:	0a0a0a10 	.word	0x0a0a0a10
 8001b5c:	0a0a0a14 	.word	0x0a0a0a14
 8001b60:	18          	.byte	0x18
 8001b61:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b62:	6820      	ldr	r0, [r4, #0]
 8001b64:	f7ff fe02 	bl	800176c <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8001b68:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001b6a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001b6e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001b72:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b74:	6820      	ldr	r0, [r4, #0]
 8001b76:	f7ff ffaf 	bl	8001ad8 <TIM_OC2_SetConfig>
      break;
 8001b7a:	e7f5      	b.n	8001b68 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b7c:	6820      	ldr	r0, [r4, #0]
 8001b7e:	f7ff fe1d 	bl	80017bc <TIM_OC3_SetConfig>
      break;
 8001b82:	e7f1      	b.n	8001b68 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b84:	6820      	ldr	r0, [r4, #0]
 8001b86:	f7ff fe43 	bl	8001810 <TIM_OC4_SetConfig>
      break;
 8001b8a:	e7ed      	b.n	8001b68 <HAL_TIM_OC_ConfigChannel+0x38>

08001b8c <HAL_TIM_PWM_ConfigChannel>:
{
 8001b8c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001b8e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001b92:	2b01      	cmp	r3, #1
{
 8001b94:	4604      	mov	r4, r0
 8001b96:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001b9a:	d025      	beq.n	8001be8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8001ba6:	2a0c      	cmp	r2, #12
 8001ba8:	d818      	bhi.n	8001bdc <HAL_TIM_PWM_ConfigChannel+0x50>
 8001baa:	e8df f002 	tbb	[pc, r2]
 8001bae:	1707      	.short	0x1707
 8001bb0:	171e1717 	.word	0x171e1717
 8001bb4:	172f1717 	.word	0x172f1717
 8001bb8:	1717      	.short	0x1717
 8001bba:	40          	.byte	0x40
 8001bbb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001bbc:	6820      	ldr	r0, [r4, #0]
 8001bbe:	f7ff fdd5 	bl	800176c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bc2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bc4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bc6:	699a      	ldr	r2, [r3, #24]
 8001bc8:	f042 0208 	orr.w	r2, r2, #8
 8001bcc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bce:	699a      	ldr	r2, [r3, #24]
 8001bd0:	f022 0204 	bic.w	r2, r2, #4
 8001bd4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bd6:	699a      	ldr	r2, [r3, #24]
 8001bd8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bda:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001bdc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001bde:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001be0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001be4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001be8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001bea:	6820      	ldr	r0, [r4, #0]
 8001bec:	f7ff ff74 	bl	8001ad8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bf0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bf2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bf4:	699a      	ldr	r2, [r3, #24]
 8001bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001bfc:	699a      	ldr	r2, [r3, #24]
 8001bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c04:	699a      	ldr	r2, [r3, #24]
 8001c06:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c0a:	e7e6      	b.n	8001bda <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c0c:	6820      	ldr	r0, [r4, #0]
 8001c0e:	f7ff fdd5 	bl	80017bc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c12:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c14:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c16:	69da      	ldr	r2, [r3, #28]
 8001c18:	f042 0208 	orr.w	r2, r2, #8
 8001c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c1e:	69da      	ldr	r2, [r3, #28]
 8001c20:	f022 0204 	bic.w	r2, r2, #4
 8001c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c26:	69da      	ldr	r2, [r3, #28]
 8001c28:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c2a:	61da      	str	r2, [r3, #28]
      break;
 8001c2c:	e7d6      	b.n	8001bdc <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c2e:	6820      	ldr	r0, [r4, #0]
 8001c30:	f7ff fdee 	bl	8001810 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c34:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c36:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c38:	69da      	ldr	r2, [r3, #28]
 8001c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c40:	69da      	ldr	r2, [r3, #28]
 8001c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c48:	69da      	ldr	r2, [r3, #28]
 8001c4a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c4e:	e7ec      	b.n	8001c2a <HAL_TIM_PWM_ConfigChannel+0x9e>

08001c50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8001c50:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c52:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001c54:	4e16      	ldr	r6, [pc, #88]	; (8001cb0 <TIM_TI1_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c56:	f024 0401 	bic.w	r4, r4, #1
 8001c5a:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001c5c:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8001c5e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001c60:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001c62:	d012      	beq.n	8001c8a <TIM_TI1_SetConfig+0x3a>
 8001c64:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c68:	d00f      	beq.n	8001c8a <TIM_TI1_SetConfig+0x3a>
 8001c6a:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8001c6e:	42b0      	cmp	r0, r6
 8001c70:	d00b      	beq.n	8001c8a <TIM_TI1_SetConfig+0x3a>
 8001c72:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001c76:	42b0      	cmp	r0, r6
 8001c78:	d007      	beq.n	8001c8a <TIM_TI1_SetConfig+0x3a>
 8001c7a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001c7e:	42b0      	cmp	r0, r6
 8001c80:	d003      	beq.n	8001c8a <TIM_TI1_SetConfig+0x3a>
 8001c82:	f506 369a 	add.w	r6, r6, #78848	; 0x13400
 8001c86:	42b0      	cmp	r0, r6
 8001c88:	d10f      	bne.n	8001caa <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001c8a:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8001c8e:	4322      	orrs	r2, r4
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001c90:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c92:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001c96:	b2db      	uxtb	r3, r3

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c98:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001c9c:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001ca0:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001ca2:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ca4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ca6:	6201      	str	r1, [r0, #32]
}
 8001ca8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001caa:	f044 0201 	orr.w	r2, r4, #1
 8001cae:	e7ef      	b.n	8001c90 <TIM_TI1_SetConfig+0x40>
 8001cb0:	40010000 	.word	0x40010000

08001cb4 <HAL_TIM_IC_ConfigChannel>:
{
 8001cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001cb6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001cba:	2b01      	cmp	r3, #1
{
 8001cbc:	4604      	mov	r4, r0
 8001cbe:	460d      	mov	r5, r1
 8001cc0:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001cc4:	d019      	beq.n	8001cfa <HAL_TIM_IC_ConfigChannel+0x46>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001ccc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 8001cd0:	b9a2      	cbnz	r2, 8001cfc <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8001cd2:	68cb      	ldr	r3, [r1, #12]
 8001cd4:	6820      	ldr	r0, [r4, #0]
 8001cd6:	c906      	ldmia	r1, {r1, r2}
 8001cd8:	f7ff ffba 	bl	8001c50 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001cdc:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001cde:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	f022 020c 	bic.w	r2, r2, #12
 8001ce6:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001ce8:	699a      	ldr	r2, [r3, #24]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001cee:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001cf0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001cf2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001cf6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8001cfc:	2a04      	cmp	r2, #4
 8001cfe:	688e      	ldr	r6, [r1, #8]
 8001d00:	6823      	ldr	r3, [r4, #0]
 8001d02:	68e8      	ldr	r0, [r5, #12]
 8001d04:	c982      	ldmia	r1, {r1, r7}
 8001d06:	d11f      	bne.n	8001d48 <HAL_TIM_IC_ConfigChannel+0x94>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d08:	6a1a      	ldr	r2, [r3, #32]
 8001d0a:	f022 0210 	bic.w	r2, r2, #16
 8001d0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d10:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001d12:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001d14:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001d18:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d1c:	0300      	lsls	r0, r0, #12
 8001d1e:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d20:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001d24:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d26:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001d28:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d2c:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001d30:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d34:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001d36:	699a      	ldr	r2, [r3, #24]
 8001d38:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001d3c:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001d3e:	699a      	ldr	r2, [r3, #24]
 8001d40:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001d44:	619e      	str	r6, [r3, #24]
 8001d46:	e7d2      	b.n	8001cee <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8001d48:	2a08      	cmp	r2, #8
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d4a:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8001d4c:	d11c      	bne.n	8001d88 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d52:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001d54:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001d56:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001d58:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8001d5c:	433a      	orrs	r2, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001d5e:	0100      	lsls	r0, r0, #4
 8001d60:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001d62:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001d66:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001d68:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001d6a:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001d6e:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001d72:	4301      	orrs	r1, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001d74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001d76:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001d78:	69da      	ldr	r2, [r3, #28]
 8001d7a:	f022 020c 	bic.w	r2, r2, #12
 8001d7e:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001d80:	69da      	ldr	r2, [r3, #28]
 8001d82:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001d84:	61de      	str	r6, [r3, #28]
 8001d86:	e7b2      	b.n	8001cee <HAL_TIM_IC_ConfigChannel+0x3a>
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d8c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001d8e:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001d90:	6a1d      	ldr	r5, [r3, #32]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001d92:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001d96:	ea42 2207 	orr.w	r2, r2, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001d9a:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001d9c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001da0:	b280      	uxth	r0, r0

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001da2:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001da4:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001da6:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001daa:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001dae:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001db0:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001db2:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001db4:	69da      	ldr	r2, [r3, #28]
 8001db6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001dba:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001dbc:	69da      	ldr	r2, [r3, #28]
 8001dbe:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001dc2:	e7df      	b.n	8001d84 <HAL_TIM_IC_ConfigChannel+0xd0>

08001dc4 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001dc4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001dc6:	f001 011f 	and.w	r1, r1, #31
{
 8001dca:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001dcc:	2401      	movs	r4, #1
 8001dce:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001dd0:	ea23 0304 	bic.w	r3, r3, r4
 8001dd4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001dd6:	6a03      	ldr	r3, [r0, #32]
 8001dd8:	408a      	lsls	r2, r1
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	6202      	str	r2, [r0, #32]
 8001dde:	bd10      	pop	{r4, pc}

08001de0 <HAL_TIM_PWM_Start>:
{
 8001de0:	b510      	push	{r4, lr}
 8001de2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001de4:	2201      	movs	r2, #1
 8001de6:	6800      	ldr	r0, [r0, #0]
 8001de8:	f7ff ffec 	bl	8001dc4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	4a09      	ldr	r2, [pc, #36]	; (8001e14 <HAL_TIM_PWM_Start+0x34>)
 8001df0:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001df2:	bf02      	ittt	eq
 8001df4:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001df6:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001dfa:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e02:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001e04:	bf1e      	ittt	ne
 8001e06:	681a      	ldrne	r2, [r3, #0]
 8001e08:	f042 0201 	orrne.w	r2, r2, #1
 8001e0c:	601a      	strne	r2, [r3, #0]
}
 8001e0e:	2000      	movs	r0, #0
 8001e10:	bd10      	pop	{r4, pc}
 8001e12:	bf00      	nop
 8001e14:	40010000 	.word	0x40010000

08001e18 <HAL_TIM_PWM_Start_IT>:
{
 8001e18:	b510      	push	{r4, lr}
 8001e1a:	4604      	mov	r4, r0
  switch (Channel)
 8001e1c:	290c      	cmp	r1, #12
 8001e1e:	d80d      	bhi.n	8001e3c <HAL_TIM_PWM_Start_IT+0x24>
 8001e20:	e8df f001 	tbb	[pc, r1]
 8001e24:	0c0c0c07 	.word	0x0c0c0c07
 8001e28:	0c0c0c23 	.word	0x0c0c0c23
 8001e2c:	0c0c0c28 	.word	0x0c0c0c28
 8001e30:	2d          	.byte	0x2d
 8001e31:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001e32:	6802      	ldr	r2, [r0, #0]
 8001e34:	68d3      	ldr	r3, [r2, #12]
 8001e36:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001e3a:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e3c:	6820      	ldr	r0, [r4, #0]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f7ff ffc0 	bl	8001dc4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e44:	6823      	ldr	r3, [r4, #0]
 8001e46:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <HAL_TIM_PWM_Start_IT+0x70>)
 8001e48:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001e4a:	bf02      	ittt	eq
 8001e4c:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001e4e:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001e52:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e5a:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001e5c:	bf1e      	ittt	ne
 8001e5e:	681a      	ldrne	r2, [r3, #0]
 8001e60:	f042 0201 	orrne.w	r2, r2, #1
 8001e64:	601a      	strne	r2, [r3, #0]
}
 8001e66:	2000      	movs	r0, #0
 8001e68:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001e6a:	6802      	ldr	r2, [r0, #0]
 8001e6c:	68d3      	ldr	r3, [r2, #12]
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	e7e2      	b.n	8001e3a <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001e74:	6802      	ldr	r2, [r0, #0]
 8001e76:	68d3      	ldr	r3, [r2, #12]
 8001e78:	f043 0308 	orr.w	r3, r3, #8
 8001e7c:	e7dd      	b.n	8001e3a <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001e7e:	6802      	ldr	r2, [r0, #0]
 8001e80:	68d3      	ldr	r3, [r2, #12]
 8001e82:	f043 0310 	orr.w	r3, r3, #16
 8001e86:	e7d8      	b.n	8001e3a <HAL_TIM_PWM_Start_IT+0x22>
 8001e88:	40010000 	.word	0x40010000

08001e8c <HAL_TIM_OC_Start_IT>:
 8001e8c:	f7ff bfc4 	b.w	8001e18 <HAL_TIM_PWM_Start_IT>

08001e90 <HAL_TIM_IC_Start_IT>:
{
 8001e90:	b510      	push	{r4, lr}
 8001e92:	4604      	mov	r4, r0
  switch (Channel)
 8001e94:	290c      	cmp	r1, #12
 8001e96:	d80d      	bhi.n	8001eb4 <HAL_TIM_IC_Start_IT+0x24>
 8001e98:	e8df f001 	tbb	[pc, r1]
 8001e9c:	0c0c0c07 	.word	0x0c0c0c07
 8001ea0:	0c0c0c1c 	.word	0x0c0c0c1c
 8001ea4:	0c0c0c21 	.word	0x0c0c0c21
 8001ea8:	26          	.byte	0x26
 8001ea9:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001eaa:	6802      	ldr	r2, [r0, #0]
 8001eac:	68d3      	ldr	r3, [r2, #12]
 8001eae:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001eb2:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001eb4:	6820      	ldr	r0, [r4, #0]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f7ff ff84 	bl	8001dc4 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec4:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001ec6:	bf1e      	ittt	ne
 8001ec8:	681a      	ldrne	r2, [r3, #0]
 8001eca:	f042 0201 	orrne.w	r2, r2, #1
 8001ece:	601a      	strne	r2, [r3, #0]
}
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001ed4:	6802      	ldr	r2, [r0, #0]
 8001ed6:	68d3      	ldr	r3, [r2, #12]
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	e7e9      	b.n	8001eb2 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001ede:	6802      	ldr	r2, [r0, #0]
 8001ee0:	68d3      	ldr	r3, [r2, #12]
 8001ee2:	f043 0308 	orr.w	r3, r3, #8
 8001ee6:	e7e4      	b.n	8001eb2 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001ee8:	6802      	ldr	r2, [r0, #0]
 8001eea:	68d3      	ldr	r3, [r2, #12]
 8001eec:	f043 0310 	orr.w	r3, r3, #16
 8001ef0:	e7df      	b.n	8001eb2 <HAL_TIM_IC_Start_IT+0x22>

08001ef2 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ef2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ef6:	2b01      	cmp	r3, #1
{
 8001ef8:	b530      	push	{r4, r5, lr}
 8001efa:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001efe:	d014      	beq.n	8001f2a <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f00:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001f02:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001f06:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f08:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f0a:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f0c:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f16:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f18:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f1a:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001f1c:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f24:	2300      	movs	r3, #0
 8001f26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001f2a:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001f2c:	bd30      	pop	{r4, r5, pc}

08001f2e <HAL_TIMEx_CommutCallback>:
 8001f2e:	4770      	bx	lr

08001f30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f30:	4770      	bx	lr
	...

08001f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f38:	6806      	ldr	r6, [r0, #0]
 8001f3a:	68c2      	ldr	r2, [r0, #12]
 8001f3c:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f3e:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f40:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f44:	4313      	orrs	r3, r2
 8001f46:	6133      	str	r3, [r6, #16]
{
 8001f48:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f4a:	6883      	ldr	r3, [r0, #8]
 8001f4c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001f4e:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f50:	4303      	orrs	r3, r0
 8001f52:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001f54:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f58:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001f5a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f5e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f64:	6973      	ldr	r3, [r6, #20]
 8001f66:	69a2      	ldr	r2, [r4, #24]
 8001f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f6c:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f6e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f72:	6173      	str	r3, [r6, #20]
 8001f74:	4b7a      	ldr	r3, [pc, #488]	; (8002160 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f76:	d17c      	bne.n	8002072 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f78:	429e      	cmp	r6, r3
 8001f7a:	d003      	beq.n	8001f84 <UART_SetConfig+0x50>
 8001f7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f80:	429e      	cmp	r6, r3
 8001f82:	d144      	bne.n	800200e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001f84:	f7ff fbe2 	bl	800174c <HAL_RCC_GetPCLK2Freq>
 8001f88:	2519      	movs	r5, #25
 8001f8a:	fb05 f300 	mul.w	r3, r5, r0
 8001f8e:	6860      	ldr	r0, [r4, #4]
 8001f90:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001f94:	0040      	lsls	r0, r0, #1
 8001f96:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f9a:	fbb3 f3f9 	udiv	r3, r3, r9
 8001f9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001fa2:	f7ff fbd3 	bl	800174c <HAL_RCC_GetPCLK2Freq>
 8001fa6:	6863      	ldr	r3, [r4, #4]
 8001fa8:	4368      	muls	r0, r5
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fbb0 f7f3 	udiv	r7, r0, r3
 8001fb0:	f7ff fbcc 	bl	800174c <HAL_RCC_GetPCLK2Freq>
 8001fb4:	6863      	ldr	r3, [r4, #4]
 8001fb6:	4368      	muls	r0, r5
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbe:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fc2:	fb09 7313 	mls	r3, r9, r3, r7
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	3332      	adds	r3, #50	; 0x32
 8001fca:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001fd4:	f7ff fbba 	bl	800174c <HAL_RCC_GetPCLK2Freq>
 8001fd8:	6862      	ldr	r2, [r4, #4]
 8001fda:	4368      	muls	r0, r5
 8001fdc:	0052      	lsls	r2, r2, #1
 8001fde:	fbb0 faf2 	udiv	sl, r0, r2
 8001fe2:	f7ff fbb3 	bl	800174c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001fe6:	6863      	ldr	r3, [r4, #4]
 8001fe8:	4368      	muls	r0, r5
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff0:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ff4:	fb09 a313 	mls	r3, r9, r3, sl
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	3332      	adds	r3, #50	; 0x32
 8001ffc:	fbb3 f3f9 	udiv	r3, r3, r9
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002006:	443b      	add	r3, r7
 8002008:	60b3      	str	r3, [r6, #8]
 800200a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800200e:	f7ff fb8d 	bl	800172c <HAL_RCC_GetPCLK1Freq>
 8002012:	2519      	movs	r5, #25
 8002014:	fb05 f300 	mul.w	r3, r5, r0
 8002018:	6860      	ldr	r0, [r4, #4]
 800201a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800201e:	0040      	lsls	r0, r0, #1
 8002020:	fbb3 f3f0 	udiv	r3, r3, r0
 8002024:	fbb3 f3f9 	udiv	r3, r3, r9
 8002028:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800202c:	f7ff fb7e 	bl	800172c <HAL_RCC_GetPCLK1Freq>
 8002030:	6863      	ldr	r3, [r4, #4]
 8002032:	4368      	muls	r0, r5
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	fbb0 f7f3 	udiv	r7, r0, r3
 800203a:	f7ff fb77 	bl	800172c <HAL_RCC_GetPCLK1Freq>
 800203e:	6863      	ldr	r3, [r4, #4]
 8002040:	4368      	muls	r0, r5
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fbb0 f3f3 	udiv	r3, r0, r3
 8002048:	fbb3 f3f9 	udiv	r3, r3, r9
 800204c:	fb09 7313 	mls	r3, r9, r3, r7
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	3332      	adds	r3, #50	; 0x32
 8002054:	fbb3 f3f9 	udiv	r3, r3, r9
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800205e:	f7ff fb65 	bl	800172c <HAL_RCC_GetPCLK1Freq>
 8002062:	6862      	ldr	r2, [r4, #4]
 8002064:	4368      	muls	r0, r5
 8002066:	0052      	lsls	r2, r2, #1
 8002068:	fbb0 faf2 	udiv	sl, r0, r2
 800206c:	f7ff fb5e 	bl	800172c <HAL_RCC_GetPCLK1Freq>
 8002070:	e7b9      	b.n	8001fe6 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002072:	429e      	cmp	r6, r3
 8002074:	d002      	beq.n	800207c <UART_SetConfig+0x148>
 8002076:	4b3b      	ldr	r3, [pc, #236]	; (8002164 <UART_SetConfig+0x230>)
 8002078:	429e      	cmp	r6, r3
 800207a:	d140      	bne.n	80020fe <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800207c:	f7ff fb66 	bl	800174c <HAL_RCC_GetPCLK2Freq>
 8002080:	6867      	ldr	r7, [r4, #4]
 8002082:	2519      	movs	r5, #25
 8002084:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002088:	fb05 f300 	mul.w	r3, r5, r0
 800208c:	00bf      	lsls	r7, r7, #2
 800208e:	fbb3 f3f7 	udiv	r3, r3, r7
 8002092:	fbb3 f3f9 	udiv	r3, r3, r9
 8002096:	011f      	lsls	r7, r3, #4
 8002098:	f7ff fb58 	bl	800174c <HAL_RCC_GetPCLK2Freq>
 800209c:	6863      	ldr	r3, [r4, #4]
 800209e:	4368      	muls	r0, r5
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	fbb0 f8f3 	udiv	r8, r0, r3
 80020a6:	f7ff fb51 	bl	800174c <HAL_RCC_GetPCLK2Freq>
 80020aa:	6863      	ldr	r3, [r4, #4]
 80020ac:	4368      	muls	r0, r5
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80020b8:	fb09 8313 	mls	r3, r9, r3, r8
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	3332      	adds	r3, #50	; 0x32
 80020c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80020c4:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80020c8:	f7ff fb40 	bl	800174c <HAL_RCC_GetPCLK2Freq>
 80020cc:	6862      	ldr	r2, [r4, #4]
 80020ce:	4368      	muls	r0, r5
 80020d0:	0092      	lsls	r2, r2, #2
 80020d2:	fbb0 faf2 	udiv	sl, r0, r2
 80020d6:	f7ff fb39 	bl	800174c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80020da:	6863      	ldr	r3, [r4, #4]
 80020dc:	4368      	muls	r0, r5
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80020e8:	fb09 a313 	mls	r3, r9, r3, sl
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	3332      	adds	r3, #50	; 0x32
 80020f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80020f4:	f003 030f 	and.w	r3, r3, #15
 80020f8:	ea43 0308 	orr.w	r3, r3, r8
 80020fc:	e783      	b.n	8002006 <UART_SetConfig+0xd2>
 80020fe:	f7ff fb15 	bl	800172c <HAL_RCC_GetPCLK1Freq>
 8002102:	6867      	ldr	r7, [r4, #4]
 8002104:	2519      	movs	r5, #25
 8002106:	f04f 0964 	mov.w	r9, #100	; 0x64
 800210a:	fb05 f300 	mul.w	r3, r5, r0
 800210e:	00bf      	lsls	r7, r7, #2
 8002110:	fbb3 f3f7 	udiv	r3, r3, r7
 8002114:	fbb3 f3f9 	udiv	r3, r3, r9
 8002118:	011f      	lsls	r7, r3, #4
 800211a:	f7ff fb07 	bl	800172c <HAL_RCC_GetPCLK1Freq>
 800211e:	6863      	ldr	r3, [r4, #4]
 8002120:	4368      	muls	r0, r5
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	fbb0 f8f3 	udiv	r8, r0, r3
 8002128:	f7ff fb00 	bl	800172c <HAL_RCC_GetPCLK1Freq>
 800212c:	6863      	ldr	r3, [r4, #4]
 800212e:	4368      	muls	r0, r5
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	fbb0 f3f3 	udiv	r3, r0, r3
 8002136:	fbb3 f3f9 	udiv	r3, r3, r9
 800213a:	fb09 8313 	mls	r3, r9, r3, r8
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	3332      	adds	r3, #50	; 0x32
 8002142:	fbb3 f3f9 	udiv	r3, r3, r9
 8002146:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800214a:	f7ff faef 	bl	800172c <HAL_RCC_GetPCLK1Freq>
 800214e:	6862      	ldr	r2, [r4, #4]
 8002150:	4368      	muls	r0, r5
 8002152:	0092      	lsls	r2, r2, #2
 8002154:	fbb0 faf2 	udiv	sl, r0, r2
 8002158:	f7ff fae8 	bl	800172c <HAL_RCC_GetPCLK1Freq>
 800215c:	e7bd      	b.n	80020da <UART_SetConfig+0x1a6>
 800215e:	bf00      	nop
 8002160:	40011000 	.word	0x40011000
 8002164:	40011400 	.word	0x40011400

08002168 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800216a:	4604      	mov	r4, r0
 800216c:	460e      	mov	r6, r1
 800216e:	4617      	mov	r7, r2
 8002170:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002172:	6821      	ldr	r1, [r4, #0]
 8002174:	680b      	ldr	r3, [r1, #0]
 8002176:	ea36 0303 	bics.w	r3, r6, r3
 800217a:	d101      	bne.n	8002180 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800217c:	2000      	movs	r0, #0
}
 800217e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002180:	1c6b      	adds	r3, r5, #1
 8002182:	d0f7      	beq.n	8002174 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002184:	b995      	cbnz	r5, 80021ac <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	68da      	ldr	r2, [r3, #12]
 800218a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800218e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002190:	695a      	ldr	r2, [r3, #20]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002198:	2320      	movs	r3, #32
 800219a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800219e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80021a2:	2300      	movs	r3, #0
 80021a4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80021a8:	2003      	movs	r0, #3
 80021aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021ac:	f7fe ff22 	bl	8000ff4 <HAL_GetTick>
 80021b0:	1bc0      	subs	r0, r0, r7
 80021b2:	4285      	cmp	r5, r0
 80021b4:	d2dd      	bcs.n	8002172 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80021b6:	e7e6      	b.n	8002186 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080021b8 <HAL_UART_Init>:
{
 80021b8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80021ba:	4604      	mov	r4, r0
 80021bc:	b340      	cbz	r0, 8002210 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80021be:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80021c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021c6:	b91b      	cbnz	r3, 80021d0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80021c8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80021cc:	f000 ff18 	bl	8003000 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80021d0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80021d2:	2324      	movs	r3, #36	; 0x24
 80021d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80021d8:	68d3      	ldr	r3, [r2, #12]
 80021da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021de:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80021e0:	4620      	mov	r0, r4
 80021e2:	f7ff fea7 	bl	8001f34 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021f6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021fe:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002200:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002202:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002204:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002206:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800220a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800220e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002210:	2001      	movs	r0, #1
}
 8002212:	bd10      	pop	{r4, pc}

08002214 <HAL_UART_Transmit>:
{
 8002214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002218:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800221a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800221e:	2b20      	cmp	r3, #32
{
 8002220:	4604      	mov	r4, r0
 8002222:	460d      	mov	r5, r1
 8002224:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002226:	d14f      	bne.n	80022c8 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8002228:	2900      	cmp	r1, #0
 800222a:	d04a      	beq.n	80022c2 <HAL_UART_Transmit+0xae>
 800222c:	2a00      	cmp	r2, #0
 800222e:	d048      	beq.n	80022c2 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8002230:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002234:	2b01      	cmp	r3, #1
 8002236:	d047      	beq.n	80022c8 <HAL_UART_Transmit+0xb4>
 8002238:	2301      	movs	r3, #1
 800223a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800223e:	2300      	movs	r3, #0
 8002240:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002242:	2321      	movs	r3, #33	; 0x21
 8002244:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002248:	f7fe fed4 	bl	8000ff4 <HAL_GetTick>
    huart->TxXferSize = Size;
 800224c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002250:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002252:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002256:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002258:	b29b      	uxth	r3, r3
 800225a:	b96b      	cbnz	r3, 8002278 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800225c:	463b      	mov	r3, r7
 800225e:	4632      	mov	r2, r6
 8002260:	2140      	movs	r1, #64	; 0x40
 8002262:	4620      	mov	r0, r4
 8002264:	f7ff ff80 	bl	8002168 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002268:	b9b0      	cbnz	r0, 8002298 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 800226a:	2320      	movs	r3, #32
 800226c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002270:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002278:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800227a:	3b01      	subs	r3, #1
 800227c:	b29b      	uxth	r3, r3
 800227e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002280:	68a3      	ldr	r3, [r4, #8]
 8002282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002286:	4632      	mov	r2, r6
 8002288:	463b      	mov	r3, r7
 800228a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800228e:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002290:	d10e      	bne.n	80022b0 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002292:	f7ff ff69 	bl	8002168 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002296:	b110      	cbz	r0, 800229e <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002298:	2003      	movs	r0, #3
 800229a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800229e:	882b      	ldrh	r3, [r5, #0]
 80022a0:	6822      	ldr	r2, [r4, #0]
 80022a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a6:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022a8:	6923      	ldr	r3, [r4, #16]
 80022aa:	b943      	cbnz	r3, 80022be <HAL_UART_Transmit+0xaa>
          pData += 2U;
 80022ac:	3502      	adds	r5, #2
 80022ae:	e7d2      	b.n	8002256 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022b0:	f7ff ff5a 	bl	8002168 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80022b4:	2800      	cmp	r0, #0
 80022b6:	d1ef      	bne.n	8002298 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80022b8:	6823      	ldr	r3, [r4, #0]
 80022ba:	782a      	ldrb	r2, [r5, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	3501      	adds	r5, #1
 80022c0:	e7c9      	b.n	8002256 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80022c2:	2001      	movs	r0, #1
 80022c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80022c8:	2002      	movs	r0, #2
}
 80022ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080022ce <HAL_UART_Receive>:
{
 80022ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022d2:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80022d4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80022d8:	2b20      	cmp	r3, #32
{
 80022da:	4604      	mov	r4, r0
 80022dc:	460d      	mov	r5, r1
 80022de:	4690      	mov	r8, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80022e0:	d152      	bne.n	8002388 <HAL_UART_Receive+0xba>
    if ((pData == NULL) || (Size == 0U))
 80022e2:	2900      	cmp	r1, #0
 80022e4:	d04d      	beq.n	8002382 <HAL_UART_Receive+0xb4>
 80022e6:	2a00      	cmp	r2, #0
 80022e8:	d04b      	beq.n	8002382 <HAL_UART_Receive+0xb4>
    __HAL_LOCK(huart);
 80022ea:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d04a      	beq.n	8002388 <HAL_UART_Receive+0xba>
 80022f2:	2301      	movs	r3, #1
 80022f4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022fc:	2322      	movs	r3, #34	; 0x22
 80022fe:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8002302:	f7fe fe77 	bl	8000ff4 <HAL_GetTick>
    huart->RxXferSize = Size;
 8002306:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 800230a:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 800230c:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002310:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8002312:	b280      	uxth	r0, r0
 8002314:	b930      	cbnz	r0, 8002324 <HAL_UART_Receive+0x56>
    huart->RxState = HAL_UART_STATE_READY;
 8002316:	2320      	movs	r3, #32
 8002318:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 800231c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->RxXferCount--;
 8002324:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002326:	3b01      	subs	r3, #1
 8002328:	b29b      	uxth	r3, r3
 800232a:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800232c:	68a3      	ldr	r3, [r4, #8]
 800232e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002332:	4632      	mov	r2, r6
 8002334:	463b      	mov	r3, r7
 8002336:	f04f 0120 	mov.w	r1, #32
 800233a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800233c:	d112      	bne.n	8002364 <HAL_UART_Receive+0x96>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800233e:	f7ff ff13 	bl	8002168 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002342:	b110      	cbz	r0, 800234a <HAL_UART_Receive+0x7c>
          return HAL_TIMEOUT;
 8002344:	2003      	movs	r0, #3
 8002346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800234a:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800234c:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800234e:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002350:	b922      	cbnz	r2, 800235c <HAL_UART_Receive+0x8e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002356:	f825 3b02 	strh.w	r3, [r5], #2
 800235a:	e7d9      	b.n	8002310 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800235c:	b2db      	uxtb	r3, r3
 800235e:	f825 3b01 	strh.w	r3, [r5], #1
 8002362:	e7d5      	b.n	8002310 <HAL_UART_Receive+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002364:	f7ff ff00 	bl	8002168 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002368:	2800      	cmp	r0, #0
 800236a:	d1eb      	bne.n	8002344 <HAL_UART_Receive+0x76>
 800236c:	6823      	ldr	r3, [r4, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800236e:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	1c6a      	adds	r2, r5, #1
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002374:	b911      	cbnz	r1, 800237c <HAL_UART_Receive+0xae>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002376:	702b      	strb	r3, [r5, #0]
 8002378:	4615      	mov	r5, r2
 800237a:	e7c9      	b.n	8002310 <HAL_UART_Receive+0x42>
 800237c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002380:	e7f9      	b.n	8002376 <HAL_UART_Receive+0xa8>
      return  HAL_ERROR;
 8002382:	2001      	movs	r0, #1
 8002384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002388:	2002      	movs	r0, #2
}
 800238a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002390:	b530      	push	{r4, r5, lr}
 8002392:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002394:	2230      	movs	r2, #48	; 0x30
 8002396:	2100      	movs	r1, #0
 8002398:	a808      	add	r0, sp, #32
 800239a:	f000 ff17 	bl	80031cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800239e:	2100      	movs	r1, #0
 80023a0:	2214      	movs	r2, #20
 80023a2:	a803      	add	r0, sp, #12
 80023a4:	f000 ff12 	bl	80031cc <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023a8:	2400      	movs	r4, #0
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <SystemClock_Config+0x70>)
 80023ac:	9401      	str	r4, [sp, #4]
 80023ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <SystemClock_Config+0x74>)
 80023c2:	9402      	str	r4, [sp, #8]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023ce:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023d4:	9302      	str	r3, [sp, #8]
 80023d6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023d8:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80023da:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023de:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80023e0:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023e2:	9508      	str	r5, [sp, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023e4:	f7fe ff58 	bl	8001298 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023e8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023ea:	4621      	mov	r1, r4
 80023ec:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ee:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80023f0:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023f2:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023f4:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023f6:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023f8:	f7ff f8fe 	bl	80015f8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80023fc:	b015      	add	sp, #84	; 0x54
 80023fe:	bd30      	pop	{r4, r5, pc}
 8002400:	40023800 	.word	0x40023800
 8002404:	40007000 	.word	0x40007000

08002408 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
//	uint32_t pw_array_length = PW_ARRAY_LENGTH;
	if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) // measure the speed of wheel 1
 8002408:	6803      	ldr	r3, [r0, #0]
 800240a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240e:	d106      	bne.n	800241e <HAL_TIM_IC_CaptureCallback+0x16>
 8002410:	7f03      	ldrb	r3, [r0, #28]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d104      	bne.n	8002420 <HAL_TIM_IC_CaptureCallback+0x18>
	{
		input_capture1++;
 8002416:	4a04      	ldr	r2, [pc, #16]	; (8002428 <HAL_TIM_IC_CaptureCallback+0x20>)
	}

	else if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) // measure the speed of wheel 2
	{
		input_capture2++;
 8002418:	6813      	ldr	r3, [r2, #0]
 800241a:	3301      	adds	r3, #1
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	4770      	bx	lr
	else if ((htim->Instance == TIM2) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) // measure the speed of wheel 2
 8002420:	2b02      	cmp	r3, #2
 8002422:	d1fc      	bne.n	800241e <HAL_TIM_IC_CaptureCallback+0x16>
		input_capture2++;
 8002424:	4a01      	ldr	r2, [pc, #4]	; (800242c <HAL_TIM_IC_CaptureCallback+0x24>)
 8002426:	e7f7      	b.n	8002418 <HAL_TIM_IC_CaptureCallback+0x10>
 8002428:	20000234 	.word	0x20000234
 800242c:	20000238 	.word	0x20000238

08002430 <printWelcomeMessage>:
		n_pulse1 = 0;
		n_pulse2 = 0;
	}
}

void printWelcomeMessage(void) {
 8002430:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[0;0H", strlen("\033[0;0H"), HAL_MAX_DELAY);
 8002432:	4c0f      	ldr	r4, [pc, #60]	; (8002470 <printWelcomeMessage+0x40>)
 8002434:	490f      	ldr	r1, [pc, #60]	; (8002474 <printWelcomeMessage+0x44>)
 8002436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800243a:	2206      	movs	r2, #6
 800243c:	4620      	mov	r0, r4
 800243e:	f7ff fee9 	bl	8002214 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[2J", strlen("\033[2J"), HAL_MAX_DELAY);
 8002442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002446:	2204      	movs	r2, #4
 8002448:	490b      	ldr	r1, [pc, #44]	; (8002478 <printWelcomeMessage+0x48>)
 800244a:	4620      	mov	r0, r4
 800244c:	f7ff fee2 	bl	8002214 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)WELCOME_MSG, strlen(WELCOME_MSG), HAL_MAX_DELAY);
 8002450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002454:	222a      	movs	r2, #42	; 0x2a
 8002456:	4909      	ldr	r1, [pc, #36]	; (800247c <printWelcomeMessage+0x4c>)
 8002458:	4620      	mov	r0, r4
 800245a:	f7ff fedb 	bl	8002214 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 800245e:	4620      	mov	r0, r4
 8002460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002464:	2276      	movs	r2, #118	; 0x76
 8002466:	4906      	ldr	r1, [pc, #24]	; (8002480 <printWelcomeMessage+0x50>)
}
 8002468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart2, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 800246c:	f7ff bed2 	b.w	8002214 <HAL_UART_Transmit>
 8002470:	2000032c 	.word	0x2000032c
 8002474:	0800543c 	.word	0x0800543c
 8002478:	08005443 	.word	0x08005443
 800247c:	08005448 	.word	0x08005448
 8002480:	08005473 	.word	0x08005473

08002484 <readUserInput>:

uint32_t readUserInput(void) {
 8002484:	b513      	push	{r0, r1, r4, lr}
	char readBuf[1];

	HAL_UART_Transmit(&huart2, (uint8_t*)PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
 8002486:	4c0a      	ldr	r4, [pc, #40]	; (80024b0 <readUserInput+0x2c>)
 8002488:	490a      	ldr	r1, [pc, #40]	; (80024b4 <readUserInput+0x30>)
 800248a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800248e:	2204      	movs	r2, #4
 8002490:	4620      	mov	r0, r4
 8002492:	f7ff febf 	bl	8002214 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, (uint8_t*)readBuf, 1, HAL_MAX_DELAY);
 8002496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800249a:	2201      	movs	r2, #1
 800249c:	a901      	add	r1, sp, #4
 800249e:	4620      	mov	r0, r4
 80024a0:	f7ff ff15 	bl	80022ce <HAL_UART_Receive>
	return atoi(readBuf);
 80024a4:	a801      	add	r0, sp, #4
 80024a6:	f000 fe62 	bl	800316e <atoi>
}
 80024aa:	b002      	add	sp, #8
 80024ac:	bd10      	pop	{r4, pc}
 80024ae:	bf00      	nop
 80024b0:	2000032c 	.word	0x2000032c
 80024b4:	08005599 	.word	0x08005599

080024b8 <processUserInput>:


uint32_t processUserInput(uint32_t opt) {
 80024b8:	b570      	push	{r4, r5, r6, lr}
	char msg0[100] = "\r\nYour desired speed is: ";
 80024ba:	4b88      	ldr	r3, [pc, #544]	; (80026dc <processUserInput+0x224>)
uint32_t processUserInput(uint32_t opt) {
 80024bc:	f5ad 6d96 	sub.w	sp, sp, #1200	; 0x4b0
 80024c0:	4604      	mov	r4, r0
	char msg0[100] = "\r\nYour desired speed is: ";
 80024c2:	466a      	mov	r2, sp
 80024c4:	f103 0618 	add.w	r6, r3, #24
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	4615      	mov	r5, r2
 80024ce:	c503      	stmia	r5!, {r0, r1}
 80024d0:	3308      	adds	r3, #8
 80024d2:	42b3      	cmp	r3, r6
 80024d4:	462a      	mov	r2, r5
 80024d6:	d1f7      	bne.n	80024c8 <processUserInput+0x10>
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	802b      	strh	r3, [r5, #0]
 80024dc:	224a      	movs	r2, #74	; 0x4a
 80024de:	2100      	movs	r1, #0
 80024e0:	f10d 001a 	add.w	r0, sp, #26
 80024e4:	f000 fe72 	bl	80031cc <memset>
	char msg9[100];
	char msg10[100];
	char msg11[100];
	char readN_PULSE[3];

	if(!opt || opt > 3)
 80024e8:	1e63      	subs	r3, r4, #1
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	f200 80f1 	bhi.w	80026d2 <processUserInput+0x21a>
		return 0;

	sprintf(msg1, "%ld", opt);
 80024f0:	4622      	mov	r2, r4
 80024f2:	497b      	ldr	r1, [pc, #492]	; (80026e0 <processUserInput+0x228>)
 80024f4:	a819      	add	r0, sp, #100	; 0x64
 80024f6:	f000 fe71 	bl	80031dc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 80024fa:	a819      	add	r0, sp, #100	; 0x64
 80024fc:	f7fd fe70 	bl	80001e0 <strlen>
 8002500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002504:	b282      	uxth	r2, r0
 8002506:	a919      	add	r1, sp, #100	; 0x64
 8002508:	4876      	ldr	r0, [pc, #472]	; (80026e4 <processUserInput+0x22c>)
 800250a:	f7ff fe83 	bl	8002214 <HAL_UART_Transmit>

	switch(opt) {
 800250e:	2c02      	cmp	r4, #2
 8002510:	d030      	beq.n	8002574 <processUserInput+0xbc>
 8002512:	2c03      	cmp	r4, #3
 8002514:	f000 80df 	beq.w	80026d6 <processUserInput+0x21e>
	case 1: // Set n_pulse

		HAL_UART_Transmit(&huart2, (uint8_t*)msg0, strlen(msg0), HAL_MAX_DELAY);
 8002518:	4668      	mov	r0, sp
 800251a:	f7fd fe61 	bl	80001e0 <strlen>
 800251e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002522:	b282      	uxth	r2, r0
 8002524:	4669      	mov	r1, sp
 8002526:	486f      	ldr	r0, [pc, #444]	; (80026e4 <processUserInput+0x22c>)
		HAL_UART_Receive(&huart2, (uint8_t*)readN_PULSE, 3, HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart2, (uint8_t*)readN_PULSE, 3, HAL_MAX_DELAY);

		my_rover.trg_x = atoi(readN_PULSE)*100;
 8002528:	4d6f      	ldr	r5, [pc, #444]	; (80026e8 <processUserInput+0x230>)
		HAL_UART_Transmit(&huart2, (uint8_t*)msg0, strlen(msg0), HAL_MAX_DELAY);
 800252a:	f7ff fe73 	bl	8002214 <HAL_UART_Transmit>
		HAL_UART_Receive(&huart2, (uint8_t*)readN_PULSE, 3, HAL_MAX_DELAY);
 800252e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002532:	2203      	movs	r2, #3
 8002534:	f20d 414c 	addw	r1, sp, #1100	; 0x44c
 8002538:	486a      	ldr	r0, [pc, #424]	; (80026e4 <processUserInput+0x22c>)
 800253a:	f7ff fec8 	bl	80022ce <HAL_UART_Receive>
		HAL_UART_Transmit(&huart2, (uint8_t*)readN_PULSE, 3, HAL_MAX_DELAY);
 800253e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002542:	2203      	movs	r2, #3
 8002544:	f20d 414c 	addw	r1, sp, #1100	; 0x44c
 8002548:	4866      	ldr	r0, [pc, #408]	; (80026e4 <processUserInput+0x22c>)
 800254a:	f7ff fe63 	bl	8002214 <HAL_UART_Transmit>
		my_rover.trg_x = atoi(readN_PULSE)*100;
 800254e:	f20d 404c 	addw	r0, sp, #1100	; 0x44c
 8002552:	f000 fe0c 	bl	800316e <atoi>
 8002556:	2464      	movs	r4, #100	; 0x64
 8002558:	4360      	muls	r0, r4
 800255a:	60e8      	str	r0, [r5, #12]
		my_rover.trg_y = atoi(readN_PULSE)*100;
 800255c:	f20d 404c 	addw	r0, sp, #1100	; 0x44c
 8002560:	f000 fe05 	bl	800316e <atoi>
		// {
		// 	n_pulse_set1 = abs(n_pulse_received1);
		// 	wheel_dir1 = n_pulse_received1/abs(n_pulse_received1);
		// }

		 give_command = 1;
 8002564:	4b61      	ldr	r3, [pc, #388]	; (80026ec <processUserInput+0x234>)
		my_rover.trg_y = atoi(readN_PULSE)*100;
 8002566:	4360      	muls	r0, r4
 8002568:	6128      	str	r0, [r5, #16]
		 give_command = 1;
 800256a:	2001      	movs	r0, #1
 800256c:	6018      	str	r0, [r3, #0]
	case 3:
		return 2;
	};

	return 1;
}
 800256e:	f50d 6d96 	add.w	sp, sp, #1200	; 0x4b0
 8002572:	bd70      	pop	{r4, r5, r6, pc}
    sprintf(msg1, "\r\n X: %ld", my_rover.x);
 8002574:	4c5c      	ldr	r4, [pc, #368]	; (80026e8 <processUserInput+0x230>)
 8002576:	495e      	ldr	r1, [pc, #376]	; (80026f0 <processUserInput+0x238>)
 8002578:	6822      	ldr	r2, [r4, #0]
 800257a:	a819      	add	r0, sp, #100	; 0x64
 800257c:	f000 fe2e 	bl	80031dc <siprintf>
    sprintf(msg2, "\r\n Y: %ld", my_rover.y);
 8002580:	6862      	ldr	r2, [r4, #4]
 8002582:	495c      	ldr	r1, [pc, #368]	; (80026f4 <processUserInput+0x23c>)
 8002584:	a832      	add	r0, sp, #200	; 0xc8
 8002586:	f000 fe29 	bl	80031dc <siprintf>
    sprintf(msg3, "\r\n Phi: %ld", my_rover.phi);
 800258a:	68a2      	ldr	r2, [r4, #8]
 800258c:	495a      	ldr	r1, [pc, #360]	; (80026f8 <processUserInput+0x240>)
 800258e:	a84b      	add	r0, sp, #300	; 0x12c
 8002590:	f000 fe24 	bl	80031dc <siprintf>
    sprintf(msg4, "\r\n n_pulse1: %ld", n_pulse1);
 8002594:	4b59      	ldr	r3, [pc, #356]	; (80026fc <processUserInput+0x244>)
 8002596:	495a      	ldr	r1, [pc, #360]	; (8002700 <processUserInput+0x248>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	a864      	add	r0, sp, #400	; 0x190
 800259c:	f000 fe1e 	bl	80031dc <siprintf>
    sprintf(msg5, "\r\n n_pulse2: %ld", n_pulse2);
 80025a0:	4b58      	ldr	r3, [pc, #352]	; (8002704 <processUserInput+0x24c>)
 80025a2:	4959      	ldr	r1, [pc, #356]	; (8002708 <processUserInput+0x250>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	a87d      	add	r0, sp, #500	; 0x1f4
 80025a8:	f000 fe18 	bl	80031dc <siprintf>
    sprintf(msg6, "\r\n n_pulse_set1: %ld", my_rover.trg_wheel_spd1);
 80025ac:	6962      	ldr	r2, [r4, #20]
 80025ae:	4957      	ldr	r1, [pc, #348]	; (800270c <processUserInput+0x254>)
 80025b0:	a896      	add	r0, sp, #600	; 0x258
 80025b2:	f000 fe13 	bl	80031dc <siprintf>
    sprintf(msg7, "\r\n n_pulse_set2: %ld", my_rover.trg_wheel_spd2);
 80025b6:	69a2      	ldr	r2, [r4, #24]
 80025b8:	4955      	ldr	r1, [pc, #340]	; (8002710 <processUserInput+0x258>)
 80025ba:	a8af      	add	r0, sp, #700	; 0x2bc
 80025bc:	f000 fe0e 	bl	80031dc <siprintf>
    sprintf(msg8, "\r\n PWM 1: %lu", returned_pwm1);
 80025c0:	4b54      	ldr	r3, [pc, #336]	; (8002714 <processUserInput+0x25c>)
 80025c2:	4955      	ldr	r1, [pc, #340]	; (8002718 <processUserInput+0x260>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	a8c8      	add	r0, sp, #800	; 0x320
 80025c8:	f000 fe08 	bl	80031dc <siprintf>
	sprintf(msg9, "\r\n PWM 2: %lu", returned_pwm2);
 80025cc:	4b53      	ldr	r3, [pc, #332]	; (800271c <processUserInput+0x264>)
 80025ce:	4954      	ldr	r1, [pc, #336]	; (8002720 <processUserInput+0x268>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	a8e1      	add	r0, sp, #900	; 0x384
 80025d4:	f000 fe02 	bl	80031dc <siprintf>
	sprintf(msg10, "\r\n angular_vel: %ld", my_rover.angular_vel);
 80025d8:	69e2      	ldr	r2, [r4, #28]
 80025da:	4952      	ldr	r1, [pc, #328]	; (8002724 <processUserInput+0x26c>)
 80025dc:	a8fa      	add	r0, sp, #1000	; 0x3e8
 80025de:	f000 fdfd 	bl	80031dc <siprintf>
	sprintf(msg11, "\r\n linear_vel: %ld", my_rover.linear_vel);
 80025e2:	6a22      	ldr	r2, [r4, #32]
 80025e4:	4950      	ldr	r1, [pc, #320]	; (8002728 <processUserInput+0x270>)
 80025e6:	f20d 404c 	addw	r0, sp, #1100	; 0x44c
 80025ea:	f000 fdf7 	bl	80031dc <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 80025ee:	a819      	add	r0, sp, #100	; 0x64
 80025f0:	f7fd fdf6 	bl	80001e0 <strlen>
 80025f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025f8:	b282      	uxth	r2, r0
 80025fa:	a919      	add	r1, sp, #100	; 0x64
 80025fc:	4839      	ldr	r0, [pc, #228]	; (80026e4 <processUserInput+0x22c>)
 80025fe:	f7ff fe09 	bl	8002214 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg2, strlen(msg2), HAL_MAX_DELAY);
 8002602:	a832      	add	r0, sp, #200	; 0xc8
 8002604:	f7fd fdec 	bl	80001e0 <strlen>
 8002608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800260c:	b282      	uxth	r2, r0
 800260e:	a932      	add	r1, sp, #200	; 0xc8
 8002610:	4834      	ldr	r0, [pc, #208]	; (80026e4 <processUserInput+0x22c>)
 8002612:	f7ff fdff 	bl	8002214 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg3, strlen(msg3), HAL_MAX_DELAY);
 8002616:	a84b      	add	r0, sp, #300	; 0x12c
 8002618:	f7fd fde2 	bl	80001e0 <strlen>
 800261c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002620:	b282      	uxth	r2, r0
 8002622:	a94b      	add	r1, sp, #300	; 0x12c
 8002624:	482f      	ldr	r0, [pc, #188]	; (80026e4 <processUserInput+0x22c>)
 8002626:	f7ff fdf5 	bl	8002214 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg4, strlen(msg4), HAL_MAX_DELAY);
 800262a:	a864      	add	r0, sp, #400	; 0x190
 800262c:	f7fd fdd8 	bl	80001e0 <strlen>
 8002630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002634:	b282      	uxth	r2, r0
 8002636:	a964      	add	r1, sp, #400	; 0x190
 8002638:	482a      	ldr	r0, [pc, #168]	; (80026e4 <processUserInput+0x22c>)
 800263a:	f7ff fdeb 	bl	8002214 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg5, strlen(msg5), HAL_MAX_DELAY);
 800263e:	a87d      	add	r0, sp, #500	; 0x1f4
 8002640:	f7fd fdce 	bl	80001e0 <strlen>
 8002644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002648:	b282      	uxth	r2, r0
 800264a:	a97d      	add	r1, sp, #500	; 0x1f4
 800264c:	4825      	ldr	r0, [pc, #148]	; (80026e4 <processUserInput+0x22c>)
 800264e:	f7ff fde1 	bl	8002214 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg6, strlen(msg6), HAL_MAX_DELAY);
 8002652:	a896      	add	r0, sp, #600	; 0x258
 8002654:	f7fd fdc4 	bl	80001e0 <strlen>
 8002658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800265c:	b282      	uxth	r2, r0
 800265e:	a996      	add	r1, sp, #600	; 0x258
 8002660:	4820      	ldr	r0, [pc, #128]	; (80026e4 <processUserInput+0x22c>)
 8002662:	f7ff fdd7 	bl	8002214 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg7, strlen(msg7), HAL_MAX_DELAY);
 8002666:	a8af      	add	r0, sp, #700	; 0x2bc
 8002668:	f7fd fdba 	bl	80001e0 <strlen>
 800266c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002670:	b282      	uxth	r2, r0
 8002672:	a9af      	add	r1, sp, #700	; 0x2bc
 8002674:	481b      	ldr	r0, [pc, #108]	; (80026e4 <processUserInput+0x22c>)
 8002676:	f7ff fdcd 	bl	8002214 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)msg8, strlen(msg8), HAL_MAX_DELAY);
 800267a:	a8c8      	add	r0, sp, #800	; 0x320
 800267c:	f7fd fdb0 	bl	80001e0 <strlen>
 8002680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002684:	b282      	uxth	r2, r0
 8002686:	a9c8      	add	r1, sp, #800	; 0x320
 8002688:	4816      	ldr	r0, [pc, #88]	; (80026e4 <processUserInput+0x22c>)
 800268a:	f7ff fdc3 	bl	8002214 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg9, strlen(msg9), HAL_MAX_DELAY);
 800268e:	a8e1      	add	r0, sp, #900	; 0x384
 8002690:	f7fd fda6 	bl	80001e0 <strlen>
 8002694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002698:	b282      	uxth	r2, r0
 800269a:	a9e1      	add	r1, sp, #900	; 0x384
 800269c:	4811      	ldr	r0, [pc, #68]	; (80026e4 <processUserInput+0x22c>)
 800269e:	f7ff fdb9 	bl	8002214 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg10, strlen(msg10), HAL_MAX_DELAY);
 80026a2:	a8fa      	add	r0, sp, #1000	; 0x3e8
 80026a4:	f7fd fd9c 	bl	80001e0 <strlen>
 80026a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ac:	b282      	uxth	r2, r0
 80026ae:	a9fa      	add	r1, sp, #1000	; 0x3e8
 80026b0:	480c      	ldr	r0, [pc, #48]	; (80026e4 <processUserInput+0x22c>)
 80026b2:	f7ff fdaf 	bl	8002214 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg11, strlen(msg11), HAL_MAX_DELAY);
 80026b6:	f20d 404c 	addw	r0, sp, #1100	; 0x44c
 80026ba:	f7fd fd91 	bl	80001e0 <strlen>
 80026be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026c2:	b282      	uxth	r2, r0
 80026c4:	f20d 414c 	addw	r1, sp, #1100	; 0x44c
 80026c8:	4806      	ldr	r0, [pc, #24]	; (80026e4 <processUserInput+0x22c>)
 80026ca:	f7ff fda3 	bl	8002214 <HAL_UART_Transmit>
	return 1;
 80026ce:	2001      	movs	r0, #1
		break;
 80026d0:	e74d      	b.n	800256e <processUserInput+0xb6>
		return 0;
 80026d2:	2000      	movs	r0, #0
 80026d4:	e74b      	b.n	800256e <processUserInput+0xb6>
		return 2;
 80026d6:	2002      	movs	r0, #2
 80026d8:	e749      	b.n	800256e <processUserInput+0xb6>
 80026da:	bf00      	nop
 80026dc:	080053d8 	.word	0x080053d8
 80026e0:	08005517 	.word	0x08005517
 80026e4:	2000032c 	.word	0x2000032c
 80026e8:	20000008 	.word	0x20000008
 80026ec:	20000230 	.word	0x20000230
 80026f0:	080054ea 	.word	0x080054ea
 80026f4:	080054f4 	.word	0x080054f4
 80026f8:	080054fe 	.word	0x080054fe
 80026fc:	2000024c 	.word	0x2000024c
 8002700:	0800550a 	.word	0x0800550a
 8002704:	20000250 	.word	0x20000250
 8002708:	0800551b 	.word	0x0800551b
 800270c:	0800552c 	.word	0x0800552c
 8002710:	08005541 	.word	0x08005541
 8002714:	20000254 	.word	0x20000254
 8002718:	08005556 	.word	0x08005556
 800271c:	20000258 	.word	0x20000258
 8002720:	08005564 	.word	0x08005564
 8002724:	08005572 	.word	0x08005572
 8002728:	08005586 	.word	0x08005586

0800272c <main>:
{
 800272c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002730:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8002732:	f7fe fc39 	bl	8000fa8 <HAL_Init>
  SystemClock_Config();
 8002736:	f7ff fe2b 	bl	8002390 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273a:	2214      	movs	r2, #20
 800273c:	2100      	movs	r1, #0
 800273e:	a807      	add	r0, sp, #28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002740:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002742:	f000 fd43 	bl	80031cc <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002746:	4b81      	ldr	r3, [pc, #516]	; (800294c <main+0x220>)
 8002748:	9401      	str	r4, [sp, #4]
 800274a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800274c:	4880      	ldr	r0, [pc, #512]	; (8002950 <main+0x224>)
  htim3.Instance = TIM3;
 800274e:	4d81      	ldr	r5, [pc, #516]	; (8002954 <main+0x228>)
  htim4.Instance = TIM4;
 8002750:	4f81      	ldr	r7, [pc, #516]	; (8002958 <main+0x22c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002752:	f042 0204 	orr.w	r2, r2, #4
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
 8002758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275a:	f002 0204 	and.w	r2, r2, #4
 800275e:	9201      	str	r2, [sp, #4]
 8002760:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002762:	9402      	str	r4, [sp, #8]
 8002764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002766:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
 800276c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800276e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002772:	9202      	str	r2, [sp, #8]
 8002774:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	9403      	str	r4, [sp, #12]
 8002778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
 8002780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002782:	f002 0201 	and.w	r2, r2, #1
 8002786:	9203      	str	r2, [sp, #12]
 8002788:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800278a:	9404      	str	r4, [sp, #16]
 800278c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800278e:	f042 0202 	orr.w	r2, r2, #2
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800279c:	4622      	mov	r2, r4
 800279e:	f44f 7108 	mov.w	r1, #544	; 0x220
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a2:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 80027a4:	f7fe fd6c 	bl	8001280 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80027a8:	4622      	mov	r2, r4
 80027aa:	2180      	movs	r1, #128	; 0x80
 80027ac:	486b      	ldr	r0, [pc, #428]	; (800295c <main+0x230>)
 80027ae:	f7fe fd67 	bl	8001280 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80027b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027b6:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027b8:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027ba:	4b69      	ldr	r3, [pc, #420]	; (8002960 <main+0x234>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027bc:	4867      	ldr	r0, [pc, #412]	; (800295c <main+0x230>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027be:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c0:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027c6:	f7fe fc85 	bl	80010d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 80027ca:	f44f 7308 	mov.w	r3, #544	; 0x220
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ce:	a907      	add	r1, sp, #28
 80027d0:	485f      	ldr	r0, [pc, #380]	; (8002950 <main+0x224>)
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9;
 80027d2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d4:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027da:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027dc:	f7fe fc7a 	bl	80010d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027e0:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e2:	a907      	add	r1, sp, #28
 80027e4:	485d      	ldr	r0, [pc, #372]	; (800295c <main+0x230>)
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027e6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e8:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ee:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f0:	f7fe fc70 	bl	80010d4 <HAL_GPIO_Init>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027f4:	221c      	movs	r2, #28
 80027f6:	eb0d 0002 	add.w	r0, sp, r2
 80027fa:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fc:	9405      	str	r4, [sp, #20]
 80027fe:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002800:	f000 fce4 	bl	80031cc <memset>
  htim3.Instance = TIM3;
 8002804:	4b57      	ldr	r3, [pc, #348]	; (8002964 <main+0x238>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002806:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 400-1;
 8002808:	f240 168f 	movw	r6, #399	; 0x18f
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800280c:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 1-1;
 800280e:	e885 0018 	stmia.w	r5, {r3, r4}
  htim3.Init.Period = 400-1;
 8002812:	60ee      	str	r6, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002814:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002816:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002818:	f7ff f92a 	bl	8001a70 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800281c:	a905      	add	r1, sp, #20
 800281e:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002820:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002822:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002824:	f7ff fb65 	bl	8001ef2 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002828:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800282a:	4622      	mov	r2, r4
 800282c:	a907      	add	r1, sp, #28
 800282e:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002830:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 399;
 8002832:	9608      	str	r6, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002834:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002836:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002838:	f7ff f9a8 	bl	8001b8c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800283c:	2204      	movs	r2, #4
 800283e:	a907      	add	r1, sp, #28
 8002840:	4628      	mov	r0, r5
 8002842:	f7ff f9a3 	bl	8001b8c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8002846:	4628      	mov	r0, r5
 8002848:	f000 fbb0 	bl	8002fac <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800284c:	221c      	movs	r2, #28
 800284e:	eb0d 0002 	add.w	r0, sp, r2
 8002852:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002854:	9405      	str	r4, [sp, #20]
 8002856:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002858:	f000 fcb8 	bl	80031cc <memset>
  htim4.Init.Prescaler = 8000-1;
 800285c:	4b42      	ldr	r3, [pc, #264]	; (8002968 <main+0x23c>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285e:	60bc      	str	r4, [r7, #8]
  htim4.Init.Prescaler = 8000-1;
 8002860:	f641 793f 	movw	r9, #7999	; 0x1f3f
 8002864:	e887 0208 	stmia.w	r7, {r3, r9}
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002868:	4638      	mov	r0, r7
  htim4.Init.Period = 50-1;
 800286a:	2331      	movs	r3, #49	; 0x31
 800286c:	60fb      	str	r3, [r7, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800286e:	613c      	str	r4, [r7, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002870:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002872:	f7ff f8e3 	bl	8001a3c <HAL_TIM_OC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002876:	a905      	add	r1, sp, #20
 8002878:	4638      	mov	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800287a:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800287c:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800287e:	f7ff fb38 	bl	8001ef2 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002882:	a907      	add	r1, sp, #28
 8002884:	4622      	mov	r2, r4
 8002886:	4638      	mov	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002888:	9407      	str	r4, [sp, #28]
  sConfigOC.Pulse = 0;
 800288a:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800288c:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800288e:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002890:	f7ff f94e 	bl	8001b30 <HAL_TIM_OC_ConfigChannel>
  huart2.Instance = USART2;
 8002894:	4835      	ldr	r0, [pc, #212]	; (800296c <main+0x240>)
  huart2.Init.BaudRate = 115200;
 8002896:	4a36      	ldr	r2, [pc, #216]	; (8002970 <main+0x244>)
  htim2.Instance = TIM2;
 8002898:	4e36      	ldr	r6, [pc, #216]	; (8002974 <main+0x248>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800289a:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 800289c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80028a0:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028a4:	230c      	movs	r3, #12
 80028a6:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028a8:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028aa:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ac:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028ae:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028b0:	f7ff fc82 	bl	80021b8 <HAL_UART_Init>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80028b4:	2210      	movs	r2, #16
 80028b6:	4621      	mov	r1, r4
 80028b8:	a807      	add	r0, sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ba:	9405      	str	r4, [sp, #20]
 80028bc:	9406      	str	r4, [sp, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80028be:	f000 fc85 	bl	80031cc <memset>
  htim2.Instance = TIM2;
 80028c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 8000-1;
 80028c6:	e886 0208 	stmia.w	r6, {r3, r9}
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80028ca:	4630      	mov	r0, r6
  htim2.Init.Period = 4294967295;
 80028cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028d0:	60f3      	str	r3, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d2:	60b4      	str	r4, [r6, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028d4:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d6:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80028d8:	f7ff f8e4 	bl	8001aa4 <HAL_TIM_IC_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028dc:	a905      	add	r1, sp, #20
 80028de:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e0:	9405      	str	r4, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e2:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028e4:	f7ff fb05 	bl	8001ef2 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80028e8:	4622      	mov	r2, r4
 80028ea:	a907      	add	r1, sp, #28
 80028ec:	4630      	mov	r0, r6
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80028ee:	9407      	str	r4, [sp, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80028f0:	f8cd 8020 	str.w	r8, [sp, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80028f4:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigIC.ICFilter = 0;
 80028f6:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80028f8:	f7ff f9dc 	bl	8001cb4 <HAL_TIM_IC_ConfigChannel>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80028fc:	2204      	movs	r2, #4
 80028fe:	a907      	add	r1, sp, #28
 8002900:	4630      	mov	r0, r6
 8002902:	f7ff f9d7 	bl	8001cb4 <HAL_TIM_IC_ConfigChannel>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002906:	4621      	mov	r1, r4
 8002908:	4630      	mov	r0, r6
 800290a:	f7ff fac1 	bl	8001e90 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800290e:	2104      	movs	r1, #4
 8002910:	4630      	mov	r0, r6
 8002912:	f7ff fabd 	bl	8001e90 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8002916:	4621      	mov	r1, r4
 8002918:	4628      	mov	r0, r5
 800291a:	f7ff fa61 	bl	8001de0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800291e:	2104      	movs	r1, #4
 8002920:	4628      	mov	r0, r5
 8002922:	f7ff fa5d 	bl	8001de0 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start_IT(&htim4,TIM_CHANNEL_1);
 8002926:	4621      	mov	r1, r4
 8002928:	4638      	mov	r0, r7
 800292a:	f7ff faaf 	bl	8001e8c <HAL_TIM_OC_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 800292e:	682b      	ldr	r3, [r5, #0]
 8002930:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002934:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
 8002936:	639a      	str	r2, [r3, #56]	; 0x38
    	printWelcomeMessage();
 8002938:	f7ff fd7a 	bl	8002430 <printWelcomeMessage>
    		opt = readUserInput();
 800293c:	f7ff fda2 	bl	8002484 <readUserInput>
 8002940:	4604      	mov	r4, r0
    		processUserInput(opt);
 8002942:	f7ff fdb9 	bl	80024b8 <processUserInput>
    		if(opt == 3)
 8002946:	2c03      	cmp	r4, #3
 8002948:	d1f8      	bne.n	800293c <main+0x210>
 800294a:	e7f5      	b.n	8002938 <main+0x20c>
 800294c:	40023800 	.word	0x40023800
 8002950:	40020000 	.word	0x40020000
 8002954:	200002ac 	.word	0x200002ac
 8002958:	2000026c 	.word	0x2000026c
 800295c:	40020800 	.word	0x40020800
 8002960:	10210000 	.word	0x10210000
 8002964:	40000400 	.word	0x40000400
 8002968:	40000800 	.word	0x40000800
 800296c:	2000032c 	.word	0x2000032c
 8002970:	40004400 	.word	0x40004400
 8002974:	200002ec 	.word	0x200002ec

08002978 <pid_controller_wheels>:

	int32_t output_pwm = 0;
	int32_t return_pwm = 0;


	if (wheel_id == 1)
 8002978:	2a01      	cmp	r2, #1
{
 800297a:	b510      	push	{r4, lr}
	if (wheel_id == 1)
 800297c:	d11a      	bne.n	80029b4 <pid_controller_wheels+0x3c>
	{
		error1 = desired_point - current_point;
 800297e:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <pid_controller_wheels+0x58>)
 8002980:	1a09      	subs	r1, r1, r0
 8002982:	6019      	str	r1, [r3, #0]
		output_pwm = (Kp*error1) + (Ki*integrated_error1);
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <pid_controller_wheels+0x5c>)

	}
	else if (wheel_id == 2)
	{
		error2 = desired_point - current_point;
		output_pwm = (Kp*error2) + (Ki*integrated_error2);
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	f06f 0003 	mvn.w	r0, #3
 800298c:	f06f 0410 	mvn.w	r4, #16
 8002990:	4350      	muls	r0, r2
 8002992:	fb04 0001 	mla	r0, r4, r1, r0

		if ((abs(integrated_error2)<200) || ((error2*integrated_error2)<=0)) // anti winding
 8002996:	f102 04c7 	add.w	r4, r2, #199	; 0xc7
 800299a:	f5b4 7fc7 	cmp.w	r4, #398	; 0x18e
 800299e:	d903      	bls.n	80029a8 <pid_controller_wheels+0x30>
 80029a0:	fb02 f401 	mul.w	r4, r2, r1
 80029a4:	2c00      	cmp	r4, #0
 80029a6:	dc01      	bgt.n	80029ac <pid_controller_wheels+0x34>
		{
			integrated_error2 += error2;
 80029a8:	4411      	add	r1, r2
 80029aa:	6019      	str	r1, [r3, #0]
		}
	}

	if (output_pwm < 0)
 80029ac:	2800      	cmp	r0, #0
 80029ae:	da09      	bge.n	80029c4 <pid_controller_wheels+0x4c>
	{
		return_pwm = 0;
 80029b0:	2000      	movs	r0, #0
	{
		return_pwm = output_pwm;
	}

	return return_pwm;
}
 80029b2:	bd10      	pop	{r4, pc}
	else if (wheel_id == 2)
 80029b4:	2a02      	cmp	r2, #2
 80029b6:	d104      	bne.n	80029c2 <pid_controller_wheels+0x4a>
		error2 = desired_point - current_point;
 80029b8:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <pid_controller_wheels+0x60>)
 80029ba:	1a09      	subs	r1, r1, r0
 80029bc:	6019      	str	r1, [r3, #0]
		output_pwm = (Kp*error2) + (Ki*integrated_error2);
 80029be:	4b07      	ldr	r3, [pc, #28]	; (80029dc <pid_controller_wheels+0x64>)
 80029c0:	e7e1      	b.n	8002986 <pid_controller_wheels+0xe>
	int32_t output_pwm = 0;
 80029c2:	2000      	movs	r0, #0
 80029c4:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
 80029c8:	bfa8      	it	ge
 80029ca:	f44f 70c8 	movge.w	r0, #400	; 0x190
 80029ce:	bd10      	pop	{r4, pc}
 80029d0:	20000228 	.word	0x20000228
 80029d4:	20000244 	.word	0x20000244
 80029d8:	2000022c 	.word	0x2000022c
 80029dc:	20000248 	.word	0x20000248

080029e0 <update_my_position>:

void update_my_position(void)
{
 80029e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029e4:	ed2d 8b04 	vpush	{d8-d9}
	int32_t s1 = 0;
	int32_t s2 = 0;
	int32_t s_mean = 0;

	s1 = (int32_t) wheel_dir1*(n_pulse1/270.0)*3.14*R*0.05*100;
 80029e8:	4b75      	ldr	r3, [pc, #468]	; (8002bc0 <update_my_position+0x1e0>)
{
 80029ea:	b083      	sub	sp, #12
	s1 = (int32_t) wheel_dir1*(n_pulse1/270.0)*3.14*R*0.05*100;
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	f7fd fd91 	bl	8000514 <__aeabi_ui2d>
 80029f2:	a36d      	add	r3, pc, #436	; (adr r3, 8002ba8 <update_my_position+0x1c8>)
 80029f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f8:	f7fd ff2c 	bl	8000854 <__aeabi_ddiv>
 80029fc:	4b71      	ldr	r3, [pc, #452]	; (8002bc4 <update_my_position+0x1e4>)
 80029fe:	4604      	mov	r4, r0
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	460d      	mov	r5, r1
 8002a04:	f7fd fd96 	bl	8000534 <__aeabi_i2d>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	4629      	mov	r1, r5
 8002a10:	f7fd fdf6 	bl	8000600 <__aeabi_dmul>
 8002a14:	a366      	add	r3, pc, #408	; (adr r3, 8002bb0 <update_my_position+0x1d0>)
 8002a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1a:	f7fd fdf1 	bl	8000600 <__aeabi_dmul>
 8002a1e:	2200      	movs	r2, #0
 8002a20:	4b69      	ldr	r3, [pc, #420]	; (8002bc8 <update_my_position+0x1e8>)
 8002a22:	f7fd fded 	bl	8000600 <__aeabi_dmul>
 8002a26:	a364      	add	r3, pc, #400	; (adr r3, 8002bb8 <update_my_position+0x1d8>)
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	f7fd fde8 	bl	8000600 <__aeabi_dmul>
 8002a30:	2200      	movs	r2, #0
 8002a32:	4b66      	ldr	r3, [pc, #408]	; (8002bcc <update_my_position+0x1ec>)
 8002a34:	f7fd fde4 	bl	8000600 <__aeabi_dmul>
 8002a38:	f7fe f892 	bl	8000b60 <__aeabi_d2iz>
	s2 = (int32_t) wheel_dir2*(n_pulse2/270.0)*3.14*R*0.05*100;
 8002a3c:	4b64      	ldr	r3, [pc, #400]	; (8002bd0 <update_my_position+0x1f0>)
	s1 = (int32_t) wheel_dir1*(n_pulse1/270.0)*3.14*R*0.05*100;
 8002a3e:	4683      	mov	fp, r0
	s2 = (int32_t) wheel_dir2*(n_pulse2/270.0)*3.14*R*0.05*100;
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	f7fd fd67 	bl	8000514 <__aeabi_ui2d>
 8002a46:	a358      	add	r3, pc, #352	; (adr r3, 8002ba8 <update_my_position+0x1c8>)
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	f7fd ff02 	bl	8000854 <__aeabi_ddiv>
 8002a50:	4b60      	ldr	r3, [pc, #384]	; (8002bd4 <update_my_position+0x1f4>)
 8002a52:	4604      	mov	r4, r0
 8002a54:	6818      	ldr	r0, [r3, #0]
 8002a56:	460d      	mov	r5, r1
 8002a58:	f7fd fd6c 	bl	8000534 <__aeabi_i2d>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4620      	mov	r0, r4
 8002a62:	4629      	mov	r1, r5
 8002a64:	f7fd fdcc 	bl	8000600 <__aeabi_dmul>
 8002a68:	a351      	add	r3, pc, #324	; (adr r3, 8002bb0 <update_my_position+0x1d0>)
 8002a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6e:	f7fd fdc7 	bl	8000600 <__aeabi_dmul>
 8002a72:	2200      	movs	r2, #0
 8002a74:	4b54      	ldr	r3, [pc, #336]	; (8002bc8 <update_my_position+0x1e8>)

	s_mean = (s1+s2)/2.0;

	my_rover.x += (int32_t) s_mean*cos(my_rover.phi/100.0); // in mm
 8002a76:	4d58      	ldr	r5, [pc, #352]	; (8002bd8 <update_my_position+0x1f8>)
	s2 = (int32_t) wheel_dir2*(n_pulse2/270.0)*3.14*R*0.05*100;
 8002a78:	f7fd fdc2 	bl	8000600 <__aeabi_dmul>
 8002a7c:	a34e      	add	r3, pc, #312	; (adr r3, 8002bb8 <update_my_position+0x1d8>)
 8002a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a82:	f7fd fdbd 	bl	8000600 <__aeabi_dmul>
 8002a86:	2200      	movs	r2, #0
 8002a88:	4b50      	ldr	r3, [pc, #320]	; (8002bcc <update_my_position+0x1ec>)
 8002a8a:	f7fd fdb9 	bl	8000600 <__aeabi_dmul>
 8002a8e:	f7fe f867 	bl	8000b60 <__aeabi_d2iz>
 8002a92:	4604      	mov	r4, r0
	s_mean = (s1+s2)/2.0;
 8002a94:	4458      	add	r0, fp
 8002a96:	f7fd fd4d 	bl	8000534 <__aeabi_i2d>
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	4b4f      	ldr	r3, [pc, #316]	; (8002bdc <update_my_position+0x1fc>)
 8002a9e:	f7fd fdaf 	bl	8000600 <__aeabi_dmul>
 8002aa2:	f7fe f85d 	bl	8000b60 <__aeabi_d2iz>
	my_rover.x += (int32_t) s_mean*cos(my_rover.phi/100.0); // in mm
 8002aa6:	f7fd fd45 	bl	8000534 <__aeabi_i2d>
 8002aaa:	f8d5 a008 	ldr.w	sl, [r5, #8]
 8002aae:	4606      	mov	r6, r0
 8002ab0:	4650      	mov	r0, sl
 8002ab2:	460f      	mov	r7, r1
 8002ab4:	f7fd fd3e 	bl	8000534 <__aeabi_i2d>
 8002ab8:	2200      	movs	r2, #0
 8002aba:	4b44      	ldr	r3, [pc, #272]	; (8002bcc <update_my_position+0x1ec>)
 8002abc:	f7fd feca 	bl	8000854 <__aeabi_ddiv>
 8002ac0:	ec41 0b10 	vmov	d0, r0, r1
 8002ac4:	ec41 0b18 	vmov	d8, r0, r1
 8002ac8:	f001 fa06 	bl	8003ed8 <cos>
 8002acc:	ec53 2b10 	vmov	r2, r3, d0
 8002ad0:	6828      	ldr	r0, [r5, #0]
 8002ad2:	e9cd 2300 	strd	r2, r3, [sp]
 8002ad6:	f7fd fd2d 	bl	8000534 <__aeabi_i2d>
 8002ada:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002ade:	4680      	mov	r8, r0
 8002ae0:	4689      	mov	r9, r1
 8002ae2:	4630      	mov	r0, r6
 8002ae4:	4639      	mov	r1, r7
 8002ae6:	f7fd fd8b 	bl	8000600 <__aeabi_dmul>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	4640      	mov	r0, r8
 8002af0:	4649      	mov	r1, r9
 8002af2:	f7fd fbd3 	bl	800029c <__adddf3>
 8002af6:	f7fe f833 	bl	8000b60 <__aeabi_d2iz>
	my_rover.y += (int32_t) s_mean*sin(my_rover.phi/100.0); // in mm
 8002afa:	eeb0 0a48 	vmov.f32	s0, s16
 8002afe:	eef0 0a68 	vmov.f32	s1, s17
	my_rover.x += (int32_t) s_mean*cos(my_rover.phi/100.0); // in mm
 8002b02:	6028      	str	r0, [r5, #0]
	my_rover.y += (int32_t) s_mean*sin(my_rover.phi/100.0); // in mm
 8002b04:	f001 fa34 	bl	8003f70 <sin>
 8002b08:	ec53 2b10 	vmov	r2, r3, d0
 8002b0c:	6868      	ldr	r0, [r5, #4]
 8002b0e:	e9cd 2300 	strd	r2, r3, [sp]
 8002b12:	f7fd fd0f 	bl	8000534 <__aeabi_i2d>
 8002b16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002b1a:	4680      	mov	r8, r0
 8002b1c:	4689      	mov	r9, r1
 8002b1e:	4630      	mov	r0, r6
 8002b20:	4639      	mov	r1, r7
 8002b22:	f7fd fd6d 	bl	8000600 <__aeabi_dmul>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4640      	mov	r0, r8
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	f7fd fbb5 	bl	800029c <__adddf3>
 8002b32:	f7fe f815 	bl	8000b60 <__aeabi_d2iz>
 8002b36:	6068      	str	r0, [r5, #4]
	my_rover.phi += (int32_t) (s2-s1)/L; // in 100*rad
 8002b38:	eba4 000b 	sub.w	r0, r4, fp
 8002b3c:	f04f 0baa 	mov.w	fp, #170	; 0xaa
 8002b40:	fb90 f0fb 	sdiv	r0, r0, fp
 8002b44:	4450      	add	r0, sl
 8002b46:	60a8      	str	r0, [r5, #8]

	my_rover.phi = (int32_t) atan2(sin((float) (my_rover.phi/100.0)),cos((float) (my_rover.phi/100.0)))*100; // map phi between [-pi,pi]
 8002b48:	f7fd fcf4 	bl	8000534 <__aeabi_i2d>
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	4b1f      	ldr	r3, [pc, #124]	; (8002bcc <update_my_position+0x1ec>)
 8002b50:	f7fd fe80 	bl	8000854 <__aeabi_ddiv>
 8002b54:	f7fe f82c 	bl	8000bb0 <__aeabi_d2f>
 8002b58:	f7fd fcfe 	bl	8000558 <__aeabi_f2d>
 8002b5c:	ec41 0b10 	vmov	d0, r0, r1
 8002b60:	ec41 0b18 	vmov	d8, r0, r1
 8002b64:	f001 fa04 	bl	8003f70 <sin>
 8002b68:	eeb0 9a40 	vmov.f32	s18, s0
 8002b6c:	eef0 9a60 	vmov.f32	s19, s1
 8002b70:	eeb0 0a48 	vmov.f32	s0, s16
 8002b74:	eef0 0a68 	vmov.f32	s1, s17
 8002b78:	f001 f9ae 	bl	8003ed8 <cos>
 8002b7c:	eeb0 1a40 	vmov.f32	s2, s0
 8002b80:	eef0 1a60 	vmov.f32	s3, s1
 8002b84:	eeb0 0a49 	vmov.f32	s0, s18
 8002b88:	eef0 0a69 	vmov.f32	s1, s19
 8002b8c:	f001 fa38 	bl	8004000 <atan2>
 8002b90:	ec51 0b10 	vmov	r0, r1, d0
 8002b94:	f7fd ffe4 	bl	8000b60 <__aeabi_d2iz>
 8002b98:	2364      	movs	r3, #100	; 0x64
 8002b9a:	4358      	muls	r0, r3
 8002b9c:	60a8      	str	r0, [r5, #8]
}
 8002b9e:	b003      	add	sp, #12
 8002ba0:	ecbd 8b04 	vpop	{d8-d9}
 8002ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ba8:	00000000 	.word	0x00000000
 8002bac:	4070e000 	.word	0x4070e000
 8002bb0:	51eb851f 	.word	0x51eb851f
 8002bb4:	40091eb8 	.word	0x40091eb8
 8002bb8:	9999999a 	.word	0x9999999a
 8002bbc:	3fa99999 	.word	0x3fa99999
 8002bc0:	2000024c 	.word	0x2000024c
 8002bc4:	2000002c 	.word	0x2000002c
 8002bc8:	40440000 	.word	0x40440000
 8002bcc:	40590000 	.word	0x40590000
 8002bd0:	20000250 	.word	0x20000250
 8002bd4:	20000030 	.word	0x20000030
 8002bd8:	20000008 	.word	0x20000008
 8002bdc:	3fe00000 	.word	0x3fe00000

08002be0 <calculate_new_speed>:
	my_rover.angular_vel = kp*error_heading;

}

void calculate_new_speed(void)
{
 8002be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int32_t desired_heading;

	int32_t left_wheel_cmd, right_wheel_cmd;

	// Calculate error vector
	dx = my_rover.trg_x - my_rover.x;
 8002be4:	4c6c      	ldr	r4, [pc, #432]	; (8002d98 <calculate_new_speed+0x1b8>)
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	68e7      	ldr	r7, [r4, #12]
	dy = my_rover.trg_y - my_rover.y;
 8002bea:	6926      	ldr	r6, [r4, #16]
	dx = my_rover.trg_x - my_rover.x;
 8002bec:	1aff      	subs	r7, r7, r3
	dy = my_rover.trg_y - my_rover.y;
 8002bee:	6863      	ldr	r3, [r4, #4]
{
 8002bf0:	ed2d 8b04 	vpush	{d8-d9}
	dy = my_rover.trg_y - my_rover.y;
 8002bf4:	1af6      	subs	r6, r6, r3

	error_distance = (int32_t) sqrt(dx*dx+dy*dy);
 8002bf6:	fb06 f006 	mul.w	r0, r6, r6
{
 8002bfa:	b082      	sub	sp, #8
	error_distance = (int32_t) sqrt(dx*dx+dy*dy);
 8002bfc:	fb07 0007 	mla	r0, r7, r7, r0
 8002c00:	f7fd fc98 	bl	8000534 <__aeabi_i2d>
 8002c04:	ec41 0b10 	vmov	d0, r0, r1
 8002c08:	f001 f9fc 	bl	8004004 <sqrt>
 8002c0c:	ec51 0b10 	vmov	r0, r1, d0
 8002c10:	f7fd ffa6 	bl	8000b60 <__aeabi_d2iz>

	if (error_distance < 5)
 8002c14:	2804      	cmp	r0, #4
 8002c16:	4625      	mov	r5, r4
 8002c18:	dc07      	bgt.n	8002c2a <calculate_new_speed+0x4a>
	{
		my_rover.trg_wheel_spd1 = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	6163      	str	r3, [r4, #20]
		my_rover.trg_wheel_spd2 = 0;
 8002c1e:	61a3      	str	r3, [r4, #24]

	// Calculate the wheel speed
	my_rover.trg_wheel_spd1 = (int32_t) abs(left_wheel_cmd*(270)/(3.1415*R));
	my_rover.trg_wheel_spd2 = (int32_t) abs(right_wheel_cmd*(270)/(3.1415*R));

}
 8002c20:	b002      	add	sp, #8
 8002c22:	ecbd 8b04 	vpop	{d8-d9}
 8002c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k = (int32_t) atan(error_distance/100.0)*100;
 8002c2a:	f7fd fc83 	bl	8000534 <__aeabi_i2d>
 8002c2e:	2200      	movs	r2, #0
 8002c30:	4b5a      	ldr	r3, [pc, #360]	; (8002d9c <calculate_new_speed+0x1bc>)
 8002c32:	f7fd fe0f 	bl	8000854 <__aeabi_ddiv>
 8002c36:	ec41 0b10 	vmov	d0, r0, r1
 8002c3a:	f000 ffa5 	bl	8003b88 <atan>
 8002c3e:	ec51 0b10 	vmov	r0, r1, d0
 8002c42:	f7fd ff8d 	bl	8000b60 <__aeabi_d2iz>
 8002c46:	2464      	movs	r4, #100	; 0x64
 8002c48:	fb04 f800 	mul.w	r8, r4, r0
		u1 = (int32_t) k*dx/100.0;
 8002c4c:	fb08 f007 	mul.w	r0, r8, r7
 8002c50:	f7fd fc70 	bl	8000534 <__aeabi_i2d>
 8002c54:	2200      	movs	r2, #0
 8002c56:	4b51      	ldr	r3, [pc, #324]	; (8002d9c <calculate_new_speed+0x1bc>)
 8002c58:	f7fd fdfc 	bl	8000854 <__aeabi_ddiv>
 8002c5c:	f7fd ff80 	bl	8000b60 <__aeabi_d2iz>
 8002c60:	4607      	mov	r7, r0
		u2 = (int32_t) k*dy/100.0;
 8002c62:	fb08 f006 	mul.w	r0, r8, r6
 8002c66:	f7fd fc65 	bl	8000534 <__aeabi_i2d>
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	4b4b      	ldr	r3, [pc, #300]	; (8002d9c <calculate_new_speed+0x1bc>)
 8002c6e:	f7fd fdf1 	bl	8000854 <__aeabi_ddiv>
 8002c72:	f7fd ff75 	bl	8000b60 <__aeabi_d2iz>
 8002c76:	4606      	mov	r6, r0
	my_rover.linear_vel = (int32_t) sqrt(u1*u1 + u2*u2);
 8002c78:	4340      	muls	r0, r0
 8002c7a:	fb07 0007 	mla	r0, r7, r7, r0
 8002c7e:	f7fd fc59 	bl	8000534 <__aeabi_i2d>
 8002c82:	ec41 0b10 	vmov	d0, r0, r1
 8002c86:	f001 f9bd 	bl	8004004 <sqrt>
 8002c8a:	ec51 0b10 	vmov	r0, r1, d0
 8002c8e:	f7fd ff67 	bl	8000b60 <__aeabi_d2iz>
 8002c92:	6228      	str	r0, [r5, #32]
	desired_heading = (int32_t) atan2(u2,u1)*100;
 8002c94:	4638      	mov	r0, r7
 8002c96:	f7fd fc4d 	bl	8000534 <__aeabi_i2d>
 8002c9a:	e9cd 0100 	strd	r0, r1, [sp]
 8002c9e:	4630      	mov	r0, r6
 8002ca0:	f7fd fc48 	bl	8000534 <__aeabi_i2d>
 8002ca4:	ed9d 1b00 	vldr	d1, [sp]
 8002ca8:	ec41 0b10 	vmov	d0, r0, r1
 8002cac:	f001 f9a8 	bl	8004000 <atan2>
 8002cb0:	ec51 0b10 	vmov	r0, r1, d0
 8002cb4:	f7fd ff54 	bl	8000b60 <__aeabi_d2iz>
	error_heading = (int32_t) atan2(sin((desired_heading - my_rover.phi)/100.0),cos((desired_heading - my_rover.phi)/100.0))*100;
 8002cb8:	68ab      	ldr	r3, [r5, #8]
	desired_heading = (int32_t) atan2(u2,u1)*100;
 8002cba:	4360      	muls	r0, r4
	error_heading = (int32_t) atan2(sin((desired_heading - my_rover.phi)/100.0),cos((desired_heading - my_rover.phi)/100.0))*100;
 8002cbc:	1ac0      	subs	r0, r0, r3
 8002cbe:	f7fd fc39 	bl	8000534 <__aeabi_i2d>
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	4b35      	ldr	r3, [pc, #212]	; (8002d9c <calculate_new_speed+0x1bc>)
 8002cc6:	f7fd fdc5 	bl	8000854 <__aeabi_ddiv>
 8002cca:	ec41 0b10 	vmov	d0, r0, r1
 8002cce:	ec41 0b18 	vmov	d8, r0, r1
 8002cd2:	f001 f94d 	bl	8003f70 <sin>
 8002cd6:	eeb0 9a40 	vmov.f32	s18, s0
 8002cda:	eef0 9a60 	vmov.f32	s19, s1
 8002cde:	eeb0 0a48 	vmov.f32	s0, s16
 8002ce2:	eef0 0a68 	vmov.f32	s1, s17
 8002ce6:	f001 f8f7 	bl	8003ed8 <cos>
 8002cea:	eeb0 1a40 	vmov.f32	s2, s0
 8002cee:	eef0 1a60 	vmov.f32	s3, s1
 8002cf2:	eeb0 0a49 	vmov.f32	s0, s18
 8002cf6:	eef0 0a69 	vmov.f32	s1, s19
 8002cfa:	f001 f981 	bl	8004000 <atan2>
 8002cfe:	ec51 0b10 	vmov	r0, r1, d0
 8002d02:	f7fd ff2d 	bl	8000b60 <__aeabi_d2iz>
	left_wheel_cmd = (int32_t) (2*my_rover.linear_vel - my_rover.angular_vel*L)/(2*R*100);
 8002d06:	6a2b      	ldr	r3, [r5, #32]
	right_wheel_cmd = (int32_t) (2*my_rover.linear_vel + my_rover.angular_vel*L)/(2*R*100);
 8002d08:	4925      	ldr	r1, [pc, #148]	; (8002da0 <calculate_new_speed+0x1c0>)
	error_heading = (int32_t) atan2(sin((desired_heading - my_rover.phi)/100.0),cos((desired_heading - my_rover.phi)/100.0))*100;
 8002d0a:	4344      	muls	r4, r0
	my_rover.angular_vel = kp*error_heading;
 8002d0c:	00a4      	lsls	r4, r4, #2
	left_wheel_cmd = (int32_t) (2*my_rover.linear_vel - my_rover.angular_vel*L)/(2*R*100);
 8002d0e:	f06f 0254 	mvn.w	r2, #84	; 0x54
	my_rover.angular_vel = kp*error_heading;
 8002d12:	61ec      	str	r4, [r5, #28]
	left_wheel_cmd = (int32_t) (2*my_rover.linear_vel - my_rover.angular_vel*L)/(2*R*100);
 8002d14:	fb02 3404 	mla	r4, r2, r4, r3
 8002d18:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002d1c:	fb94 f3f2 	sdiv	r3, r4, r2
	right_wheel_cmd = (int32_t) (2*my_rover.linear_vel + my_rover.angular_vel*L)/(2*R*100);
 8002d20:	fb01 4400 	mla	r4, r1, r0, r4
	if (left_wheel_cmd > 0)
 8002d24:	2b00      	cmp	r3, #0
	right_wheel_cmd = (int32_t) (2*my_rover.linear_vel + my_rover.angular_vel*L)/(2*R*100);
 8002d26:	fb94 f4f2 	sdiv	r4, r4, r2
 8002d2a:	4a1e      	ldr	r2, [pc, #120]	; (8002da4 <calculate_new_speed+0x1c4>)
		wheel_dir1 = 1;
 8002d2c:	bfcc      	ite	gt
 8002d2e:	2101      	movgt	r1, #1
		wheel_dir1 = -1;
 8002d30:	f04f 31ff 	movle.w	r1, #4294967295	; 0xffffffff
 8002d34:	6011      	str	r1, [r2, #0]
	if (right_wheel_cmd > 0)
 8002d36:	2c00      	cmp	r4, #0
 8002d38:	4a1b      	ldr	r2, [pc, #108]	; (8002da8 <calculate_new_speed+0x1c8>)
		wheel_dir2 = 1;
 8002d3a:	bfcc      	ite	gt
 8002d3c:	2101      	movgt	r1, #1
		wheel_dir2 = -1;
 8002d3e:	f04f 31ff 	movle.w	r1, #4294967295	; 0xffffffff
	my_rover.trg_wheel_spd1 = (int32_t) abs(left_wheel_cmd*(270)/(3.1415*R));
 8002d42:	f44f 7687 	mov.w	r6, #270	; 0x10e
		wheel_dir2 = -1;
 8002d46:	6011      	str	r1, [r2, #0]
	my_rover.trg_wheel_spd1 = (int32_t) abs(left_wheel_cmd*(270)/(3.1415*R));
 8002d48:	fb06 f003 	mul.w	r0, r6, r3
 8002d4c:	f7fd fbf2 	bl	8000534 <__aeabi_i2d>
 8002d50:	a30f      	add	r3, pc, #60	; (adr r3, 8002d90 <calculate_new_speed+0x1b0>)
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	f7fd fd7d 	bl	8000854 <__aeabi_ddiv>
 8002d5a:	f7fd ff01 	bl	8000b60 <__aeabi_d2iz>
 8002d5e:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8002d62:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8002d66:	616b      	str	r3, [r5, #20]
	my_rover.trg_wheel_spd2 = (int32_t) abs(right_wheel_cmd*(270)/(3.1415*R));
 8002d68:	fb06 f004 	mul.w	r0, r6, r4
 8002d6c:	f7fd fbe2 	bl	8000534 <__aeabi_i2d>
 8002d70:	a307      	add	r3, pc, #28	; (adr r3, 8002d90 <calculate_new_speed+0x1b0>)
 8002d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d76:	f7fd fd6d 	bl	8000854 <__aeabi_ddiv>
 8002d7a:	f7fd fef1 	bl	8000b60 <__aeabi_d2iz>
 8002d7e:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8002d82:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8002d86:	61ab      	str	r3, [r5, #24]
 8002d88:	e74a      	b.n	8002c20 <calculate_new_speed+0x40>
 8002d8a:	bf00      	nop
 8002d8c:	f3af 8000 	nop.w
 8002d90:	70a3d70b 	.word	0x70a3d70b
 8002d94:	405f6a3d 	.word	0x405f6a3d
 8002d98:	20000008 	.word	0x20000008
 8002d9c:	40590000 	.word	0x40590000
 8002da0:	000109a0 	.word	0x000109a0
 8002da4:	2000002c 	.word	0x2000002c
 8002da8:	20000030 	.word	0x20000030

08002dac <HAL_TIM_OC_DelayElapsedCallback>:
{
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((htim->Instance == TIM4) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) && give_command == 1)
 8002dae:	6802      	ldr	r2, [r0, #0]
 8002db0:	4b26      	ldr	r3, [pc, #152]	; (8002e4c <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d149      	bne.n	8002e4a <HAL_TIM_OC_DelayElapsedCallback+0x9e>
 8002db6:	7f03      	ldrb	r3, [r0, #28]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d146      	bne.n	8002e4a <HAL_TIM_OC_DelayElapsedCallback+0x9e>
 8002dbc:	4b24      	ldr	r3, [pc, #144]	; (8002e50 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002dbe:	681e      	ldr	r6, [r3, #0]
 8002dc0:	2e01      	cmp	r6, #1
 8002dc2:	d142      	bne.n	8002e4a <HAL_TIM_OC_DelayElapsedCallback+0x9e>
		HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8002dc4:	4823      	ldr	r0, [pc, #140]	; (8002e54 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
		n_pulse1 = input_capture1 - input_capture_prev1;
 8002dc6:	4c24      	ldr	r4, [pc, #144]	; (8002e58 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
		n_pulse2 = input_capture2 - input_capture_prev2;
 8002dc8:	4d24      	ldr	r5, [pc, #144]	; (8002e5c <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
		returned_pwm1 = pid_controller_wheels(n_pulse1, my_rover.trg_wheel_spd1, 1);
 8002dca:	4f25      	ldr	r7, [pc, #148]	; (8002e60 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
		HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8002dcc:	2120      	movs	r1, #32
 8002dce:	f7fe fa5c 	bl	800128a <HAL_GPIO_TogglePin>
		n_pulse1 = input_capture1 - input_capture_prev1;
 8002dd2:	4a24      	ldr	r2, [pc, #144]	; (8002e64 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8002dd4:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <HAL_TIM_OC_DelayElapsedCallback+0xbc>)
 8002dd6:	6819      	ldr	r1, [r3, #0]
 8002dd8:	6813      	ldr	r3, [r2, #0]
		input_capture_prev1 = input_capture1;
 8002dda:	6011      	str	r1, [r2, #0]
		n_pulse1 = input_capture1 - input_capture_prev1;
 8002ddc:	1acb      	subs	r3, r1, r3
		n_pulse2 = input_capture2 - input_capture_prev2;
 8002dde:	4a23      	ldr	r2, [pc, #140]	; (8002e6c <HAL_TIM_OC_DelayElapsedCallback+0xc0>)
		n_pulse1 = input_capture1 - input_capture_prev1;
 8002de0:	6023      	str	r3, [r4, #0]
		n_pulse2 = input_capture2 - input_capture_prev2;
 8002de2:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <HAL_TIM_OC_DelayElapsedCallback+0xc4>)
 8002de4:	6819      	ldr	r1, [r3, #0]
 8002de6:	6813      	ldr	r3, [r2, #0]
		input_capture_prev2 = input_capture2;
 8002de8:	6011      	str	r1, [r2, #0]
		n_pulse2 = input_capture2 - input_capture_prev2;
 8002dea:	1acb      	subs	r3, r1, r3
 8002dec:	602b      	str	r3, [r5, #0]
		 update_my_position();
 8002dee:	f7ff fdf7 	bl	80029e0 <update_my_position>
		 calculate_new_speed();
 8002df2:	f7ff fef5 	bl	8002be0 <calculate_new_speed>
		returned_pwm1 = pid_controller_wheels(n_pulse1, my_rover.trg_wheel_spd1, 1);
 8002df6:	4632      	mov	r2, r6
 8002df8:	6979      	ldr	r1, [r7, #20]
 8002dfa:	6820      	ldr	r0, [r4, #0]
 8002dfc:	4c1d      	ldr	r4, [pc, #116]	; (8002e74 <HAL_TIM_OC_DelayElapsedCallback+0xc8>)
 8002dfe:	f7ff fdbb 	bl	8002978 <pid_controller_wheels>
		returned_pwm2 = pid_controller_wheels(n_pulse2, my_rover.trg_wheel_spd2, 2);
 8002e02:	2202      	movs	r2, #2
		returned_pwm1 = pid_controller_wheels(n_pulse1, my_rover.trg_wheel_spd1, 1);
 8002e04:	6020      	str	r0, [r4, #0]
		returned_pwm2 = pid_controller_wheels(n_pulse2, my_rover.trg_wheel_spd2, 2);
 8002e06:	69b9      	ldr	r1, [r7, #24]
 8002e08:	6828      	ldr	r0, [r5, #0]
 8002e0a:	4d1b      	ldr	r5, [pc, #108]	; (8002e78 <HAL_TIM_OC_DelayElapsedCallback+0xcc>)
 8002e0c:	f7ff fdb4 	bl	8002978 <pid_controller_wheels>
		if (wheel_dir1 == 1) // Pin C7
 8002e10:	4a1a      	ldr	r2, [pc, #104]	; (8002e7c <HAL_TIM_OC_DelayElapsedCallback+0xd0>)
		returned_pwm2 = pid_controller_wheels(n_pulse2, my_rover.trg_wheel_spd2, 2);
 8002e12:	6028      	str	r0, [r5, #0]
		if (wheel_dir1 == 1) // Pin C7
 8002e14:	6812      	ldr	r2, [r2, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 8002e16:	481a      	ldr	r0, [pc, #104]	; (8002e80 <HAL_TIM_OC_DelayElapsedCallback+0xd4>)
		if (wheel_dir1 == 1) // Pin C7
 8002e18:	2a01      	cmp	r2, #1
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2200      	moveq	r2, #0
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 8002e1e:	4632      	movne	r2, r6
 8002e20:	2180      	movs	r1, #128	; 0x80
 8002e22:	f7fe fa2d 	bl	8001280 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, returned_pwm1);
 8002e26:	4b17      	ldr	r3, [pc, #92]	; (8002e84 <HAL_TIM_OC_DelayElapsedCallback+0xd8>)
 8002e28:	6821      	ldr	r1, [r4, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8002e2c:	4809      	ldr	r0, [pc, #36]	; (8002e54 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, returned_pwm1);
 8002e2e:	6351      	str	r1, [r2, #52]	; 0x34
		if (wheel_dir2 == 1) // Pin A9
 8002e30:	4a15      	ldr	r2, [pc, #84]	; (8002e88 <HAL_TIM_OC_DelayElapsedCallback+0xdc>)
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	461c      	mov	r4, r3
 8002e36:	2a01      	cmp	r2, #1
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8002e38:	bf18      	it	ne
 8002e3a:	2200      	movne	r2, #0
 8002e3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e40:	f7fe fa1e 	bl	8001280 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, returned_pwm2);
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	682a      	ldr	r2, [r5, #0]
 8002e48:	639a      	str	r2, [r3, #56]	; 0x38
 8002e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e4c:	40000800 	.word	0x40000800
 8002e50:	20000230 	.word	0x20000230
 8002e54:	40020000 	.word	0x40020000
 8002e58:	2000024c 	.word	0x2000024c
 8002e5c:	20000250 	.word	0x20000250
 8002e60:	20000008 	.word	0x20000008
 8002e64:	2000023c 	.word	0x2000023c
 8002e68:	20000234 	.word	0x20000234
 8002e6c:	20000240 	.word	0x20000240
 8002e70:	20000238 	.word	0x20000238
 8002e74:	20000254 	.word	0x20000254
 8002e78:	20000258 	.word	0x20000258
 8002e7c:	2000002c 	.word	0x2000002c
 8002e80:	40020800 	.word	0x40020800
 8002e84:	200002ac 	.word	0x200002ac
 8002e88:	20000030 	.word	0x20000030

08002e8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e8c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <HAL_MspInit+0x3c>)
 8002e90:	2100      	movs	r1, #0
 8002e92:	9100      	str	r1, [sp, #0]
 8002e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e9a:	645a      	str	r2, [r3, #68]	; 0x44
 8002e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e9e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002ea2:	9200      	str	r2, [sp, #0]
 8002ea4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ea6:	9101      	str	r1, [sp, #4]
 8002ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eaa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002eb8:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eba:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ebc:	f7fe f8a0 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ec0:	b003      	add	sp, #12
 8002ec2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800

08002ecc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002ecc:	b510      	push	{r4, lr}
 8002ece:	4604      	mov	r4, r0
 8002ed0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed2:	2214      	movs	r2, #20
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	a803      	add	r0, sp, #12
 8002ed8:	f000 f978 	bl	80031cc <memset>
  if(htim_ic->Instance==TIM2)
 8002edc:	6823      	ldr	r3, [r4, #0]
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d128      	bne.n	8002f36 <HAL_TIM_IC_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ee4:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002ee8:	2400      	movs	r4, #0
 8002eea:	9401      	str	r4, [sp, #4]
 8002eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eee:	4813      	ldr	r0, [pc, #76]	; (8002f3c <HAL_TIM_IC_MspInit+0x70>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ef0:	f042 0201 	orr.w	r2, r2, #1
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ef8:	f002 0201 	and.w	r2, r2, #1
 8002efc:	9201      	str	r2, [sp, #4]
 8002efe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f00:	9402      	str	r4, [sp, #8]
 8002f02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f04:	f042 0201 	orr.w	r2, r2, #1
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	9302      	str	r3, [sp, #8]
 8002f12:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f14:	2303      	movs	r3, #3
 8002f16:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f22:	f7fe f8d7 	bl	80010d4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f26:	201c      	movs	r0, #28
 8002f28:	4622      	mov	r2, r4
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	f7fe f87a 	bl	8001024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f30:	201c      	movs	r0, #28
 8002f32:	f7fe f8ab 	bl	800108c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f36:	b008      	add	sp, #32
 8002f38:	bd10      	pop	{r4, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40020000 	.word	0x40020000

08002f40 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8002f40:	6802      	ldr	r2, [r0, #0]
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <HAL_TIM_PWM_MspInit+0x28>)
 8002f44:	429a      	cmp	r2, r3
{
 8002f46:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 8002f48:	d10b      	bne.n	8002f62 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <HAL_TIM_PWM_MspInit+0x2c>)
 8002f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f52:	f042 0202 	orr.w	r2, r2, #2
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f62:	b002      	add	sp, #8
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40000400 	.word	0x40000400
 8002f6c:	40023800 	.word	0x40023800

08002f70 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002f70:	b507      	push	{r0, r1, r2, lr}
  if(htim_oc->Instance==TIM4)
 8002f72:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <HAL_TIM_OC_MspInit+0x38>)
 8002f74:	6802      	ldr	r2, [r0, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d113      	bne.n	8002fa2 <HAL_TIM_OC_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8002f80:	9201      	str	r2, [sp, #4]
 8002f82:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002f84:	f041 0104 	orr.w	r1, r1, #4
 8002f88:	6419      	str	r1, [r3, #64]	; 0x40
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	9301      	str	r3, [sp, #4]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002f92:	201e      	movs	r0, #30
 8002f94:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f96:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002f98:	f7fe f844 	bl	8001024 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f9c:	201e      	movs	r0, #30
 8002f9e:	f7fe f875 	bl	800108c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002fa2:	b003      	add	sp, #12
 8002fa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fa8:	40000800 	.word	0x40000800

08002fac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fac:	b510      	push	{r4, lr}
 8002fae:	4604      	mov	r4, r0
 8002fb0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb2:	2214      	movs	r2, #20
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	a801      	add	r0, sp, #4
 8002fb8:	f000 f908 	bl	80031cc <memset>
  if(htim->Instance==TIM3)
 8002fbc:	6822      	ldr	r2, [r4, #0]
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	; (8002ff4 <HAL_TIM_MspPostInit+0x48>)
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d114      	bne.n	8002fee <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_TIM_MspPostInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fca:	480c      	ldr	r0, [pc, #48]	; (8002ffc <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fde:	23c0      	movs	r3, #192	; 0xc0
 8002fe0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fe8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fea:	f7fe f873 	bl	80010d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002fee:	b006      	add	sp, #24
 8002ff0:	bd10      	pop	{r4, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40000400 	.word	0x40000400
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40020000 	.word	0x40020000

08003000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003000:	b510      	push	{r4, lr}
 8003002:	4604      	mov	r4, r0
 8003004:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003006:	2214      	movs	r2, #20
 8003008:	2100      	movs	r1, #0
 800300a:	a803      	add	r0, sp, #12
 800300c:	f000 f8de 	bl	80031cc <memset>
  if(huart->Instance==USART2)
 8003010:	6822      	ldr	r2, [r4, #0]
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <HAL_UART_MspInit+0x68>)
 8003014:	429a      	cmp	r2, r3
 8003016:	d124      	bne.n	8003062 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003018:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800301c:	2100      	movs	r1, #0
 800301e:	9101      	str	r1, [sp, #4]
 8003020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003022:	4812      	ldr	r0, [pc, #72]	; (800306c <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003024:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003028:	641a      	str	r2, [r3, #64]	; 0x40
 800302a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800302c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003030:	9201      	str	r2, [sp, #4]
 8003032:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003034:	9102      	str	r1, [sp, #8]
 8003036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003038:	f042 0201 	orr.w	r2, r2, #1
 800303c:	631a      	str	r2, [r3, #48]	; 0x30
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	9302      	str	r3, [sp, #8]
 8003046:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003048:	230c      	movs	r3, #12
 800304a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304c:	2302      	movs	r3, #2
 800304e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003050:	2301      	movs	r3, #1
 8003052:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003054:	2303      	movs	r3, #3
 8003056:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003058:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800305a:	2307      	movs	r3, #7
 800305c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800305e:	f7fe f839 	bl	80010d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003062:	b008      	add	sp, #32
 8003064:	bd10      	pop	{r4, pc}
 8003066:	bf00      	nop
 8003068:	40004400 	.word	0x40004400
 800306c:	40020000 	.word	0x40020000

08003070 <NMI_Handler>:
 8003070:	4770      	bx	lr

08003072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003072:	e7fe      	b.n	8003072 <HardFault_Handler>

08003074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003074:	e7fe      	b.n	8003074 <MemManage_Handler>

08003076 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003076:	e7fe      	b.n	8003076 <BusFault_Handler>

08003078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003078:	e7fe      	b.n	8003078 <UsageFault_Handler>

0800307a <SVC_Handler>:
 800307a:	4770      	bx	lr

0800307c <DebugMon_Handler>:
 800307c:	4770      	bx	lr

0800307e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800307e:	4770      	bx	lr

08003080 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003080:	f7fd bfac 	b.w	8000fdc <HAL_IncTick>

08003084 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003084:	4801      	ldr	r0, [pc, #4]	; (800308c <TIM2_IRQHandler+0x8>)
 8003086:	f7fe bbe8 	b.w	800185a <HAL_TIM_IRQHandler>
 800308a:	bf00      	nop
 800308c:	200002ec 	.word	0x200002ec

08003090 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003090:	4801      	ldr	r0, [pc, #4]	; (8003098 <TIM4_IRQHandler+0x8>)
 8003092:	f7fe bbe2 	b.w	800185a <HAL_TIM_IRQHandler>
 8003096:	bf00      	nop
 8003098:	2000026c 	.word	0x2000026c

0800309c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800309c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <_sbrk+0x2c>)
 80030a0:	6819      	ldr	r1, [r3, #0]
{
 80030a2:	4602      	mov	r2, r0
	if (heap_end == 0)
 80030a4:	b909      	cbnz	r1, 80030aa <_sbrk+0xe>
		heap_end = &end;
 80030a6:	4909      	ldr	r1, [pc, #36]	; (80030cc <_sbrk+0x30>)
 80030a8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80030aa:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80030ac:	4669      	mov	r1, sp
 80030ae:	4402      	add	r2, r0
 80030b0:	428a      	cmp	r2, r1
 80030b2:	d906      	bls.n	80030c2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80030b4:	f000 f860 	bl	8003178 <__errno>
 80030b8:	230c      	movs	r3, #12
 80030ba:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030c0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80030c2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80030c4:	bd08      	pop	{r3, pc}
 80030c6:	bf00      	nop
 80030c8:	2000025c 	.word	0x2000025c
 80030cc:	20000370 	.word	0x20000370

080030d0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030d0:	490f      	ldr	r1, [pc, #60]	; (8003110 <SystemInit+0x40>)
 80030d2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80030d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <SystemInit+0x44>)
 80030e0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80030e2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80030e4:	f042 0201 	orr.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80030ea:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80030f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030f6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80030f8:	4a07      	ldr	r2, [pc, #28]	; (8003118 <SystemInit+0x48>)
 80030fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003102:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003104:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003106:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800310a:	608b      	str	r3, [r1, #8]
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	e000ed00 	.word	0xe000ed00
 8003114:	40023800 	.word	0x40023800
 8003118:	24003010 	.word	0x24003010

0800311c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800311c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003154 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003120:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003122:	e003      	b.n	800312c <LoopCopyDataInit>

08003124 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003126:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003128:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800312a:	3104      	adds	r1, #4

0800312c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800312c:	480b      	ldr	r0, [pc, #44]	; (800315c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800312e:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003130:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003132:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003134:	d3f6      	bcc.n	8003124 <CopyDataInit>
  ldr  r2, =_sbss
 8003136:	4a0b      	ldr	r2, [pc, #44]	; (8003164 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003138:	e002      	b.n	8003140 <LoopFillZerobss>

0800313a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800313a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800313c:	f842 3b04 	str.w	r3, [r2], #4

08003140 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003140:	4b09      	ldr	r3, [pc, #36]	; (8003168 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003142:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003144:	d3f9      	bcc.n	800313a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003146:	f7ff ffc3 	bl	80030d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800314a:	f000 f81b 	bl	8003184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800314e:	f7ff faed 	bl	800272c <main>
  bx  lr    
 8003152:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003154:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003158:	08005928 	.word	0x08005928
  ldr  r0, =_sdata
 800315c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003160:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 8003164:	2000020c 	.word	0x2000020c
  ldr  r3, = _ebss
 8003168:	20000370 	.word	0x20000370

0800316c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800316c:	e7fe      	b.n	800316c <ADC_IRQHandler>

0800316e <atoi>:
 800316e:	220a      	movs	r2, #10
 8003170:	2100      	movs	r1, #0
 8003172:	f000 b8d7 	b.w	8003324 <strtol>
	...

08003178 <__errno>:
 8003178:	4b01      	ldr	r3, [pc, #4]	; (8003180 <__errno+0x8>)
 800317a:	6818      	ldr	r0, [r3, #0]
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20000038 	.word	0x20000038

08003184 <__libc_init_array>:
 8003184:	b570      	push	{r4, r5, r6, lr}
 8003186:	4e0d      	ldr	r6, [pc, #52]	; (80031bc <__libc_init_array+0x38>)
 8003188:	4c0d      	ldr	r4, [pc, #52]	; (80031c0 <__libc_init_array+0x3c>)
 800318a:	1ba4      	subs	r4, r4, r6
 800318c:	10a4      	asrs	r4, r4, #2
 800318e:	2500      	movs	r5, #0
 8003190:	42a5      	cmp	r5, r4
 8003192:	d109      	bne.n	80031a8 <__libc_init_array+0x24>
 8003194:	4e0b      	ldr	r6, [pc, #44]	; (80031c4 <__libc_init_array+0x40>)
 8003196:	4c0c      	ldr	r4, [pc, #48]	; (80031c8 <__libc_init_array+0x44>)
 8003198:	f002 f912 	bl	80053c0 <_init>
 800319c:	1ba4      	subs	r4, r4, r6
 800319e:	10a4      	asrs	r4, r4, #2
 80031a0:	2500      	movs	r5, #0
 80031a2:	42a5      	cmp	r5, r4
 80031a4:	d105      	bne.n	80031b2 <__libc_init_array+0x2e>
 80031a6:	bd70      	pop	{r4, r5, r6, pc}
 80031a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031ac:	4798      	blx	r3
 80031ae:	3501      	adds	r5, #1
 80031b0:	e7ee      	b.n	8003190 <__libc_init_array+0xc>
 80031b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031b6:	4798      	blx	r3
 80031b8:	3501      	adds	r5, #1
 80031ba:	e7f2      	b.n	80031a2 <__libc_init_array+0x1e>
 80031bc:	08005920 	.word	0x08005920
 80031c0:	08005920 	.word	0x08005920
 80031c4:	08005920 	.word	0x08005920
 80031c8:	08005924 	.word	0x08005924

080031cc <memset>:
 80031cc:	4402      	add	r2, r0
 80031ce:	4603      	mov	r3, r0
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d100      	bne.n	80031d6 <memset+0xa>
 80031d4:	4770      	bx	lr
 80031d6:	f803 1b01 	strb.w	r1, [r3], #1
 80031da:	e7f9      	b.n	80031d0 <memset+0x4>

080031dc <siprintf>:
 80031dc:	b40e      	push	{r1, r2, r3}
 80031de:	b500      	push	{lr}
 80031e0:	b09c      	sub	sp, #112	; 0x70
 80031e2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80031e6:	ab1d      	add	r3, sp, #116	; 0x74
 80031e8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80031ec:	9002      	str	r0, [sp, #8]
 80031ee:	9006      	str	r0, [sp, #24]
 80031f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031f4:	480a      	ldr	r0, [pc, #40]	; (8003220 <siprintf+0x44>)
 80031f6:	9104      	str	r1, [sp, #16]
 80031f8:	9107      	str	r1, [sp, #28]
 80031fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80031fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8003202:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003206:	6800      	ldr	r0, [r0, #0]
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	a902      	add	r1, sp, #8
 800320c:	f000 f910 	bl	8003430 <_svfiprintf_r>
 8003210:	9b02      	ldr	r3, [sp, #8]
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
 8003216:	b01c      	add	sp, #112	; 0x70
 8003218:	f85d eb04 	ldr.w	lr, [sp], #4
 800321c:	b003      	add	sp, #12
 800321e:	4770      	bx	lr
 8003220:	20000038 	.word	0x20000038

08003224 <_strtol_l.isra.0>:
 8003224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003228:	4680      	mov	r8, r0
 800322a:	4689      	mov	r9, r1
 800322c:	4692      	mov	sl, r2
 800322e:	461f      	mov	r7, r3
 8003230:	468b      	mov	fp, r1
 8003232:	465d      	mov	r5, fp
 8003234:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003236:	f815 4b01 	ldrb.w	r4, [r5], #1
 800323a:	f000 f889 	bl	8003350 <__locale_ctype_ptr_l>
 800323e:	4420      	add	r0, r4
 8003240:	7846      	ldrb	r6, [r0, #1]
 8003242:	f016 0608 	ands.w	r6, r6, #8
 8003246:	d10b      	bne.n	8003260 <_strtol_l.isra.0+0x3c>
 8003248:	2c2d      	cmp	r4, #45	; 0x2d
 800324a:	d10b      	bne.n	8003264 <_strtol_l.isra.0+0x40>
 800324c:	782c      	ldrb	r4, [r5, #0]
 800324e:	2601      	movs	r6, #1
 8003250:	f10b 0502 	add.w	r5, fp, #2
 8003254:	b167      	cbz	r7, 8003270 <_strtol_l.isra.0+0x4c>
 8003256:	2f10      	cmp	r7, #16
 8003258:	d114      	bne.n	8003284 <_strtol_l.isra.0+0x60>
 800325a:	2c30      	cmp	r4, #48	; 0x30
 800325c:	d00a      	beq.n	8003274 <_strtol_l.isra.0+0x50>
 800325e:	e011      	b.n	8003284 <_strtol_l.isra.0+0x60>
 8003260:	46ab      	mov	fp, r5
 8003262:	e7e6      	b.n	8003232 <_strtol_l.isra.0+0xe>
 8003264:	2c2b      	cmp	r4, #43	; 0x2b
 8003266:	bf04      	itt	eq
 8003268:	782c      	ldrbeq	r4, [r5, #0]
 800326a:	f10b 0502 	addeq.w	r5, fp, #2
 800326e:	e7f1      	b.n	8003254 <_strtol_l.isra.0+0x30>
 8003270:	2c30      	cmp	r4, #48	; 0x30
 8003272:	d127      	bne.n	80032c4 <_strtol_l.isra.0+0xa0>
 8003274:	782b      	ldrb	r3, [r5, #0]
 8003276:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800327a:	2b58      	cmp	r3, #88	; 0x58
 800327c:	d14b      	bne.n	8003316 <_strtol_l.isra.0+0xf2>
 800327e:	786c      	ldrb	r4, [r5, #1]
 8003280:	2710      	movs	r7, #16
 8003282:	3502      	adds	r5, #2
 8003284:	2e00      	cmp	r6, #0
 8003286:	bf0c      	ite	eq
 8003288:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800328c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003290:	2200      	movs	r2, #0
 8003292:	fbb1 fef7 	udiv	lr, r1, r7
 8003296:	4610      	mov	r0, r2
 8003298:	fb07 1c1e 	mls	ip, r7, lr, r1
 800329c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80032a0:	2b09      	cmp	r3, #9
 80032a2:	d811      	bhi.n	80032c8 <_strtol_l.isra.0+0xa4>
 80032a4:	461c      	mov	r4, r3
 80032a6:	42a7      	cmp	r7, r4
 80032a8:	dd1d      	ble.n	80032e6 <_strtol_l.isra.0+0xc2>
 80032aa:	1c53      	adds	r3, r2, #1
 80032ac:	d007      	beq.n	80032be <_strtol_l.isra.0+0x9a>
 80032ae:	4586      	cmp	lr, r0
 80032b0:	d316      	bcc.n	80032e0 <_strtol_l.isra.0+0xbc>
 80032b2:	d101      	bne.n	80032b8 <_strtol_l.isra.0+0x94>
 80032b4:	45a4      	cmp	ip, r4
 80032b6:	db13      	blt.n	80032e0 <_strtol_l.isra.0+0xbc>
 80032b8:	fb00 4007 	mla	r0, r0, r7, r4
 80032bc:	2201      	movs	r2, #1
 80032be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80032c2:	e7eb      	b.n	800329c <_strtol_l.isra.0+0x78>
 80032c4:	270a      	movs	r7, #10
 80032c6:	e7dd      	b.n	8003284 <_strtol_l.isra.0+0x60>
 80032c8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80032cc:	2b19      	cmp	r3, #25
 80032ce:	d801      	bhi.n	80032d4 <_strtol_l.isra.0+0xb0>
 80032d0:	3c37      	subs	r4, #55	; 0x37
 80032d2:	e7e8      	b.n	80032a6 <_strtol_l.isra.0+0x82>
 80032d4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80032d8:	2b19      	cmp	r3, #25
 80032da:	d804      	bhi.n	80032e6 <_strtol_l.isra.0+0xc2>
 80032dc:	3c57      	subs	r4, #87	; 0x57
 80032de:	e7e2      	b.n	80032a6 <_strtol_l.isra.0+0x82>
 80032e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032e4:	e7eb      	b.n	80032be <_strtol_l.isra.0+0x9a>
 80032e6:	1c53      	adds	r3, r2, #1
 80032e8:	d108      	bne.n	80032fc <_strtol_l.isra.0+0xd8>
 80032ea:	2322      	movs	r3, #34	; 0x22
 80032ec:	f8c8 3000 	str.w	r3, [r8]
 80032f0:	4608      	mov	r0, r1
 80032f2:	f1ba 0f00 	cmp.w	sl, #0
 80032f6:	d107      	bne.n	8003308 <_strtol_l.isra.0+0xe4>
 80032f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032fc:	b106      	cbz	r6, 8003300 <_strtol_l.isra.0+0xdc>
 80032fe:	4240      	negs	r0, r0
 8003300:	f1ba 0f00 	cmp.w	sl, #0
 8003304:	d00c      	beq.n	8003320 <_strtol_l.isra.0+0xfc>
 8003306:	b122      	cbz	r2, 8003312 <_strtol_l.isra.0+0xee>
 8003308:	3d01      	subs	r5, #1
 800330a:	f8ca 5000 	str.w	r5, [sl]
 800330e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003312:	464d      	mov	r5, r9
 8003314:	e7f9      	b.n	800330a <_strtol_l.isra.0+0xe6>
 8003316:	2430      	movs	r4, #48	; 0x30
 8003318:	2f00      	cmp	r7, #0
 800331a:	d1b3      	bne.n	8003284 <_strtol_l.isra.0+0x60>
 800331c:	2708      	movs	r7, #8
 800331e:	e7b1      	b.n	8003284 <_strtol_l.isra.0+0x60>
 8003320:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003324 <strtol>:
 8003324:	4b08      	ldr	r3, [pc, #32]	; (8003348 <strtol+0x24>)
 8003326:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003328:	681c      	ldr	r4, [r3, #0]
 800332a:	4d08      	ldr	r5, [pc, #32]	; (800334c <strtol+0x28>)
 800332c:	6a23      	ldr	r3, [r4, #32]
 800332e:	2b00      	cmp	r3, #0
 8003330:	bf08      	it	eq
 8003332:	462b      	moveq	r3, r5
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	4613      	mov	r3, r2
 8003338:	460a      	mov	r2, r1
 800333a:	4601      	mov	r1, r0
 800333c:	4620      	mov	r0, r4
 800333e:	f7ff ff71 	bl	8003224 <_strtol_l.isra.0>
 8003342:	b003      	add	sp, #12
 8003344:	bd30      	pop	{r4, r5, pc}
 8003346:	bf00      	nop
 8003348:	20000038 	.word	0x20000038
 800334c:	2000009c 	.word	0x2000009c

08003350 <__locale_ctype_ptr_l>:
 8003350:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003354:	4770      	bx	lr

08003356 <__ascii_mbtowc>:
 8003356:	b082      	sub	sp, #8
 8003358:	b901      	cbnz	r1, 800335c <__ascii_mbtowc+0x6>
 800335a:	a901      	add	r1, sp, #4
 800335c:	b142      	cbz	r2, 8003370 <__ascii_mbtowc+0x1a>
 800335e:	b14b      	cbz	r3, 8003374 <__ascii_mbtowc+0x1e>
 8003360:	7813      	ldrb	r3, [r2, #0]
 8003362:	600b      	str	r3, [r1, #0]
 8003364:	7812      	ldrb	r2, [r2, #0]
 8003366:	1c10      	adds	r0, r2, #0
 8003368:	bf18      	it	ne
 800336a:	2001      	movne	r0, #1
 800336c:	b002      	add	sp, #8
 800336e:	4770      	bx	lr
 8003370:	4610      	mov	r0, r2
 8003372:	e7fb      	b.n	800336c <__ascii_mbtowc+0x16>
 8003374:	f06f 0001 	mvn.w	r0, #1
 8003378:	e7f8      	b.n	800336c <__ascii_mbtowc+0x16>

0800337a <__ssputs_r>:
 800337a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800337e:	688e      	ldr	r6, [r1, #8]
 8003380:	429e      	cmp	r6, r3
 8003382:	4682      	mov	sl, r0
 8003384:	460c      	mov	r4, r1
 8003386:	4691      	mov	r9, r2
 8003388:	4698      	mov	r8, r3
 800338a:	d835      	bhi.n	80033f8 <__ssputs_r+0x7e>
 800338c:	898a      	ldrh	r2, [r1, #12]
 800338e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003392:	d031      	beq.n	80033f8 <__ssputs_r+0x7e>
 8003394:	6825      	ldr	r5, [r4, #0]
 8003396:	6909      	ldr	r1, [r1, #16]
 8003398:	1a6f      	subs	r7, r5, r1
 800339a:	6965      	ldr	r5, [r4, #20]
 800339c:	2302      	movs	r3, #2
 800339e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033a2:	fb95 f5f3 	sdiv	r5, r5, r3
 80033a6:	f108 0301 	add.w	r3, r8, #1
 80033aa:	443b      	add	r3, r7
 80033ac:	429d      	cmp	r5, r3
 80033ae:	bf38      	it	cc
 80033b0:	461d      	movcc	r5, r3
 80033b2:	0553      	lsls	r3, r2, #21
 80033b4:	d531      	bpl.n	800341a <__ssputs_r+0xa0>
 80033b6:	4629      	mov	r1, r5
 80033b8:	f000 fb44 	bl	8003a44 <_malloc_r>
 80033bc:	4606      	mov	r6, r0
 80033be:	b950      	cbnz	r0, 80033d6 <__ssputs_r+0x5c>
 80033c0:	230c      	movs	r3, #12
 80033c2:	f8ca 3000 	str.w	r3, [sl]
 80033c6:	89a3      	ldrh	r3, [r4, #12]
 80033c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033cc:	81a3      	strh	r3, [r4, #12]
 80033ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033d6:	463a      	mov	r2, r7
 80033d8:	6921      	ldr	r1, [r4, #16]
 80033da:	f000 fac0 	bl	800395e <memcpy>
 80033de:	89a3      	ldrh	r3, [r4, #12]
 80033e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e8:	81a3      	strh	r3, [r4, #12]
 80033ea:	6126      	str	r6, [r4, #16]
 80033ec:	6165      	str	r5, [r4, #20]
 80033ee:	443e      	add	r6, r7
 80033f0:	1bed      	subs	r5, r5, r7
 80033f2:	6026      	str	r6, [r4, #0]
 80033f4:	60a5      	str	r5, [r4, #8]
 80033f6:	4646      	mov	r6, r8
 80033f8:	4546      	cmp	r6, r8
 80033fa:	bf28      	it	cs
 80033fc:	4646      	movcs	r6, r8
 80033fe:	4632      	mov	r2, r6
 8003400:	4649      	mov	r1, r9
 8003402:	6820      	ldr	r0, [r4, #0]
 8003404:	f000 fab6 	bl	8003974 <memmove>
 8003408:	68a3      	ldr	r3, [r4, #8]
 800340a:	1b9b      	subs	r3, r3, r6
 800340c:	60a3      	str	r3, [r4, #8]
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	441e      	add	r6, r3
 8003412:	6026      	str	r6, [r4, #0]
 8003414:	2000      	movs	r0, #0
 8003416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800341a:	462a      	mov	r2, r5
 800341c:	f000 fb70 	bl	8003b00 <_realloc_r>
 8003420:	4606      	mov	r6, r0
 8003422:	2800      	cmp	r0, #0
 8003424:	d1e1      	bne.n	80033ea <__ssputs_r+0x70>
 8003426:	6921      	ldr	r1, [r4, #16]
 8003428:	4650      	mov	r0, sl
 800342a:	f000 fabd 	bl	80039a8 <_free_r>
 800342e:	e7c7      	b.n	80033c0 <__ssputs_r+0x46>

08003430 <_svfiprintf_r>:
 8003430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003434:	b09d      	sub	sp, #116	; 0x74
 8003436:	4680      	mov	r8, r0
 8003438:	9303      	str	r3, [sp, #12]
 800343a:	898b      	ldrh	r3, [r1, #12]
 800343c:	061c      	lsls	r4, r3, #24
 800343e:	460d      	mov	r5, r1
 8003440:	4616      	mov	r6, r2
 8003442:	d50f      	bpl.n	8003464 <_svfiprintf_r+0x34>
 8003444:	690b      	ldr	r3, [r1, #16]
 8003446:	b96b      	cbnz	r3, 8003464 <_svfiprintf_r+0x34>
 8003448:	2140      	movs	r1, #64	; 0x40
 800344a:	f000 fafb 	bl	8003a44 <_malloc_r>
 800344e:	6028      	str	r0, [r5, #0]
 8003450:	6128      	str	r0, [r5, #16]
 8003452:	b928      	cbnz	r0, 8003460 <_svfiprintf_r+0x30>
 8003454:	230c      	movs	r3, #12
 8003456:	f8c8 3000 	str.w	r3, [r8]
 800345a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800345e:	e0c5      	b.n	80035ec <_svfiprintf_r+0x1bc>
 8003460:	2340      	movs	r3, #64	; 0x40
 8003462:	616b      	str	r3, [r5, #20]
 8003464:	2300      	movs	r3, #0
 8003466:	9309      	str	r3, [sp, #36]	; 0x24
 8003468:	2320      	movs	r3, #32
 800346a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800346e:	2330      	movs	r3, #48	; 0x30
 8003470:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003474:	f04f 0b01 	mov.w	fp, #1
 8003478:	4637      	mov	r7, r6
 800347a:	463c      	mov	r4, r7
 800347c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d13c      	bne.n	80034fe <_svfiprintf_r+0xce>
 8003484:	ebb7 0a06 	subs.w	sl, r7, r6
 8003488:	d00b      	beq.n	80034a2 <_svfiprintf_r+0x72>
 800348a:	4653      	mov	r3, sl
 800348c:	4632      	mov	r2, r6
 800348e:	4629      	mov	r1, r5
 8003490:	4640      	mov	r0, r8
 8003492:	f7ff ff72 	bl	800337a <__ssputs_r>
 8003496:	3001      	adds	r0, #1
 8003498:	f000 80a3 	beq.w	80035e2 <_svfiprintf_r+0x1b2>
 800349c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800349e:	4453      	add	r3, sl
 80034a0:	9309      	str	r3, [sp, #36]	; 0x24
 80034a2:	783b      	ldrb	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 809c 	beq.w	80035e2 <_svfiprintf_r+0x1b2>
 80034aa:	2300      	movs	r3, #0
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034b0:	9304      	str	r3, [sp, #16]
 80034b2:	9307      	str	r3, [sp, #28]
 80034b4:	9205      	str	r2, [sp, #20]
 80034b6:	9306      	str	r3, [sp, #24]
 80034b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034bc:	931a      	str	r3, [sp, #104]	; 0x68
 80034be:	2205      	movs	r2, #5
 80034c0:	7821      	ldrb	r1, [r4, #0]
 80034c2:	4850      	ldr	r0, [pc, #320]	; (8003604 <_svfiprintf_r+0x1d4>)
 80034c4:	f7fc fe94 	bl	80001f0 <memchr>
 80034c8:	1c67      	adds	r7, r4, #1
 80034ca:	9b04      	ldr	r3, [sp, #16]
 80034cc:	b9d8      	cbnz	r0, 8003506 <_svfiprintf_r+0xd6>
 80034ce:	06d9      	lsls	r1, r3, #27
 80034d0:	bf44      	itt	mi
 80034d2:	2220      	movmi	r2, #32
 80034d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80034d8:	071a      	lsls	r2, r3, #28
 80034da:	bf44      	itt	mi
 80034dc:	222b      	movmi	r2, #43	; 0x2b
 80034de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80034e2:	7822      	ldrb	r2, [r4, #0]
 80034e4:	2a2a      	cmp	r2, #42	; 0x2a
 80034e6:	d016      	beq.n	8003516 <_svfiprintf_r+0xe6>
 80034e8:	9a07      	ldr	r2, [sp, #28]
 80034ea:	2100      	movs	r1, #0
 80034ec:	200a      	movs	r0, #10
 80034ee:	4627      	mov	r7, r4
 80034f0:	3401      	adds	r4, #1
 80034f2:	783b      	ldrb	r3, [r7, #0]
 80034f4:	3b30      	subs	r3, #48	; 0x30
 80034f6:	2b09      	cmp	r3, #9
 80034f8:	d951      	bls.n	800359e <_svfiprintf_r+0x16e>
 80034fa:	b1c9      	cbz	r1, 8003530 <_svfiprintf_r+0x100>
 80034fc:	e011      	b.n	8003522 <_svfiprintf_r+0xf2>
 80034fe:	2b25      	cmp	r3, #37	; 0x25
 8003500:	d0c0      	beq.n	8003484 <_svfiprintf_r+0x54>
 8003502:	4627      	mov	r7, r4
 8003504:	e7b9      	b.n	800347a <_svfiprintf_r+0x4a>
 8003506:	4a3f      	ldr	r2, [pc, #252]	; (8003604 <_svfiprintf_r+0x1d4>)
 8003508:	1a80      	subs	r0, r0, r2
 800350a:	fa0b f000 	lsl.w	r0, fp, r0
 800350e:	4318      	orrs	r0, r3
 8003510:	9004      	str	r0, [sp, #16]
 8003512:	463c      	mov	r4, r7
 8003514:	e7d3      	b.n	80034be <_svfiprintf_r+0x8e>
 8003516:	9a03      	ldr	r2, [sp, #12]
 8003518:	1d11      	adds	r1, r2, #4
 800351a:	6812      	ldr	r2, [r2, #0]
 800351c:	9103      	str	r1, [sp, #12]
 800351e:	2a00      	cmp	r2, #0
 8003520:	db01      	blt.n	8003526 <_svfiprintf_r+0xf6>
 8003522:	9207      	str	r2, [sp, #28]
 8003524:	e004      	b.n	8003530 <_svfiprintf_r+0x100>
 8003526:	4252      	negs	r2, r2
 8003528:	f043 0302 	orr.w	r3, r3, #2
 800352c:	9207      	str	r2, [sp, #28]
 800352e:	9304      	str	r3, [sp, #16]
 8003530:	783b      	ldrb	r3, [r7, #0]
 8003532:	2b2e      	cmp	r3, #46	; 0x2e
 8003534:	d10e      	bne.n	8003554 <_svfiprintf_r+0x124>
 8003536:	787b      	ldrb	r3, [r7, #1]
 8003538:	2b2a      	cmp	r3, #42	; 0x2a
 800353a:	f107 0101 	add.w	r1, r7, #1
 800353e:	d132      	bne.n	80035a6 <_svfiprintf_r+0x176>
 8003540:	9b03      	ldr	r3, [sp, #12]
 8003542:	1d1a      	adds	r2, r3, #4
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	9203      	str	r2, [sp, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	bfb8      	it	lt
 800354c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003550:	3702      	adds	r7, #2
 8003552:	9305      	str	r3, [sp, #20]
 8003554:	4c2c      	ldr	r4, [pc, #176]	; (8003608 <_svfiprintf_r+0x1d8>)
 8003556:	7839      	ldrb	r1, [r7, #0]
 8003558:	2203      	movs	r2, #3
 800355a:	4620      	mov	r0, r4
 800355c:	f7fc fe48 	bl	80001f0 <memchr>
 8003560:	b138      	cbz	r0, 8003572 <_svfiprintf_r+0x142>
 8003562:	2340      	movs	r3, #64	; 0x40
 8003564:	1b00      	subs	r0, r0, r4
 8003566:	fa03 f000 	lsl.w	r0, r3, r0
 800356a:	9b04      	ldr	r3, [sp, #16]
 800356c:	4303      	orrs	r3, r0
 800356e:	9304      	str	r3, [sp, #16]
 8003570:	3701      	adds	r7, #1
 8003572:	7839      	ldrb	r1, [r7, #0]
 8003574:	4825      	ldr	r0, [pc, #148]	; (800360c <_svfiprintf_r+0x1dc>)
 8003576:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800357a:	2206      	movs	r2, #6
 800357c:	1c7e      	adds	r6, r7, #1
 800357e:	f7fc fe37 	bl	80001f0 <memchr>
 8003582:	2800      	cmp	r0, #0
 8003584:	d035      	beq.n	80035f2 <_svfiprintf_r+0x1c2>
 8003586:	4b22      	ldr	r3, [pc, #136]	; (8003610 <_svfiprintf_r+0x1e0>)
 8003588:	b9fb      	cbnz	r3, 80035ca <_svfiprintf_r+0x19a>
 800358a:	9b03      	ldr	r3, [sp, #12]
 800358c:	3307      	adds	r3, #7
 800358e:	f023 0307 	bic.w	r3, r3, #7
 8003592:	3308      	adds	r3, #8
 8003594:	9303      	str	r3, [sp, #12]
 8003596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003598:	444b      	add	r3, r9
 800359a:	9309      	str	r3, [sp, #36]	; 0x24
 800359c:	e76c      	b.n	8003478 <_svfiprintf_r+0x48>
 800359e:	fb00 3202 	mla	r2, r0, r2, r3
 80035a2:	2101      	movs	r1, #1
 80035a4:	e7a3      	b.n	80034ee <_svfiprintf_r+0xbe>
 80035a6:	2300      	movs	r3, #0
 80035a8:	9305      	str	r3, [sp, #20]
 80035aa:	4618      	mov	r0, r3
 80035ac:	240a      	movs	r4, #10
 80035ae:	460f      	mov	r7, r1
 80035b0:	3101      	adds	r1, #1
 80035b2:	783a      	ldrb	r2, [r7, #0]
 80035b4:	3a30      	subs	r2, #48	; 0x30
 80035b6:	2a09      	cmp	r2, #9
 80035b8:	d903      	bls.n	80035c2 <_svfiprintf_r+0x192>
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0ca      	beq.n	8003554 <_svfiprintf_r+0x124>
 80035be:	9005      	str	r0, [sp, #20]
 80035c0:	e7c8      	b.n	8003554 <_svfiprintf_r+0x124>
 80035c2:	fb04 2000 	mla	r0, r4, r0, r2
 80035c6:	2301      	movs	r3, #1
 80035c8:	e7f1      	b.n	80035ae <_svfiprintf_r+0x17e>
 80035ca:	ab03      	add	r3, sp, #12
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	462a      	mov	r2, r5
 80035d0:	4b10      	ldr	r3, [pc, #64]	; (8003614 <_svfiprintf_r+0x1e4>)
 80035d2:	a904      	add	r1, sp, #16
 80035d4:	4640      	mov	r0, r8
 80035d6:	f3af 8000 	nop.w
 80035da:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80035de:	4681      	mov	r9, r0
 80035e0:	d1d9      	bne.n	8003596 <_svfiprintf_r+0x166>
 80035e2:	89ab      	ldrh	r3, [r5, #12]
 80035e4:	065b      	lsls	r3, r3, #25
 80035e6:	f53f af38 	bmi.w	800345a <_svfiprintf_r+0x2a>
 80035ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035ec:	b01d      	add	sp, #116	; 0x74
 80035ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035f2:	ab03      	add	r3, sp, #12
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	462a      	mov	r2, r5
 80035f8:	4b06      	ldr	r3, [pc, #24]	; (8003614 <_svfiprintf_r+0x1e4>)
 80035fa:	a904      	add	r1, sp, #16
 80035fc:	4640      	mov	r0, r8
 80035fe:	f000 f881 	bl	8003704 <_printf_i>
 8003602:	e7ea      	b.n	80035da <_svfiprintf_r+0x1aa>
 8003604:	080055c0 	.word	0x080055c0
 8003608:	080055c6 	.word	0x080055c6
 800360c:	080055ca 	.word	0x080055ca
 8003610:	00000000 	.word	0x00000000
 8003614:	0800337b 	.word	0x0800337b

08003618 <_printf_common>:
 8003618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800361c:	4691      	mov	r9, r2
 800361e:	461f      	mov	r7, r3
 8003620:	688a      	ldr	r2, [r1, #8]
 8003622:	690b      	ldr	r3, [r1, #16]
 8003624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003628:	4293      	cmp	r3, r2
 800362a:	bfb8      	it	lt
 800362c:	4613      	movlt	r3, r2
 800362e:	f8c9 3000 	str.w	r3, [r9]
 8003632:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003636:	4606      	mov	r6, r0
 8003638:	460c      	mov	r4, r1
 800363a:	b112      	cbz	r2, 8003642 <_printf_common+0x2a>
 800363c:	3301      	adds	r3, #1
 800363e:	f8c9 3000 	str.w	r3, [r9]
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	0699      	lsls	r1, r3, #26
 8003646:	bf42      	ittt	mi
 8003648:	f8d9 3000 	ldrmi.w	r3, [r9]
 800364c:	3302      	addmi	r3, #2
 800364e:	f8c9 3000 	strmi.w	r3, [r9]
 8003652:	6825      	ldr	r5, [r4, #0]
 8003654:	f015 0506 	ands.w	r5, r5, #6
 8003658:	d107      	bne.n	800366a <_printf_common+0x52>
 800365a:	f104 0a19 	add.w	sl, r4, #25
 800365e:	68e3      	ldr	r3, [r4, #12]
 8003660:	f8d9 2000 	ldr.w	r2, [r9]
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	429d      	cmp	r5, r3
 8003668:	db29      	blt.n	80036be <_printf_common+0xa6>
 800366a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800366e:	6822      	ldr	r2, [r4, #0]
 8003670:	3300      	adds	r3, #0
 8003672:	bf18      	it	ne
 8003674:	2301      	movne	r3, #1
 8003676:	0692      	lsls	r2, r2, #26
 8003678:	d42e      	bmi.n	80036d8 <_printf_common+0xc0>
 800367a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800367e:	4639      	mov	r1, r7
 8003680:	4630      	mov	r0, r6
 8003682:	47c0      	blx	r8
 8003684:	3001      	adds	r0, #1
 8003686:	d021      	beq.n	80036cc <_printf_common+0xb4>
 8003688:	6823      	ldr	r3, [r4, #0]
 800368a:	68e5      	ldr	r5, [r4, #12]
 800368c:	f8d9 2000 	ldr.w	r2, [r9]
 8003690:	f003 0306 	and.w	r3, r3, #6
 8003694:	2b04      	cmp	r3, #4
 8003696:	bf08      	it	eq
 8003698:	1aad      	subeq	r5, r5, r2
 800369a:	68a3      	ldr	r3, [r4, #8]
 800369c:	6922      	ldr	r2, [r4, #16]
 800369e:	bf0c      	ite	eq
 80036a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036a4:	2500      	movne	r5, #0
 80036a6:	4293      	cmp	r3, r2
 80036a8:	bfc4      	itt	gt
 80036aa:	1a9b      	subgt	r3, r3, r2
 80036ac:	18ed      	addgt	r5, r5, r3
 80036ae:	f04f 0900 	mov.w	r9, #0
 80036b2:	341a      	adds	r4, #26
 80036b4:	454d      	cmp	r5, r9
 80036b6:	d11b      	bne.n	80036f0 <_printf_common+0xd8>
 80036b8:	2000      	movs	r0, #0
 80036ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036be:	2301      	movs	r3, #1
 80036c0:	4652      	mov	r2, sl
 80036c2:	4639      	mov	r1, r7
 80036c4:	4630      	mov	r0, r6
 80036c6:	47c0      	blx	r8
 80036c8:	3001      	adds	r0, #1
 80036ca:	d103      	bne.n	80036d4 <_printf_common+0xbc>
 80036cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d4:	3501      	adds	r5, #1
 80036d6:	e7c2      	b.n	800365e <_printf_common+0x46>
 80036d8:	18e1      	adds	r1, r4, r3
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	2030      	movs	r0, #48	; 0x30
 80036de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036e2:	4422      	add	r2, r4
 80036e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036ec:	3302      	adds	r3, #2
 80036ee:	e7c4      	b.n	800367a <_printf_common+0x62>
 80036f0:	2301      	movs	r3, #1
 80036f2:	4622      	mov	r2, r4
 80036f4:	4639      	mov	r1, r7
 80036f6:	4630      	mov	r0, r6
 80036f8:	47c0      	blx	r8
 80036fa:	3001      	adds	r0, #1
 80036fc:	d0e6      	beq.n	80036cc <_printf_common+0xb4>
 80036fe:	f109 0901 	add.w	r9, r9, #1
 8003702:	e7d7      	b.n	80036b4 <_printf_common+0x9c>

08003704 <_printf_i>:
 8003704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003708:	4617      	mov	r7, r2
 800370a:	7e0a      	ldrb	r2, [r1, #24]
 800370c:	b085      	sub	sp, #20
 800370e:	2a6e      	cmp	r2, #110	; 0x6e
 8003710:	4698      	mov	r8, r3
 8003712:	4606      	mov	r6, r0
 8003714:	460c      	mov	r4, r1
 8003716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003718:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800371c:	f000 80bc 	beq.w	8003898 <_printf_i+0x194>
 8003720:	d81a      	bhi.n	8003758 <_printf_i+0x54>
 8003722:	2a63      	cmp	r2, #99	; 0x63
 8003724:	d02e      	beq.n	8003784 <_printf_i+0x80>
 8003726:	d80a      	bhi.n	800373e <_printf_i+0x3a>
 8003728:	2a00      	cmp	r2, #0
 800372a:	f000 80c8 	beq.w	80038be <_printf_i+0x1ba>
 800372e:	2a58      	cmp	r2, #88	; 0x58
 8003730:	f000 808a 	beq.w	8003848 <_printf_i+0x144>
 8003734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003738:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800373c:	e02a      	b.n	8003794 <_printf_i+0x90>
 800373e:	2a64      	cmp	r2, #100	; 0x64
 8003740:	d001      	beq.n	8003746 <_printf_i+0x42>
 8003742:	2a69      	cmp	r2, #105	; 0x69
 8003744:	d1f6      	bne.n	8003734 <_printf_i+0x30>
 8003746:	6821      	ldr	r1, [r4, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800374e:	d023      	beq.n	8003798 <_printf_i+0x94>
 8003750:	1d11      	adds	r1, r2, #4
 8003752:	6019      	str	r1, [r3, #0]
 8003754:	6813      	ldr	r3, [r2, #0]
 8003756:	e027      	b.n	80037a8 <_printf_i+0xa4>
 8003758:	2a73      	cmp	r2, #115	; 0x73
 800375a:	f000 80b4 	beq.w	80038c6 <_printf_i+0x1c2>
 800375e:	d808      	bhi.n	8003772 <_printf_i+0x6e>
 8003760:	2a6f      	cmp	r2, #111	; 0x6f
 8003762:	d02a      	beq.n	80037ba <_printf_i+0xb6>
 8003764:	2a70      	cmp	r2, #112	; 0x70
 8003766:	d1e5      	bne.n	8003734 <_printf_i+0x30>
 8003768:	680a      	ldr	r2, [r1, #0]
 800376a:	f042 0220 	orr.w	r2, r2, #32
 800376e:	600a      	str	r2, [r1, #0]
 8003770:	e003      	b.n	800377a <_printf_i+0x76>
 8003772:	2a75      	cmp	r2, #117	; 0x75
 8003774:	d021      	beq.n	80037ba <_printf_i+0xb6>
 8003776:	2a78      	cmp	r2, #120	; 0x78
 8003778:	d1dc      	bne.n	8003734 <_printf_i+0x30>
 800377a:	2278      	movs	r2, #120	; 0x78
 800377c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003780:	496e      	ldr	r1, [pc, #440]	; (800393c <_printf_i+0x238>)
 8003782:	e064      	b.n	800384e <_printf_i+0x14a>
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800378a:	1d11      	adds	r1, r2, #4
 800378c:	6019      	str	r1, [r3, #0]
 800378e:	6813      	ldr	r3, [r2, #0]
 8003790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003794:	2301      	movs	r3, #1
 8003796:	e0a3      	b.n	80038e0 <_printf_i+0x1dc>
 8003798:	f011 0f40 	tst.w	r1, #64	; 0x40
 800379c:	f102 0104 	add.w	r1, r2, #4
 80037a0:	6019      	str	r1, [r3, #0]
 80037a2:	d0d7      	beq.n	8003754 <_printf_i+0x50>
 80037a4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	da03      	bge.n	80037b4 <_printf_i+0xb0>
 80037ac:	222d      	movs	r2, #45	; 0x2d
 80037ae:	425b      	negs	r3, r3
 80037b0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80037b4:	4962      	ldr	r1, [pc, #392]	; (8003940 <_printf_i+0x23c>)
 80037b6:	220a      	movs	r2, #10
 80037b8:	e017      	b.n	80037ea <_printf_i+0xe6>
 80037ba:	6820      	ldr	r0, [r4, #0]
 80037bc:	6819      	ldr	r1, [r3, #0]
 80037be:	f010 0f80 	tst.w	r0, #128	; 0x80
 80037c2:	d003      	beq.n	80037cc <_printf_i+0xc8>
 80037c4:	1d08      	adds	r0, r1, #4
 80037c6:	6018      	str	r0, [r3, #0]
 80037c8:	680b      	ldr	r3, [r1, #0]
 80037ca:	e006      	b.n	80037da <_printf_i+0xd6>
 80037cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037d0:	f101 0004 	add.w	r0, r1, #4
 80037d4:	6018      	str	r0, [r3, #0]
 80037d6:	d0f7      	beq.n	80037c8 <_printf_i+0xc4>
 80037d8:	880b      	ldrh	r3, [r1, #0]
 80037da:	4959      	ldr	r1, [pc, #356]	; (8003940 <_printf_i+0x23c>)
 80037dc:	2a6f      	cmp	r2, #111	; 0x6f
 80037de:	bf14      	ite	ne
 80037e0:	220a      	movne	r2, #10
 80037e2:	2208      	moveq	r2, #8
 80037e4:	2000      	movs	r0, #0
 80037e6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80037ea:	6865      	ldr	r5, [r4, #4]
 80037ec:	60a5      	str	r5, [r4, #8]
 80037ee:	2d00      	cmp	r5, #0
 80037f0:	f2c0 809c 	blt.w	800392c <_printf_i+0x228>
 80037f4:	6820      	ldr	r0, [r4, #0]
 80037f6:	f020 0004 	bic.w	r0, r0, #4
 80037fa:	6020      	str	r0, [r4, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d13f      	bne.n	8003880 <_printf_i+0x17c>
 8003800:	2d00      	cmp	r5, #0
 8003802:	f040 8095 	bne.w	8003930 <_printf_i+0x22c>
 8003806:	4675      	mov	r5, lr
 8003808:	2a08      	cmp	r2, #8
 800380a:	d10b      	bne.n	8003824 <_printf_i+0x120>
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	07da      	lsls	r2, r3, #31
 8003810:	d508      	bpl.n	8003824 <_printf_i+0x120>
 8003812:	6923      	ldr	r3, [r4, #16]
 8003814:	6862      	ldr	r2, [r4, #4]
 8003816:	429a      	cmp	r2, r3
 8003818:	bfde      	ittt	le
 800381a:	2330      	movle	r3, #48	; 0x30
 800381c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003820:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003824:	ebae 0305 	sub.w	r3, lr, r5
 8003828:	6123      	str	r3, [r4, #16]
 800382a:	f8cd 8000 	str.w	r8, [sp]
 800382e:	463b      	mov	r3, r7
 8003830:	aa03      	add	r2, sp, #12
 8003832:	4621      	mov	r1, r4
 8003834:	4630      	mov	r0, r6
 8003836:	f7ff feef 	bl	8003618 <_printf_common>
 800383a:	3001      	adds	r0, #1
 800383c:	d155      	bne.n	80038ea <_printf_i+0x1e6>
 800383e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003842:	b005      	add	sp, #20
 8003844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003848:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800384c:	493c      	ldr	r1, [pc, #240]	; (8003940 <_printf_i+0x23c>)
 800384e:	6822      	ldr	r2, [r4, #0]
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003856:	f100 0504 	add.w	r5, r0, #4
 800385a:	601d      	str	r5, [r3, #0]
 800385c:	d001      	beq.n	8003862 <_printf_i+0x15e>
 800385e:	6803      	ldr	r3, [r0, #0]
 8003860:	e002      	b.n	8003868 <_printf_i+0x164>
 8003862:	0655      	lsls	r5, r2, #25
 8003864:	d5fb      	bpl.n	800385e <_printf_i+0x15a>
 8003866:	8803      	ldrh	r3, [r0, #0]
 8003868:	07d0      	lsls	r0, r2, #31
 800386a:	bf44      	itt	mi
 800386c:	f042 0220 	orrmi.w	r2, r2, #32
 8003870:	6022      	strmi	r2, [r4, #0]
 8003872:	b91b      	cbnz	r3, 800387c <_printf_i+0x178>
 8003874:	6822      	ldr	r2, [r4, #0]
 8003876:	f022 0220 	bic.w	r2, r2, #32
 800387a:	6022      	str	r2, [r4, #0]
 800387c:	2210      	movs	r2, #16
 800387e:	e7b1      	b.n	80037e4 <_printf_i+0xe0>
 8003880:	4675      	mov	r5, lr
 8003882:	fbb3 f0f2 	udiv	r0, r3, r2
 8003886:	fb02 3310 	mls	r3, r2, r0, r3
 800388a:	5ccb      	ldrb	r3, [r1, r3]
 800388c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003890:	4603      	mov	r3, r0
 8003892:	2800      	cmp	r0, #0
 8003894:	d1f5      	bne.n	8003882 <_printf_i+0x17e>
 8003896:	e7b7      	b.n	8003808 <_printf_i+0x104>
 8003898:	6808      	ldr	r0, [r1, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	6949      	ldr	r1, [r1, #20]
 800389e:	f010 0f80 	tst.w	r0, #128	; 0x80
 80038a2:	d004      	beq.n	80038ae <_printf_i+0x1aa>
 80038a4:	1d10      	adds	r0, r2, #4
 80038a6:	6018      	str	r0, [r3, #0]
 80038a8:	6813      	ldr	r3, [r2, #0]
 80038aa:	6019      	str	r1, [r3, #0]
 80038ac:	e007      	b.n	80038be <_printf_i+0x1ba>
 80038ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038b2:	f102 0004 	add.w	r0, r2, #4
 80038b6:	6018      	str	r0, [r3, #0]
 80038b8:	6813      	ldr	r3, [r2, #0]
 80038ba:	d0f6      	beq.n	80038aa <_printf_i+0x1a6>
 80038bc:	8019      	strh	r1, [r3, #0]
 80038be:	2300      	movs	r3, #0
 80038c0:	6123      	str	r3, [r4, #16]
 80038c2:	4675      	mov	r5, lr
 80038c4:	e7b1      	b.n	800382a <_printf_i+0x126>
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	1d11      	adds	r1, r2, #4
 80038ca:	6019      	str	r1, [r3, #0]
 80038cc:	6815      	ldr	r5, [r2, #0]
 80038ce:	6862      	ldr	r2, [r4, #4]
 80038d0:	2100      	movs	r1, #0
 80038d2:	4628      	mov	r0, r5
 80038d4:	f7fc fc8c 	bl	80001f0 <memchr>
 80038d8:	b108      	cbz	r0, 80038de <_printf_i+0x1da>
 80038da:	1b40      	subs	r0, r0, r5
 80038dc:	6060      	str	r0, [r4, #4]
 80038de:	6863      	ldr	r3, [r4, #4]
 80038e0:	6123      	str	r3, [r4, #16]
 80038e2:	2300      	movs	r3, #0
 80038e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038e8:	e79f      	b.n	800382a <_printf_i+0x126>
 80038ea:	6923      	ldr	r3, [r4, #16]
 80038ec:	462a      	mov	r2, r5
 80038ee:	4639      	mov	r1, r7
 80038f0:	4630      	mov	r0, r6
 80038f2:	47c0      	blx	r8
 80038f4:	3001      	adds	r0, #1
 80038f6:	d0a2      	beq.n	800383e <_printf_i+0x13a>
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	079b      	lsls	r3, r3, #30
 80038fc:	d507      	bpl.n	800390e <_printf_i+0x20a>
 80038fe:	2500      	movs	r5, #0
 8003900:	f104 0919 	add.w	r9, r4, #25
 8003904:	68e3      	ldr	r3, [r4, #12]
 8003906:	9a03      	ldr	r2, [sp, #12]
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	429d      	cmp	r5, r3
 800390c:	db05      	blt.n	800391a <_printf_i+0x216>
 800390e:	68e0      	ldr	r0, [r4, #12]
 8003910:	9b03      	ldr	r3, [sp, #12]
 8003912:	4298      	cmp	r0, r3
 8003914:	bfb8      	it	lt
 8003916:	4618      	movlt	r0, r3
 8003918:	e793      	b.n	8003842 <_printf_i+0x13e>
 800391a:	2301      	movs	r3, #1
 800391c:	464a      	mov	r2, r9
 800391e:	4639      	mov	r1, r7
 8003920:	4630      	mov	r0, r6
 8003922:	47c0      	blx	r8
 8003924:	3001      	adds	r0, #1
 8003926:	d08a      	beq.n	800383e <_printf_i+0x13a>
 8003928:	3501      	adds	r5, #1
 800392a:	e7eb      	b.n	8003904 <_printf_i+0x200>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1a7      	bne.n	8003880 <_printf_i+0x17c>
 8003930:	780b      	ldrb	r3, [r1, #0]
 8003932:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003936:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800393a:	e765      	b.n	8003808 <_printf_i+0x104>
 800393c:	080055e2 	.word	0x080055e2
 8003940:	080055d1 	.word	0x080055d1

08003944 <__ascii_wctomb>:
 8003944:	b149      	cbz	r1, 800395a <__ascii_wctomb+0x16>
 8003946:	2aff      	cmp	r2, #255	; 0xff
 8003948:	bf85      	ittet	hi
 800394a:	238a      	movhi	r3, #138	; 0x8a
 800394c:	6003      	strhi	r3, [r0, #0]
 800394e:	700a      	strbls	r2, [r1, #0]
 8003950:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8003954:	bf98      	it	ls
 8003956:	2001      	movls	r0, #1
 8003958:	4770      	bx	lr
 800395a:	4608      	mov	r0, r1
 800395c:	4770      	bx	lr

0800395e <memcpy>:
 800395e:	b510      	push	{r4, lr}
 8003960:	1e43      	subs	r3, r0, #1
 8003962:	440a      	add	r2, r1
 8003964:	4291      	cmp	r1, r2
 8003966:	d100      	bne.n	800396a <memcpy+0xc>
 8003968:	bd10      	pop	{r4, pc}
 800396a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800396e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003972:	e7f7      	b.n	8003964 <memcpy+0x6>

08003974 <memmove>:
 8003974:	4288      	cmp	r0, r1
 8003976:	b510      	push	{r4, lr}
 8003978:	eb01 0302 	add.w	r3, r1, r2
 800397c:	d803      	bhi.n	8003986 <memmove+0x12>
 800397e:	1e42      	subs	r2, r0, #1
 8003980:	4299      	cmp	r1, r3
 8003982:	d10c      	bne.n	800399e <memmove+0x2a>
 8003984:	bd10      	pop	{r4, pc}
 8003986:	4298      	cmp	r0, r3
 8003988:	d2f9      	bcs.n	800397e <memmove+0xa>
 800398a:	1881      	adds	r1, r0, r2
 800398c:	1ad2      	subs	r2, r2, r3
 800398e:	42d3      	cmn	r3, r2
 8003990:	d100      	bne.n	8003994 <memmove+0x20>
 8003992:	bd10      	pop	{r4, pc}
 8003994:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003998:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800399c:	e7f7      	b.n	800398e <memmove+0x1a>
 800399e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039a2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80039a6:	e7eb      	b.n	8003980 <memmove+0xc>

080039a8 <_free_r>:
 80039a8:	b538      	push	{r3, r4, r5, lr}
 80039aa:	4605      	mov	r5, r0
 80039ac:	2900      	cmp	r1, #0
 80039ae:	d045      	beq.n	8003a3c <_free_r+0x94>
 80039b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039b4:	1f0c      	subs	r4, r1, #4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bfb8      	it	lt
 80039ba:	18e4      	addlt	r4, r4, r3
 80039bc:	f000 f8d6 	bl	8003b6c <__malloc_lock>
 80039c0:	4a1f      	ldr	r2, [pc, #124]	; (8003a40 <_free_r+0x98>)
 80039c2:	6813      	ldr	r3, [r2, #0]
 80039c4:	4610      	mov	r0, r2
 80039c6:	b933      	cbnz	r3, 80039d6 <_free_r+0x2e>
 80039c8:	6063      	str	r3, [r4, #4]
 80039ca:	6014      	str	r4, [r2, #0]
 80039cc:	4628      	mov	r0, r5
 80039ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039d2:	f000 b8cc 	b.w	8003b6e <__malloc_unlock>
 80039d6:	42a3      	cmp	r3, r4
 80039d8:	d90c      	bls.n	80039f4 <_free_r+0x4c>
 80039da:	6821      	ldr	r1, [r4, #0]
 80039dc:	1862      	adds	r2, r4, r1
 80039de:	4293      	cmp	r3, r2
 80039e0:	bf04      	itt	eq
 80039e2:	681a      	ldreq	r2, [r3, #0]
 80039e4:	685b      	ldreq	r3, [r3, #4]
 80039e6:	6063      	str	r3, [r4, #4]
 80039e8:	bf04      	itt	eq
 80039ea:	1852      	addeq	r2, r2, r1
 80039ec:	6022      	streq	r2, [r4, #0]
 80039ee:	6004      	str	r4, [r0, #0]
 80039f0:	e7ec      	b.n	80039cc <_free_r+0x24>
 80039f2:	4613      	mov	r3, r2
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	b10a      	cbz	r2, 80039fc <_free_r+0x54>
 80039f8:	42a2      	cmp	r2, r4
 80039fa:	d9fa      	bls.n	80039f2 <_free_r+0x4a>
 80039fc:	6819      	ldr	r1, [r3, #0]
 80039fe:	1858      	adds	r0, r3, r1
 8003a00:	42a0      	cmp	r0, r4
 8003a02:	d10b      	bne.n	8003a1c <_free_r+0x74>
 8003a04:	6820      	ldr	r0, [r4, #0]
 8003a06:	4401      	add	r1, r0
 8003a08:	1858      	adds	r0, r3, r1
 8003a0a:	4282      	cmp	r2, r0
 8003a0c:	6019      	str	r1, [r3, #0]
 8003a0e:	d1dd      	bne.n	80039cc <_free_r+0x24>
 8003a10:	6810      	ldr	r0, [r2, #0]
 8003a12:	6852      	ldr	r2, [r2, #4]
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	4401      	add	r1, r0
 8003a18:	6019      	str	r1, [r3, #0]
 8003a1a:	e7d7      	b.n	80039cc <_free_r+0x24>
 8003a1c:	d902      	bls.n	8003a24 <_free_r+0x7c>
 8003a1e:	230c      	movs	r3, #12
 8003a20:	602b      	str	r3, [r5, #0]
 8003a22:	e7d3      	b.n	80039cc <_free_r+0x24>
 8003a24:	6820      	ldr	r0, [r4, #0]
 8003a26:	1821      	adds	r1, r4, r0
 8003a28:	428a      	cmp	r2, r1
 8003a2a:	bf04      	itt	eq
 8003a2c:	6811      	ldreq	r1, [r2, #0]
 8003a2e:	6852      	ldreq	r2, [r2, #4]
 8003a30:	6062      	str	r2, [r4, #4]
 8003a32:	bf04      	itt	eq
 8003a34:	1809      	addeq	r1, r1, r0
 8003a36:	6021      	streq	r1, [r4, #0]
 8003a38:	605c      	str	r4, [r3, #4]
 8003a3a:	e7c7      	b.n	80039cc <_free_r+0x24>
 8003a3c:	bd38      	pop	{r3, r4, r5, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000260 	.word	0x20000260

08003a44 <_malloc_r>:
 8003a44:	b570      	push	{r4, r5, r6, lr}
 8003a46:	1ccd      	adds	r5, r1, #3
 8003a48:	f025 0503 	bic.w	r5, r5, #3
 8003a4c:	3508      	adds	r5, #8
 8003a4e:	2d0c      	cmp	r5, #12
 8003a50:	bf38      	it	cc
 8003a52:	250c      	movcc	r5, #12
 8003a54:	2d00      	cmp	r5, #0
 8003a56:	4606      	mov	r6, r0
 8003a58:	db01      	blt.n	8003a5e <_malloc_r+0x1a>
 8003a5a:	42a9      	cmp	r1, r5
 8003a5c:	d903      	bls.n	8003a66 <_malloc_r+0x22>
 8003a5e:	230c      	movs	r3, #12
 8003a60:	6033      	str	r3, [r6, #0]
 8003a62:	2000      	movs	r0, #0
 8003a64:	bd70      	pop	{r4, r5, r6, pc}
 8003a66:	f000 f881 	bl	8003b6c <__malloc_lock>
 8003a6a:	4a23      	ldr	r2, [pc, #140]	; (8003af8 <_malloc_r+0xb4>)
 8003a6c:	6814      	ldr	r4, [r2, #0]
 8003a6e:	4621      	mov	r1, r4
 8003a70:	b991      	cbnz	r1, 8003a98 <_malloc_r+0x54>
 8003a72:	4c22      	ldr	r4, [pc, #136]	; (8003afc <_malloc_r+0xb8>)
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	b91b      	cbnz	r3, 8003a80 <_malloc_r+0x3c>
 8003a78:	4630      	mov	r0, r6
 8003a7a:	f000 f867 	bl	8003b4c <_sbrk_r>
 8003a7e:	6020      	str	r0, [r4, #0]
 8003a80:	4629      	mov	r1, r5
 8003a82:	4630      	mov	r0, r6
 8003a84:	f000 f862 	bl	8003b4c <_sbrk_r>
 8003a88:	1c43      	adds	r3, r0, #1
 8003a8a:	d126      	bne.n	8003ada <_malloc_r+0x96>
 8003a8c:	230c      	movs	r3, #12
 8003a8e:	6033      	str	r3, [r6, #0]
 8003a90:	4630      	mov	r0, r6
 8003a92:	f000 f86c 	bl	8003b6e <__malloc_unlock>
 8003a96:	e7e4      	b.n	8003a62 <_malloc_r+0x1e>
 8003a98:	680b      	ldr	r3, [r1, #0]
 8003a9a:	1b5b      	subs	r3, r3, r5
 8003a9c:	d41a      	bmi.n	8003ad4 <_malloc_r+0x90>
 8003a9e:	2b0b      	cmp	r3, #11
 8003aa0:	d90f      	bls.n	8003ac2 <_malloc_r+0x7e>
 8003aa2:	600b      	str	r3, [r1, #0]
 8003aa4:	50cd      	str	r5, [r1, r3]
 8003aa6:	18cc      	adds	r4, r1, r3
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	f000 f860 	bl	8003b6e <__malloc_unlock>
 8003aae:	f104 000b 	add.w	r0, r4, #11
 8003ab2:	1d23      	adds	r3, r4, #4
 8003ab4:	f020 0007 	bic.w	r0, r0, #7
 8003ab8:	1ac3      	subs	r3, r0, r3
 8003aba:	d01b      	beq.n	8003af4 <_malloc_r+0xb0>
 8003abc:	425a      	negs	r2, r3
 8003abe:	50e2      	str	r2, [r4, r3]
 8003ac0:	bd70      	pop	{r4, r5, r6, pc}
 8003ac2:	428c      	cmp	r4, r1
 8003ac4:	bf0d      	iteet	eq
 8003ac6:	6863      	ldreq	r3, [r4, #4]
 8003ac8:	684b      	ldrne	r3, [r1, #4]
 8003aca:	6063      	strne	r3, [r4, #4]
 8003acc:	6013      	streq	r3, [r2, #0]
 8003ace:	bf18      	it	ne
 8003ad0:	460c      	movne	r4, r1
 8003ad2:	e7e9      	b.n	8003aa8 <_malloc_r+0x64>
 8003ad4:	460c      	mov	r4, r1
 8003ad6:	6849      	ldr	r1, [r1, #4]
 8003ad8:	e7ca      	b.n	8003a70 <_malloc_r+0x2c>
 8003ada:	1cc4      	adds	r4, r0, #3
 8003adc:	f024 0403 	bic.w	r4, r4, #3
 8003ae0:	42a0      	cmp	r0, r4
 8003ae2:	d005      	beq.n	8003af0 <_malloc_r+0xac>
 8003ae4:	1a21      	subs	r1, r4, r0
 8003ae6:	4630      	mov	r0, r6
 8003ae8:	f000 f830 	bl	8003b4c <_sbrk_r>
 8003aec:	3001      	adds	r0, #1
 8003aee:	d0cd      	beq.n	8003a8c <_malloc_r+0x48>
 8003af0:	6025      	str	r5, [r4, #0]
 8003af2:	e7d9      	b.n	8003aa8 <_malloc_r+0x64>
 8003af4:	bd70      	pop	{r4, r5, r6, pc}
 8003af6:	bf00      	nop
 8003af8:	20000260 	.word	0x20000260
 8003afc:	20000264 	.word	0x20000264

08003b00 <_realloc_r>:
 8003b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b02:	4607      	mov	r7, r0
 8003b04:	4614      	mov	r4, r2
 8003b06:	460e      	mov	r6, r1
 8003b08:	b921      	cbnz	r1, 8003b14 <_realloc_r+0x14>
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b10:	f7ff bf98 	b.w	8003a44 <_malloc_r>
 8003b14:	b922      	cbnz	r2, 8003b20 <_realloc_r+0x20>
 8003b16:	f7ff ff47 	bl	80039a8 <_free_r>
 8003b1a:	4625      	mov	r5, r4
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b20:	f000 f826 	bl	8003b70 <_malloc_usable_size_r>
 8003b24:	4284      	cmp	r4, r0
 8003b26:	d90f      	bls.n	8003b48 <_realloc_r+0x48>
 8003b28:	4621      	mov	r1, r4
 8003b2a:	4638      	mov	r0, r7
 8003b2c:	f7ff ff8a 	bl	8003a44 <_malloc_r>
 8003b30:	4605      	mov	r5, r0
 8003b32:	2800      	cmp	r0, #0
 8003b34:	d0f2      	beq.n	8003b1c <_realloc_r+0x1c>
 8003b36:	4631      	mov	r1, r6
 8003b38:	4622      	mov	r2, r4
 8003b3a:	f7ff ff10 	bl	800395e <memcpy>
 8003b3e:	4631      	mov	r1, r6
 8003b40:	4638      	mov	r0, r7
 8003b42:	f7ff ff31 	bl	80039a8 <_free_r>
 8003b46:	e7e9      	b.n	8003b1c <_realloc_r+0x1c>
 8003b48:	4635      	mov	r5, r6
 8003b4a:	e7e7      	b.n	8003b1c <_realloc_r+0x1c>

08003b4c <_sbrk_r>:
 8003b4c:	b538      	push	{r3, r4, r5, lr}
 8003b4e:	4c06      	ldr	r4, [pc, #24]	; (8003b68 <_sbrk_r+0x1c>)
 8003b50:	2300      	movs	r3, #0
 8003b52:	4605      	mov	r5, r0
 8003b54:	4608      	mov	r0, r1
 8003b56:	6023      	str	r3, [r4, #0]
 8003b58:	f7ff faa0 	bl	800309c <_sbrk>
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	d102      	bne.n	8003b66 <_sbrk_r+0x1a>
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	b103      	cbz	r3, 8003b66 <_sbrk_r+0x1a>
 8003b64:	602b      	str	r3, [r5, #0]
 8003b66:	bd38      	pop	{r3, r4, r5, pc}
 8003b68:	2000036c 	.word	0x2000036c

08003b6c <__malloc_lock>:
 8003b6c:	4770      	bx	lr

08003b6e <__malloc_unlock>:
 8003b6e:	4770      	bx	lr

08003b70 <_malloc_usable_size_r>:
 8003b70:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003b74:	2800      	cmp	r0, #0
 8003b76:	f1a0 0004 	sub.w	r0, r0, #4
 8003b7a:	bfbc      	itt	lt
 8003b7c:	580b      	ldrlt	r3, [r1, r0]
 8003b7e:	18c0      	addlt	r0, r0, r3
 8003b80:	4770      	bx	lr
 8003b82:	0000      	movs	r0, r0
 8003b84:	0000      	movs	r0, r0
	...

08003b88 <atan>:
 8003b88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8c:	ec55 4b10 	vmov	r4, r5, d0
 8003b90:	4bc7      	ldr	r3, [pc, #796]	; (8003eb0 <atan+0x328>)
 8003b92:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003b96:	429e      	cmp	r6, r3
 8003b98:	46ab      	mov	fp, r5
 8003b9a:	dd18      	ble.n	8003bce <atan+0x46>
 8003b9c:	4ac5      	ldr	r2, [pc, #788]	; (8003eb4 <atan+0x32c>)
 8003b9e:	4296      	cmp	r6, r2
 8003ba0:	dc01      	bgt.n	8003ba6 <atan+0x1e>
 8003ba2:	d109      	bne.n	8003bb8 <atan+0x30>
 8003ba4:	b144      	cbz	r4, 8003bb8 <atan+0x30>
 8003ba6:	4622      	mov	r2, r4
 8003ba8:	462b      	mov	r3, r5
 8003baa:	4620      	mov	r0, r4
 8003bac:	4629      	mov	r1, r5
 8003bae:	f7fc fb75 	bl	800029c <__adddf3>
 8003bb2:	4604      	mov	r4, r0
 8003bb4:	460d      	mov	r5, r1
 8003bb6:	e006      	b.n	8003bc6 <atan+0x3e>
 8003bb8:	f1bb 0f00 	cmp.w	fp, #0
 8003bbc:	f300 813a 	bgt.w	8003e34 <atan+0x2ac>
 8003bc0:	a59f      	add	r5, pc, #636	; (adr r5, 8003e40 <atan+0x2b8>)
 8003bc2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003bc6:	ec45 4b10 	vmov	d0, r4, r5
 8003bca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bce:	4bba      	ldr	r3, [pc, #744]	; (8003eb8 <atan+0x330>)
 8003bd0:	429e      	cmp	r6, r3
 8003bd2:	dc14      	bgt.n	8003bfe <atan+0x76>
 8003bd4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8003bd8:	429e      	cmp	r6, r3
 8003bda:	dc0d      	bgt.n	8003bf8 <atan+0x70>
 8003bdc:	a39a      	add	r3, pc, #616	; (adr r3, 8003e48 <atan+0x2c0>)
 8003bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be2:	ee10 0a10 	vmov	r0, s0
 8003be6:	4629      	mov	r1, r5
 8003be8:	f7fc fb58 	bl	800029c <__adddf3>
 8003bec:	2200      	movs	r2, #0
 8003bee:	4bb3      	ldr	r3, [pc, #716]	; (8003ebc <atan+0x334>)
 8003bf0:	f7fc ff96 	bl	8000b20 <__aeabi_dcmpgt>
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	d1e6      	bne.n	8003bc6 <atan+0x3e>
 8003bf8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003bfc:	e02b      	b.n	8003c56 <atan+0xce>
 8003bfe:	f000 f9af 	bl	8003f60 <fabs>
 8003c02:	4baf      	ldr	r3, [pc, #700]	; (8003ec0 <atan+0x338>)
 8003c04:	429e      	cmp	r6, r3
 8003c06:	ec55 4b10 	vmov	r4, r5, d0
 8003c0a:	f300 80bf 	bgt.w	8003d8c <atan+0x204>
 8003c0e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8003c12:	429e      	cmp	r6, r3
 8003c14:	f300 80a0 	bgt.w	8003d58 <atan+0x1d0>
 8003c18:	ee10 2a10 	vmov	r2, s0
 8003c1c:	ee10 0a10 	vmov	r0, s0
 8003c20:	462b      	mov	r3, r5
 8003c22:	4629      	mov	r1, r5
 8003c24:	f7fc fb3a 	bl	800029c <__adddf3>
 8003c28:	2200      	movs	r2, #0
 8003c2a:	4ba4      	ldr	r3, [pc, #656]	; (8003ebc <atan+0x334>)
 8003c2c:	f7fc fb34 	bl	8000298 <__aeabi_dsub>
 8003c30:	2200      	movs	r2, #0
 8003c32:	4606      	mov	r6, r0
 8003c34:	460f      	mov	r7, r1
 8003c36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	4629      	mov	r1, r5
 8003c3e:	f7fc fb2d 	bl	800029c <__adddf3>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4630      	mov	r0, r6
 8003c48:	4639      	mov	r1, r7
 8003c4a:	f7fc fe03 	bl	8000854 <__aeabi_ddiv>
 8003c4e:	f04f 0a00 	mov.w	sl, #0
 8003c52:	4604      	mov	r4, r0
 8003c54:	460d      	mov	r5, r1
 8003c56:	4622      	mov	r2, r4
 8003c58:	462b      	mov	r3, r5
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	f7fc fccf 	bl	8000600 <__aeabi_dmul>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4680      	mov	r8, r0
 8003c68:	4689      	mov	r9, r1
 8003c6a:	f7fc fcc9 	bl	8000600 <__aeabi_dmul>
 8003c6e:	a378      	add	r3, pc, #480	; (adr r3, 8003e50 <atan+0x2c8>)
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	4606      	mov	r6, r0
 8003c76:	460f      	mov	r7, r1
 8003c78:	f7fc fcc2 	bl	8000600 <__aeabi_dmul>
 8003c7c:	a376      	add	r3, pc, #472	; (adr r3, 8003e58 <atan+0x2d0>)
 8003c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c82:	f7fc fb0b 	bl	800029c <__adddf3>
 8003c86:	4632      	mov	r2, r6
 8003c88:	463b      	mov	r3, r7
 8003c8a:	f7fc fcb9 	bl	8000600 <__aeabi_dmul>
 8003c8e:	a374      	add	r3, pc, #464	; (adr r3, 8003e60 <atan+0x2d8>)
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	f7fc fb02 	bl	800029c <__adddf3>
 8003c98:	4632      	mov	r2, r6
 8003c9a:	463b      	mov	r3, r7
 8003c9c:	f7fc fcb0 	bl	8000600 <__aeabi_dmul>
 8003ca0:	a371      	add	r3, pc, #452	; (adr r3, 8003e68 <atan+0x2e0>)
 8003ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca6:	f7fc faf9 	bl	800029c <__adddf3>
 8003caa:	4632      	mov	r2, r6
 8003cac:	463b      	mov	r3, r7
 8003cae:	f7fc fca7 	bl	8000600 <__aeabi_dmul>
 8003cb2:	a36f      	add	r3, pc, #444	; (adr r3, 8003e70 <atan+0x2e8>)
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f7fc faf0 	bl	800029c <__adddf3>
 8003cbc:	4632      	mov	r2, r6
 8003cbe:	463b      	mov	r3, r7
 8003cc0:	f7fc fc9e 	bl	8000600 <__aeabi_dmul>
 8003cc4:	a36c      	add	r3, pc, #432	; (adr r3, 8003e78 <atan+0x2f0>)
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	f7fc fae7 	bl	800029c <__adddf3>
 8003cce:	4642      	mov	r2, r8
 8003cd0:	464b      	mov	r3, r9
 8003cd2:	f7fc fc95 	bl	8000600 <__aeabi_dmul>
 8003cd6:	a36a      	add	r3, pc, #424	; (adr r3, 8003e80 <atan+0x2f8>)
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	4680      	mov	r8, r0
 8003cde:	4689      	mov	r9, r1
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	4639      	mov	r1, r7
 8003ce4:	f7fc fc8c 	bl	8000600 <__aeabi_dmul>
 8003ce8:	a367      	add	r3, pc, #412	; (adr r3, 8003e88 <atan+0x300>)
 8003cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cee:	f7fc fad3 	bl	8000298 <__aeabi_dsub>
 8003cf2:	4632      	mov	r2, r6
 8003cf4:	463b      	mov	r3, r7
 8003cf6:	f7fc fc83 	bl	8000600 <__aeabi_dmul>
 8003cfa:	a365      	add	r3, pc, #404	; (adr r3, 8003e90 <atan+0x308>)
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	f7fc faca 	bl	8000298 <__aeabi_dsub>
 8003d04:	4632      	mov	r2, r6
 8003d06:	463b      	mov	r3, r7
 8003d08:	f7fc fc7a 	bl	8000600 <__aeabi_dmul>
 8003d0c:	a362      	add	r3, pc, #392	; (adr r3, 8003e98 <atan+0x310>)
 8003d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d12:	f7fc fac1 	bl	8000298 <__aeabi_dsub>
 8003d16:	4632      	mov	r2, r6
 8003d18:	463b      	mov	r3, r7
 8003d1a:	f7fc fc71 	bl	8000600 <__aeabi_dmul>
 8003d1e:	a360      	add	r3, pc, #384	; (adr r3, 8003ea0 <atan+0x318>)
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	f7fc fab8 	bl	8000298 <__aeabi_dsub>
 8003d28:	4632      	mov	r2, r6
 8003d2a:	463b      	mov	r3, r7
 8003d2c:	f7fc fc68 	bl	8000600 <__aeabi_dmul>
 8003d30:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	d155      	bne.n	8003de6 <atan+0x25e>
 8003d3a:	4640      	mov	r0, r8
 8003d3c:	4649      	mov	r1, r9
 8003d3e:	f7fc faad 	bl	800029c <__adddf3>
 8003d42:	4622      	mov	r2, r4
 8003d44:	462b      	mov	r3, r5
 8003d46:	f7fc fc5b 	bl	8000600 <__aeabi_dmul>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4620      	mov	r0, r4
 8003d50:	4629      	mov	r1, r5
 8003d52:	f7fc faa1 	bl	8000298 <__aeabi_dsub>
 8003d56:	e72c      	b.n	8003bb2 <atan+0x2a>
 8003d58:	ee10 0a10 	vmov	r0, s0
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	4b57      	ldr	r3, [pc, #348]	; (8003ebc <atan+0x334>)
 8003d60:	4629      	mov	r1, r5
 8003d62:	f7fc fa99 	bl	8000298 <__aeabi_dsub>
 8003d66:	2200      	movs	r2, #0
 8003d68:	4606      	mov	r6, r0
 8003d6a:	460f      	mov	r7, r1
 8003d6c:	4b53      	ldr	r3, [pc, #332]	; (8003ebc <atan+0x334>)
 8003d6e:	4620      	mov	r0, r4
 8003d70:	4629      	mov	r1, r5
 8003d72:	f7fc fa93 	bl	800029c <__adddf3>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4630      	mov	r0, r6
 8003d7c:	4639      	mov	r1, r7
 8003d7e:	f7fc fd69 	bl	8000854 <__aeabi_ddiv>
 8003d82:	f04f 0a01 	mov.w	sl, #1
 8003d86:	4604      	mov	r4, r0
 8003d88:	460d      	mov	r5, r1
 8003d8a:	e764      	b.n	8003c56 <atan+0xce>
 8003d8c:	4b4d      	ldr	r3, [pc, #308]	; (8003ec4 <atan+0x33c>)
 8003d8e:	429e      	cmp	r6, r3
 8003d90:	dc1d      	bgt.n	8003dce <atan+0x246>
 8003d92:	ee10 0a10 	vmov	r0, s0
 8003d96:	2200      	movs	r2, #0
 8003d98:	4b4b      	ldr	r3, [pc, #300]	; (8003ec8 <atan+0x340>)
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	f7fc fa7c 	bl	8000298 <__aeabi_dsub>
 8003da0:	2200      	movs	r2, #0
 8003da2:	4606      	mov	r6, r0
 8003da4:	460f      	mov	r7, r1
 8003da6:	4b48      	ldr	r3, [pc, #288]	; (8003ec8 <atan+0x340>)
 8003da8:	4620      	mov	r0, r4
 8003daa:	4629      	mov	r1, r5
 8003dac:	f7fc fc28 	bl	8000600 <__aeabi_dmul>
 8003db0:	2200      	movs	r2, #0
 8003db2:	4b42      	ldr	r3, [pc, #264]	; (8003ebc <atan+0x334>)
 8003db4:	f7fc fa72 	bl	800029c <__adddf3>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4630      	mov	r0, r6
 8003dbe:	4639      	mov	r1, r7
 8003dc0:	f7fc fd48 	bl	8000854 <__aeabi_ddiv>
 8003dc4:	f04f 0a02 	mov.w	sl, #2
 8003dc8:	4604      	mov	r4, r0
 8003dca:	460d      	mov	r5, r1
 8003dcc:	e743      	b.n	8003c56 <atan+0xce>
 8003dce:	462b      	mov	r3, r5
 8003dd0:	ee10 2a10 	vmov	r2, s0
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	493d      	ldr	r1, [pc, #244]	; (8003ecc <atan+0x344>)
 8003dd8:	f7fc fd3c 	bl	8000854 <__aeabi_ddiv>
 8003ddc:	f04f 0a03 	mov.w	sl, #3
 8003de0:	4604      	mov	r4, r0
 8003de2:	460d      	mov	r5, r1
 8003de4:	e737      	b.n	8003c56 <atan+0xce>
 8003de6:	4640      	mov	r0, r8
 8003de8:	4649      	mov	r1, r9
 8003dea:	f7fc fa57 	bl	800029c <__adddf3>
 8003dee:	4622      	mov	r2, r4
 8003df0:	462b      	mov	r3, r5
 8003df2:	f7fc fc05 	bl	8000600 <__aeabi_dmul>
 8003df6:	4e36      	ldr	r6, [pc, #216]	; (8003ed0 <atan+0x348>)
 8003df8:	4b36      	ldr	r3, [pc, #216]	; (8003ed4 <atan+0x34c>)
 8003dfa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8003dfe:	4456      	add	r6, sl
 8003e00:	449a      	add	sl, r3
 8003e02:	e9da 2300 	ldrd	r2, r3, [sl]
 8003e06:	f7fc fa47 	bl	8000298 <__aeabi_dsub>
 8003e0a:	4622      	mov	r2, r4
 8003e0c:	462b      	mov	r3, r5
 8003e0e:	f7fc fa43 	bl	8000298 <__aeabi_dsub>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	e9d6 0100 	ldrd	r0, r1, [r6]
 8003e1a:	f7fc fa3d 	bl	8000298 <__aeabi_dsub>
 8003e1e:	f1bb 0f00 	cmp.w	fp, #0
 8003e22:	4604      	mov	r4, r0
 8003e24:	460d      	mov	r5, r1
 8003e26:	f6bf aece 	bge.w	8003bc6 <atan+0x3e>
 8003e2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003e2e:	4604      	mov	r4, r0
 8003e30:	461d      	mov	r5, r3
 8003e32:	e6c8      	b.n	8003bc6 <atan+0x3e>
 8003e34:	a51c      	add	r5, pc, #112	; (adr r5, 8003ea8 <atan+0x320>)
 8003e36:	e9d5 4500 	ldrd	r4, r5, [r5]
 8003e3a:	e6c4      	b.n	8003bc6 <atan+0x3e>
 8003e3c:	f3af 8000 	nop.w
 8003e40:	54442d18 	.word	0x54442d18
 8003e44:	bff921fb 	.word	0xbff921fb
 8003e48:	8800759c 	.word	0x8800759c
 8003e4c:	7e37e43c 	.word	0x7e37e43c
 8003e50:	e322da11 	.word	0xe322da11
 8003e54:	3f90ad3a 	.word	0x3f90ad3a
 8003e58:	24760deb 	.word	0x24760deb
 8003e5c:	3fa97b4b 	.word	0x3fa97b4b
 8003e60:	a0d03d51 	.word	0xa0d03d51
 8003e64:	3fb10d66 	.word	0x3fb10d66
 8003e68:	c54c206e 	.word	0xc54c206e
 8003e6c:	3fb745cd 	.word	0x3fb745cd
 8003e70:	920083ff 	.word	0x920083ff
 8003e74:	3fc24924 	.word	0x3fc24924
 8003e78:	5555550d 	.word	0x5555550d
 8003e7c:	3fd55555 	.word	0x3fd55555
 8003e80:	2c6a6c2f 	.word	0x2c6a6c2f
 8003e84:	bfa2b444 	.word	0xbfa2b444
 8003e88:	52defd9a 	.word	0x52defd9a
 8003e8c:	3fadde2d 	.word	0x3fadde2d
 8003e90:	af749a6d 	.word	0xaf749a6d
 8003e94:	3fb3b0f2 	.word	0x3fb3b0f2
 8003e98:	fe231671 	.word	0xfe231671
 8003e9c:	3fbc71c6 	.word	0x3fbc71c6
 8003ea0:	9998ebc4 	.word	0x9998ebc4
 8003ea4:	3fc99999 	.word	0x3fc99999
 8003ea8:	54442d18 	.word	0x54442d18
 8003eac:	3ff921fb 	.word	0x3ff921fb
 8003eb0:	440fffff 	.word	0x440fffff
 8003eb4:	7ff00000 	.word	0x7ff00000
 8003eb8:	3fdbffff 	.word	0x3fdbffff
 8003ebc:	3ff00000 	.word	0x3ff00000
 8003ec0:	3ff2ffff 	.word	0x3ff2ffff
 8003ec4:	40037fff 	.word	0x40037fff
 8003ec8:	3ff80000 	.word	0x3ff80000
 8003ecc:	bff00000 	.word	0xbff00000
 8003ed0:	080056f8 	.word	0x080056f8
 8003ed4:	08005718 	.word	0x08005718

08003ed8 <cos>:
 8003ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003eda:	ec51 0b10 	vmov	r0, r1, d0
 8003ede:	4a1e      	ldr	r2, [pc, #120]	; (8003f58 <cos+0x80>)
 8003ee0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	dc06      	bgt.n	8003ef6 <cos+0x1e>
 8003ee8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8003f50 <cos+0x78>
 8003eec:	f000 fc64 	bl	80047b8 <__kernel_cos>
 8003ef0:	ec51 0b10 	vmov	r0, r1, d0
 8003ef4:	e007      	b.n	8003f06 <cos+0x2e>
 8003ef6:	4a19      	ldr	r2, [pc, #100]	; (8003f5c <cos+0x84>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	dd09      	ble.n	8003f10 <cos+0x38>
 8003efc:	ee10 2a10 	vmov	r2, s0
 8003f00:	460b      	mov	r3, r1
 8003f02:	f7fc f9c9 	bl	8000298 <__aeabi_dsub>
 8003f06:	ec41 0b10 	vmov	d0, r0, r1
 8003f0a:	b005      	add	sp, #20
 8003f0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f10:	4668      	mov	r0, sp
 8003f12:	f000 f9ad 	bl	8004270 <__ieee754_rem_pio2>
 8003f16:	f000 0003 	and.w	r0, r0, #3
 8003f1a:	2801      	cmp	r0, #1
 8003f1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003f20:	ed9d 0b00 	vldr	d0, [sp]
 8003f24:	d007      	beq.n	8003f36 <cos+0x5e>
 8003f26:	2802      	cmp	r0, #2
 8003f28:	d00e      	beq.n	8003f48 <cos+0x70>
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d0de      	beq.n	8003eec <cos+0x14>
 8003f2e:	2001      	movs	r0, #1
 8003f30:	f001 f87a 	bl	8005028 <__kernel_sin>
 8003f34:	e7dc      	b.n	8003ef0 <cos+0x18>
 8003f36:	f001 f877 	bl	8005028 <__kernel_sin>
 8003f3a:	ec53 2b10 	vmov	r2, r3, d0
 8003f3e:	ee10 0a10 	vmov	r0, s0
 8003f42:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003f46:	e7de      	b.n	8003f06 <cos+0x2e>
 8003f48:	f000 fc36 	bl	80047b8 <__kernel_cos>
 8003f4c:	e7f5      	b.n	8003f3a <cos+0x62>
 8003f4e:	bf00      	nop
	...
 8003f58:	3fe921fb 	.word	0x3fe921fb
 8003f5c:	7fefffff 	.word	0x7fefffff

08003f60 <fabs>:
 8003f60:	ec53 2b10 	vmov	r2, r3, d0
 8003f64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f68:	ec43 2b10 	vmov	d0, r2, r3
 8003f6c:	4770      	bx	lr
	...

08003f70 <sin>:
 8003f70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f72:	ec51 0b10 	vmov	r0, r1, d0
 8003f76:	4a20      	ldr	r2, [pc, #128]	; (8003ff8 <sin+0x88>)
 8003f78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	dc07      	bgt.n	8003f90 <sin+0x20>
 8003f80:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8003ff0 <sin+0x80>
 8003f84:	2000      	movs	r0, #0
 8003f86:	f001 f84f 	bl	8005028 <__kernel_sin>
 8003f8a:	ec51 0b10 	vmov	r0, r1, d0
 8003f8e:	e007      	b.n	8003fa0 <sin+0x30>
 8003f90:	4a1a      	ldr	r2, [pc, #104]	; (8003ffc <sin+0x8c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	dd09      	ble.n	8003faa <sin+0x3a>
 8003f96:	ee10 2a10 	vmov	r2, s0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	f7fc f97c 	bl	8000298 <__aeabi_dsub>
 8003fa0:	ec41 0b10 	vmov	d0, r0, r1
 8003fa4:	b005      	add	sp, #20
 8003fa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003faa:	4668      	mov	r0, sp
 8003fac:	f000 f960 	bl	8004270 <__ieee754_rem_pio2>
 8003fb0:	f000 0003 	and.w	r0, r0, #3
 8003fb4:	2801      	cmp	r0, #1
 8003fb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003fba:	ed9d 0b00 	vldr	d0, [sp]
 8003fbe:	d004      	beq.n	8003fca <sin+0x5a>
 8003fc0:	2802      	cmp	r0, #2
 8003fc2:	d005      	beq.n	8003fd0 <sin+0x60>
 8003fc4:	b970      	cbnz	r0, 8003fe4 <sin+0x74>
 8003fc6:	2001      	movs	r0, #1
 8003fc8:	e7dd      	b.n	8003f86 <sin+0x16>
 8003fca:	f000 fbf5 	bl	80047b8 <__kernel_cos>
 8003fce:	e7dc      	b.n	8003f8a <sin+0x1a>
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	f001 f829 	bl	8005028 <__kernel_sin>
 8003fd6:	ec53 2b10 	vmov	r2, r3, d0
 8003fda:	ee10 0a10 	vmov	r0, s0
 8003fde:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003fe2:	e7dd      	b.n	8003fa0 <sin+0x30>
 8003fe4:	f000 fbe8 	bl	80047b8 <__kernel_cos>
 8003fe8:	e7f5      	b.n	8003fd6 <sin+0x66>
 8003fea:	bf00      	nop
 8003fec:	f3af 8000 	nop.w
	...
 8003ff8:	3fe921fb 	.word	0x3fe921fb
 8003ffc:	7fefffff 	.word	0x7fefffff

08004000 <atan2>:
 8004000:	f000 b85a 	b.w	80040b8 <__ieee754_atan2>

08004004 <sqrt>:
 8004004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004008:	ed2d 8b02 	vpush	{d8}
 800400c:	b08b      	sub	sp, #44	; 0x2c
 800400e:	ec55 4b10 	vmov	r4, r5, d0
 8004012:	f000 fb1f 	bl	8004654 <__ieee754_sqrt>
 8004016:	4b26      	ldr	r3, [pc, #152]	; (80040b0 <sqrt+0xac>)
 8004018:	eeb0 8a40 	vmov.f32	s16, s0
 800401c:	eef0 8a60 	vmov.f32	s17, s1
 8004020:	f993 6000 	ldrsb.w	r6, [r3]
 8004024:	1c73      	adds	r3, r6, #1
 8004026:	d02a      	beq.n	800407e <sqrt+0x7a>
 8004028:	4622      	mov	r2, r4
 800402a:	462b      	mov	r3, r5
 800402c:	4620      	mov	r0, r4
 800402e:	4629      	mov	r1, r5
 8004030:	f7fc fd80 	bl	8000b34 <__aeabi_dcmpun>
 8004034:	4607      	mov	r7, r0
 8004036:	bb10      	cbnz	r0, 800407e <sqrt+0x7a>
 8004038:	f04f 0800 	mov.w	r8, #0
 800403c:	f04f 0900 	mov.w	r9, #0
 8004040:	4642      	mov	r2, r8
 8004042:	464b      	mov	r3, r9
 8004044:	4620      	mov	r0, r4
 8004046:	4629      	mov	r1, r5
 8004048:	f7fc fd4c 	bl	8000ae4 <__aeabi_dcmplt>
 800404c:	b1b8      	cbz	r0, 800407e <sqrt+0x7a>
 800404e:	2301      	movs	r3, #1
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	4b18      	ldr	r3, [pc, #96]	; (80040b4 <sqrt+0xb0>)
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	9708      	str	r7, [sp, #32]
 8004058:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800405c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004060:	b9b6      	cbnz	r6, 8004090 <sqrt+0x8c>
 8004062:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004066:	4668      	mov	r0, sp
 8004068:	f001 f91e 	bl	80052a8 <matherr>
 800406c:	b1d0      	cbz	r0, 80040a4 <sqrt+0xa0>
 800406e:	9b08      	ldr	r3, [sp, #32]
 8004070:	b11b      	cbz	r3, 800407a <sqrt+0x76>
 8004072:	f7ff f881 	bl	8003178 <__errno>
 8004076:	9b08      	ldr	r3, [sp, #32]
 8004078:	6003      	str	r3, [r0, #0]
 800407a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800407e:	eeb0 0a48 	vmov.f32	s0, s16
 8004082:	eef0 0a68 	vmov.f32	s1, s17
 8004086:	b00b      	add	sp, #44	; 0x2c
 8004088:	ecbd 8b02 	vpop	{d8}
 800408c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004090:	4642      	mov	r2, r8
 8004092:	464b      	mov	r3, r9
 8004094:	4640      	mov	r0, r8
 8004096:	4649      	mov	r1, r9
 8004098:	f7fc fbdc 	bl	8000854 <__aeabi_ddiv>
 800409c:	2e02      	cmp	r6, #2
 800409e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80040a2:	d1e0      	bne.n	8004066 <sqrt+0x62>
 80040a4:	f7ff f868 	bl	8003178 <__errno>
 80040a8:	2321      	movs	r3, #33	; 0x21
 80040aa:	6003      	str	r3, [r0, #0]
 80040ac:	e7df      	b.n	800406e <sqrt+0x6a>
 80040ae:	bf00      	nop
 80040b0:	20000208 	.word	0x20000208
 80040b4:	08005738 	.word	0x08005738

080040b8 <__ieee754_atan2>:
 80040b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040bc:	ec57 6b11 	vmov	r6, r7, d1
 80040c0:	4273      	negs	r3, r6
 80040c2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80040c6:	4333      	orrs	r3, r6
 80040c8:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8004268 <__ieee754_atan2+0x1b0>
 80040cc:	ec51 0b10 	vmov	r0, r1, d0
 80040d0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80040d4:	4563      	cmp	r3, ip
 80040d6:	ee11 8a10 	vmov	r8, s2
 80040da:	ee10 9a10 	vmov	r9, s0
 80040de:	468e      	mov	lr, r1
 80040e0:	d807      	bhi.n	80040f2 <__ieee754_atan2+0x3a>
 80040e2:	4244      	negs	r4, r0
 80040e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80040e8:	4304      	orrs	r4, r0
 80040ea:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80040ee:	4564      	cmp	r4, ip
 80040f0:	d907      	bls.n	8004102 <__ieee754_atan2+0x4a>
 80040f2:	4632      	mov	r2, r6
 80040f4:	463b      	mov	r3, r7
 80040f6:	f7fc f8d1 	bl	800029c <__adddf3>
 80040fa:	ec41 0b10 	vmov	d0, r0, r1
 80040fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004102:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8004106:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800410a:	4334      	orrs	r4, r6
 800410c:	d103      	bne.n	8004116 <__ieee754_atan2+0x5e>
 800410e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004112:	f7ff bd39 	b.w	8003b88 <atan>
 8004116:	17bc      	asrs	r4, r7, #30
 8004118:	f004 0402 	and.w	r4, r4, #2
 800411c:	ea59 0903 	orrs.w	r9, r9, r3
 8004120:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8004124:	d107      	bne.n	8004136 <__ieee754_atan2+0x7e>
 8004126:	2c02      	cmp	r4, #2
 8004128:	d030      	beq.n	800418c <__ieee754_atan2+0xd4>
 800412a:	2c03      	cmp	r4, #3
 800412c:	d1e5      	bne.n	80040fa <__ieee754_atan2+0x42>
 800412e:	a13c      	add	r1, pc, #240	; (adr r1, 8004220 <__ieee754_atan2+0x168>)
 8004130:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004134:	e7e1      	b.n	80040fa <__ieee754_atan2+0x42>
 8004136:	ea58 0802 	orrs.w	r8, r8, r2
 800413a:	d106      	bne.n	800414a <__ieee754_atan2+0x92>
 800413c:	f1be 0f00 	cmp.w	lr, #0
 8004140:	da6a      	bge.n	8004218 <__ieee754_atan2+0x160>
 8004142:	a139      	add	r1, pc, #228	; (adr r1, 8004228 <__ieee754_atan2+0x170>)
 8004144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004148:	e7d7      	b.n	80040fa <__ieee754_atan2+0x42>
 800414a:	4562      	cmp	r2, ip
 800414c:	d122      	bne.n	8004194 <__ieee754_atan2+0xdc>
 800414e:	4293      	cmp	r3, r2
 8004150:	d111      	bne.n	8004176 <__ieee754_atan2+0xbe>
 8004152:	2c02      	cmp	r4, #2
 8004154:	d007      	beq.n	8004166 <__ieee754_atan2+0xae>
 8004156:	2c03      	cmp	r4, #3
 8004158:	d009      	beq.n	800416e <__ieee754_atan2+0xb6>
 800415a:	2c01      	cmp	r4, #1
 800415c:	d156      	bne.n	800420c <__ieee754_atan2+0x154>
 800415e:	a134      	add	r1, pc, #208	; (adr r1, 8004230 <__ieee754_atan2+0x178>)
 8004160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004164:	e7c9      	b.n	80040fa <__ieee754_atan2+0x42>
 8004166:	a134      	add	r1, pc, #208	; (adr r1, 8004238 <__ieee754_atan2+0x180>)
 8004168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800416c:	e7c5      	b.n	80040fa <__ieee754_atan2+0x42>
 800416e:	a134      	add	r1, pc, #208	; (adr r1, 8004240 <__ieee754_atan2+0x188>)
 8004170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004174:	e7c1      	b.n	80040fa <__ieee754_atan2+0x42>
 8004176:	2c02      	cmp	r4, #2
 8004178:	d008      	beq.n	800418c <__ieee754_atan2+0xd4>
 800417a:	2c03      	cmp	r4, #3
 800417c:	d0d7      	beq.n	800412e <__ieee754_atan2+0x76>
 800417e:	2c01      	cmp	r4, #1
 8004180:	f04f 0000 	mov.w	r0, #0
 8004184:	d146      	bne.n	8004214 <__ieee754_atan2+0x15c>
 8004186:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800418a:	e7b6      	b.n	80040fa <__ieee754_atan2+0x42>
 800418c:	a12e      	add	r1, pc, #184	; (adr r1, 8004248 <__ieee754_atan2+0x190>)
 800418e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004192:	e7b2      	b.n	80040fa <__ieee754_atan2+0x42>
 8004194:	4563      	cmp	r3, ip
 8004196:	d0d1      	beq.n	800413c <__ieee754_atan2+0x84>
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	151b      	asrs	r3, r3, #20
 800419c:	2b3c      	cmp	r3, #60	; 0x3c
 800419e:	dc1e      	bgt.n	80041de <__ieee754_atan2+0x126>
 80041a0:	2f00      	cmp	r7, #0
 80041a2:	da01      	bge.n	80041a8 <__ieee754_atan2+0xf0>
 80041a4:	333c      	adds	r3, #60	; 0x3c
 80041a6:	db1e      	blt.n	80041e6 <__ieee754_atan2+0x12e>
 80041a8:	4632      	mov	r2, r6
 80041aa:	463b      	mov	r3, r7
 80041ac:	f7fc fb52 	bl	8000854 <__aeabi_ddiv>
 80041b0:	ec41 0b10 	vmov	d0, r0, r1
 80041b4:	f7ff fed4 	bl	8003f60 <fabs>
 80041b8:	f7ff fce6 	bl	8003b88 <atan>
 80041bc:	ec51 0b10 	vmov	r0, r1, d0
 80041c0:	2c01      	cmp	r4, #1
 80041c2:	d013      	beq.n	80041ec <__ieee754_atan2+0x134>
 80041c4:	2c02      	cmp	r4, #2
 80041c6:	d014      	beq.n	80041f2 <__ieee754_atan2+0x13a>
 80041c8:	2c00      	cmp	r4, #0
 80041ca:	d096      	beq.n	80040fa <__ieee754_atan2+0x42>
 80041cc:	a320      	add	r3, pc, #128	; (adr r3, 8004250 <__ieee754_atan2+0x198>)
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	f7fc f861 	bl	8000298 <__aeabi_dsub>
 80041d6:	a31c      	add	r3, pc, #112	; (adr r3, 8004248 <__ieee754_atan2+0x190>)
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	e013      	b.n	8004206 <__ieee754_atan2+0x14e>
 80041de:	a11e      	add	r1, pc, #120	; (adr r1, 8004258 <__ieee754_atan2+0x1a0>)
 80041e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041e4:	e7ec      	b.n	80041c0 <__ieee754_atan2+0x108>
 80041e6:	2000      	movs	r0, #0
 80041e8:	2100      	movs	r1, #0
 80041ea:	e7e9      	b.n	80041c0 <__ieee754_atan2+0x108>
 80041ec:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80041f0:	e783      	b.n	80040fa <__ieee754_atan2+0x42>
 80041f2:	a317      	add	r3, pc, #92	; (adr r3, 8004250 <__ieee754_atan2+0x198>)
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f7fc f84e 	bl	8000298 <__aeabi_dsub>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	a111      	add	r1, pc, #68	; (adr r1, 8004248 <__ieee754_atan2+0x190>)
 8004202:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004206:	f7fc f847 	bl	8000298 <__aeabi_dsub>
 800420a:	e776      	b.n	80040fa <__ieee754_atan2+0x42>
 800420c:	a114      	add	r1, pc, #80	; (adr r1, 8004260 <__ieee754_atan2+0x1a8>)
 800420e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004212:	e772      	b.n	80040fa <__ieee754_atan2+0x42>
 8004214:	2100      	movs	r1, #0
 8004216:	e770      	b.n	80040fa <__ieee754_atan2+0x42>
 8004218:	a10f      	add	r1, pc, #60	; (adr r1, 8004258 <__ieee754_atan2+0x1a0>)
 800421a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800421e:	e76c      	b.n	80040fa <__ieee754_atan2+0x42>
 8004220:	54442d18 	.word	0x54442d18
 8004224:	c00921fb 	.word	0xc00921fb
 8004228:	54442d18 	.word	0x54442d18
 800422c:	bff921fb 	.word	0xbff921fb
 8004230:	54442d18 	.word	0x54442d18
 8004234:	bfe921fb 	.word	0xbfe921fb
 8004238:	7f3321d2 	.word	0x7f3321d2
 800423c:	4002d97c 	.word	0x4002d97c
 8004240:	7f3321d2 	.word	0x7f3321d2
 8004244:	c002d97c 	.word	0xc002d97c
 8004248:	54442d18 	.word	0x54442d18
 800424c:	400921fb 	.word	0x400921fb
 8004250:	33145c07 	.word	0x33145c07
 8004254:	3ca1a626 	.word	0x3ca1a626
 8004258:	54442d18 	.word	0x54442d18
 800425c:	3ff921fb 	.word	0x3ff921fb
 8004260:	54442d18 	.word	0x54442d18
 8004264:	3fe921fb 	.word	0x3fe921fb
 8004268:	7ff00000 	.word	0x7ff00000
 800426c:	00000000 	.word	0x00000000

08004270 <__ieee754_rem_pio2>:
 8004270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004274:	ec57 6b10 	vmov	r6, r7, d0
 8004278:	4bc3      	ldr	r3, [pc, #780]	; (8004588 <__ieee754_rem_pio2+0x318>)
 800427a:	b08d      	sub	sp, #52	; 0x34
 800427c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004280:	4598      	cmp	r8, r3
 8004282:	4604      	mov	r4, r0
 8004284:	9704      	str	r7, [sp, #16]
 8004286:	dc07      	bgt.n	8004298 <__ieee754_rem_pio2+0x28>
 8004288:	2200      	movs	r2, #0
 800428a:	2300      	movs	r3, #0
 800428c:	ed84 0b00 	vstr	d0, [r4]
 8004290:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004294:	2500      	movs	r5, #0
 8004296:	e027      	b.n	80042e8 <__ieee754_rem_pio2+0x78>
 8004298:	4bbc      	ldr	r3, [pc, #752]	; (800458c <__ieee754_rem_pio2+0x31c>)
 800429a:	4598      	cmp	r8, r3
 800429c:	dc75      	bgt.n	800438a <__ieee754_rem_pio2+0x11a>
 800429e:	9b04      	ldr	r3, [sp, #16]
 80042a0:	4dbb      	ldr	r5, [pc, #748]	; (8004590 <__ieee754_rem_pio2+0x320>)
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	ee10 0a10 	vmov	r0, s0
 80042a8:	a3a9      	add	r3, pc, #676	; (adr r3, 8004550 <__ieee754_rem_pio2+0x2e0>)
 80042aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ae:	4639      	mov	r1, r7
 80042b0:	dd36      	ble.n	8004320 <__ieee754_rem_pio2+0xb0>
 80042b2:	f7fb fff1 	bl	8000298 <__aeabi_dsub>
 80042b6:	45a8      	cmp	r8, r5
 80042b8:	4606      	mov	r6, r0
 80042ba:	460f      	mov	r7, r1
 80042bc:	d018      	beq.n	80042f0 <__ieee754_rem_pio2+0x80>
 80042be:	a3a6      	add	r3, pc, #664	; (adr r3, 8004558 <__ieee754_rem_pio2+0x2e8>)
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	f7fb ffe8 	bl	8000298 <__aeabi_dsub>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	e9c4 2300 	strd	r2, r3, [r4]
 80042d0:	4630      	mov	r0, r6
 80042d2:	4639      	mov	r1, r7
 80042d4:	f7fb ffe0 	bl	8000298 <__aeabi_dsub>
 80042d8:	a39f      	add	r3, pc, #636	; (adr r3, 8004558 <__ieee754_rem_pio2+0x2e8>)
 80042da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042de:	f7fb ffdb 	bl	8000298 <__aeabi_dsub>
 80042e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80042e6:	2501      	movs	r5, #1
 80042e8:	4628      	mov	r0, r5
 80042ea:	b00d      	add	sp, #52	; 0x34
 80042ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042f0:	a39b      	add	r3, pc, #620	; (adr r3, 8004560 <__ieee754_rem_pio2+0x2f0>)
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	f7fb ffcf 	bl	8000298 <__aeabi_dsub>
 80042fa:	a39b      	add	r3, pc, #620	; (adr r3, 8004568 <__ieee754_rem_pio2+0x2f8>)
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	4606      	mov	r6, r0
 8004302:	460f      	mov	r7, r1
 8004304:	f7fb ffc8 	bl	8000298 <__aeabi_dsub>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	e9c4 2300 	strd	r2, r3, [r4]
 8004310:	4630      	mov	r0, r6
 8004312:	4639      	mov	r1, r7
 8004314:	f7fb ffc0 	bl	8000298 <__aeabi_dsub>
 8004318:	a393      	add	r3, pc, #588	; (adr r3, 8004568 <__ieee754_rem_pio2+0x2f8>)
 800431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431e:	e7de      	b.n	80042de <__ieee754_rem_pio2+0x6e>
 8004320:	f7fb ffbc 	bl	800029c <__adddf3>
 8004324:	45a8      	cmp	r8, r5
 8004326:	4606      	mov	r6, r0
 8004328:	460f      	mov	r7, r1
 800432a:	d016      	beq.n	800435a <__ieee754_rem_pio2+0xea>
 800432c:	a38a      	add	r3, pc, #552	; (adr r3, 8004558 <__ieee754_rem_pio2+0x2e8>)
 800432e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004332:	f7fb ffb3 	bl	800029c <__adddf3>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	e9c4 2300 	strd	r2, r3, [r4]
 800433e:	4630      	mov	r0, r6
 8004340:	4639      	mov	r1, r7
 8004342:	f7fb ffa9 	bl	8000298 <__aeabi_dsub>
 8004346:	a384      	add	r3, pc, #528	; (adr r3, 8004558 <__ieee754_rem_pio2+0x2e8>)
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	f7fb ffa6 	bl	800029c <__adddf3>
 8004350:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004354:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004358:	e7c6      	b.n	80042e8 <__ieee754_rem_pio2+0x78>
 800435a:	a381      	add	r3, pc, #516	; (adr r3, 8004560 <__ieee754_rem_pio2+0x2f0>)
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	f7fb ff9c 	bl	800029c <__adddf3>
 8004364:	a380      	add	r3, pc, #512	; (adr r3, 8004568 <__ieee754_rem_pio2+0x2f8>)
 8004366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436a:	4606      	mov	r6, r0
 800436c:	460f      	mov	r7, r1
 800436e:	f7fb ff95 	bl	800029c <__adddf3>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	e9c4 2300 	strd	r2, r3, [r4]
 800437a:	4630      	mov	r0, r6
 800437c:	4639      	mov	r1, r7
 800437e:	f7fb ff8b 	bl	8000298 <__aeabi_dsub>
 8004382:	a379      	add	r3, pc, #484	; (adr r3, 8004568 <__ieee754_rem_pio2+0x2f8>)
 8004384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004388:	e7e0      	b.n	800434c <__ieee754_rem_pio2+0xdc>
 800438a:	4b82      	ldr	r3, [pc, #520]	; (8004594 <__ieee754_rem_pio2+0x324>)
 800438c:	4598      	cmp	r8, r3
 800438e:	f300 80d0 	bgt.w	8004532 <__ieee754_rem_pio2+0x2c2>
 8004392:	f7ff fde5 	bl	8003f60 <fabs>
 8004396:	ec57 6b10 	vmov	r6, r7, d0
 800439a:	ee10 0a10 	vmov	r0, s0
 800439e:	a374      	add	r3, pc, #464	; (adr r3, 8004570 <__ieee754_rem_pio2+0x300>)
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	4639      	mov	r1, r7
 80043a6:	f7fc f92b 	bl	8000600 <__aeabi_dmul>
 80043aa:	2200      	movs	r2, #0
 80043ac:	4b7a      	ldr	r3, [pc, #488]	; (8004598 <__ieee754_rem_pio2+0x328>)
 80043ae:	f7fb ff75 	bl	800029c <__adddf3>
 80043b2:	f7fc fbd5 	bl	8000b60 <__aeabi_d2iz>
 80043b6:	4605      	mov	r5, r0
 80043b8:	f7fc f8bc 	bl	8000534 <__aeabi_i2d>
 80043bc:	a364      	add	r3, pc, #400	; (adr r3, 8004550 <__ieee754_rem_pio2+0x2e0>)
 80043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043c6:	f7fc f91b 	bl	8000600 <__aeabi_dmul>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4630      	mov	r0, r6
 80043d0:	4639      	mov	r1, r7
 80043d2:	f7fb ff61 	bl	8000298 <__aeabi_dsub>
 80043d6:	a360      	add	r3, pc, #384	; (adr r3, 8004558 <__ieee754_rem_pio2+0x2e8>)
 80043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043dc:	4682      	mov	sl, r0
 80043de:	468b      	mov	fp, r1
 80043e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043e4:	f7fc f90c 	bl	8000600 <__aeabi_dmul>
 80043e8:	2d1f      	cmp	r5, #31
 80043ea:	4606      	mov	r6, r0
 80043ec:	460f      	mov	r7, r1
 80043ee:	dc2a      	bgt.n	8004446 <__ieee754_rem_pio2+0x1d6>
 80043f0:	1e6a      	subs	r2, r5, #1
 80043f2:	4b6a      	ldr	r3, [pc, #424]	; (800459c <__ieee754_rem_pio2+0x32c>)
 80043f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f8:	4598      	cmp	r8, r3
 80043fa:	d024      	beq.n	8004446 <__ieee754_rem_pio2+0x1d6>
 80043fc:	4632      	mov	r2, r6
 80043fe:	463b      	mov	r3, r7
 8004400:	4650      	mov	r0, sl
 8004402:	4659      	mov	r1, fp
 8004404:	f7fb ff48 	bl	8000298 <__aeabi_dsub>
 8004408:	e9c4 0100 	strd	r0, r1, [r4]
 800440c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004410:	4650      	mov	r0, sl
 8004412:	4642      	mov	r2, r8
 8004414:	464b      	mov	r3, r9
 8004416:	4659      	mov	r1, fp
 8004418:	f7fb ff3e 	bl	8000298 <__aeabi_dsub>
 800441c:	463b      	mov	r3, r7
 800441e:	4632      	mov	r2, r6
 8004420:	f7fb ff3a 	bl	8000298 <__aeabi_dsub>
 8004424:	9b04      	ldr	r3, [sp, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800442c:	f6bf af5c 	bge.w	80042e8 <__ieee754_rem_pio2+0x78>
 8004430:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004434:	6063      	str	r3, [r4, #4]
 8004436:	f8c4 8000 	str.w	r8, [r4]
 800443a:	60a0      	str	r0, [r4, #8]
 800443c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004440:	60e3      	str	r3, [r4, #12]
 8004442:	426d      	negs	r5, r5
 8004444:	e750      	b.n	80042e8 <__ieee754_rem_pio2+0x78>
 8004446:	4632      	mov	r2, r6
 8004448:	463b      	mov	r3, r7
 800444a:	4650      	mov	r0, sl
 800444c:	4659      	mov	r1, fp
 800444e:	f7fb ff23 	bl	8000298 <__aeabi_dsub>
 8004452:	ea4f 5228 	mov.w	r2, r8, asr #20
 8004456:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b10      	cmp	r3, #16
 800445e:	e9c4 0100 	strd	r0, r1, [r4]
 8004462:	9205      	str	r2, [sp, #20]
 8004464:	ddd2      	ble.n	800440c <__ieee754_rem_pio2+0x19c>
 8004466:	a33e      	add	r3, pc, #248	; (adr r3, 8004560 <__ieee754_rem_pio2+0x2f0>)
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004470:	f7fc f8c6 	bl	8000600 <__aeabi_dmul>
 8004474:	4606      	mov	r6, r0
 8004476:	460f      	mov	r7, r1
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4650      	mov	r0, sl
 800447e:	4659      	mov	r1, fp
 8004480:	f7fb ff0a 	bl	8000298 <__aeabi_dsub>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4680      	mov	r8, r0
 800448a:	4689      	mov	r9, r1
 800448c:	4650      	mov	r0, sl
 800448e:	4659      	mov	r1, fp
 8004490:	f7fb ff02 	bl	8000298 <__aeabi_dsub>
 8004494:	4632      	mov	r2, r6
 8004496:	463b      	mov	r3, r7
 8004498:	f7fb fefe 	bl	8000298 <__aeabi_dsub>
 800449c:	a332      	add	r3, pc, #200	; (adr r3, 8004568 <__ieee754_rem_pio2+0x2f8>)
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	4606      	mov	r6, r0
 80044a4:	460f      	mov	r7, r1
 80044a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044aa:	f7fc f8a9 	bl	8000600 <__aeabi_dmul>
 80044ae:	4632      	mov	r2, r6
 80044b0:	463b      	mov	r3, r7
 80044b2:	f7fb fef1 	bl	8000298 <__aeabi_dsub>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4606      	mov	r6, r0
 80044bc:	460f      	mov	r7, r1
 80044be:	4640      	mov	r0, r8
 80044c0:	4649      	mov	r1, r9
 80044c2:	f7fb fee9 	bl	8000298 <__aeabi_dsub>
 80044c6:	9a05      	ldr	r2, [sp, #20]
 80044c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b31      	cmp	r3, #49	; 0x31
 80044d0:	e9c4 0100 	strd	r0, r1, [r4]
 80044d4:	dd2a      	ble.n	800452c <__ieee754_rem_pio2+0x2bc>
 80044d6:	a328      	add	r3, pc, #160	; (adr r3, 8004578 <__ieee754_rem_pio2+0x308>)
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044e0:	f7fc f88e 	bl	8000600 <__aeabi_dmul>
 80044e4:	4606      	mov	r6, r0
 80044e6:	460f      	mov	r7, r1
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4640      	mov	r0, r8
 80044ee:	4649      	mov	r1, r9
 80044f0:	f7fb fed2 	bl	8000298 <__aeabi_dsub>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	4682      	mov	sl, r0
 80044fa:	468b      	mov	fp, r1
 80044fc:	4640      	mov	r0, r8
 80044fe:	4649      	mov	r1, r9
 8004500:	f7fb feca 	bl	8000298 <__aeabi_dsub>
 8004504:	4632      	mov	r2, r6
 8004506:	463b      	mov	r3, r7
 8004508:	f7fb fec6 	bl	8000298 <__aeabi_dsub>
 800450c:	a31c      	add	r3, pc, #112	; (adr r3, 8004580 <__ieee754_rem_pio2+0x310>)
 800450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004512:	4606      	mov	r6, r0
 8004514:	460f      	mov	r7, r1
 8004516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800451a:	f7fc f871 	bl	8000600 <__aeabi_dmul>
 800451e:	4632      	mov	r2, r6
 8004520:	463b      	mov	r3, r7
 8004522:	f7fb feb9 	bl	8000298 <__aeabi_dsub>
 8004526:	4606      	mov	r6, r0
 8004528:	460f      	mov	r7, r1
 800452a:	e767      	b.n	80043fc <__ieee754_rem_pio2+0x18c>
 800452c:	46c2      	mov	sl, r8
 800452e:	46cb      	mov	fp, r9
 8004530:	e76c      	b.n	800440c <__ieee754_rem_pio2+0x19c>
 8004532:	4b1b      	ldr	r3, [pc, #108]	; (80045a0 <__ieee754_rem_pio2+0x330>)
 8004534:	4598      	cmp	r8, r3
 8004536:	dd35      	ble.n	80045a4 <__ieee754_rem_pio2+0x334>
 8004538:	ee10 2a10 	vmov	r2, s0
 800453c:	463b      	mov	r3, r7
 800453e:	4630      	mov	r0, r6
 8004540:	4639      	mov	r1, r7
 8004542:	f7fb fea9 	bl	8000298 <__aeabi_dsub>
 8004546:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800454a:	e9c4 0100 	strd	r0, r1, [r4]
 800454e:	e6a1      	b.n	8004294 <__ieee754_rem_pio2+0x24>
 8004550:	54400000 	.word	0x54400000
 8004554:	3ff921fb 	.word	0x3ff921fb
 8004558:	1a626331 	.word	0x1a626331
 800455c:	3dd0b461 	.word	0x3dd0b461
 8004560:	1a600000 	.word	0x1a600000
 8004564:	3dd0b461 	.word	0x3dd0b461
 8004568:	2e037073 	.word	0x2e037073
 800456c:	3ba3198a 	.word	0x3ba3198a
 8004570:	6dc9c883 	.word	0x6dc9c883
 8004574:	3fe45f30 	.word	0x3fe45f30
 8004578:	2e000000 	.word	0x2e000000
 800457c:	3ba3198a 	.word	0x3ba3198a
 8004580:	252049c1 	.word	0x252049c1
 8004584:	397b839a 	.word	0x397b839a
 8004588:	3fe921fb 	.word	0x3fe921fb
 800458c:	4002d97b 	.word	0x4002d97b
 8004590:	3ff921fb 	.word	0x3ff921fb
 8004594:	413921fb 	.word	0x413921fb
 8004598:	3fe00000 	.word	0x3fe00000
 800459c:	08005740 	.word	0x08005740
 80045a0:	7fefffff 	.word	0x7fefffff
 80045a4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80045a8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80045ac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80045b0:	4630      	mov	r0, r6
 80045b2:	460f      	mov	r7, r1
 80045b4:	f7fc fad4 	bl	8000b60 <__aeabi_d2iz>
 80045b8:	f7fb ffbc 	bl	8000534 <__aeabi_i2d>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4630      	mov	r0, r6
 80045c2:	4639      	mov	r1, r7
 80045c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80045c8:	f7fb fe66 	bl	8000298 <__aeabi_dsub>
 80045cc:	2200      	movs	r2, #0
 80045ce:	4b1f      	ldr	r3, [pc, #124]	; (800464c <__ieee754_rem_pio2+0x3dc>)
 80045d0:	f7fc f816 	bl	8000600 <__aeabi_dmul>
 80045d4:	460f      	mov	r7, r1
 80045d6:	4606      	mov	r6, r0
 80045d8:	f7fc fac2 	bl	8000b60 <__aeabi_d2iz>
 80045dc:	f7fb ffaa 	bl	8000534 <__aeabi_i2d>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4630      	mov	r0, r6
 80045e6:	4639      	mov	r1, r7
 80045e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80045ec:	f7fb fe54 	bl	8000298 <__aeabi_dsub>
 80045f0:	2200      	movs	r2, #0
 80045f2:	4b16      	ldr	r3, [pc, #88]	; (800464c <__ieee754_rem_pio2+0x3dc>)
 80045f4:	f7fc f804 	bl	8000600 <__aeabi_dmul>
 80045f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80045fc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8004600:	f04f 0803 	mov.w	r8, #3
 8004604:	2600      	movs	r6, #0
 8004606:	2700      	movs	r7, #0
 8004608:	4632      	mov	r2, r6
 800460a:	463b      	mov	r3, r7
 800460c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004610:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8004614:	f7fc fa5c 	bl	8000ad0 <__aeabi_dcmpeq>
 8004618:	b9b0      	cbnz	r0, 8004648 <__ieee754_rem_pio2+0x3d8>
 800461a:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <__ieee754_rem_pio2+0x3e0>)
 800461c:	9301      	str	r3, [sp, #4]
 800461e:	2302      	movs	r3, #2
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	462a      	mov	r2, r5
 8004624:	4643      	mov	r3, r8
 8004626:	4621      	mov	r1, r4
 8004628:	a806      	add	r0, sp, #24
 800462a:	f000 f9ad 	bl	8004988 <__kernel_rem_pio2>
 800462e:	9b04      	ldr	r3, [sp, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	4605      	mov	r5, r0
 8004634:	f6bf ae58 	bge.w	80042e8 <__ieee754_rem_pio2+0x78>
 8004638:	6863      	ldr	r3, [r4, #4]
 800463a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800463e:	6063      	str	r3, [r4, #4]
 8004640:	68e3      	ldr	r3, [r4, #12]
 8004642:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004646:	e6fb      	b.n	8004440 <__ieee754_rem_pio2+0x1d0>
 8004648:	46d0      	mov	r8, sl
 800464a:	e7dd      	b.n	8004608 <__ieee754_rem_pio2+0x398>
 800464c:	41700000 	.word	0x41700000
 8004650:	080057c0 	.word	0x080057c0

08004654 <__ieee754_sqrt>:
 8004654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004658:	ec55 4b10 	vmov	r4, r5, d0
 800465c:	4e54      	ldr	r6, [pc, #336]	; (80047b0 <__ieee754_sqrt+0x15c>)
 800465e:	43ae      	bics	r6, r5
 8004660:	ee10 0a10 	vmov	r0, s0
 8004664:	462b      	mov	r3, r5
 8004666:	462a      	mov	r2, r5
 8004668:	4621      	mov	r1, r4
 800466a:	d113      	bne.n	8004694 <__ieee754_sqrt+0x40>
 800466c:	ee10 2a10 	vmov	r2, s0
 8004670:	462b      	mov	r3, r5
 8004672:	ee10 0a10 	vmov	r0, s0
 8004676:	4629      	mov	r1, r5
 8004678:	f7fb ffc2 	bl	8000600 <__aeabi_dmul>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4620      	mov	r0, r4
 8004682:	4629      	mov	r1, r5
 8004684:	f7fb fe0a 	bl	800029c <__adddf3>
 8004688:	4604      	mov	r4, r0
 800468a:	460d      	mov	r5, r1
 800468c:	ec45 4b10 	vmov	d0, r4, r5
 8004690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004694:	2d00      	cmp	r5, #0
 8004696:	dc10      	bgt.n	80046ba <__ieee754_sqrt+0x66>
 8004698:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800469c:	4330      	orrs	r0, r6
 800469e:	d0f5      	beq.n	800468c <__ieee754_sqrt+0x38>
 80046a0:	b15d      	cbz	r5, 80046ba <__ieee754_sqrt+0x66>
 80046a2:	ee10 2a10 	vmov	r2, s0
 80046a6:	462b      	mov	r3, r5
 80046a8:	4620      	mov	r0, r4
 80046aa:	4629      	mov	r1, r5
 80046ac:	f7fb fdf4 	bl	8000298 <__aeabi_dsub>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	f7fc f8ce 	bl	8000854 <__aeabi_ddiv>
 80046b8:	e7e6      	b.n	8004688 <__ieee754_sqrt+0x34>
 80046ba:	151b      	asrs	r3, r3, #20
 80046bc:	d10c      	bne.n	80046d8 <__ieee754_sqrt+0x84>
 80046be:	2a00      	cmp	r2, #0
 80046c0:	d06d      	beq.n	800479e <__ieee754_sqrt+0x14a>
 80046c2:	2000      	movs	r0, #0
 80046c4:	02d6      	lsls	r6, r2, #11
 80046c6:	d56e      	bpl.n	80047a6 <__ieee754_sqrt+0x152>
 80046c8:	1e44      	subs	r4, r0, #1
 80046ca:	1b1b      	subs	r3, r3, r4
 80046cc:	f1c0 0420 	rsb	r4, r0, #32
 80046d0:	fa21 f404 	lsr.w	r4, r1, r4
 80046d4:	4322      	orrs	r2, r4
 80046d6:	4081      	lsls	r1, r0
 80046d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80046dc:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80046e0:	07dd      	lsls	r5, r3, #31
 80046e2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80046e6:	bf42      	ittt	mi
 80046e8:	0052      	lslmi	r2, r2, #1
 80046ea:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80046ee:	0049      	lslmi	r1, r1, #1
 80046f0:	1058      	asrs	r0, r3, #1
 80046f2:	2500      	movs	r5, #0
 80046f4:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 80046f8:	441a      	add	r2, r3
 80046fa:	0049      	lsls	r1, r1, #1
 80046fc:	2316      	movs	r3, #22
 80046fe:	462c      	mov	r4, r5
 8004700:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004704:	19a7      	adds	r7, r4, r6
 8004706:	4297      	cmp	r7, r2
 8004708:	bfde      	ittt	le
 800470a:	1bd2      	suble	r2, r2, r7
 800470c:	19bc      	addle	r4, r7, r6
 800470e:	19ad      	addle	r5, r5, r6
 8004710:	0052      	lsls	r2, r2, #1
 8004712:	3b01      	subs	r3, #1
 8004714:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8004718:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800471c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004720:	d1f0      	bne.n	8004704 <__ieee754_sqrt+0xb0>
 8004722:	f04f 0e20 	mov.w	lr, #32
 8004726:	469c      	mov	ip, r3
 8004728:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800472c:	42a2      	cmp	r2, r4
 800472e:	eb06 070c 	add.w	r7, r6, ip
 8004732:	dc02      	bgt.n	800473a <__ieee754_sqrt+0xe6>
 8004734:	d112      	bne.n	800475c <__ieee754_sqrt+0x108>
 8004736:	428f      	cmp	r7, r1
 8004738:	d810      	bhi.n	800475c <__ieee754_sqrt+0x108>
 800473a:	2f00      	cmp	r7, #0
 800473c:	eb07 0c06 	add.w	ip, r7, r6
 8004740:	da34      	bge.n	80047ac <__ieee754_sqrt+0x158>
 8004742:	f1bc 0f00 	cmp.w	ip, #0
 8004746:	db31      	blt.n	80047ac <__ieee754_sqrt+0x158>
 8004748:	f104 0801 	add.w	r8, r4, #1
 800474c:	1b12      	subs	r2, r2, r4
 800474e:	428f      	cmp	r7, r1
 8004750:	bf88      	it	hi
 8004752:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8004756:	1bc9      	subs	r1, r1, r7
 8004758:	4433      	add	r3, r6
 800475a:	4644      	mov	r4, r8
 800475c:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8004760:	f1be 0e01 	subs.w	lr, lr, #1
 8004764:	443a      	add	r2, r7
 8004766:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800476a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800476e:	d1dd      	bne.n	800472c <__ieee754_sqrt+0xd8>
 8004770:	430a      	orrs	r2, r1
 8004772:	d006      	beq.n	8004782 <__ieee754_sqrt+0x12e>
 8004774:	1c5c      	adds	r4, r3, #1
 8004776:	bf13      	iteet	ne
 8004778:	3301      	addne	r3, #1
 800477a:	3501      	addeq	r5, #1
 800477c:	4673      	moveq	r3, lr
 800477e:	f023 0301 	bicne.w	r3, r3, #1
 8004782:	106a      	asrs	r2, r5, #1
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	07e9      	lsls	r1, r5, #31
 8004788:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800478c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004790:	bf48      	it	mi
 8004792:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004796:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800479a:	461c      	mov	r4, r3
 800479c:	e776      	b.n	800468c <__ieee754_sqrt+0x38>
 800479e:	0aca      	lsrs	r2, r1, #11
 80047a0:	3b15      	subs	r3, #21
 80047a2:	0549      	lsls	r1, r1, #21
 80047a4:	e78b      	b.n	80046be <__ieee754_sqrt+0x6a>
 80047a6:	0052      	lsls	r2, r2, #1
 80047a8:	3001      	adds	r0, #1
 80047aa:	e78b      	b.n	80046c4 <__ieee754_sqrt+0x70>
 80047ac:	46a0      	mov	r8, r4
 80047ae:	e7cd      	b.n	800474c <__ieee754_sqrt+0xf8>
 80047b0:	7ff00000 	.word	0x7ff00000
 80047b4:	00000000 	.word	0x00000000

080047b8 <__kernel_cos>:
 80047b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047bc:	ec59 8b10 	vmov	r8, r9, d0
 80047c0:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 80047c4:	b085      	sub	sp, #20
 80047c6:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80047ca:	ed8d 1b00 	vstr	d1, [sp]
 80047ce:	da07      	bge.n	80047e0 <__kernel_cos+0x28>
 80047d0:	ee10 0a10 	vmov	r0, s0
 80047d4:	4649      	mov	r1, r9
 80047d6:	f7fc f9c3 	bl	8000b60 <__aeabi_d2iz>
 80047da:	2800      	cmp	r0, #0
 80047dc:	f000 80aa 	beq.w	8004934 <__kernel_cos+0x17c>
 80047e0:	4642      	mov	r2, r8
 80047e2:	464b      	mov	r3, r9
 80047e4:	4640      	mov	r0, r8
 80047e6:	4649      	mov	r1, r9
 80047e8:	f7fb ff0a 	bl	8000600 <__aeabi_dmul>
 80047ec:	a359      	add	r3, pc, #356	; (adr r3, 8004954 <__kernel_cos+0x19c>)
 80047ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f2:	4604      	mov	r4, r0
 80047f4:	460d      	mov	r5, r1
 80047f6:	f7fb ff03 	bl	8000600 <__aeabi_dmul>
 80047fa:	a358      	add	r3, pc, #352	; (adr r3, 800495c <__kernel_cos+0x1a4>)
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	f7fb fd4c 	bl	800029c <__adddf3>
 8004804:	4622      	mov	r2, r4
 8004806:	462b      	mov	r3, r5
 8004808:	f7fb fefa 	bl	8000600 <__aeabi_dmul>
 800480c:	a355      	add	r3, pc, #340	; (adr r3, 8004964 <__kernel_cos+0x1ac>)
 800480e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004812:	f7fb fd41 	bl	8000298 <__aeabi_dsub>
 8004816:	4622      	mov	r2, r4
 8004818:	462b      	mov	r3, r5
 800481a:	f7fb fef1 	bl	8000600 <__aeabi_dmul>
 800481e:	a353      	add	r3, pc, #332	; (adr r3, 800496c <__kernel_cos+0x1b4>)
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	f7fb fd3a 	bl	800029c <__adddf3>
 8004828:	4622      	mov	r2, r4
 800482a:	462b      	mov	r3, r5
 800482c:	f7fb fee8 	bl	8000600 <__aeabi_dmul>
 8004830:	a350      	add	r3, pc, #320	; (adr r3, 8004974 <__kernel_cos+0x1bc>)
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	f7fb fd2f 	bl	8000298 <__aeabi_dsub>
 800483a:	4622      	mov	r2, r4
 800483c:	462b      	mov	r3, r5
 800483e:	f7fb fedf 	bl	8000600 <__aeabi_dmul>
 8004842:	a34e      	add	r3, pc, #312	; (adr r3, 800497c <__kernel_cos+0x1c4>)
 8004844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004848:	f7fb fd28 	bl	800029c <__adddf3>
 800484c:	462b      	mov	r3, r5
 800484e:	4622      	mov	r2, r4
 8004850:	f7fb fed6 	bl	8000600 <__aeabi_dmul>
 8004854:	4b3a      	ldr	r3, [pc, #232]	; (8004940 <__kernel_cos+0x188>)
 8004856:	429f      	cmp	r7, r3
 8004858:	4682      	mov	sl, r0
 800485a:	468b      	mov	fp, r1
 800485c:	dc2c      	bgt.n	80048b8 <__kernel_cos+0x100>
 800485e:	2200      	movs	r2, #0
 8004860:	4b38      	ldr	r3, [pc, #224]	; (8004944 <__kernel_cos+0x18c>)
 8004862:	4620      	mov	r0, r4
 8004864:	4629      	mov	r1, r5
 8004866:	f7fb fecb 	bl	8000600 <__aeabi_dmul>
 800486a:	4652      	mov	r2, sl
 800486c:	4606      	mov	r6, r0
 800486e:	460f      	mov	r7, r1
 8004870:	465b      	mov	r3, fp
 8004872:	4620      	mov	r0, r4
 8004874:	4629      	mov	r1, r5
 8004876:	f7fb fec3 	bl	8000600 <__aeabi_dmul>
 800487a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800487e:	4604      	mov	r4, r0
 8004880:	460d      	mov	r5, r1
 8004882:	4640      	mov	r0, r8
 8004884:	4649      	mov	r1, r9
 8004886:	f7fb febb 	bl	8000600 <__aeabi_dmul>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	4620      	mov	r0, r4
 8004890:	4629      	mov	r1, r5
 8004892:	f7fb fd01 	bl	8000298 <__aeabi_dsub>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4630      	mov	r0, r6
 800489c:	4639      	mov	r1, r7
 800489e:	f7fb fcfb 	bl	8000298 <__aeabi_dsub>
 80048a2:	460b      	mov	r3, r1
 80048a4:	4928      	ldr	r1, [pc, #160]	; (8004948 <__kernel_cos+0x190>)
 80048a6:	4602      	mov	r2, r0
 80048a8:	2000      	movs	r0, #0
 80048aa:	f7fb fcf5 	bl	8000298 <__aeabi_dsub>
 80048ae:	ec41 0b10 	vmov	d0, r0, r1
 80048b2:	b005      	add	sp, #20
 80048b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b8:	4b24      	ldr	r3, [pc, #144]	; (800494c <__kernel_cos+0x194>)
 80048ba:	4923      	ldr	r1, [pc, #140]	; (8004948 <__kernel_cos+0x190>)
 80048bc:	429f      	cmp	r7, r3
 80048be:	bfd7      	itett	le
 80048c0:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 80048c4:	4f22      	ldrgt	r7, [pc, #136]	; (8004950 <__kernel_cos+0x198>)
 80048c6:	2200      	movle	r2, #0
 80048c8:	4616      	movle	r6, r2
 80048ca:	bfd4      	ite	le
 80048cc:	461f      	movle	r7, r3
 80048ce:	2600      	movgt	r6, #0
 80048d0:	4632      	mov	r2, r6
 80048d2:	463b      	mov	r3, r7
 80048d4:	2000      	movs	r0, #0
 80048d6:	f7fb fcdf 	bl	8000298 <__aeabi_dsub>
 80048da:	2200      	movs	r2, #0
 80048dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048e0:	4b18      	ldr	r3, [pc, #96]	; (8004944 <__kernel_cos+0x18c>)
 80048e2:	4620      	mov	r0, r4
 80048e4:	4629      	mov	r1, r5
 80048e6:	f7fb fe8b 	bl	8000600 <__aeabi_dmul>
 80048ea:	4632      	mov	r2, r6
 80048ec:	463b      	mov	r3, r7
 80048ee:	f7fb fcd3 	bl	8000298 <__aeabi_dsub>
 80048f2:	4652      	mov	r2, sl
 80048f4:	4606      	mov	r6, r0
 80048f6:	460f      	mov	r7, r1
 80048f8:	465b      	mov	r3, fp
 80048fa:	4620      	mov	r0, r4
 80048fc:	4629      	mov	r1, r5
 80048fe:	f7fb fe7f 	bl	8000600 <__aeabi_dmul>
 8004902:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004906:	4604      	mov	r4, r0
 8004908:	460d      	mov	r5, r1
 800490a:	4640      	mov	r0, r8
 800490c:	4649      	mov	r1, r9
 800490e:	f7fb fe77 	bl	8000600 <__aeabi_dmul>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	4620      	mov	r0, r4
 8004918:	4629      	mov	r1, r5
 800491a:	f7fb fcbd 	bl	8000298 <__aeabi_dsub>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	4630      	mov	r0, r6
 8004924:	4639      	mov	r1, r7
 8004926:	f7fb fcb7 	bl	8000298 <__aeabi_dsub>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004932:	e7ba      	b.n	80048aa <__kernel_cos+0xf2>
 8004934:	2000      	movs	r0, #0
 8004936:	4904      	ldr	r1, [pc, #16]	; (8004948 <__kernel_cos+0x190>)
 8004938:	e7b9      	b.n	80048ae <__kernel_cos+0xf6>
 800493a:	bf00      	nop
 800493c:	f3af 8000 	nop.w
 8004940:	3fd33332 	.word	0x3fd33332
 8004944:	3fe00000 	.word	0x3fe00000
 8004948:	3ff00000 	.word	0x3ff00000
 800494c:	3fe90000 	.word	0x3fe90000
 8004950:	3fd20000 	.word	0x3fd20000
 8004954:	be8838d4 	.word	0xbe8838d4
 8004958:	bda8fae9 	.word	0xbda8fae9
 800495c:	bdb4b1c4 	.word	0xbdb4b1c4
 8004960:	3e21ee9e 	.word	0x3e21ee9e
 8004964:	809c52ad 	.word	0x809c52ad
 8004968:	3e927e4f 	.word	0x3e927e4f
 800496c:	19cb1590 	.word	0x19cb1590
 8004970:	3efa01a0 	.word	0x3efa01a0
 8004974:	16c15177 	.word	0x16c15177
 8004978:	3f56c16c 	.word	0x3f56c16c
 800497c:	5555554c 	.word	0x5555554c
 8004980:	3fa55555 	.word	0x3fa55555
 8004984:	00000000 	.word	0x00000000

08004988 <__kernel_rem_pio2>:
 8004988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800498c:	ed2d 8b02 	vpush	{d8}
 8004990:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004994:	1ed4      	subs	r4, r2, #3
 8004996:	9306      	str	r3, [sp, #24]
 8004998:	9102      	str	r1, [sp, #8]
 800499a:	4bc3      	ldr	r3, [pc, #780]	; (8004ca8 <__kernel_rem_pio2+0x320>)
 800499c:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800499e:	9009      	str	r0, [sp, #36]	; 0x24
 80049a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	9b06      	ldr	r3, [sp, #24]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	9304      	str	r3, [sp, #16]
 80049ac:	2318      	movs	r3, #24
 80049ae:	fb94 f4f3 	sdiv	r4, r4, r3
 80049b2:	f06f 0317 	mvn.w	r3, #23
 80049b6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80049ba:	fb04 3303 	mla	r3, r4, r3, r3
 80049be:	eb03 0a02 	add.w	sl, r3, r2
 80049c2:	9b00      	ldr	r3, [sp, #0]
 80049c4:	9a04      	ldr	r2, [sp, #16]
 80049c6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8004c98 <__kernel_rem_pio2+0x310>
 80049ca:	eb03 0802 	add.w	r8, r3, r2
 80049ce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80049d0:	1aa7      	subs	r7, r4, r2
 80049d2:	ae20      	add	r6, sp, #128	; 0x80
 80049d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80049d8:	2500      	movs	r5, #0
 80049da:	4545      	cmp	r5, r8
 80049dc:	dd13      	ble.n	8004a06 <__kernel_rem_pio2+0x7e>
 80049de:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8004c98 <__kernel_rem_pio2+0x310>
 80049e2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80049e6:	2600      	movs	r6, #0
 80049e8:	9b00      	ldr	r3, [sp, #0]
 80049ea:	429e      	cmp	r6, r3
 80049ec:	dc32      	bgt.n	8004a54 <__kernel_rem_pio2+0xcc>
 80049ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049f0:	9303      	str	r3, [sp, #12]
 80049f2:	9b06      	ldr	r3, [sp, #24]
 80049f4:	199d      	adds	r5, r3, r6
 80049f6:	ab20      	add	r3, sp, #128	; 0x80
 80049f8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80049fc:	9308      	str	r3, [sp, #32]
 80049fe:	ec59 8b18 	vmov	r8, r9, d8
 8004a02:	2700      	movs	r7, #0
 8004a04:	e01f      	b.n	8004a46 <__kernel_rem_pio2+0xbe>
 8004a06:	42ef      	cmn	r7, r5
 8004a08:	d407      	bmi.n	8004a1a <__kernel_rem_pio2+0x92>
 8004a0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004a0e:	f7fb fd91 	bl	8000534 <__aeabi_i2d>
 8004a12:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004a16:	3501      	adds	r5, #1
 8004a18:	e7df      	b.n	80049da <__kernel_rem_pio2+0x52>
 8004a1a:	ec51 0b18 	vmov	r0, r1, d8
 8004a1e:	e7f8      	b.n	8004a12 <__kernel_rem_pio2+0x8a>
 8004a20:	9908      	ldr	r1, [sp, #32]
 8004a22:	9d03      	ldr	r5, [sp, #12]
 8004a24:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8004a28:	9108      	str	r1, [sp, #32]
 8004a2a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8004a2e:	9503      	str	r5, [sp, #12]
 8004a30:	f7fb fde6 	bl	8000600 <__aeabi_dmul>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4640      	mov	r0, r8
 8004a3a:	4649      	mov	r1, r9
 8004a3c:	f7fb fc2e 	bl	800029c <__adddf3>
 8004a40:	3701      	adds	r7, #1
 8004a42:	4680      	mov	r8, r0
 8004a44:	4689      	mov	r9, r1
 8004a46:	9b04      	ldr	r3, [sp, #16]
 8004a48:	429f      	cmp	r7, r3
 8004a4a:	dde9      	ble.n	8004a20 <__kernel_rem_pio2+0x98>
 8004a4c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8004a50:	3601      	adds	r6, #1
 8004a52:	e7c9      	b.n	80049e8 <__kernel_rem_pio2+0x60>
 8004a54:	9b00      	ldr	r3, [sp, #0]
 8004a56:	9f00      	ldr	r7, [sp, #0]
 8004a58:	aa0c      	add	r2, sp, #48	; 0x30
 8004a5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004a5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a60:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004a62:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004a66:	930a      	str	r3, [sp, #40]	; 0x28
 8004a68:	ab98      	add	r3, sp, #608	; 0x260
 8004a6a:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8004a6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a72:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004a76:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8004a7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a7e:	9308      	str	r3, [sp, #32]
 8004a80:	9a08      	ldr	r2, [sp, #32]
 8004a82:	ab98      	add	r3, sp, #608	; 0x260
 8004a84:	4413      	add	r3, r2
 8004a86:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8004a8a:	2600      	movs	r6, #0
 8004a8c:	1bbb      	subs	r3, r7, r6
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	dc77      	bgt.n	8004b82 <__kernel_rem_pio2+0x1fa>
 8004a92:	ec49 8b10 	vmov	d0, r8, r9
 8004a96:	4650      	mov	r0, sl
 8004a98:	f000 fc0a 	bl	80052b0 <scalbn>
 8004a9c:	ec55 4b10 	vmov	r4, r5, d0
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004aa6:	ee10 0a10 	vmov	r0, s0
 8004aaa:	4629      	mov	r1, r5
 8004aac:	f7fb fda8 	bl	8000600 <__aeabi_dmul>
 8004ab0:	ec41 0b10 	vmov	d0, r0, r1
 8004ab4:	f000 fb74 	bl	80051a0 <floor>
 8004ab8:	2200      	movs	r2, #0
 8004aba:	ec51 0b10 	vmov	r0, r1, d0
 8004abe:	4b7b      	ldr	r3, [pc, #492]	; (8004cac <__kernel_rem_pio2+0x324>)
 8004ac0:	f7fb fd9e 	bl	8000600 <__aeabi_dmul>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4620      	mov	r0, r4
 8004aca:	4629      	mov	r1, r5
 8004acc:	f7fb fbe4 	bl	8000298 <__aeabi_dsub>
 8004ad0:	460d      	mov	r5, r1
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	f7fc f844 	bl	8000b60 <__aeabi_d2iz>
 8004ad8:	9003      	str	r0, [sp, #12]
 8004ada:	f7fb fd2b 	bl	8000534 <__aeabi_i2d>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4620      	mov	r0, r4
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	f7fb fbd7 	bl	8000298 <__aeabi_dsub>
 8004aea:	f1ba 0f00 	cmp.w	sl, #0
 8004aee:	4680      	mov	r8, r0
 8004af0:	4689      	mov	r9, r1
 8004af2:	dd6b      	ble.n	8004bcc <__kernel_rem_pio2+0x244>
 8004af4:	1e7a      	subs	r2, r7, #1
 8004af6:	ab0c      	add	r3, sp, #48	; 0x30
 8004af8:	f1ca 0118 	rsb	r1, sl, #24
 8004afc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004b00:	9c03      	ldr	r4, [sp, #12]
 8004b02:	fa40 f301 	asr.w	r3, r0, r1
 8004b06:	441c      	add	r4, r3
 8004b08:	408b      	lsls	r3, r1
 8004b0a:	1ac0      	subs	r0, r0, r3
 8004b0c:	ab0c      	add	r3, sp, #48	; 0x30
 8004b0e:	9403      	str	r4, [sp, #12]
 8004b10:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004b14:	f1ca 0317 	rsb	r3, sl, #23
 8004b18:	fa40 fb03 	asr.w	fp, r0, r3
 8004b1c:	f1bb 0f00 	cmp.w	fp, #0
 8004b20:	dd62      	ble.n	8004be8 <__kernel_rem_pio2+0x260>
 8004b22:	9b03      	ldr	r3, [sp, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	3301      	adds	r3, #1
 8004b28:	9303      	str	r3, [sp, #12]
 8004b2a:	4614      	mov	r4, r2
 8004b2c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004b30:	4297      	cmp	r7, r2
 8004b32:	f300 8089 	bgt.w	8004c48 <__kernel_rem_pio2+0x2c0>
 8004b36:	f1ba 0f00 	cmp.w	sl, #0
 8004b3a:	dd07      	ble.n	8004b4c <__kernel_rem_pio2+0x1c4>
 8004b3c:	f1ba 0f01 	cmp.w	sl, #1
 8004b40:	f000 8096 	beq.w	8004c70 <__kernel_rem_pio2+0x2e8>
 8004b44:	f1ba 0f02 	cmp.w	sl, #2
 8004b48:	f000 809c 	beq.w	8004c84 <__kernel_rem_pio2+0x2fc>
 8004b4c:	f1bb 0f02 	cmp.w	fp, #2
 8004b50:	d14a      	bne.n	8004be8 <__kernel_rem_pio2+0x260>
 8004b52:	4642      	mov	r2, r8
 8004b54:	464b      	mov	r3, r9
 8004b56:	2000      	movs	r0, #0
 8004b58:	4955      	ldr	r1, [pc, #340]	; (8004cb0 <__kernel_rem_pio2+0x328>)
 8004b5a:	f7fb fb9d 	bl	8000298 <__aeabi_dsub>
 8004b5e:	4680      	mov	r8, r0
 8004b60:	4689      	mov	r9, r1
 8004b62:	2c00      	cmp	r4, #0
 8004b64:	d040      	beq.n	8004be8 <__kernel_rem_pio2+0x260>
 8004b66:	4650      	mov	r0, sl
 8004b68:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8004ca0 <__kernel_rem_pio2+0x318>
 8004b6c:	f000 fba0 	bl	80052b0 <scalbn>
 8004b70:	4640      	mov	r0, r8
 8004b72:	4649      	mov	r1, r9
 8004b74:	ec53 2b10 	vmov	r2, r3, d0
 8004b78:	f7fb fb8e 	bl	8000298 <__aeabi_dsub>
 8004b7c:	4680      	mov	r8, r0
 8004b7e:	4689      	mov	r9, r1
 8004b80:	e032      	b.n	8004be8 <__kernel_rem_pio2+0x260>
 8004b82:	2200      	movs	r2, #0
 8004b84:	4b4b      	ldr	r3, [pc, #300]	; (8004cb4 <__kernel_rem_pio2+0x32c>)
 8004b86:	4640      	mov	r0, r8
 8004b88:	4649      	mov	r1, r9
 8004b8a:	f7fb fd39 	bl	8000600 <__aeabi_dmul>
 8004b8e:	f7fb ffe7 	bl	8000b60 <__aeabi_d2iz>
 8004b92:	f7fb fccf 	bl	8000534 <__aeabi_i2d>
 8004b96:	2200      	movs	r2, #0
 8004b98:	4b47      	ldr	r3, [pc, #284]	; (8004cb8 <__kernel_rem_pio2+0x330>)
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	460d      	mov	r5, r1
 8004b9e:	f7fb fd2f 	bl	8000600 <__aeabi_dmul>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4640      	mov	r0, r8
 8004ba8:	4649      	mov	r1, r9
 8004baa:	f7fb fb75 	bl	8000298 <__aeabi_dsub>
 8004bae:	f7fb ffd7 	bl	8000b60 <__aeabi_d2iz>
 8004bb2:	ab0c      	add	r3, sp, #48	; 0x30
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8004bba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f7fb fb6c 	bl	800029c <__adddf3>
 8004bc4:	3601      	adds	r6, #1
 8004bc6:	4680      	mov	r8, r0
 8004bc8:	4689      	mov	r9, r1
 8004bca:	e75f      	b.n	8004a8c <__kernel_rem_pio2+0x104>
 8004bcc:	d106      	bne.n	8004bdc <__kernel_rem_pio2+0x254>
 8004bce:	1e7b      	subs	r3, r7, #1
 8004bd0:	aa0c      	add	r2, sp, #48	; 0x30
 8004bd2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004bd6:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8004bda:	e79f      	b.n	8004b1c <__kernel_rem_pio2+0x194>
 8004bdc:	2200      	movs	r2, #0
 8004bde:	4b37      	ldr	r3, [pc, #220]	; (8004cbc <__kernel_rem_pio2+0x334>)
 8004be0:	f7fb ff94 	bl	8000b0c <__aeabi_dcmpge>
 8004be4:	bb68      	cbnz	r0, 8004c42 <__kernel_rem_pio2+0x2ba>
 8004be6:	4683      	mov	fp, r0
 8004be8:	2200      	movs	r2, #0
 8004bea:	2300      	movs	r3, #0
 8004bec:	4640      	mov	r0, r8
 8004bee:	4649      	mov	r1, r9
 8004bf0:	f7fb ff6e 	bl	8000ad0 <__aeabi_dcmpeq>
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	f000 80c1 	beq.w	8004d7c <__kernel_rem_pio2+0x3f4>
 8004bfa:	1e7c      	subs	r4, r7, #1
 8004bfc:	4623      	mov	r3, r4
 8004bfe:	2200      	movs	r2, #0
 8004c00:	9900      	ldr	r1, [sp, #0]
 8004c02:	428b      	cmp	r3, r1
 8004c04:	da5c      	bge.n	8004cc0 <__kernel_rem_pio2+0x338>
 8004c06:	2a00      	cmp	r2, #0
 8004c08:	f040 808b 	bne.w	8004d22 <__kernel_rem_pio2+0x39a>
 8004c0c:	2401      	movs	r4, #1
 8004c0e:	f06f 0203 	mvn.w	r2, #3
 8004c12:	fb02 f304 	mul.w	r3, r2, r4
 8004c16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c18:	58cb      	ldr	r3, [r1, r3]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d056      	beq.n	8004ccc <__kernel_rem_pio2+0x344>
 8004c1e:	9b08      	ldr	r3, [sp, #32]
 8004c20:	aa98      	add	r2, sp, #608	; 0x260
 8004c22:	4413      	add	r3, r2
 8004c24:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8004c28:	9b06      	ldr	r3, [sp, #24]
 8004c2a:	19dd      	adds	r5, r3, r7
 8004c2c:	ab20      	add	r3, sp, #128	; 0x80
 8004c2e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004c32:	19e3      	adds	r3, r4, r7
 8004c34:	1c7e      	adds	r6, r7, #1
 8004c36:	9303      	str	r3, [sp, #12]
 8004c38:	9b03      	ldr	r3, [sp, #12]
 8004c3a:	429e      	cmp	r6, r3
 8004c3c:	dd48      	ble.n	8004cd0 <__kernel_rem_pio2+0x348>
 8004c3e:	461f      	mov	r7, r3
 8004c40:	e712      	b.n	8004a68 <__kernel_rem_pio2+0xe0>
 8004c42:	f04f 0b02 	mov.w	fp, #2
 8004c46:	e76c      	b.n	8004b22 <__kernel_rem_pio2+0x19a>
 8004c48:	ab0c      	add	r3, sp, #48	; 0x30
 8004c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c4e:	b94c      	cbnz	r4, 8004c64 <__kernel_rem_pio2+0x2dc>
 8004c50:	b12b      	cbz	r3, 8004c5e <__kernel_rem_pio2+0x2d6>
 8004c52:	a80c      	add	r0, sp, #48	; 0x30
 8004c54:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004c58:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	3201      	adds	r2, #1
 8004c60:	461c      	mov	r4, r3
 8004c62:	e765      	b.n	8004b30 <__kernel_rem_pio2+0x1a8>
 8004c64:	a80c      	add	r0, sp, #48	; 0x30
 8004c66:	1acb      	subs	r3, r1, r3
 8004c68:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8004c6c:	4623      	mov	r3, r4
 8004c6e:	e7f6      	b.n	8004c5e <__kernel_rem_pio2+0x2d6>
 8004c70:	1e7a      	subs	r2, r7, #1
 8004c72:	ab0c      	add	r3, sp, #48	; 0x30
 8004c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c78:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004c7c:	a90c      	add	r1, sp, #48	; 0x30
 8004c7e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004c82:	e763      	b.n	8004b4c <__kernel_rem_pio2+0x1c4>
 8004c84:	1e7a      	subs	r2, r7, #1
 8004c86:	ab0c      	add	r3, sp, #48	; 0x30
 8004c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c8c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004c90:	e7f4      	b.n	8004c7c <__kernel_rem_pio2+0x2f4>
 8004c92:	bf00      	nop
 8004c94:	f3af 8000 	nop.w
	...
 8004ca4:	3ff00000 	.word	0x3ff00000
 8004ca8:	08005908 	.word	0x08005908
 8004cac:	40200000 	.word	0x40200000
 8004cb0:	3ff00000 	.word	0x3ff00000
 8004cb4:	3e700000 	.word	0x3e700000
 8004cb8:	41700000 	.word	0x41700000
 8004cbc:	3fe00000 	.word	0x3fe00000
 8004cc0:	a90c      	add	r1, sp, #48	; 0x30
 8004cc2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	e799      	b.n	8004c00 <__kernel_rem_pio2+0x278>
 8004ccc:	3401      	adds	r4, #1
 8004cce:	e7a0      	b.n	8004c12 <__kernel_rem_pio2+0x28a>
 8004cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cd2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004cd6:	f7fb fc2d 	bl	8000534 <__aeabi_i2d>
 8004cda:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ce0:	9508      	str	r5, [sp, #32]
 8004ce2:	461c      	mov	r4, r3
 8004ce4:	2700      	movs	r7, #0
 8004ce6:	f04f 0800 	mov.w	r8, #0
 8004cea:	f04f 0900 	mov.w	r9, #0
 8004cee:	9b04      	ldr	r3, [sp, #16]
 8004cf0:	429f      	cmp	r7, r3
 8004cf2:	dd03      	ble.n	8004cfc <__kernel_rem_pio2+0x374>
 8004cf4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8004cf8:	3601      	adds	r6, #1
 8004cfa:	e79d      	b.n	8004c38 <__kernel_rem_pio2+0x2b0>
 8004cfc:	9908      	ldr	r1, [sp, #32]
 8004cfe:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8004d02:	9108      	str	r1, [sp, #32]
 8004d04:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004d08:	f7fb fc7a 	bl	8000600 <__aeabi_dmul>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4640      	mov	r0, r8
 8004d12:	4649      	mov	r1, r9
 8004d14:	f7fb fac2 	bl	800029c <__adddf3>
 8004d18:	3701      	adds	r7, #1
 8004d1a:	4680      	mov	r8, r0
 8004d1c:	4689      	mov	r9, r1
 8004d1e:	e7e6      	b.n	8004cee <__kernel_rem_pio2+0x366>
 8004d20:	3c01      	subs	r4, #1
 8004d22:	ab0c      	add	r3, sp, #48	; 0x30
 8004d24:	f1aa 0a18 	sub.w	sl, sl, #24
 8004d28:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0f7      	beq.n	8004d20 <__kernel_rem_pio2+0x398>
 8004d30:	4650      	mov	r0, sl
 8004d32:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8005008 <__kernel_rem_pio2+0x680>
 8004d36:	f000 fabb 	bl	80052b0 <scalbn>
 8004d3a:	00e5      	lsls	r5, r4, #3
 8004d3c:	ab98      	add	r3, sp, #608	; 0x260
 8004d3e:	eb03 0905 	add.w	r9, r3, r5
 8004d42:	ec57 6b10 	vmov	r6, r7, d0
 8004d46:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8004d4a:	46a0      	mov	r8, r4
 8004d4c:	f1b8 0f00 	cmp.w	r8, #0
 8004d50:	da4d      	bge.n	8004dee <__kernel_rem_pio2+0x466>
 8004d52:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8005010 <__kernel_rem_pio2+0x688>
 8004d56:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	9304      	str	r3, [sp, #16]
 8004d5e:	4657      	mov	r7, sl
 8004d60:	9b04      	ldr	r3, [sp, #16]
 8004d62:	ebb4 0903 	subs.w	r9, r4, r3
 8004d66:	d476      	bmi.n	8004e56 <__kernel_rem_pio2+0x4ce>
 8004d68:	4bab      	ldr	r3, [pc, #684]	; (8005018 <__kernel_rem_pio2+0x690>)
 8004d6a:	461e      	mov	r6, r3
 8004d6c:	ab70      	add	r3, sp, #448	; 0x1c0
 8004d6e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004d72:	ed8d 8b06 	vstr	d8, [sp, #24]
 8004d76:	f04f 0800 	mov.w	r8, #0
 8004d7a:	e05e      	b.n	8004e3a <__kernel_rem_pio2+0x4b2>
 8004d7c:	f1ca 0000 	rsb	r0, sl, #0
 8004d80:	ec49 8b10 	vmov	d0, r8, r9
 8004d84:	f000 fa94 	bl	80052b0 <scalbn>
 8004d88:	ec55 4b10 	vmov	r4, r5, d0
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	4ba3      	ldr	r3, [pc, #652]	; (800501c <__kernel_rem_pio2+0x694>)
 8004d90:	ee10 0a10 	vmov	r0, s0
 8004d94:	4629      	mov	r1, r5
 8004d96:	f7fb feb9 	bl	8000b0c <__aeabi_dcmpge>
 8004d9a:	b1f8      	cbz	r0, 8004ddc <__kernel_rem_pio2+0x454>
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	4ba0      	ldr	r3, [pc, #640]	; (8005020 <__kernel_rem_pio2+0x698>)
 8004da0:	4620      	mov	r0, r4
 8004da2:	4629      	mov	r1, r5
 8004da4:	f7fb fc2c 	bl	8000600 <__aeabi_dmul>
 8004da8:	f7fb feda 	bl	8000b60 <__aeabi_d2iz>
 8004dac:	4606      	mov	r6, r0
 8004dae:	f7fb fbc1 	bl	8000534 <__aeabi_i2d>
 8004db2:	2200      	movs	r2, #0
 8004db4:	4b99      	ldr	r3, [pc, #612]	; (800501c <__kernel_rem_pio2+0x694>)
 8004db6:	f7fb fc23 	bl	8000600 <__aeabi_dmul>
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f7fb fa69 	bl	8000298 <__aeabi_dsub>
 8004dc6:	f7fb fecb 	bl	8000b60 <__aeabi_d2iz>
 8004dca:	1c7c      	adds	r4, r7, #1
 8004dcc:	ab0c      	add	r3, sp, #48	; 0x30
 8004dce:	f10a 0a18 	add.w	sl, sl, #24
 8004dd2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8004dd6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8004dda:	e7a9      	b.n	8004d30 <__kernel_rem_pio2+0x3a8>
 8004ddc:	4620      	mov	r0, r4
 8004dde:	4629      	mov	r1, r5
 8004de0:	f7fb febe 	bl	8000b60 <__aeabi_d2iz>
 8004de4:	ab0c      	add	r3, sp, #48	; 0x30
 8004de6:	463c      	mov	r4, r7
 8004de8:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8004dec:	e7a0      	b.n	8004d30 <__kernel_rem_pio2+0x3a8>
 8004dee:	ab0c      	add	r3, sp, #48	; 0x30
 8004df0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004df4:	f7fb fb9e 	bl	8000534 <__aeabi_i2d>
 8004df8:	4632      	mov	r2, r6
 8004dfa:	463b      	mov	r3, r7
 8004dfc:	f7fb fc00 	bl	8000600 <__aeabi_dmul>
 8004e00:	2200      	movs	r2, #0
 8004e02:	e969 0102 	strd	r0, r1, [r9, #-8]!
 8004e06:	4b86      	ldr	r3, [pc, #536]	; (8005020 <__kernel_rem_pio2+0x698>)
 8004e08:	4630      	mov	r0, r6
 8004e0a:	4639      	mov	r1, r7
 8004e0c:	f7fb fbf8 	bl	8000600 <__aeabi_dmul>
 8004e10:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004e14:	4606      	mov	r6, r0
 8004e16:	460f      	mov	r7, r1
 8004e18:	e798      	b.n	8004d4c <__kernel_rem_pio2+0x3c4>
 8004e1a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004e1e:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8004e22:	f7fb fbed 	bl	8000600 <__aeabi_dmul>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e2e:	f7fb fa35 	bl	800029c <__adddf3>
 8004e32:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004e36:	f108 0801 	add.w	r8, r8, #1
 8004e3a:	9b00      	ldr	r3, [sp, #0]
 8004e3c:	4598      	cmp	r8, r3
 8004e3e:	dc02      	bgt.n	8004e46 <__kernel_rem_pio2+0x4be>
 8004e40:	9b04      	ldr	r3, [sp, #16]
 8004e42:	4598      	cmp	r8, r3
 8004e44:	dde9      	ble.n	8004e1a <__kernel_rem_pio2+0x492>
 8004e46:	9b04      	ldr	r3, [sp, #16]
 8004e48:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	ecaa 7b02 	vstmia	sl!, {d7}
 8004e52:	9304      	str	r3, [sp, #16]
 8004e54:	e784      	b.n	8004d60 <__kernel_rem_pio2+0x3d8>
 8004e56:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d85d      	bhi.n	8004f18 <__kernel_rem_pio2+0x590>
 8004e5c:	e8df f003 	tbb	[pc, r3]
 8004e60:	0226264b 	.word	0x0226264b
 8004e64:	ab98      	add	r3, sp, #608	; 0x260
 8004e66:	441d      	add	r5, r3
 8004e68:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8004e6c:	462e      	mov	r6, r5
 8004e6e:	46a2      	mov	sl, r4
 8004e70:	f1ba 0f00 	cmp.w	sl, #0
 8004e74:	dc6e      	bgt.n	8004f54 <__kernel_rem_pio2+0x5cc>
 8004e76:	462e      	mov	r6, r5
 8004e78:	46a2      	mov	sl, r4
 8004e7a:	f1ba 0f01 	cmp.w	sl, #1
 8004e7e:	f300 808a 	bgt.w	8004f96 <__kernel_rem_pio2+0x60e>
 8004e82:	2000      	movs	r0, #0
 8004e84:	2100      	movs	r1, #0
 8004e86:	2c01      	cmp	r4, #1
 8004e88:	f300 80a6 	bgt.w	8004fd8 <__kernel_rem_pio2+0x650>
 8004e8c:	f1bb 0f00 	cmp.w	fp, #0
 8004e90:	f040 80a8 	bne.w	8004fe4 <__kernel_rem_pio2+0x65c>
 8004e94:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8004e98:	9c02      	ldr	r4, [sp, #8]
 8004e9a:	e9c4 2300 	strd	r2, r3, [r4]
 8004e9e:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8004ea2:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8004ea6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004eaa:	e035      	b.n	8004f18 <__kernel_rem_pio2+0x590>
 8004eac:	3508      	adds	r5, #8
 8004eae:	ab48      	add	r3, sp, #288	; 0x120
 8004eb0:	441d      	add	r5, r3
 8004eb2:	4626      	mov	r6, r4
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	2e00      	cmp	r6, #0
 8004eba:	da3c      	bge.n	8004f36 <__kernel_rem_pio2+0x5ae>
 8004ebc:	f1bb 0f00 	cmp.w	fp, #0
 8004ec0:	d03f      	beq.n	8004f42 <__kernel_rem_pio2+0x5ba>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ec8:	9d02      	ldr	r5, [sp, #8]
 8004eca:	e9c5 2300 	strd	r2, r3, [r5]
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004ed6:	f7fb f9df 	bl	8000298 <__aeabi_dsub>
 8004eda:	ae4a      	add	r6, sp, #296	; 0x128
 8004edc:	2501      	movs	r5, #1
 8004ede:	42ac      	cmp	r4, r5
 8004ee0:	da32      	bge.n	8004f48 <__kernel_rem_pio2+0x5c0>
 8004ee2:	f1bb 0f00 	cmp.w	fp, #0
 8004ee6:	d002      	beq.n	8004eee <__kernel_rem_pio2+0x566>
 8004ee8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004eec:	4619      	mov	r1, r3
 8004eee:	9b02      	ldr	r3, [sp, #8]
 8004ef0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004ef4:	e010      	b.n	8004f18 <__kernel_rem_pio2+0x590>
 8004ef6:	ab98      	add	r3, sp, #608	; 0x260
 8004ef8:	441d      	add	r5, r3
 8004efa:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8004efe:	2000      	movs	r0, #0
 8004f00:	2100      	movs	r1, #0
 8004f02:	2c00      	cmp	r4, #0
 8004f04:	da11      	bge.n	8004f2a <__kernel_rem_pio2+0x5a2>
 8004f06:	f1bb 0f00 	cmp.w	fp, #0
 8004f0a:	d002      	beq.n	8004f12 <__kernel_rem_pio2+0x58a>
 8004f0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f10:	4619      	mov	r1, r3
 8004f12:	9b02      	ldr	r3, [sp, #8]
 8004f14:	e9c3 0100 	strd	r0, r1, [r3]
 8004f18:	9b03      	ldr	r3, [sp, #12]
 8004f1a:	f003 0007 	and.w	r0, r3, #7
 8004f1e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004f22:	ecbd 8b02 	vpop	{d8}
 8004f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004f2e:	f7fb f9b5 	bl	800029c <__adddf3>
 8004f32:	3c01      	subs	r4, #1
 8004f34:	e7e5      	b.n	8004f02 <__kernel_rem_pio2+0x57a>
 8004f36:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004f3a:	f7fb f9af 	bl	800029c <__adddf3>
 8004f3e:	3e01      	subs	r6, #1
 8004f40:	e7ba      	b.n	8004eb8 <__kernel_rem_pio2+0x530>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	e7bf      	b.n	8004ec8 <__kernel_rem_pio2+0x540>
 8004f48:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004f4c:	f7fb f9a6 	bl	800029c <__adddf3>
 8004f50:	3501      	adds	r5, #1
 8004f52:	e7c4      	b.n	8004ede <__kernel_rem_pio2+0x556>
 8004f54:	ed16 7b02 	vldr	d7, [r6, #-8]
 8004f58:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8004f5c:	ec53 2b17 	vmov	r2, r3, d7
 8004f60:	4640      	mov	r0, r8
 8004f62:	4649      	mov	r1, r9
 8004f64:	ed8d 7b00 	vstr	d7, [sp]
 8004f68:	f7fb f998 	bl	800029c <__adddf3>
 8004f6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	4640      	mov	r0, r8
 8004f76:	4649      	mov	r1, r9
 8004f78:	f7fb f98e 	bl	8000298 <__aeabi_dsub>
 8004f7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f80:	f7fb f98c 	bl	800029c <__adddf3>
 8004f84:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004f88:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8004f8c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004f90:	ed06 7b02 	vstr	d7, [r6, #-8]
 8004f94:	e76c      	b.n	8004e70 <__kernel_rem_pio2+0x4e8>
 8004f96:	ed16 7b02 	vldr	d7, [r6, #-8]
 8004f9a:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8004f9e:	ec53 2b17 	vmov	r2, r3, d7
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	4649      	mov	r1, r9
 8004fa6:	ed8d 7b00 	vstr	d7, [sp]
 8004faa:	f7fb f977 	bl	800029c <__adddf3>
 8004fae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4640      	mov	r0, r8
 8004fb8:	4649      	mov	r1, r9
 8004fba:	f7fb f96d 	bl	8000298 <__aeabi_dsub>
 8004fbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fc2:	f7fb f96b 	bl	800029c <__adddf3>
 8004fc6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004fca:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8004fce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004fd2:	ed06 7b02 	vstr	d7, [r6, #-8]
 8004fd6:	e750      	b.n	8004e7a <__kernel_rem_pio2+0x4f2>
 8004fd8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004fdc:	f7fb f95e 	bl	800029c <__adddf3>
 8004fe0:	3c01      	subs	r4, #1
 8004fe2:	e750      	b.n	8004e86 <__kernel_rem_pio2+0x4fe>
 8004fe4:	9a02      	ldr	r2, [sp, #8]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6110      	str	r0, [r2, #16]
 8004fee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004ff2:	6053      	str	r3, [r2, #4]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	6093      	str	r3, [r2, #8]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004ffe:	60d3      	str	r3, [r2, #12]
 8005000:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005004:	6153      	str	r3, [r2, #20]
 8005006:	e787      	b.n	8004f18 <__kernel_rem_pio2+0x590>
 8005008:	00000000 	.word	0x00000000
 800500c:	3ff00000 	.word	0x3ff00000
	...
 8005018:	080058c8 	.word	0x080058c8
 800501c:	41700000 	.word	0x41700000
 8005020:	3e700000 	.word	0x3e700000
 8005024:	00000000 	.word	0x00000000

08005028 <__kernel_sin>:
 8005028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800502c:	ec55 4b10 	vmov	r4, r5, d0
 8005030:	b085      	sub	sp, #20
 8005032:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005036:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800503a:	ed8d 1b00 	vstr	d1, [sp]
 800503e:	9002      	str	r0, [sp, #8]
 8005040:	da06      	bge.n	8005050 <__kernel_sin+0x28>
 8005042:	ee10 0a10 	vmov	r0, s0
 8005046:	4629      	mov	r1, r5
 8005048:	f7fb fd8a 	bl	8000b60 <__aeabi_d2iz>
 800504c:	2800      	cmp	r0, #0
 800504e:	d051      	beq.n	80050f4 <__kernel_sin+0xcc>
 8005050:	4622      	mov	r2, r4
 8005052:	462b      	mov	r3, r5
 8005054:	4620      	mov	r0, r4
 8005056:	4629      	mov	r1, r5
 8005058:	f7fb fad2 	bl	8000600 <__aeabi_dmul>
 800505c:	4682      	mov	sl, r0
 800505e:	468b      	mov	fp, r1
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4620      	mov	r0, r4
 8005066:	4629      	mov	r1, r5
 8005068:	f7fb faca 	bl	8000600 <__aeabi_dmul>
 800506c:	a341      	add	r3, pc, #260	; (adr r3, 8005174 <__kernel_sin+0x14c>)
 800506e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005072:	4680      	mov	r8, r0
 8005074:	4689      	mov	r9, r1
 8005076:	4650      	mov	r0, sl
 8005078:	4659      	mov	r1, fp
 800507a:	f7fb fac1 	bl	8000600 <__aeabi_dmul>
 800507e:	a33f      	add	r3, pc, #252	; (adr r3, 800517c <__kernel_sin+0x154>)
 8005080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005084:	f7fb f908 	bl	8000298 <__aeabi_dsub>
 8005088:	4652      	mov	r2, sl
 800508a:	465b      	mov	r3, fp
 800508c:	f7fb fab8 	bl	8000600 <__aeabi_dmul>
 8005090:	a33c      	add	r3, pc, #240	; (adr r3, 8005184 <__kernel_sin+0x15c>)
 8005092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005096:	f7fb f901 	bl	800029c <__adddf3>
 800509a:	4652      	mov	r2, sl
 800509c:	465b      	mov	r3, fp
 800509e:	f7fb faaf 	bl	8000600 <__aeabi_dmul>
 80050a2:	a33a      	add	r3, pc, #232	; (adr r3, 800518c <__kernel_sin+0x164>)
 80050a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a8:	f7fb f8f6 	bl	8000298 <__aeabi_dsub>
 80050ac:	4652      	mov	r2, sl
 80050ae:	465b      	mov	r3, fp
 80050b0:	f7fb faa6 	bl	8000600 <__aeabi_dmul>
 80050b4:	a337      	add	r3, pc, #220	; (adr r3, 8005194 <__kernel_sin+0x16c>)
 80050b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ba:	f7fb f8ef 	bl	800029c <__adddf3>
 80050be:	9b02      	ldr	r3, [sp, #8]
 80050c0:	4606      	mov	r6, r0
 80050c2:	460f      	mov	r7, r1
 80050c4:	b9db      	cbnz	r3, 80050fe <__kernel_sin+0xd6>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4650      	mov	r0, sl
 80050cc:	4659      	mov	r1, fp
 80050ce:	f7fb fa97 	bl	8000600 <__aeabi_dmul>
 80050d2:	a325      	add	r3, pc, #148	; (adr r3, 8005168 <__kernel_sin+0x140>)
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	f7fb f8de 	bl	8000298 <__aeabi_dsub>
 80050dc:	4642      	mov	r2, r8
 80050de:	464b      	mov	r3, r9
 80050e0:	f7fb fa8e 	bl	8000600 <__aeabi_dmul>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4620      	mov	r0, r4
 80050ea:	4629      	mov	r1, r5
 80050ec:	f7fb f8d6 	bl	800029c <__adddf3>
 80050f0:	4604      	mov	r4, r0
 80050f2:	460d      	mov	r5, r1
 80050f4:	ec45 4b10 	vmov	d0, r4, r5
 80050f8:	b005      	add	sp, #20
 80050fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050fe:	2200      	movs	r2, #0
 8005100:	4b1b      	ldr	r3, [pc, #108]	; (8005170 <__kernel_sin+0x148>)
 8005102:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005106:	f7fb fa7b 	bl	8000600 <__aeabi_dmul>
 800510a:	4632      	mov	r2, r6
 800510c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005110:	463b      	mov	r3, r7
 8005112:	4640      	mov	r0, r8
 8005114:	4649      	mov	r1, r9
 8005116:	f7fb fa73 	bl	8000600 <__aeabi_dmul>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005122:	f7fb f8b9 	bl	8000298 <__aeabi_dsub>
 8005126:	4652      	mov	r2, sl
 8005128:	465b      	mov	r3, fp
 800512a:	f7fb fa69 	bl	8000600 <__aeabi_dmul>
 800512e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005132:	f7fb f8b1 	bl	8000298 <__aeabi_dsub>
 8005136:	a30c      	add	r3, pc, #48	; (adr r3, 8005168 <__kernel_sin+0x140>)
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	4606      	mov	r6, r0
 800513e:	460f      	mov	r7, r1
 8005140:	4640      	mov	r0, r8
 8005142:	4649      	mov	r1, r9
 8005144:	f7fb fa5c 	bl	8000600 <__aeabi_dmul>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4630      	mov	r0, r6
 800514e:	4639      	mov	r1, r7
 8005150:	f7fb f8a4 	bl	800029c <__adddf3>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4620      	mov	r0, r4
 800515a:	4629      	mov	r1, r5
 800515c:	f7fb f89c 	bl	8000298 <__aeabi_dsub>
 8005160:	e7c6      	b.n	80050f0 <__kernel_sin+0xc8>
 8005162:	bf00      	nop
 8005164:	f3af 8000 	nop.w
 8005168:	55555549 	.word	0x55555549
 800516c:	3fc55555 	.word	0x3fc55555
 8005170:	3fe00000 	.word	0x3fe00000
 8005174:	5acfd57c 	.word	0x5acfd57c
 8005178:	3de5d93a 	.word	0x3de5d93a
 800517c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005180:	3e5ae5e6 	.word	0x3e5ae5e6
 8005184:	57b1fe7d 	.word	0x57b1fe7d
 8005188:	3ec71de3 	.word	0x3ec71de3
 800518c:	19c161d5 	.word	0x19c161d5
 8005190:	3f2a01a0 	.word	0x3f2a01a0
 8005194:	1110f8a6 	.word	0x1110f8a6
 8005198:	3f811111 	.word	0x3f811111
 800519c:	00000000 	.word	0x00000000

080051a0 <floor>:
 80051a0:	ec51 0b10 	vmov	r0, r1, d0
 80051a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80051ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80051b0:	2e13      	cmp	r6, #19
 80051b2:	ee10 8a10 	vmov	r8, s0
 80051b6:	460c      	mov	r4, r1
 80051b8:	ee10 5a10 	vmov	r5, s0
 80051bc:	dc35      	bgt.n	800522a <floor+0x8a>
 80051be:	2e00      	cmp	r6, #0
 80051c0:	da17      	bge.n	80051f2 <floor+0x52>
 80051c2:	a335      	add	r3, pc, #212	; (adr r3, 8005298 <floor+0xf8>)
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f7fb f868 	bl	800029c <__adddf3>
 80051cc:	2200      	movs	r2, #0
 80051ce:	2300      	movs	r3, #0
 80051d0:	f7fb fca6 	bl	8000b20 <__aeabi_dcmpgt>
 80051d4:	b150      	cbz	r0, 80051ec <floor+0x4c>
 80051d6:	2c00      	cmp	r4, #0
 80051d8:	da5a      	bge.n	8005290 <floor+0xf0>
 80051da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80051de:	ea53 0308 	orrs.w	r3, r3, r8
 80051e2:	4b2f      	ldr	r3, [pc, #188]	; (80052a0 <floor+0x100>)
 80051e4:	f04f 0500 	mov.w	r5, #0
 80051e8:	bf18      	it	ne
 80051ea:	461c      	movne	r4, r3
 80051ec:	4621      	mov	r1, r4
 80051ee:	4628      	mov	r0, r5
 80051f0:	e025      	b.n	800523e <floor+0x9e>
 80051f2:	4f2c      	ldr	r7, [pc, #176]	; (80052a4 <floor+0x104>)
 80051f4:	4137      	asrs	r7, r6
 80051f6:	ea01 0307 	and.w	r3, r1, r7
 80051fa:	4303      	orrs	r3, r0
 80051fc:	d01f      	beq.n	800523e <floor+0x9e>
 80051fe:	a326      	add	r3, pc, #152	; (adr r3, 8005298 <floor+0xf8>)
 8005200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005204:	f7fb f84a 	bl	800029c <__adddf3>
 8005208:	2200      	movs	r2, #0
 800520a:	2300      	movs	r3, #0
 800520c:	f7fb fc88 	bl	8000b20 <__aeabi_dcmpgt>
 8005210:	2800      	cmp	r0, #0
 8005212:	d0eb      	beq.n	80051ec <floor+0x4c>
 8005214:	2c00      	cmp	r4, #0
 8005216:	bfbe      	ittt	lt
 8005218:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800521c:	fa43 f606 	asrlt.w	r6, r3, r6
 8005220:	19a4      	addlt	r4, r4, r6
 8005222:	ea24 0407 	bic.w	r4, r4, r7
 8005226:	2500      	movs	r5, #0
 8005228:	e7e0      	b.n	80051ec <floor+0x4c>
 800522a:	2e33      	cmp	r6, #51	; 0x33
 800522c:	dd0b      	ble.n	8005246 <floor+0xa6>
 800522e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005232:	d104      	bne.n	800523e <floor+0x9e>
 8005234:	ee10 2a10 	vmov	r2, s0
 8005238:	460b      	mov	r3, r1
 800523a:	f7fb f82f 	bl	800029c <__adddf3>
 800523e:	ec41 0b10 	vmov	d0, r0, r1
 8005242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005246:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800524a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800524e:	fa23 f707 	lsr.w	r7, r3, r7
 8005252:	4238      	tst	r0, r7
 8005254:	d0f3      	beq.n	800523e <floor+0x9e>
 8005256:	a310      	add	r3, pc, #64	; (adr r3, 8005298 <floor+0xf8>)
 8005258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525c:	f7fb f81e 	bl	800029c <__adddf3>
 8005260:	2200      	movs	r2, #0
 8005262:	2300      	movs	r3, #0
 8005264:	f7fb fc5c 	bl	8000b20 <__aeabi_dcmpgt>
 8005268:	2800      	cmp	r0, #0
 800526a:	d0bf      	beq.n	80051ec <floor+0x4c>
 800526c:	2c00      	cmp	r4, #0
 800526e:	da02      	bge.n	8005276 <floor+0xd6>
 8005270:	2e14      	cmp	r6, #20
 8005272:	d103      	bne.n	800527c <floor+0xdc>
 8005274:	3401      	adds	r4, #1
 8005276:	ea25 0507 	bic.w	r5, r5, r7
 800527a:	e7b7      	b.n	80051ec <floor+0x4c>
 800527c:	2301      	movs	r3, #1
 800527e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005282:	fa03 f606 	lsl.w	r6, r3, r6
 8005286:	4435      	add	r5, r6
 8005288:	45a8      	cmp	r8, r5
 800528a:	bf88      	it	hi
 800528c:	18e4      	addhi	r4, r4, r3
 800528e:	e7f2      	b.n	8005276 <floor+0xd6>
 8005290:	2500      	movs	r5, #0
 8005292:	462c      	mov	r4, r5
 8005294:	e7aa      	b.n	80051ec <floor+0x4c>
 8005296:	bf00      	nop
 8005298:	8800759c 	.word	0x8800759c
 800529c:	7e37e43c 	.word	0x7e37e43c
 80052a0:	bff00000 	.word	0xbff00000
 80052a4:	000fffff 	.word	0x000fffff

080052a8 <matherr>:
 80052a8:	2000      	movs	r0, #0
 80052aa:	4770      	bx	lr
 80052ac:	0000      	movs	r0, r0
	...

080052b0 <scalbn>:
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	ec55 4b10 	vmov	r4, r5, d0
 80052b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80052ba:	4606      	mov	r6, r0
 80052bc:	462b      	mov	r3, r5
 80052be:	b9b2      	cbnz	r2, 80052ee <scalbn+0x3e>
 80052c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80052c4:	4323      	orrs	r3, r4
 80052c6:	d03c      	beq.n	8005342 <scalbn+0x92>
 80052c8:	2200      	movs	r2, #0
 80052ca:	4b33      	ldr	r3, [pc, #204]	; (8005398 <scalbn+0xe8>)
 80052cc:	4629      	mov	r1, r5
 80052ce:	ee10 0a10 	vmov	r0, s0
 80052d2:	f7fb f995 	bl	8000600 <__aeabi_dmul>
 80052d6:	4a31      	ldr	r2, [pc, #196]	; (800539c <scalbn+0xec>)
 80052d8:	4296      	cmp	r6, r2
 80052da:	4604      	mov	r4, r0
 80052dc:	460d      	mov	r5, r1
 80052de:	460b      	mov	r3, r1
 80052e0:	da13      	bge.n	800530a <scalbn+0x5a>
 80052e2:	a329      	add	r3, pc, #164	; (adr r3, 8005388 <scalbn+0xd8>)
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	f7fb f98a 	bl	8000600 <__aeabi_dmul>
 80052ec:	e00a      	b.n	8005304 <scalbn+0x54>
 80052ee:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80052f2:	428a      	cmp	r2, r1
 80052f4:	d10c      	bne.n	8005310 <scalbn+0x60>
 80052f6:	ee10 2a10 	vmov	r2, s0
 80052fa:	462b      	mov	r3, r5
 80052fc:	4620      	mov	r0, r4
 80052fe:	4629      	mov	r1, r5
 8005300:	f7fa ffcc 	bl	800029c <__adddf3>
 8005304:	4604      	mov	r4, r0
 8005306:	460d      	mov	r5, r1
 8005308:	e01b      	b.n	8005342 <scalbn+0x92>
 800530a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800530e:	3a36      	subs	r2, #54	; 0x36
 8005310:	4432      	add	r2, r6
 8005312:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005316:	428a      	cmp	r2, r1
 8005318:	dd0b      	ble.n	8005332 <scalbn+0x82>
 800531a:	ec45 4b11 	vmov	d1, r4, r5
 800531e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8005390 <scalbn+0xe0>
 8005322:	f000 f83f 	bl	80053a4 <copysign>
 8005326:	a31a      	add	r3, pc, #104	; (adr r3, 8005390 <scalbn+0xe0>)
 8005328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532c:	ec51 0b10 	vmov	r0, r1, d0
 8005330:	e7da      	b.n	80052e8 <scalbn+0x38>
 8005332:	2a00      	cmp	r2, #0
 8005334:	dd08      	ble.n	8005348 <scalbn+0x98>
 8005336:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800533a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800533e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005342:	ec45 4b10 	vmov	d0, r4, r5
 8005346:	bd70      	pop	{r4, r5, r6, pc}
 8005348:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800534c:	da0d      	bge.n	800536a <scalbn+0xba>
 800534e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005352:	429e      	cmp	r6, r3
 8005354:	ec45 4b11 	vmov	d1, r4, r5
 8005358:	dce1      	bgt.n	800531e <scalbn+0x6e>
 800535a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8005388 <scalbn+0xd8>
 800535e:	f000 f821 	bl	80053a4 <copysign>
 8005362:	a309      	add	r3, pc, #36	; (adr r3, 8005388 <scalbn+0xd8>)
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	e7e0      	b.n	800532c <scalbn+0x7c>
 800536a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800536e:	3236      	adds	r2, #54	; 0x36
 8005370:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005374:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005378:	4620      	mov	r0, r4
 800537a:	4629      	mov	r1, r5
 800537c:	2200      	movs	r2, #0
 800537e:	4b08      	ldr	r3, [pc, #32]	; (80053a0 <scalbn+0xf0>)
 8005380:	e7b2      	b.n	80052e8 <scalbn+0x38>
 8005382:	bf00      	nop
 8005384:	f3af 8000 	nop.w
 8005388:	c2f8f359 	.word	0xc2f8f359
 800538c:	01a56e1f 	.word	0x01a56e1f
 8005390:	8800759c 	.word	0x8800759c
 8005394:	7e37e43c 	.word	0x7e37e43c
 8005398:	43500000 	.word	0x43500000
 800539c:	ffff3cb0 	.word	0xffff3cb0
 80053a0:	3c900000 	.word	0x3c900000

080053a4 <copysign>:
 80053a4:	ec53 2b10 	vmov	r2, r3, d0
 80053a8:	ee11 0a90 	vmov	r0, s3
 80053ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80053b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80053b4:	ea41 0300 	orr.w	r3, r1, r0
 80053b8:	ec43 2b10 	vmov	d0, r2, r3
 80053bc:	4770      	bx	lr
	...

080053c0 <_init>:
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	bf00      	nop
 80053c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c6:	bc08      	pop	{r3}
 80053c8:	469e      	mov	lr, r3
 80053ca:	4770      	bx	lr

080053cc <_fini>:
 80053cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ce:	bf00      	nop
 80053d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053d2:	bc08      	pop	{r3}
 80053d4:	469e      	mov	lr, r3
 80053d6:	4770      	bx	lr
